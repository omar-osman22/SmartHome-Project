
Temp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004df2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  00004df2  00004e86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  008000a8  008000a8  00004ece  2**0
                  ALLOC
  3 .stab         00005658  00000000  00000000  00004ed0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001e8b  00000000  00000000  0000a528  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000c3b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000c4f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000c663  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000e2ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000f197  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ff44  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000100a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00010331  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010aff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <__vector_1>
       8:	0c 94 85 0e 	jmp	0x1d0a	; 0x1d0a <__vector_2>
       c:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 4c 07 	jmp	0xe98	; 0xe98 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 1f 07 	jmp	0xe3e	; 0xe3e <__vector_9>
      28:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__vector_10>
      2c:	0c 94 14 06 	jmp	0xc28	; 0xc28 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ef       	ldi	r30, 0xF2	; 242
      68:	fd e4       	ldi	r31, 0x4D	; 77
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3a       	cpi	r26, 0xA8	; 168
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 ea       	ldi	r26, 0xA8	; 168
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3b       	cpi	r26, 0xB5	; 181
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9f 21 	call	0x433e	; 0x433e <main>
      8a:	0c 94 f7 26 	jmp	0x4dee	; 0x4dee <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c0 26 	jmp	0x4d80	; 0x4d80 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e9       	ldi	r26, 0x90	; 144
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 dc 26 	jmp	0x4db8	; 0x4db8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 cc 26 	jmp	0x4d98	; 0x4d98 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e8 26 	jmp	0x4dd0	; 0x4dd0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 cc 26 	jmp	0x4d98	; 0x4d98 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e8 26 	jmp	0x4dd0	; 0x4dd0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c0 26 	jmp	0x4d80	; 0x4d80 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e9       	ldi	r24, 0x90	; 144
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 dc 26 	jmp	0x4db8	; 0x4db8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 cc 26 	jmp	0x4d98	; 0x4d98 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e8 26 	jmp	0x4dd0	; 0x4dd0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 cc 26 	jmp	0x4d98	; 0x4d98 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e8 26 	jmp	0x4dd0	; 0x4dd0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 cc 26 	jmp	0x4d98	; 0x4d98 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e8 26 	jmp	0x4dd0	; 0x4dd0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d0 26 	jmp	0x4da0	; 0x4da0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ec 26 	jmp	0x4dd8	; 0x4dd8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MTIMER0_VidInit>:
void (*TIMER1_CallBack)(void);

void (*TIMER1_ICF_CallBack)(void);
/*Timer0 Initialization*/
void MTIMER0_VidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*Select the suitable Prescaler*/
	TCCR0&=0xF8;  //Bit masking
     b4e:	a3 e5       	ldi	r26, 0x53	; 83
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e3 e5       	ldi	r30, 0x53	; 83
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	88 7f       	andi	r24, 0xF8	; 248
     b5a:	8c 93       	st	X, r24
	TCCR0|=TIMER_SET_PRESCALER;
     b5c:	a3 e5       	ldi	r26, 0x53	; 83
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e3 e5       	ldi	r30, 0x53	; 83
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	83 60       	ori	r24, 0x03	; 3
     b68:	8c 93       	st	X, r24

#else
#error      "TIMER0 CTC Mode OC0 PIN is not valid ..."
#endif
#elif TIMER0_SET_MODE == TIMER0_PHASECORRECT_PWM_MODE
	SET_BIT(TCCR0,6);
     b6a:	a3 e5       	ldi	r26, 0x53	; 83
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e3 e5       	ldi	r30, 0x53	; 83
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 64       	ori	r24, 0x40	; 64
     b76:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,3);
     b78:	a3 e5       	ldi	r26, 0x53	; 83
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e3 e5       	ldi	r30, 0x53	; 83
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	87 7f       	andi	r24, 0xF7	; 247
     b84:	8c 93       	st	X, r24
#if   TIMER0_SET_PWM_MODE == TIMER0_NON_INVERTING_PWM
	SET_BIT(TCCR0,5);
     b86:	a3 e5       	ldi	r26, 0x53	; 83
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e3 e5       	ldi	r30, 0x53	; 83
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	80 62       	ori	r24, 0x20	; 32
     b92:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,4);
     b94:	a3 e5       	ldi	r26, 0x53	; 83
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e3 e5       	ldi	r30, 0x53	; 83
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	8f 7e       	andi	r24, 0xEF	; 239
     ba0:	8c 93       	st	X, r24
#endif
#else
#error      "TIMER0 Mode is not valid ..."
#endif

}
     ba2:	cf 91       	pop	r28
     ba4:	df 91       	pop	r29
     ba6:	08 95       	ret

00000ba8 <MTIMER0_VidSetPreload>:

/*Set Preload Function*/
void MTIMER0_VidSetPreload(u8 Copy_u8Preload)
{
     ba8:	df 93       	push	r29
     baa:	cf 93       	push	r28
     bac:	0f 92       	push	r0
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
     bb2:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload;
     bb4:	e2 e5       	ldi	r30, 0x52	; 82
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	89 81       	ldd	r24, Y+1	; 0x01
     bba:	80 83       	st	Z, r24
}
     bbc:	0f 90       	pop	r0
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <MTIMER0_VidSetCTCValue>:
/*Set CTC Value Function*/
void MTIMER0_VidSetCTCValue(u8 Copy_u8CTCValue)
{
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	0f 92       	push	r0
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	89 83       	std	Y+1, r24	; 0x01
	OCR0= Copy_u8CTCValue ;
     bd0:	ec e5       	ldi	r30, 0x5C	; 92
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	80 83       	st	Z, r24
}
     bd8:	0f 90       	pop	r0
     bda:	cf 91       	pop	r28
     bdc:	df 91       	pop	r29
     bde:	08 95       	ret

00000be0 <MTIMER0_VidOVF_SetCallBack>:

void MTIMER0_VidOVF_SetCallBack(void(*Copy_VidCallBack)(void))
{
     be0:	df 93       	push	r29
     be2:	cf 93       	push	r28
     be4:	00 d0       	rcall	.+0      	; 0xbe6 <MTIMER0_VidOVF_SetCallBack+0x6>
     be6:	cd b7       	in	r28, 0x3d	; 61
     be8:	de b7       	in	r29, 0x3e	; 62
     bea:	9a 83       	std	Y+2, r25	; 0x02
     bec:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CallBack =Copy_VidCallBack;
     bee:	89 81       	ldd	r24, Y+1	; 0x01
     bf0:	9a 81       	ldd	r25, Y+2	; 0x02
     bf2:	90 93 b0 00 	sts	0x00B0, r25
     bf6:	80 93 af 00 	sts	0x00AF, r24
}
     bfa:	0f 90       	pop	r0
     bfc:	0f 90       	pop	r0
     bfe:	cf 91       	pop	r28
     c00:	df 91       	pop	r29
     c02:	08 95       	ret

00000c04 <MTIMER0_VidCTC_SetCallBack>:
void MTIMER0_VidCTC_SetCallBack(void(*Copy_VidCallBack)(void))
{
     c04:	df 93       	push	r29
     c06:	cf 93       	push	r28
     c08:	00 d0       	rcall	.+0      	; 0xc0a <MTIMER0_VidCTC_SetCallBack+0x6>
     c0a:	cd b7       	in	r28, 0x3d	; 61
     c0c:	de b7       	in	r29, 0x3e	; 62
     c0e:	9a 83       	std	Y+2, r25	; 0x02
     c10:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CallBack =Copy_VidCallBack;
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	9a 81       	ldd	r25, Y+2	; 0x02
     c16:	90 93 b0 00 	sts	0x00B0, r25
     c1a:	80 93 af 00 	sts	0x00AF, r24
}
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	cf 91       	pop	r28
     c24:	df 91       	pop	r29
     c26:	08 95       	ret

00000c28 <__vector_11>:
void __vector_11(void)     __attribute__((signal));
void __vector_11(void)
{
     c28:	1f 92       	push	r1
     c2a:	0f 92       	push	r0
     c2c:	0f b6       	in	r0, 0x3f	; 63
     c2e:	0f 92       	push	r0
     c30:	11 24       	eor	r1, r1
     c32:	2f 93       	push	r18
     c34:	3f 93       	push	r19
     c36:	4f 93       	push	r20
     c38:	5f 93       	push	r21
     c3a:	6f 93       	push	r22
     c3c:	7f 93       	push	r23
     c3e:	8f 93       	push	r24
     c40:	9f 93       	push	r25
     c42:	af 93       	push	r26
     c44:	bf 93       	push	r27
     c46:	ef 93       	push	r30
     c48:	ff 93       	push	r31
     c4a:	df 93       	push	r29
     c4c:	cf 93       	push	r28
     c4e:	cd b7       	in	r28, 0x3d	; 61
     c50:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CallBack();
     c52:	e0 91 af 00 	lds	r30, 0x00AF
     c56:	f0 91 b0 00 	lds	r31, 0x00B0
     c5a:	09 95       	icall
}
     c5c:	cf 91       	pop	r28
     c5e:	df 91       	pop	r29
     c60:	ff 91       	pop	r31
     c62:	ef 91       	pop	r30
     c64:	bf 91       	pop	r27
     c66:	af 91       	pop	r26
     c68:	9f 91       	pop	r25
     c6a:	8f 91       	pop	r24
     c6c:	7f 91       	pop	r23
     c6e:	6f 91       	pop	r22
     c70:	5f 91       	pop	r21
     c72:	4f 91       	pop	r20
     c74:	3f 91       	pop	r19
     c76:	2f 91       	pop	r18
     c78:	0f 90       	pop	r0
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	0f 90       	pop	r0
     c7e:	1f 90       	pop	r1
     c80:	18 95       	reti

00000c82 <__vector_10>:

void __vector_10(void)     __attribute__((signal));
void __vector_10(void)
{
     c82:	1f 92       	push	r1
     c84:	0f 92       	push	r0
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	0f 92       	push	r0
     c8a:	11 24       	eor	r1, r1
     c8c:	2f 93       	push	r18
     c8e:	3f 93       	push	r19
     c90:	4f 93       	push	r20
     c92:	5f 93       	push	r21
     c94:	6f 93       	push	r22
     c96:	7f 93       	push	r23
     c98:	8f 93       	push	r24
     c9a:	9f 93       	push	r25
     c9c:	af 93       	push	r26
     c9e:	bf 93       	push	r27
     ca0:	ef 93       	push	r30
     ca2:	ff 93       	push	r31
     ca4:	df 93       	push	r29
     ca6:	cf 93       	push	r28
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CallBack();
     cac:	e0 91 af 00 	lds	r30, 0x00AF
     cb0:	f0 91 b0 00 	lds	r31, 0x00B0
     cb4:	09 95       	icall
}
     cb6:	cf 91       	pop	r28
     cb8:	df 91       	pop	r29
     cba:	ff 91       	pop	r31
     cbc:	ef 91       	pop	r30
     cbe:	bf 91       	pop	r27
     cc0:	af 91       	pop	r26
     cc2:	9f 91       	pop	r25
     cc4:	8f 91       	pop	r24
     cc6:	7f 91       	pop	r23
     cc8:	6f 91       	pop	r22
     cca:	5f 91       	pop	r21
     ccc:	4f 91       	pop	r20
     cce:	3f 91       	pop	r19
     cd0:	2f 91       	pop	r18
     cd2:	0f 90       	pop	r0
     cd4:	0f be       	out	0x3f, r0	; 63
     cd6:	0f 90       	pop	r0
     cd8:	1f 90       	pop	r1
     cda:	18 95       	reti

00000cdc <MTIMER1_VidInit>:

/***************************************************************TIMER1*******************************************************************************/
/*Timer1 Initialization*/
void MTIMER1_VidInit(void)
{
     cdc:	df 93       	push	r29
     cde:	cf 93       	push	r28
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
	/*Select the suitable Prescaler*/
	TCCR1B&=0xF8;  //Bit masking
     ce4:	ae e4       	ldi	r26, 0x4E	; 78
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	ee e4       	ldi	r30, 0x4E	; 78
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	88 7f       	andi	r24, 0xF8	; 248
     cf0:	8c 93       	st	X, r24
	TCCR1B|=TIMER1_SET_PRESCALER;
     cf2:	ae e4       	ldi	r26, 0x4E	; 78
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	ee e4       	ldi	r30, 0x4E	; 78
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	81 60       	ori	r24, 0x01	; 1
     cfe:	8c 93       	st	X, r24
	/*TIMER OVERFLOW INTERRUPT ENABLLED*/
	SET_BIT(TIMSK,2);

#elif TIMER1_SET_MODE == TIMER1_ICU_MODE
	/*Set Normal mode */
	CLR_BIT(TCCR1B,4);
     d00:	ae e4       	ldi	r26, 0x4E	; 78
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	ee e4       	ldi	r30, 0x4E	; 78
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	8f 7e       	andi	r24, 0xEF	; 239
     d0c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,3);
     d0e:	ae e4       	ldi	r26, 0x4E	; 78
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	ee e4       	ldi	r30, 0x4E	; 78
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	87 7f       	andi	r24, 0xF7	; 247
     d1a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,1);
     d1c:	af e4       	ldi	r26, 0x4F	; 79
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	ef e4       	ldi	r30, 0x4F	; 79
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	8d 7f       	andi	r24, 0xFD	; 253
     d28:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,0);
     d2a:	af e4       	ldi	r26, 0x4F	; 79
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	ef e4       	ldi	r30, 0x4F	; 79
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	8e 7f       	andi	r24, 0xFE	; 254
     d36:	8c 93       	st	X, r24
	/*TIMER OVERFLOW INTERRUPT ENABLLED*/
	SET_BIT(TIMSK,2);
     d38:	a9 e5       	ldi	r26, 0x59	; 89
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	e9 e5       	ldi	r30, 0x59	; 89
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	84 60       	ori	r24, 0x04	; 4
     d44:	8c 93       	st	X, r24
	/*ICU INTERRUPT ENABLLED*/
	SET_BIT(TIMSK,5);
     d46:	a9 e5       	ldi	r26, 0x59	; 89
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e9 e5       	ldi	r30, 0x59	; 89
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	80 62       	ori	r24, 0x20	; 32
     d52:	8c 93       	st	X, r24
	/*ICU Edge Select-->Rising edge*/
#if TIMER1_ICU_EDGE_SELECT == TIMER1_ICU_RISING_EDGE
	SET_BIT(TCCR1B,6);
     d54:	ae e4       	ldi	r26, 0x4E	; 78
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	ee e4       	ldi	r30, 0x4E	; 78
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	80 64       	ori	r24, 0x40	; 64
     d60:	8c 93       	st	X, r24
#endif

#else
#error      "TIMER1 Mode is not valid ..."
#endif
}
     d62:	cf 91       	pop	r28
     d64:	df 91       	pop	r29
     d66:	08 95       	ret

00000d68 <MTIMER1_VidSetPreload>:

/*Set Preload Function*/
void MTIMER1_VidSetPreload(u16 Copy_u16Preload)
{
     d68:	df 93       	push	r29
     d6a:	cf 93       	push	r28
     d6c:	00 d0       	rcall	.+0      	; 0xd6e <MTIMER1_VidSetPreload+0x6>
     d6e:	cd b7       	in	r28, 0x3d	; 61
     d70:	de b7       	in	r29, 0x3e	; 62
     d72:	9a 83       	std	Y+2, r25	; 0x02
     d74:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Preload;
     d76:	ec e4       	ldi	r30, 0x4C	; 76
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
     d7c:	9a 81       	ldd	r25, Y+2	; 0x02
     d7e:	91 83       	std	Z+1, r25	; 0x01
     d80:	80 83       	st	Z, r24
}
     d82:	0f 90       	pop	r0
     d84:	0f 90       	pop	r0
     d86:	cf 91       	pop	r28
     d88:	df 91       	pop	r29
     d8a:	08 95       	ret

00000d8c <MTIMER1_u16GetTCNT1Value>:

/*Get Counter Value In Timer1*/
u16 MTIMER1_u16GetTCNT1Value(void)
{
     d8c:	df 93       	push	r29
     d8e:	cf 93       	push	r28
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
	return TCNT1 ;
     d94:	ec e4       	ldi	r30, 0x4C	; 76
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	91 81       	ldd	r25, Z+1	; 0x01
}
     d9c:	cf 91       	pop	r28
     d9e:	df 91       	pop	r29
     da0:	08 95       	ret

00000da2 <MTIMER1_u16GetICR1Value>:

/*Get Counter Value In ICR1  */
u16 MTIMER1_u16GetICR1Value(void)
{
     da2:	df 93       	push	r29
     da4:	cf 93       	push	r28
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
	return 	ICR1 ;
     daa:	e6 e4       	ldi	r30, 0x46	; 70
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	91 81       	ldd	r25, Z+1	; 0x01
}
     db2:	cf 91       	pop	r28
     db4:	df 91       	pop	r29
     db6:	08 95       	ret

00000db8 <MTIMER1_VidSenseControl>:


/*select sense control Function*/
void MTIMER1_VidSenseControl(u8 Copy_u8SenseControl)
{
     db8:	df 93       	push	r29
     dba:	cf 93       	push	r28
     dbc:	0f 92       	push	r0
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62
     dc2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8SenseControl==MTIMER1_ICU_FALLING_EDGE)
     dc4:	89 81       	ldd	r24, Y+1	; 0x01
     dc6:	88 23       	and	r24, r24
     dc8:	41 f4       	brne	.+16     	; 0xdda <MTIMER1_VidSenseControl+0x22>
	{
		/*ICU Sense with Falling*/

		CLR_BIT(TCCR1B,6);
     dca:	ae e4       	ldi	r26, 0x4E	; 78
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	ee e4       	ldi	r30, 0x4E	; 78
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	8f 7b       	andi	r24, 0xBF	; 191
     dd6:	8c 93       	st	X, r24
     dd8:	0a c0       	rjmp	.+20     	; 0xdee <MTIMER1_VidSenseControl+0x36>
	}
	else if(Copy_u8SenseControl==MTIMER1_ICU_RISING_EDGE)
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	81 30       	cpi	r24, 0x01	; 1
     dde:	39 f4       	brne	.+14     	; 0xdee <MTIMER1_VidSenseControl+0x36>
	{
		/*ICU Sense with Rising*/
		SET_BIT(TCCR1B,6);
     de0:	ae e4       	ldi	r26, 0x4E	; 78
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	ee e4       	ldi	r30, 0x4E	; 78
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	80 64       	ori	r24, 0x40	; 64
     dec:	8c 93       	st	X, r24
	}
	else
	{
		/*Do Nothing*/
	}
}
     dee:	0f 90       	pop	r0
     df0:	cf 91       	pop	r28
     df2:	df 91       	pop	r29
     df4:	08 95       	ret

00000df6 <MTIMER1_VidOVF_SetCallBack>:
void MTIMER1_VidOVF_SetCallBack(void(*Copy_VidCallBack)(void))
{
     df6:	df 93       	push	r29
     df8:	cf 93       	push	r28
     dfa:	00 d0       	rcall	.+0      	; 0xdfc <MTIMER1_VidOVF_SetCallBack+0x6>
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
     e00:	9a 83       	std	Y+2, r25	; 0x02
     e02:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_CallBack =Copy_VidCallBack;
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	9a 81       	ldd	r25, Y+2	; 0x02
     e08:	90 93 b2 00 	sts	0x00B2, r25
     e0c:	80 93 b1 00 	sts	0x00B1, r24
}
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	cf 91       	pop	r28
     e16:	df 91       	pop	r29
     e18:	08 95       	ret

00000e1a <MTIMER1_VidICF_SetCallBack>:

void MTIMER1_VidICF_SetCallBack(void(*Copy_VidCallBack)(void))
{
     e1a:	df 93       	push	r29
     e1c:	cf 93       	push	r28
     e1e:	00 d0       	rcall	.+0      	; 0xe20 <MTIMER1_VidICF_SetCallBack+0x6>
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
     e24:	9a 83       	std	Y+2, r25	; 0x02
     e26:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_ICF_CallBack =Copy_VidCallBack;
     e28:	89 81       	ldd	r24, Y+1	; 0x01
     e2a:	9a 81       	ldd	r25, Y+2	; 0x02
     e2c:	90 93 b4 00 	sts	0x00B4, r25
     e30:	80 93 b3 00 	sts	0x00B3, r24
}
     e34:	0f 90       	pop	r0
     e36:	0f 90       	pop	r0
     e38:	cf 91       	pop	r28
     e3a:	df 91       	pop	r29
     e3c:	08 95       	ret

00000e3e <__vector_9>:
/*TIMER1 OFV  ISR*/
void __vector_9(void)      __attribute__((signal));
void __vector_9(void)
{
     e3e:	1f 92       	push	r1
     e40:	0f 92       	push	r0
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	0f 92       	push	r0
     e46:	11 24       	eor	r1, r1
     e48:	2f 93       	push	r18
     e4a:	3f 93       	push	r19
     e4c:	4f 93       	push	r20
     e4e:	5f 93       	push	r21
     e50:	6f 93       	push	r22
     e52:	7f 93       	push	r23
     e54:	8f 93       	push	r24
     e56:	9f 93       	push	r25
     e58:	af 93       	push	r26
     e5a:	bf 93       	push	r27
     e5c:	ef 93       	push	r30
     e5e:	ff 93       	push	r31
     e60:	df 93       	push	r29
     e62:	cf 93       	push	r28
     e64:	cd b7       	in	r28, 0x3d	; 61
     e66:	de b7       	in	r29, 0x3e	; 62
	TIMER1_CallBack();
     e68:	e0 91 b1 00 	lds	r30, 0x00B1
     e6c:	f0 91 b2 00 	lds	r31, 0x00B2
     e70:	09 95       	icall
}
     e72:	cf 91       	pop	r28
     e74:	df 91       	pop	r29
     e76:	ff 91       	pop	r31
     e78:	ef 91       	pop	r30
     e7a:	bf 91       	pop	r27
     e7c:	af 91       	pop	r26
     e7e:	9f 91       	pop	r25
     e80:	8f 91       	pop	r24
     e82:	7f 91       	pop	r23
     e84:	6f 91       	pop	r22
     e86:	5f 91       	pop	r21
     e88:	4f 91       	pop	r20
     e8a:	3f 91       	pop	r19
     e8c:	2f 91       	pop	r18
     e8e:	0f 90       	pop	r0
     e90:	0f be       	out	0x3f, r0	; 63
     e92:	0f 90       	pop	r0
     e94:	1f 90       	pop	r1
     e96:	18 95       	reti

00000e98 <__vector_6>:

/*TIMER1 Capture Event ISR*/
void __vector_6(void)      __attribute__((signal));
void __vector_6(void)
{
     e98:	1f 92       	push	r1
     e9a:	0f 92       	push	r0
     e9c:	0f b6       	in	r0, 0x3f	; 63
     e9e:	0f 92       	push	r0
     ea0:	11 24       	eor	r1, r1
     ea2:	2f 93       	push	r18
     ea4:	3f 93       	push	r19
     ea6:	4f 93       	push	r20
     ea8:	5f 93       	push	r21
     eaa:	6f 93       	push	r22
     eac:	7f 93       	push	r23
     eae:	8f 93       	push	r24
     eb0:	9f 93       	push	r25
     eb2:	af 93       	push	r26
     eb4:	bf 93       	push	r27
     eb6:	ef 93       	push	r30
     eb8:	ff 93       	push	r31
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
	TIMER1_ICF_CallBack();
     ec2:	e0 91 b3 00 	lds	r30, 0x00B3
     ec6:	f0 91 b4 00 	lds	r31, 0x00B4
     eca:	09 95       	icall
}
     ecc:	cf 91       	pop	r28
     ece:	df 91       	pop	r29
     ed0:	ff 91       	pop	r31
     ed2:	ef 91       	pop	r30
     ed4:	bf 91       	pop	r27
     ed6:	af 91       	pop	r26
     ed8:	9f 91       	pop	r25
     eda:	8f 91       	pop	r24
     edc:	7f 91       	pop	r23
     ede:	6f 91       	pop	r22
     ee0:	5f 91       	pop	r21
     ee2:	4f 91       	pop	r20
     ee4:	3f 91       	pop	r19
     ee6:	2f 91       	pop	r18
     ee8:	0f 90       	pop	r0
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	0f 90       	pop	r0
     eee:	1f 90       	pop	r1
     ef0:	18 95       	reti

00000ef2 <MDIO_Error_State_SetPinDirection>:
#include"MDIO_Private.h"
#include"MDIO_Interface.h"

/*Set Pin Direction Function */
Error_State  MDIO_Error_State_SetPinDirection(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8 Copy_u8PinDirection)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <MDIO_Error_State_SetPinDirection+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <MDIO_Error_State_SetPinDirection+0x8>
     efa:	00 d0       	rcall	.+0      	; 0xefc <MDIO_Error_State_SetPinDirection+0xa>
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	6b 83       	std	Y+3, r22	; 0x03
     f04:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	88 30       	cpi	r24, 0x08	; 8
     f0e:	08 f0       	brcs	.+2      	; 0xf12 <MDIO_Error_State_SetPinDirection+0x20>
     f10:	e8 c0       	rjmp	.+464    	; 0x10e2 <MDIO_Error_State_SetPinDirection+0x1f0>
	{
		switch (Copy_u8PortNumber)
     f12:	8b 81       	ldd	r24, Y+3	; 0x03
     f14:	28 2f       	mov	r18, r24
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	3e 83       	std	Y+6, r19	; 0x06
     f1a:	2d 83       	std	Y+5, r18	; 0x05
     f1c:	8d 81       	ldd	r24, Y+5	; 0x05
     f1e:	9e 81       	ldd	r25, Y+6	; 0x06
     f20:	81 30       	cpi	r24, 0x01	; 1
     f22:	91 05       	cpc	r25, r1
     f24:	09 f4       	brne	.+2      	; 0xf28 <MDIO_Error_State_SetPinDirection+0x36>
     f26:	48 c0       	rjmp	.+144    	; 0xfb8 <MDIO_Error_State_SetPinDirection+0xc6>
     f28:	2d 81       	ldd	r18, Y+5	; 0x05
     f2a:	3e 81       	ldd	r19, Y+6	; 0x06
     f2c:	22 30       	cpi	r18, 0x02	; 2
     f2e:	31 05       	cpc	r19, r1
     f30:	2c f4       	brge	.+10     	; 0xf3c <MDIO_Error_State_SetPinDirection+0x4a>
     f32:	8d 81       	ldd	r24, Y+5	; 0x05
     f34:	9e 81       	ldd	r25, Y+6	; 0x06
     f36:	00 97       	sbiw	r24, 0x00	; 0
     f38:	71 f0       	breq	.+28     	; 0xf56 <MDIO_Error_State_SetPinDirection+0x64>
     f3a:	d1 c0       	rjmp	.+418    	; 0x10de <MDIO_Error_State_SetPinDirection+0x1ec>
     f3c:	2d 81       	ldd	r18, Y+5	; 0x05
     f3e:	3e 81       	ldd	r19, Y+6	; 0x06
     f40:	22 30       	cpi	r18, 0x02	; 2
     f42:	31 05       	cpc	r19, r1
     f44:	09 f4       	brne	.+2      	; 0xf48 <MDIO_Error_State_SetPinDirection+0x56>
     f46:	69 c0       	rjmp	.+210    	; 0x101a <MDIO_Error_State_SetPinDirection+0x128>
     f48:	8d 81       	ldd	r24, Y+5	; 0x05
     f4a:	9e 81       	ldd	r25, Y+6	; 0x06
     f4c:	83 30       	cpi	r24, 0x03	; 3
     f4e:	91 05       	cpc	r25, r1
     f50:	09 f4       	brne	.+2      	; 0xf54 <MDIO_Error_State_SetPinDirection+0x62>
     f52:	94 c0       	rjmp	.+296    	; 0x107c <MDIO_Error_State_SetPinDirection+0x18a>
     f54:	c4 c0       	rjmp	.+392    	; 0x10de <MDIO_Error_State_SetPinDirection+0x1ec>
		{

		case  MDIO_PORTA:
			if(Copy_u8PinDirection==PIN_OUTPUT)
     f56:	8c 81       	ldd	r24, Y+4	; 0x04
     f58:	81 30       	cpi	r24, 0x01	; 1
     f5a:	a1 f4       	brne	.+40     	; 0xf84 <MDIO_Error_State_SetPinDirection+0x92>
			{
				SET_BIT(DDRA,Copy_u8PinNumber);
     f5c:	aa e3       	ldi	r26, 0x3A	; 58
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	ea e3       	ldi	r30, 0x3A	; 58
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	48 2f       	mov	r20, r24
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	28 2f       	mov	r18, r24
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	02 2e       	mov	r0, r18
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <MDIO_Error_State_SetPinDirection+0x88>
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	0a 94       	dec	r0
     f7c:	e2 f7       	brpl	.-8      	; 0xf76 <MDIO_Error_State_SetPinDirection+0x84>
     f7e:	84 2b       	or	r24, r20
     f80:	8c 93       	st	X, r24
     f82:	b0 c0       	rjmp	.+352    	; 0x10e4 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
     f84:	8c 81       	ldd	r24, Y+4	; 0x04
     f86:	88 23       	and	r24, r24
     f88:	a9 f4       	brne	.+42     	; 0xfb4 <MDIO_Error_State_SetPinDirection+0xc2>
			{
				CLR_BIT(DDRA,Copy_u8PinNumber);
     f8a:	aa e3       	ldi	r26, 0x3A	; 58
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	ea e3       	ldi	r30, 0x3A	; 58
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	48 2f       	mov	r20, r24
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	02 2e       	mov	r0, r18
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <MDIO_Error_State_SetPinDirection+0xb6>
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	0a 94       	dec	r0
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <MDIO_Error_State_SetPinDirection+0xb2>
     fac:	80 95       	com	r24
     fae:	84 23       	and	r24, r20
     fb0:	8c 93       	st	X, r24
     fb2:	98 c0       	rjmp	.+304    	; 0x10e4 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
     fb4:	19 82       	std	Y+1, r1	; 0x01
     fb6:	96 c0       	rjmp	.+300    	; 0x10e4 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		case  MDIO_PORTB:
			if(Copy_u8PinDirection==PIN_OUTPUT)
     fb8:	8c 81       	ldd	r24, Y+4	; 0x04
     fba:	81 30       	cpi	r24, 0x01	; 1
     fbc:	a1 f4       	brne	.+40     	; 0xfe6 <MDIO_Error_State_SetPinDirection+0xf4>
			{
				SET_BIT(DDRB,Copy_u8PinNumber);
     fbe:	a7 e3       	ldi	r26, 0x37	; 55
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e7 e3       	ldi	r30, 0x37	; 55
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	48 2f       	mov	r20, r24
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	02 2e       	mov	r0, r18
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <MDIO_Error_State_SetPinDirection+0xea>
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	0a 94       	dec	r0
     fde:	e2 f7       	brpl	.-8      	; 0xfd8 <MDIO_Error_State_SetPinDirection+0xe6>
     fe0:	84 2b       	or	r24, r20
     fe2:	8c 93       	st	X, r24
     fe4:	7f c0       	rjmp	.+254    	; 0x10e4 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
     fe6:	8c 81       	ldd	r24, Y+4	; 0x04
     fe8:	88 23       	and	r24, r24
     fea:	a9 f4       	brne	.+42     	; 0x1016 <MDIO_Error_State_SetPinDirection+0x124>
			{
				CLR_BIT(DDRB,Copy_u8PinNumber);
     fec:	a7 e3       	ldi	r26, 0x37	; 55
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e7 e3       	ldi	r30, 0x37	; 55
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	48 2f       	mov	r20, r24
     ff8:	8a 81       	ldd	r24, Y+2	; 0x02
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	02 2e       	mov	r0, r18
    1004:	02 c0       	rjmp	.+4      	; 0x100a <MDIO_Error_State_SetPinDirection+0x118>
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	0a 94       	dec	r0
    100c:	e2 f7       	brpl	.-8      	; 0x1006 <MDIO_Error_State_SetPinDirection+0x114>
    100e:	80 95       	com	r24
    1010:	84 23       	and	r24, r20
    1012:	8c 93       	st	X, r24
    1014:	67 c0       	rjmp	.+206    	; 0x10e4 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    1016:	19 82       	std	Y+1, r1	; 0x01
    1018:	65 c0       	rjmp	.+202    	; 0x10e4 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		case  MDIO_PORTC:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    101a:	8c 81       	ldd	r24, Y+4	; 0x04
    101c:	81 30       	cpi	r24, 0x01	; 1
    101e:	a1 f4       	brne	.+40     	; 0x1048 <MDIO_Error_State_SetPinDirection+0x156>
			{
				SET_BIT(DDRC,Copy_u8PinNumber);
    1020:	a4 e3       	ldi	r26, 0x34	; 52
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e4 e3       	ldi	r30, 0x34	; 52
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	48 2f       	mov	r20, r24
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	02 2e       	mov	r0, r18
    1038:	02 c0       	rjmp	.+4      	; 0x103e <MDIO_Error_State_SetPinDirection+0x14c>
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	0a 94       	dec	r0
    1040:	e2 f7       	brpl	.-8      	; 0x103a <MDIO_Error_State_SetPinDirection+0x148>
    1042:	84 2b       	or	r24, r20
    1044:	8c 93       	st	X, r24
    1046:	4e c0       	rjmp	.+156    	; 0x10e4 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    1048:	8c 81       	ldd	r24, Y+4	; 0x04
    104a:	88 23       	and	r24, r24
    104c:	a9 f4       	brne	.+42     	; 0x1078 <MDIO_Error_State_SetPinDirection+0x186>
			{
				CLR_BIT(DDRC,Copy_u8PinNumber);
    104e:	a4 e3       	ldi	r26, 0x34	; 52
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e4 e3       	ldi	r30, 0x34	; 52
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	48 2f       	mov	r20, r24
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 2e       	mov	r0, r18
    1066:	02 c0       	rjmp	.+4      	; 0x106c <MDIO_Error_State_SetPinDirection+0x17a>
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	0a 94       	dec	r0
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <MDIO_Error_State_SetPinDirection+0x176>
    1070:	80 95       	com	r24
    1072:	84 23       	and	r24, r20
    1074:	8c 93       	st	X, r24
    1076:	36 c0       	rjmp	.+108    	; 0x10e4 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    1078:	19 82       	std	Y+1, r1	; 0x01
    107a:	34 c0       	rjmp	.+104    	; 0x10e4 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;
		case  MDIO_PORTD:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    107c:	8c 81       	ldd	r24, Y+4	; 0x04
    107e:	81 30       	cpi	r24, 0x01	; 1
    1080:	a1 f4       	brne	.+40     	; 0x10aa <MDIO_Error_State_SetPinDirection+0x1b8>
			{
				SET_BIT(DDRD,Copy_u8PinNumber);
    1082:	a1 e3       	ldi	r26, 0x31	; 49
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e1 e3       	ldi	r30, 0x31	; 49
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	48 2f       	mov	r20, r24
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	02 2e       	mov	r0, r18
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <MDIO_Error_State_SetPinDirection+0x1ae>
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	0a 94       	dec	r0
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <MDIO_Error_State_SetPinDirection+0x1aa>
    10a4:	84 2b       	or	r24, r20
    10a6:	8c 93       	st	X, r24
    10a8:	1d c0       	rjmp	.+58     	; 0x10e4 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    10aa:	8c 81       	ldd	r24, Y+4	; 0x04
    10ac:	88 23       	and	r24, r24
    10ae:	a9 f4       	brne	.+42     	; 0x10da <MDIO_Error_State_SetPinDirection+0x1e8>
			{
				CLR_BIT(DDRD,Copy_u8PinNumber);
    10b0:	a1 e3       	ldi	r26, 0x31	; 49
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	e1 e3       	ldi	r30, 0x31	; 49
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	48 2f       	mov	r20, r24
    10bc:	8a 81       	ldd	r24, Y+2	; 0x02
    10be:	28 2f       	mov	r18, r24
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	02 2e       	mov	r0, r18
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <MDIO_Error_State_SetPinDirection+0x1dc>
    10ca:	88 0f       	add	r24, r24
    10cc:	99 1f       	adc	r25, r25
    10ce:	0a 94       	dec	r0
    10d0:	e2 f7       	brpl	.-8      	; 0x10ca <MDIO_Error_State_SetPinDirection+0x1d8>
    10d2:	80 95       	com	r24
    10d4:	84 23       	and	r24, r20
    10d6:	8c 93       	st	X, r24
    10d8:	05 c0       	rjmp	.+10     	; 0x10e4 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    10da:	19 82       	std	Y+1, r1	; 0x01
    10dc:	03 c0       	rjmp	.+6      	; 0x10e4 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		default:
			LOC_Error_State_ReturnState = NOK;
    10de:	19 82       	std	Y+1, r1	; 0x01
    10e0:	01 c0       	rjmp	.+2      	; 0x10e4 <MDIO_Error_State_SetPinDirection+0x1f2>
			break ;
		}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
    10e2:	19 82       	std	Y+1, r1	; 0x01
	}
	return  LOC_Error_State_ReturnState ;
    10e4:	89 81       	ldd	r24, Y+1	; 0x01

}
    10e6:	26 96       	adiw	r28, 0x06	; 6
    10e8:	0f b6       	in	r0, 0x3f	; 63
    10ea:	f8 94       	cli
    10ec:	de bf       	out	0x3e, r29	; 62
    10ee:	0f be       	out	0x3f, r0	; 63
    10f0:	cd bf       	out	0x3d, r28	; 61
    10f2:	cf 91       	pop	r28
    10f4:	df 91       	pop	r29
    10f6:	08 95       	ret

000010f8 <MDIO_Error_State_SetPortDirection>:

/*Set Port Direction Function */
Error_State  MDIO_Error_State_SetPortDirection(u8 Copy_u8PortNumber,u8 Copy_u8PortDirection)
{
    10f8:	df 93       	push	r29
    10fa:	cf 93       	push	r28
    10fc:	00 d0       	rcall	.+0      	; 0x10fe <MDIO_Error_State_SetPortDirection+0x6>
    10fe:	00 d0       	rcall	.+0      	; 0x1100 <MDIO_Error_State_SetPortDirection+0x8>
    1100:	0f 92       	push	r0
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
    1106:	8a 83       	std	Y+2, r24	; 0x02
    1108:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState = OK;
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8PortDirection==PORT_OUTPUT)||(Copy_u8PortDirection==PORT_INPUT))
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	8f 3f       	cpi	r24, 0xFF	; 255
    1112:	19 f0       	breq	.+6      	; 0x111a <MDIO_Error_State_SetPortDirection+0x22>
    1114:	8b 81       	ldd	r24, Y+3	; 0x03
    1116:	88 23       	and	r24, r24
    1118:	a9 f5       	brne	.+106    	; 0x1184 <MDIO_Error_State_SetPortDirection+0x8c>
	{
		switch(Copy_u8PortNumber)
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	3d 83       	std	Y+5, r19	; 0x05
    1122:	2c 83       	std	Y+4, r18	; 0x04
    1124:	8c 81       	ldd	r24, Y+4	; 0x04
    1126:	9d 81       	ldd	r25, Y+5	; 0x05
    1128:	81 30       	cpi	r24, 0x01	; 1
    112a:	91 05       	cpc	r25, r1
    112c:	d1 f0       	breq	.+52     	; 0x1162 <MDIO_Error_State_SetPortDirection+0x6a>
    112e:	2c 81       	ldd	r18, Y+4	; 0x04
    1130:	3d 81       	ldd	r19, Y+5	; 0x05
    1132:	22 30       	cpi	r18, 0x02	; 2
    1134:	31 05       	cpc	r19, r1
    1136:	2c f4       	brge	.+10     	; 0x1142 <MDIO_Error_State_SetPortDirection+0x4a>
    1138:	8c 81       	ldd	r24, Y+4	; 0x04
    113a:	9d 81       	ldd	r25, Y+5	; 0x05
    113c:	00 97       	sbiw	r24, 0x00	; 0
    113e:	61 f0       	breq	.+24     	; 0x1158 <MDIO_Error_State_SetPortDirection+0x60>
    1140:	1f c0       	rjmp	.+62     	; 0x1180 <MDIO_Error_State_SetPortDirection+0x88>
    1142:	2c 81       	ldd	r18, Y+4	; 0x04
    1144:	3d 81       	ldd	r19, Y+5	; 0x05
    1146:	22 30       	cpi	r18, 0x02	; 2
    1148:	31 05       	cpc	r19, r1
    114a:	81 f0       	breq	.+32     	; 0x116c <MDIO_Error_State_SetPortDirection+0x74>
    114c:	8c 81       	ldd	r24, Y+4	; 0x04
    114e:	9d 81       	ldd	r25, Y+5	; 0x05
    1150:	83 30       	cpi	r24, 0x03	; 3
    1152:	91 05       	cpc	r25, r1
    1154:	81 f0       	breq	.+32     	; 0x1176 <MDIO_Error_State_SetPortDirection+0x7e>
    1156:	14 c0       	rjmp	.+40     	; 0x1180 <MDIO_Error_State_SetPortDirection+0x88>
		{
		case MDIO_PORTA:
			DDRA = Copy_u8PortDirection;
    1158:	ea e3       	ldi	r30, 0x3A	; 58
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	80 83       	st	Z, r24
    1160:	12 c0       	rjmp	.+36     	; 0x1186 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTB:
			DDRB = Copy_u8PortDirection;
    1162:	e7 e3       	ldi	r30, 0x37	; 55
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	80 83       	st	Z, r24
    116a:	0d c0       	rjmp	.+26     	; 0x1186 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTC:
			DDRC = Copy_u8PortDirection;
    116c:	e4 e3       	ldi	r30, 0x34	; 52
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	80 83       	st	Z, r24
    1174:	08 c0       	rjmp	.+16     	; 0x1186 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTD:
			DDRD = Copy_u8PortDirection;
    1176:	e1 e3       	ldi	r30, 0x31	; 49
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	80 83       	st	Z, r24
    117e:	03 c0       	rjmp	.+6      	; 0x1186 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		default:
			LOC_Error_State_ReturnState = NOK;
    1180:	19 82       	std	Y+1, r1	; 0x01
    1182:	01 c0       	rjmp	.+2      	; 0x1186 <MDIO_Error_State_SetPortDirection+0x8e>
			break ;
		}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
    1184:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState ;
    1186:	89 81       	ldd	r24, Y+1	; 0x01
}
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	0f 90       	pop	r0
    118e:	0f 90       	pop	r0
    1190:	0f 90       	pop	r0
    1192:	cf 91       	pop	r28
    1194:	df 91       	pop	r29
    1196:	08 95       	ret

00001198 <MDIO_Error_State_SetPinValue>:

/*Set Pin Value Function */
Error_State  MDIO_Error_State_SetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8 Copy_u8PinValue)
{
    1198:	df 93       	push	r29
    119a:	cf 93       	push	r28
    119c:	00 d0       	rcall	.+0      	; 0x119e <MDIO_Error_State_SetPinValue+0x6>
    119e:	00 d0       	rcall	.+0      	; 0x11a0 <MDIO_Error_State_SetPinValue+0x8>
    11a0:	00 d0       	rcall	.+0      	; 0x11a2 <MDIO_Error_State_SetPinValue+0xa>
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
    11a6:	8a 83       	std	Y+2, r24	; 0x02
    11a8:	6b 83       	std	Y+3, r22	; 0x03
    11aa:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	89 83       	std	Y+1, r24	; 0x01
		if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	88 30       	cpi	r24, 0x08	; 8
    11b4:	08 f0       	brcs	.+2      	; 0x11b8 <MDIO_Error_State_SetPinValue+0x20>
    11b6:	e8 c0       	rjmp	.+464    	; 0x1388 <MDIO_Error_State_SetPinValue+0x1f0>
		{
			switch (Copy_u8PortNumber)
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	3e 83       	std	Y+6, r19	; 0x06
    11c0:	2d 83       	std	Y+5, r18	; 0x05
    11c2:	8d 81       	ldd	r24, Y+5	; 0x05
    11c4:	9e 81       	ldd	r25, Y+6	; 0x06
    11c6:	81 30       	cpi	r24, 0x01	; 1
    11c8:	91 05       	cpc	r25, r1
    11ca:	09 f4       	brne	.+2      	; 0x11ce <MDIO_Error_State_SetPinValue+0x36>
    11cc:	48 c0       	rjmp	.+144    	; 0x125e <MDIO_Error_State_SetPinValue+0xc6>
    11ce:	2d 81       	ldd	r18, Y+5	; 0x05
    11d0:	3e 81       	ldd	r19, Y+6	; 0x06
    11d2:	22 30       	cpi	r18, 0x02	; 2
    11d4:	31 05       	cpc	r19, r1
    11d6:	2c f4       	brge	.+10     	; 0x11e2 <MDIO_Error_State_SetPinValue+0x4a>
    11d8:	8d 81       	ldd	r24, Y+5	; 0x05
    11da:	9e 81       	ldd	r25, Y+6	; 0x06
    11dc:	00 97       	sbiw	r24, 0x00	; 0
    11de:	71 f0       	breq	.+28     	; 0x11fc <MDIO_Error_State_SetPinValue+0x64>
    11e0:	d1 c0       	rjmp	.+418    	; 0x1384 <MDIO_Error_State_SetPinValue+0x1ec>
    11e2:	2d 81       	ldd	r18, Y+5	; 0x05
    11e4:	3e 81       	ldd	r19, Y+6	; 0x06
    11e6:	22 30       	cpi	r18, 0x02	; 2
    11e8:	31 05       	cpc	r19, r1
    11ea:	09 f4       	brne	.+2      	; 0x11ee <MDIO_Error_State_SetPinValue+0x56>
    11ec:	69 c0       	rjmp	.+210    	; 0x12c0 <MDIO_Error_State_SetPinValue+0x128>
    11ee:	8d 81       	ldd	r24, Y+5	; 0x05
    11f0:	9e 81       	ldd	r25, Y+6	; 0x06
    11f2:	83 30       	cpi	r24, 0x03	; 3
    11f4:	91 05       	cpc	r25, r1
    11f6:	09 f4       	brne	.+2      	; 0x11fa <MDIO_Error_State_SetPinValue+0x62>
    11f8:	94 c0       	rjmp	.+296    	; 0x1322 <MDIO_Error_State_SetPinValue+0x18a>
    11fa:	c4 c0       	rjmp	.+392    	; 0x1384 <MDIO_Error_State_SetPinValue+0x1ec>
			{

			case  MDIO_PORTA:
				if(Copy_u8PinValue==PIN_HIGH)
    11fc:	8c 81       	ldd	r24, Y+4	; 0x04
    11fe:	81 30       	cpi	r24, 0x01	; 1
    1200:	a1 f4       	brne	.+40     	; 0x122a <MDIO_Error_State_SetPinValue+0x92>
				{
					SET_BIT(PORTA,Copy_u8PinNumber);
    1202:	ab e3       	ldi	r26, 0x3B	; 59
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	eb e3       	ldi	r30, 0x3B	; 59
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	48 2f       	mov	r20, r24
    120e:	8a 81       	ldd	r24, Y+2	; 0x02
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	02 2e       	mov	r0, r18
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <MDIO_Error_State_SetPinValue+0x88>
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	0a 94       	dec	r0
    1222:	e2 f7       	brpl	.-8      	; 0x121c <MDIO_Error_State_SetPinValue+0x84>
    1224:	84 2b       	or	r24, r20
    1226:	8c 93       	st	X, r24
    1228:	b0 c0       	rjmp	.+352    	; 0x138a <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    122a:	8c 81       	ldd	r24, Y+4	; 0x04
    122c:	88 23       	and	r24, r24
    122e:	a9 f4       	brne	.+42     	; 0x125a <MDIO_Error_State_SetPinValue+0xc2>
				{
					CLR_BIT(PORTA,Copy_u8PinNumber);
    1230:	ab e3       	ldi	r26, 0x3B	; 59
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	eb e3       	ldi	r30, 0x3B	; 59
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	48 2f       	mov	r20, r24
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	28 2f       	mov	r18, r24
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	02 2e       	mov	r0, r18
    1248:	02 c0       	rjmp	.+4      	; 0x124e <MDIO_Error_State_SetPinValue+0xb6>
    124a:	88 0f       	add	r24, r24
    124c:	99 1f       	adc	r25, r25
    124e:	0a 94       	dec	r0
    1250:	e2 f7       	brpl	.-8      	; 0x124a <MDIO_Error_State_SetPinValue+0xb2>
    1252:	80 95       	com	r24
    1254:	84 23       	and	r24, r20
    1256:	8c 93       	st	X, r24
    1258:	98 c0       	rjmp	.+304    	; 0x138a <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    125a:	19 82       	std	Y+1, r1	; 0x01
    125c:	96 c0       	rjmp	.+300    	; 0x138a <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			case  MDIO_PORTB:
				if(Copy_u8PinValue==PIN_HIGH)
    125e:	8c 81       	ldd	r24, Y+4	; 0x04
    1260:	81 30       	cpi	r24, 0x01	; 1
    1262:	a1 f4       	brne	.+40     	; 0x128c <MDIO_Error_State_SetPinValue+0xf4>
				{
					SET_BIT(PORTB,Copy_u8PinNumber);
    1264:	a8 e3       	ldi	r26, 0x38	; 56
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	e8 e3       	ldi	r30, 0x38	; 56
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	48 2f       	mov	r20, r24
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	02 2e       	mov	r0, r18
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <MDIO_Error_State_SetPinValue+0xea>
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	0a 94       	dec	r0
    1284:	e2 f7       	brpl	.-8      	; 0x127e <MDIO_Error_State_SetPinValue+0xe6>
    1286:	84 2b       	or	r24, r20
    1288:	8c 93       	st	X, r24
    128a:	7f c0       	rjmp	.+254    	; 0x138a <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    128c:	8c 81       	ldd	r24, Y+4	; 0x04
    128e:	88 23       	and	r24, r24
    1290:	a9 f4       	brne	.+42     	; 0x12bc <MDIO_Error_State_SetPinValue+0x124>
				{
					CLR_BIT(PORTB,Copy_u8PinNumber);
    1292:	a8 e3       	ldi	r26, 0x38	; 56
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	e8 e3       	ldi	r30, 0x38	; 56
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	48 2f       	mov	r20, r24
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	02 2e       	mov	r0, r18
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <MDIO_Error_State_SetPinValue+0x118>
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	0a 94       	dec	r0
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <MDIO_Error_State_SetPinValue+0x114>
    12b4:	80 95       	com	r24
    12b6:	84 23       	and	r24, r20
    12b8:	8c 93       	st	X, r24
    12ba:	67 c0       	rjmp	.+206    	; 0x138a <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    12bc:	19 82       	std	Y+1, r1	; 0x01
    12be:	65 c0       	rjmp	.+202    	; 0x138a <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			case  MDIO_PORTC:
				if(Copy_u8PinValue==PIN_HIGH)
    12c0:	8c 81       	ldd	r24, Y+4	; 0x04
    12c2:	81 30       	cpi	r24, 0x01	; 1
    12c4:	a1 f4       	brne	.+40     	; 0x12ee <MDIO_Error_State_SetPinValue+0x156>
				{
					SET_BIT(PORTC,Copy_u8PinNumber);
    12c6:	a5 e3       	ldi	r26, 0x35	; 53
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	e5 e3       	ldi	r30, 0x35	; 53
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	48 2f       	mov	r20, r24
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	28 2f       	mov	r18, r24
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	02 2e       	mov	r0, r18
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <MDIO_Error_State_SetPinValue+0x14c>
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	0a 94       	dec	r0
    12e6:	e2 f7       	brpl	.-8      	; 0x12e0 <MDIO_Error_State_SetPinValue+0x148>
    12e8:	84 2b       	or	r24, r20
    12ea:	8c 93       	st	X, r24
    12ec:	4e c0       	rjmp	.+156    	; 0x138a <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    12ee:	8c 81       	ldd	r24, Y+4	; 0x04
    12f0:	88 23       	and	r24, r24
    12f2:	a9 f4       	brne	.+42     	; 0x131e <MDIO_Error_State_SetPinValue+0x186>
				{
					CLR_BIT(PORTC,Copy_u8PinNumber);
    12f4:	a5 e3       	ldi	r26, 0x35	; 53
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	e5 e3       	ldi	r30, 0x35	; 53
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	48 2f       	mov	r20, r24
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	02 2e       	mov	r0, r18
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <MDIO_Error_State_SetPinValue+0x17a>
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	0a 94       	dec	r0
    1314:	e2 f7       	brpl	.-8      	; 0x130e <MDIO_Error_State_SetPinValue+0x176>
    1316:	80 95       	com	r24
    1318:	84 23       	and	r24, r20
    131a:	8c 93       	st	X, r24
    131c:	36 c0       	rjmp	.+108    	; 0x138a <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    131e:	19 82       	std	Y+1, r1	; 0x01
    1320:	34 c0       	rjmp	.+104    	; 0x138a <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break;
			case  MDIO_PORTD:
				if(Copy_u8PinValue==PIN_HIGH)
    1322:	8c 81       	ldd	r24, Y+4	; 0x04
    1324:	81 30       	cpi	r24, 0x01	; 1
    1326:	a1 f4       	brne	.+40     	; 0x1350 <MDIO_Error_State_SetPinValue+0x1b8>
				{
					SET_BIT(PORTD,Copy_u8PinNumber);
    1328:	a2 e3       	ldi	r26, 0x32	; 50
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e2 e3       	ldi	r30, 0x32	; 50
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	48 2f       	mov	r20, r24
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	02 2e       	mov	r0, r18
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <MDIO_Error_State_SetPinValue+0x1ae>
    1342:	88 0f       	add	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	0a 94       	dec	r0
    1348:	e2 f7       	brpl	.-8      	; 0x1342 <MDIO_Error_State_SetPinValue+0x1aa>
    134a:	84 2b       	or	r24, r20
    134c:	8c 93       	st	X, r24
    134e:	1d c0       	rjmp	.+58     	; 0x138a <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    1350:	8c 81       	ldd	r24, Y+4	; 0x04
    1352:	88 23       	and	r24, r24
    1354:	a9 f4       	brne	.+42     	; 0x1380 <MDIO_Error_State_SetPinValue+0x1e8>
				{
					CLR_BIT(PORTD,Copy_u8PinNumber);
    1356:	a2 e3       	ldi	r26, 0x32	; 50
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	e2 e3       	ldi	r30, 0x32	; 50
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	48 2f       	mov	r20, r24
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	02 2e       	mov	r0, r18
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <MDIO_Error_State_SetPinValue+0x1dc>
    1370:	88 0f       	add	r24, r24
    1372:	99 1f       	adc	r25, r25
    1374:	0a 94       	dec	r0
    1376:	e2 f7       	brpl	.-8      	; 0x1370 <MDIO_Error_State_SetPinValue+0x1d8>
    1378:	80 95       	com	r24
    137a:	84 23       	and	r24, r20
    137c:	8c 93       	st	X, r24
    137e:	05 c0       	rjmp	.+10     	; 0x138a <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    1380:	19 82       	std	Y+1, r1	; 0x01
    1382:	03 c0       	rjmp	.+6      	; 0x138a <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			default:
				LOC_Error_State_ReturnState = NOK;
    1384:	19 82       	std	Y+1, r1	; 0x01
    1386:	01 c0       	rjmp	.+2      	; 0x138a <MDIO_Error_State_SetPinValue+0x1f2>
				break ;
			}
		}
		else
		{
			LOC_Error_State_ReturnState = NOK;
    1388:	19 82       	std	Y+1, r1	; 0x01
		}
		return  LOC_Error_State_ReturnState ;
    138a:	89 81       	ldd	r24, Y+1	; 0x01

}
    138c:	26 96       	adiw	r28, 0x06	; 6
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	f8 94       	cli
    1392:	de bf       	out	0x3e, r29	; 62
    1394:	0f be       	out	0x3f, r0	; 63
    1396:	cd bf       	out	0x3d, r28	; 61
    1398:	cf 91       	pop	r28
    139a:	df 91       	pop	r29
    139c:	08 95       	ret

0000139e <MDIO_Error_State_SetPortValue>:
/*Set Port Value Function */
Error_State  MDIO_Error_State_SetPortValue(u8 Copy_u8PortNumber,u8 Copy_u8PortValue)
{
    139e:	df 93       	push	r29
    13a0:	cf 93       	push	r28
    13a2:	00 d0       	rcall	.+0      	; 0x13a4 <MDIO_Error_State_SetPortValue+0x6>
    13a4:	00 d0       	rcall	.+0      	; 0x13a6 <MDIO_Error_State_SetPortValue+0x8>
    13a6:	0f 92       	push	r0
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
    13ac:	8a 83       	std	Y+2, r24	; 0x02
    13ae:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState = OK;
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	89 83       	std	Y+1, r24	; 0x01

			switch(Copy_u8PortNumber)
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	3d 83       	std	Y+5, r19	; 0x05
    13bc:	2c 83       	std	Y+4, r18	; 0x04
    13be:	8c 81       	ldd	r24, Y+4	; 0x04
    13c0:	9d 81       	ldd	r25, Y+5	; 0x05
    13c2:	81 30       	cpi	r24, 0x01	; 1
    13c4:	91 05       	cpc	r25, r1
    13c6:	d1 f0       	breq	.+52     	; 0x13fc <MDIO_Error_State_SetPortValue+0x5e>
    13c8:	2c 81       	ldd	r18, Y+4	; 0x04
    13ca:	3d 81       	ldd	r19, Y+5	; 0x05
    13cc:	22 30       	cpi	r18, 0x02	; 2
    13ce:	31 05       	cpc	r19, r1
    13d0:	2c f4       	brge	.+10     	; 0x13dc <MDIO_Error_State_SetPortValue+0x3e>
    13d2:	8c 81       	ldd	r24, Y+4	; 0x04
    13d4:	9d 81       	ldd	r25, Y+5	; 0x05
    13d6:	00 97       	sbiw	r24, 0x00	; 0
    13d8:	61 f0       	breq	.+24     	; 0x13f2 <MDIO_Error_State_SetPortValue+0x54>
    13da:	1f c0       	rjmp	.+62     	; 0x141a <MDIO_Error_State_SetPortValue+0x7c>
    13dc:	2c 81       	ldd	r18, Y+4	; 0x04
    13de:	3d 81       	ldd	r19, Y+5	; 0x05
    13e0:	22 30       	cpi	r18, 0x02	; 2
    13e2:	31 05       	cpc	r19, r1
    13e4:	81 f0       	breq	.+32     	; 0x1406 <MDIO_Error_State_SetPortValue+0x68>
    13e6:	8c 81       	ldd	r24, Y+4	; 0x04
    13e8:	9d 81       	ldd	r25, Y+5	; 0x05
    13ea:	83 30       	cpi	r24, 0x03	; 3
    13ec:	91 05       	cpc	r25, r1
    13ee:	81 f0       	breq	.+32     	; 0x1410 <MDIO_Error_State_SetPortValue+0x72>
    13f0:	14 c0       	rjmp	.+40     	; 0x141a <MDIO_Error_State_SetPortValue+0x7c>
			{
			case MDIO_PORTA:
				PORTA = Copy_u8PortValue;
    13f2:	eb e3       	ldi	r30, 0x3B	; 59
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	80 83       	st	Z, r24
    13fa:	10 c0       	rjmp	.+32     	; 0x141c <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTB:
				PORTB = Copy_u8PortValue;
    13fc:	e8 e3       	ldi	r30, 0x38	; 56
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	8b 81       	ldd	r24, Y+3	; 0x03
    1402:	80 83       	st	Z, r24
    1404:	0b c0       	rjmp	.+22     	; 0x141c <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTC:
				PORTC = Copy_u8PortValue;
    1406:	e5 e3       	ldi	r30, 0x35	; 53
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	80 83       	st	Z, r24
    140e:	06 c0       	rjmp	.+12     	; 0x141c <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTD:
				PORTD = Copy_u8PortValue;
    1410:	e2 e3       	ldi	r30, 0x32	; 50
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	80 83       	st	Z, r24
    1418:	01 c0       	rjmp	.+2      	; 0x141c <MDIO_Error_State_SetPortValue+0x7e>
				break;
			default:
				LOC_Error_State_ReturnState = NOK;
    141a:	19 82       	std	Y+1, r1	; 0x01
				break ;
			}

		return LOC_Error_State_ReturnState ;
    141c:	89 81       	ldd	r24, Y+1	; 0x01
}
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	cf 91       	pop	r28
    142a:	df 91       	pop	r29
    142c:	08 95       	ret

0000142e <MDIO_Error_State_GetPinValue>:
/*Get Pin Value Function */
Error_State  MDIO_Error_State_GetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8* P_u8PinValue)
{
    142e:	df 93       	push	r29
    1430:	cf 93       	push	r28
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    1436:	27 97       	sbiw	r28, 0x07	; 7
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	f8 94       	cli
    143c:	de bf       	out	0x3e, r29	; 62
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	cd bf       	out	0x3d, r28	; 61
    1442:	8a 83       	std	Y+2, r24	; 0x02
    1444:	6b 83       	std	Y+3, r22	; 0x03
    1446:	5d 83       	std	Y+5, r21	; 0x05
    1448:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	89 83       	std	Y+1, r24	; 0x01

	if(((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))&&(P_u8PinValue !=(u8*)NULL_POINTER))
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	88 30       	cpi	r24, 0x08	; 8
    1452:	08 f0       	brcs	.+2      	; 0x1456 <MDIO_Error_State_GetPinValue+0x28>
    1454:	79 c0       	rjmp	.+242    	; 0x1548 <MDIO_Error_State_GetPinValue+0x11a>
    1456:	8c 81       	ldd	r24, Y+4	; 0x04
    1458:	9d 81       	ldd	r25, Y+5	; 0x05
    145a:	81 30       	cpi	r24, 0x01	; 1
    145c:	91 05       	cpc	r25, r1
    145e:	09 f4       	brne	.+2      	; 0x1462 <MDIO_Error_State_GetPinValue+0x34>
    1460:	73 c0       	rjmp	.+230    	; 0x1548 <MDIO_Error_State_GetPinValue+0x11a>
	{
	switch(Copy_u8PortNumber)
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	3f 83       	std	Y+7, r19	; 0x07
    146a:	2e 83       	std	Y+6, r18	; 0x06
    146c:	4e 81       	ldd	r20, Y+6	; 0x06
    146e:	5f 81       	ldd	r21, Y+7	; 0x07
    1470:	41 30       	cpi	r20, 0x01	; 1
    1472:	51 05       	cpc	r21, r1
    1474:	59 f1       	breq	.+86     	; 0x14cc <MDIO_Error_State_GetPinValue+0x9e>
    1476:	8e 81       	ldd	r24, Y+6	; 0x06
    1478:	9f 81       	ldd	r25, Y+7	; 0x07
    147a:	82 30       	cpi	r24, 0x02	; 2
    147c:	91 05       	cpc	r25, r1
    147e:	34 f4       	brge	.+12     	; 0x148c <MDIO_Error_State_GetPinValue+0x5e>
    1480:	2e 81       	ldd	r18, Y+6	; 0x06
    1482:	3f 81       	ldd	r19, Y+7	; 0x07
    1484:	21 15       	cp	r18, r1
    1486:	31 05       	cpc	r19, r1
    1488:	69 f0       	breq	.+26     	; 0x14a4 <MDIO_Error_State_GetPinValue+0x76>
    148a:	5c c0       	rjmp	.+184    	; 0x1544 <MDIO_Error_State_GetPinValue+0x116>
    148c:	4e 81       	ldd	r20, Y+6	; 0x06
    148e:	5f 81       	ldd	r21, Y+7	; 0x07
    1490:	42 30       	cpi	r20, 0x02	; 2
    1492:	51 05       	cpc	r21, r1
    1494:	79 f1       	breq	.+94     	; 0x14f4 <MDIO_Error_State_GetPinValue+0xc6>
    1496:	8e 81       	ldd	r24, Y+6	; 0x06
    1498:	9f 81       	ldd	r25, Y+7	; 0x07
    149a:	83 30       	cpi	r24, 0x03	; 3
    149c:	91 05       	cpc	r25, r1
    149e:	09 f4       	brne	.+2      	; 0x14a2 <MDIO_Error_State_GetPinValue+0x74>
    14a0:	3d c0       	rjmp	.+122    	; 0x151c <MDIO_Error_State_GetPinValue+0xee>
    14a2:	50 c0       	rjmp	.+160    	; 0x1544 <MDIO_Error_State_GetPinValue+0x116>
				{
				case MDIO_PORTA:
					*P_u8PinValue= GET_BIT(PINA,Copy_u8PinNumber);
    14a4:	e9 e3       	ldi	r30, 0x39	; 57
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	88 2f       	mov	r24, r24
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	a9 01       	movw	r20, r18
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <MDIO_Error_State_GetPinValue+0x8e>
    14b8:	55 95       	asr	r21
    14ba:	47 95       	ror	r20
    14bc:	8a 95       	dec	r24
    14be:	e2 f7       	brpl	.-8      	; 0x14b8 <MDIO_Error_State_GetPinValue+0x8a>
    14c0:	ca 01       	movw	r24, r20
    14c2:	81 70       	andi	r24, 0x01	; 1
    14c4:	ec 81       	ldd	r30, Y+4	; 0x04
    14c6:	fd 81       	ldd	r31, Y+5	; 0x05
    14c8:	80 83       	st	Z, r24
    14ca:	3f c0       	rjmp	.+126    	; 0x154a <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTB:
					*P_u8PinValue= GET_BIT(PINB,Copy_u8PinNumber);
    14cc:	e6 e3       	ldi	r30, 0x36	; 54
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	28 2f       	mov	r18, r24
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
    14d8:	88 2f       	mov	r24, r24
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	a9 01       	movw	r20, r18
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <MDIO_Error_State_GetPinValue+0xb6>
    14e0:	55 95       	asr	r21
    14e2:	47 95       	ror	r20
    14e4:	8a 95       	dec	r24
    14e6:	e2 f7       	brpl	.-8      	; 0x14e0 <MDIO_Error_State_GetPinValue+0xb2>
    14e8:	ca 01       	movw	r24, r20
    14ea:	81 70       	andi	r24, 0x01	; 1
    14ec:	ec 81       	ldd	r30, Y+4	; 0x04
    14ee:	fd 81       	ldd	r31, Y+5	; 0x05
    14f0:	80 83       	st	Z, r24
    14f2:	2b c0       	rjmp	.+86     	; 0x154a <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTC:
					*P_u8PinValue= GET_BIT(PINC,Copy_u8PinNumber);
    14f4:	e3 e3       	ldi	r30, 0x33	; 51
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	28 2f       	mov	r18, r24
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	88 2f       	mov	r24, r24
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	a9 01       	movw	r20, r18
    1506:	02 c0       	rjmp	.+4      	; 0x150c <MDIO_Error_State_GetPinValue+0xde>
    1508:	55 95       	asr	r21
    150a:	47 95       	ror	r20
    150c:	8a 95       	dec	r24
    150e:	e2 f7       	brpl	.-8      	; 0x1508 <MDIO_Error_State_GetPinValue+0xda>
    1510:	ca 01       	movw	r24, r20
    1512:	81 70       	andi	r24, 0x01	; 1
    1514:	ec 81       	ldd	r30, Y+4	; 0x04
    1516:	fd 81       	ldd	r31, Y+5	; 0x05
    1518:	80 83       	st	Z, r24
    151a:	17 c0       	rjmp	.+46     	; 0x154a <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTD:
					*P_u8PinValue= GET_BIT(PIND,Copy_u8PinNumber);
    151c:	e0 e3       	ldi	r30, 0x30	; 48
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	8a 81       	ldd	r24, Y+2	; 0x02
    1528:	88 2f       	mov	r24, r24
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	a9 01       	movw	r20, r18
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <MDIO_Error_State_GetPinValue+0x106>
    1530:	55 95       	asr	r21
    1532:	47 95       	ror	r20
    1534:	8a 95       	dec	r24
    1536:	e2 f7       	brpl	.-8      	; 0x1530 <MDIO_Error_State_GetPinValue+0x102>
    1538:	ca 01       	movw	r24, r20
    153a:	81 70       	andi	r24, 0x01	; 1
    153c:	ec 81       	ldd	r30, Y+4	; 0x04
    153e:	fd 81       	ldd	r31, Y+5	; 0x05
    1540:	80 83       	st	Z, r24
    1542:	03 c0       	rjmp	.+6      	; 0x154a <MDIO_Error_State_GetPinValue+0x11c>
					break;
				default:
					LOC_Error_State_ReturnState = NOK;
    1544:	19 82       	std	Y+1, r1	; 0x01
    1546:	01 c0       	rjmp	.+2      	; 0x154a <MDIO_Error_State_GetPinValue+0x11c>
					break ;
				}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
    1548:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_Error_State_ReturnState ;
    154a:	89 81       	ldd	r24, Y+1	; 0x01

}
    154c:	27 96       	adiw	r28, 0x07	; 7
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	f8 94       	cli
    1552:	de bf       	out	0x3e, r29	; 62
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	cd bf       	out	0x3d, r28	; 61
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	08 95       	ret

0000155e <MDIO_Error_State_SetNippleValue>:

/*Set Nipple Direction Function */

/*Set Nipple Values Function */
Error_State MDIO_Error_State_SetNippleValue(u8 Copy_u8PinStart,u8 Copy_u8PortNumber,u8 Copy_u8Value)
{
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	00 d0       	rcall	.+0      	; 0x1564 <MDIO_Error_State_SetNippleValue+0x6>
    1564:	00 d0       	rcall	.+0      	; 0x1566 <MDIO_Error_State_SetNippleValue+0x8>
    1566:	00 d0       	rcall	.+0      	; 0x1568 <MDIO_Error_State_SetNippleValue+0xa>
    1568:	cd b7       	in	r28, 0x3d	; 61
    156a:	de b7       	in	r29, 0x3e	; 62
    156c:	8a 83       	std	Y+2, r24	; 0x02
    156e:	6b 83       	std	Y+3, r22	; 0x03
    1570:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState=OK;
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinStart<=4)
    1576:	8a 81       	ldd	r24, Y+2	; 0x02
    1578:	85 30       	cpi	r24, 0x05	; 5
    157a:	08 f0       	brcs	.+2      	; 0x157e <MDIO_Error_State_SetNippleValue+0x20>
    157c:	c9 c0       	rjmp	.+402    	; 0x1710 <MDIO_Error_State_SetNippleValue+0x1b2>
	{
		switch(Copy_u8PortNumber)
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	3e 83       	std	Y+6, r19	; 0x06
    1586:	2d 83       	std	Y+5, r18	; 0x05
    1588:	6d 81       	ldd	r22, Y+5	; 0x05
    158a:	7e 81       	ldd	r23, Y+6	; 0x06
    158c:	61 30       	cpi	r22, 0x01	; 1
    158e:	71 05       	cpc	r23, r1
    1590:	09 f4       	brne	.+2      	; 0x1594 <MDIO_Error_State_SetNippleValue+0x36>
    1592:	41 c0       	rjmp	.+130    	; 0x1616 <MDIO_Error_State_SetNippleValue+0xb8>
    1594:	8d 81       	ldd	r24, Y+5	; 0x05
    1596:	9e 81       	ldd	r25, Y+6	; 0x06
    1598:	82 30       	cpi	r24, 0x02	; 2
    159a:	91 05       	cpc	r25, r1
    159c:	34 f4       	brge	.+12     	; 0x15aa <MDIO_Error_State_SetNippleValue+0x4c>
    159e:	2d 81       	ldd	r18, Y+5	; 0x05
    15a0:	3e 81       	ldd	r19, Y+6	; 0x06
    15a2:	21 15       	cp	r18, r1
    15a4:	31 05       	cpc	r19, r1
    15a6:	71 f0       	breq	.+28     	; 0x15c4 <MDIO_Error_State_SetNippleValue+0x66>
    15a8:	b1 c0       	rjmp	.+354    	; 0x170c <MDIO_Error_State_SetNippleValue+0x1ae>
    15aa:	6d 81       	ldd	r22, Y+5	; 0x05
    15ac:	7e 81       	ldd	r23, Y+6	; 0x06
    15ae:	62 30       	cpi	r22, 0x02	; 2
    15b0:	71 05       	cpc	r23, r1
    15b2:	09 f4       	brne	.+2      	; 0x15b6 <MDIO_Error_State_SetNippleValue+0x58>
    15b4:	59 c0       	rjmp	.+178    	; 0x1668 <MDIO_Error_State_SetNippleValue+0x10a>
    15b6:	8d 81       	ldd	r24, Y+5	; 0x05
    15b8:	9e 81       	ldd	r25, Y+6	; 0x06
    15ba:	83 30       	cpi	r24, 0x03	; 3
    15bc:	91 05       	cpc	r25, r1
    15be:	09 f4       	brne	.+2      	; 0x15c2 <MDIO_Error_State_SetNippleValue+0x64>
    15c0:	7c c0       	rjmp	.+248    	; 0x16ba <MDIO_Error_State_SetNippleValue+0x15c>
    15c2:	a4 c0       	rjmp	.+328    	; 0x170c <MDIO_Error_State_SetNippleValue+0x1ae>
		{
		case MDIO_PORTA:
			PORTA&=(~(0x0F<<Copy_u8PinStart));
    15c4:	ab e3       	ldi	r26, 0x3B	; 59
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	eb e3       	ldi	r30, 0x3B	; 59
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	48 2f       	mov	r20, r24
    15d0:	8a 81       	ldd	r24, Y+2	; 0x02
    15d2:	28 2f       	mov	r18, r24
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	8f e0       	ldi	r24, 0x0F	; 15
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <MDIO_Error_State_SetNippleValue+0x82>
    15dc:	88 0f       	add	r24, r24
    15de:	99 1f       	adc	r25, r25
    15e0:	2a 95       	dec	r18
    15e2:	e2 f7       	brpl	.-8      	; 0x15dc <MDIO_Error_State_SetNippleValue+0x7e>
    15e4:	80 95       	com	r24
    15e6:	84 23       	and	r24, r20
    15e8:	8c 93       	st	X, r24
			PORTA|=(Copy_u8Value<<Copy_u8PinStart);
    15ea:	ab e3       	ldi	r26, 0x3B	; 59
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	eb e3       	ldi	r30, 0x3B	; 59
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	48 2f       	mov	r20, r24
    15f6:	8c 81       	ldd	r24, Y+4	; 0x04
    15f8:	28 2f       	mov	r18, r24
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	88 2f       	mov	r24, r24
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	b9 01       	movw	r22, r18
    1604:	02 c0       	rjmp	.+4      	; 0x160a <MDIO_Error_State_SetNippleValue+0xac>
    1606:	66 0f       	add	r22, r22
    1608:	77 1f       	adc	r23, r23
    160a:	8a 95       	dec	r24
    160c:	e2 f7       	brpl	.-8      	; 0x1606 <MDIO_Error_State_SetNippleValue+0xa8>
    160e:	cb 01       	movw	r24, r22
    1610:	84 2b       	or	r24, r20
    1612:	8c 93       	st	X, r24
    1614:	7e c0       	rjmp	.+252    	; 0x1712 <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTB:
			PORTB&=(~(0x0F<<Copy_u8PinStart));
    1616:	a8 e3       	ldi	r26, 0x38	; 56
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	e8 e3       	ldi	r30, 0x38	; 56
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	48 2f       	mov	r20, r24
    1622:	8a 81       	ldd	r24, Y+2	; 0x02
    1624:	28 2f       	mov	r18, r24
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	8f e0       	ldi	r24, 0x0F	; 15
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	02 c0       	rjmp	.+4      	; 0x1632 <MDIO_Error_State_SetNippleValue+0xd4>
    162e:	88 0f       	add	r24, r24
    1630:	99 1f       	adc	r25, r25
    1632:	2a 95       	dec	r18
    1634:	e2 f7       	brpl	.-8      	; 0x162e <MDIO_Error_State_SetNippleValue+0xd0>
    1636:	80 95       	com	r24
    1638:	84 23       	and	r24, r20
    163a:	8c 93       	st	X, r24
			PORTB|=(Copy_u8Value<<Copy_u8PinStart);
    163c:	a8 e3       	ldi	r26, 0x38	; 56
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	e8 e3       	ldi	r30, 0x38	; 56
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	48 2f       	mov	r20, r24
    1648:	8c 81       	ldd	r24, Y+4	; 0x04
    164a:	28 2f       	mov	r18, r24
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	88 2f       	mov	r24, r24
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	b9 01       	movw	r22, r18
    1656:	02 c0       	rjmp	.+4      	; 0x165c <MDIO_Error_State_SetNippleValue+0xfe>
    1658:	66 0f       	add	r22, r22
    165a:	77 1f       	adc	r23, r23
    165c:	8a 95       	dec	r24
    165e:	e2 f7       	brpl	.-8      	; 0x1658 <MDIO_Error_State_SetNippleValue+0xfa>
    1660:	cb 01       	movw	r24, r22
    1662:	84 2b       	or	r24, r20
    1664:	8c 93       	st	X, r24
    1666:	55 c0       	rjmp	.+170    	; 0x1712 <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTC:
			PORTC&=(~(0x0F<<Copy_u8PinStart));
    1668:	a5 e3       	ldi	r26, 0x35	; 53
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	e5 e3       	ldi	r30, 0x35	; 53
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	48 2f       	mov	r20, r24
    1674:	8a 81       	ldd	r24, Y+2	; 0x02
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	8f e0       	ldi	r24, 0x0F	; 15
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	02 c0       	rjmp	.+4      	; 0x1684 <MDIO_Error_State_SetNippleValue+0x126>
    1680:	88 0f       	add	r24, r24
    1682:	99 1f       	adc	r25, r25
    1684:	2a 95       	dec	r18
    1686:	e2 f7       	brpl	.-8      	; 0x1680 <MDIO_Error_State_SetNippleValue+0x122>
    1688:	80 95       	com	r24
    168a:	84 23       	and	r24, r20
    168c:	8c 93       	st	X, r24
			PORTC|=(Copy_u8Value<<Copy_u8PinStart);
    168e:	a5 e3       	ldi	r26, 0x35	; 53
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	e5 e3       	ldi	r30, 0x35	; 53
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	48 2f       	mov	r20, r24
    169a:	8c 81       	ldd	r24, Y+4	; 0x04
    169c:	28 2f       	mov	r18, r24
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	8a 81       	ldd	r24, Y+2	; 0x02
    16a2:	88 2f       	mov	r24, r24
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	b9 01       	movw	r22, r18
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <MDIO_Error_State_SetNippleValue+0x150>
    16aa:	66 0f       	add	r22, r22
    16ac:	77 1f       	adc	r23, r23
    16ae:	8a 95       	dec	r24
    16b0:	e2 f7       	brpl	.-8      	; 0x16aa <MDIO_Error_State_SetNippleValue+0x14c>
    16b2:	cb 01       	movw	r24, r22
    16b4:	84 2b       	or	r24, r20
    16b6:	8c 93       	st	X, r24
    16b8:	2c c0       	rjmp	.+88     	; 0x1712 <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTD:

			PORTD&=(~(0x0F<<Copy_u8PinStart));
    16ba:	a2 e3       	ldi	r26, 0x32	; 50
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	e2 e3       	ldi	r30, 0x32	; 50
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	48 2f       	mov	r20, r24
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	8f e0       	ldi	r24, 0x0F	; 15
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	02 c0       	rjmp	.+4      	; 0x16d6 <MDIO_Error_State_SetNippleValue+0x178>
    16d2:	88 0f       	add	r24, r24
    16d4:	99 1f       	adc	r25, r25
    16d6:	2a 95       	dec	r18
    16d8:	e2 f7       	brpl	.-8      	; 0x16d2 <MDIO_Error_State_SetNippleValue+0x174>
    16da:	80 95       	com	r24
    16dc:	84 23       	and	r24, r20
    16de:	8c 93       	st	X, r24
			PORTD|=(Copy_u8Value<<Copy_u8PinStart);
    16e0:	a2 e3       	ldi	r26, 0x32	; 50
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	e2 e3       	ldi	r30, 0x32	; 50
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	48 2f       	mov	r20, r24
    16ec:	8c 81       	ldd	r24, Y+4	; 0x04
    16ee:	28 2f       	mov	r18, r24
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	8a 81       	ldd	r24, Y+2	; 0x02
    16f4:	88 2f       	mov	r24, r24
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	b9 01       	movw	r22, r18
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <MDIO_Error_State_SetNippleValue+0x1a2>
    16fc:	66 0f       	add	r22, r22
    16fe:	77 1f       	adc	r23, r23
    1700:	8a 95       	dec	r24
    1702:	e2 f7       	brpl	.-8      	; 0x16fc <MDIO_Error_State_SetNippleValue+0x19e>
    1704:	cb 01       	movw	r24, r22
    1706:	84 2b       	or	r24, r20
    1708:	8c 93       	st	X, r24
    170a:	03 c0       	rjmp	.+6      	; 0x1712 <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
    170c:	19 82       	std	Y+1, r1	; 0x01
    170e:	01 c0       	rjmp	.+2      	; 0x1712 <MDIO_Error_State_SetNippleValue+0x1b4>
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
    1710:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState;
    1712:	89 81       	ldd	r24, Y+1	; 0x01
}
    1714:	26 96       	adiw	r28, 0x06	; 6
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	f8 94       	cli
    171a:	de bf       	out	0x3e, r29	; 62
    171c:	0f be       	out	0x3f, r0	; 63
    171e:	cd bf       	out	0x3d, r28	; 61
    1720:	cf 91       	pop	r28
    1722:	df 91       	pop	r29
    1724:	08 95       	ret

00001726 <MDIO_VidActivePullUP>:

/*Active Pull Up Resistor Function */
void  MDIO_VidActivePullUP(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber)
{
    1726:	df 93       	push	r29
    1728:	cf 93       	push	r28
    172a:	00 d0       	rcall	.+0      	; 0x172c <MDIO_VidActivePullUP+0x6>
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62
    1730:	89 83       	std	Y+1, r24	; 0x01
    1732:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_Error_State_SetPinDirection(Copy_u8PinNumber,Copy_u8PortNumber,PIN_INPUT);
    1734:	89 81       	ldd	r24, Y+1	; 0x01
    1736:	6a 81       	ldd	r22, Y+2	; 0x02
    1738:	40 e0       	ldi	r20, 0x00	; 0
    173a:	0e 94 79 07 	call	0xef2	; 0xef2 <MDIO_Error_State_SetPinDirection>
    MDIO_Error_State_SetPinValue( Copy_u8PinNumber, Copy_u8PortNumber,PIN_HIGH);
    173e:	89 81       	ldd	r24, Y+1	; 0x01
    1740:	6a 81       	ldd	r22, Y+2	; 0x02
    1742:	41 e0       	ldi	r20, 0x01	; 1
    1744:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>

}
    1748:	0f 90       	pop	r0
    174a:	0f 90       	pop	r0
    174c:	cf 91       	pop	r28
    174e:	df 91       	pop	r29
    1750:	08 95       	ret

00001752 <MADC_VidInit>:
#include"MADC_Private.h"
#include"MADC_Interface.h"

/*ADC Initialization*/
void MADC_VidInit(void)
{
    1752:	df 93       	push	r29
    1754:	cf 93       	push	r28
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
	/*Select Reference Voltage*/
#if MADC_SET_REFERENCEVOLATGE == MADC_AVCC_REFERENCEVOLATGE
	SET_BIT(ADMUX,6);
    175a:	a7 e2       	ldi	r26, 0x27	; 39
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	e7 e2       	ldi	r30, 0x27	; 39
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	80 64       	ori	r24, 0x40	; 64
    1766:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,7);
    1768:	a7 e2       	ldi	r26, 0x27	; 39
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	e7 e2       	ldi	r30, 0x27	; 39
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	8f 77       	andi	r24, 0x7F	; 127
    1774:	8c 93       	st	X, r24
	SET_BIT(ADMUX,7);
#else
#error"ADC Reference Voltage Option I s not valid.... "
#endif
/*Set Prescaler*/
ADCSRA&=MADC_BIT_MASKING_PRESCALER;
    1776:	a6 e2       	ldi	r26, 0x26	; 38
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e6 e2       	ldi	r30, 0x26	; 38
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	88 7f       	andi	r24, 0xF8	; 248
    1782:	8c 93       	st	X, r24
ADCSRA|=MADC_SET_PRESCALER;
    1784:	a6 e2       	ldi	r26, 0x26	; 38
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	e6 e2       	ldi	r30, 0x26	; 38
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	81 60       	ori	r24, 0x01	; 1
    1790:	8c 93       	st	X, r24

#if MADC_SET_ADJUST == MADC_LEFT_ADJUST
	SET_BIT(ADMUX,5);
#elif MADC_SET_ADJUST == MADC_RIGHT_ADJUST
	CLR_BIT(ADMUX,5);
    1792:	a7 e2       	ldi	r26, 0x27	; 39
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	e7 e2       	ldi	r30, 0x27	; 39
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	8f 7d       	andi	r24, 0xDF	; 223
    179e:	8c 93       	st	X, r24
#else
#error"ADC Left adjust option is not valid...."
#endif
/*Enable To ADC*/
SET_BIT(ADCSRA,7);
    17a0:	a6 e2       	ldi	r26, 0x26	; 38
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	e6 e2       	ldi	r30, 0x26	; 38
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	80 68       	ori	r24, 0x80	; 128
    17ac:	8c 93       	st	X, r24
}
    17ae:	cf 91       	pop	r28
    17b0:	df 91       	pop	r29
    17b2:	08 95       	ret

000017b4 <MADC_u16ADC_StartConversion>:
/*ADC Start Conversion-->Polling , Return ADC Value*/
u16 MADC_u16ADC_StartConversion(u8 Copy_u8Channel)
{
    17b4:	df 93       	push	r29
    17b6:	cf 93       	push	r28
    17b8:	0f 92       	push	r0
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
    17be:	89 83       	std	Y+1, r24	; 0x01
	/*Select Channel*/
	Copy_u8Channel&=MADC_BIT_MASKING_CHANNEL;
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	87 70       	andi	r24, 0x07	; 7
    17c4:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=MADC_BIT_MASKING_REG_CHANNEL;
    17c6:	a7 e2       	ldi	r26, 0x27	; 39
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	e7 e2       	ldi	r30, 0x27	; 39
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	80 7e       	andi	r24, 0xE0	; 224
    17d2:	8c 93       	st	X, r24
	ADMUX|=Copy_u8Channel;
    17d4:	a7 e2       	ldi	r26, 0x27	; 39
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	e7 e2       	ldi	r30, 0x27	; 39
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	90 81       	ld	r25, Z
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	89 2b       	or	r24, r25
    17e2:	8c 93       	st	X, r24
   /*send Start Conversion*/
	SET_BIT(ADCSRA,6);
    17e4:	a6 e2       	ldi	r26, 0x26	; 38
    17e6:	b0 e0       	ldi	r27, 0x00	; 0
    17e8:	e6 e2       	ldi	r30, 0x26	; 38
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	80 64       	ori	r24, 0x40	; 64
    17f0:	8c 93       	st	X, r24
	/*Wait On ADC Conversion Completed Flag is set to one */
	while(GET_BIT(ADCSRA,4)==0);
    17f2:	e6 e2       	ldi	r30, 0x26	; 38
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	82 95       	swap	r24
    17fa:	8f 70       	andi	r24, 0x0F	; 15
    17fc:	88 2f       	mov	r24, r24
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	81 70       	andi	r24, 0x01	; 1
    1802:	90 70       	andi	r25, 0x00	; 0
    1804:	00 97       	sbiw	r24, 0x00	; 0
    1806:	a9 f3       	breq	.-22     	; 0x17f2 <MADC_u16ADC_StartConversion+0x3e>

	return ADC;
    1808:	e4 e2       	ldi	r30, 0x24	; 36
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	91 81       	ldd	r25, Z+1	; 0x01
}
    1810:	0f 90       	pop	r0
    1812:	cf 91       	pop	r28
    1814:	df 91       	pop	r29
    1816:	08 95       	ret

00001818 <GIE_voidEnable>:

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void)
{
    1818:	df 93       	push	r29
    181a:	cf 93       	push	r28
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    1820:	af e5       	ldi	r26, 0x5F	; 95
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	ef e5       	ldi	r30, 0x5F	; 95
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	80 68       	ori	r24, 0x80	; 128
    182c:	8c 93       	st	X, r24
}
    182e:	cf 91       	pop	r28
    1830:	df 91       	pop	r29
    1832:	08 95       	ret

00001834 <GIE_voidDisable>:

void GIE_voidDisable(void)
{
    1834:	df 93       	push	r29
    1836:	cf 93       	push	r28
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    183c:	af e5       	ldi	r26, 0x5F	; 95
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	ef e5       	ldi	r30, 0x5F	; 95
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	8f 77       	andi	r24, 0x7F	; 127
    1848:	8c 93       	st	X, r24
}
    184a:	cf 91       	pop	r28
    184c:	df 91       	pop	r29
    184e:	08 95       	ret

00001850 <EXTI_voidInt0SenseControl>:
void (*EXTI_pvInt0PtrFunc)(void) = NULL;
void (*EXTI_pvInt1PtrFunc)(void) = NULL;
void (*EXTI_pvInt2PtrFunc)(void) = NULL;

void EXTI_voidInt0SenseControl(void)
{
    1850:	df 93       	push	r29
    1852:	cf 93       	push	r28
    1854:	cd b7       	in	r28, 0x3d	; 61
    1856:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(MCUCR,MCUCR_ISC01);
	CLR_BIT(MCUCR,MCUCR_ISC00);

#elif INT0_SENSE_CONTROL == EXTI_RISING_EDGE

	SET_BIT(MCUCR,MCUCR_ISC01);
    1858:	a5 e5       	ldi	r26, 0x55	; 85
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	e5 e5       	ldi	r30, 0x55	; 85
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	82 60       	ori	r24, 0x02	; 2
    1864:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC00);
    1866:	a5 e5       	ldi	r26, 0x55	; 85
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	e5 e5       	ldi	r30, 0x55	; 85
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	81 60       	ori	r24, 0x01	; 1
    1872:	8c 93       	st	X, r24

#else
#error "Wrong INT0_SENSE_CONTROL Option"
#endif

}
    1874:	cf 91       	pop	r28
    1876:	df 91       	pop	r29
    1878:	08 95       	ret

0000187a <EXTI_voidInt1SenseControl>:

void EXTI_voidInt1SenseControl(void)
{
    187a:	df 93       	push	r29
    187c:	cf 93       	push	r28
    187e:	cd b7       	in	r28, 0x3d	; 61
    1880:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,MCUCR_ISC11);
	SET_BIT(MCUCR,MCUCR_ISC10);

#elif INT1_SENSE_CONTROL == EXTI_FALLING_EDGE

	SET_BIT(MCUCR,MCUCR_ISC11);
    1882:	a5 e5       	ldi	r26, 0x55	; 85
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	e5 e5       	ldi	r30, 0x55	; 85
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	88 60       	ori	r24, 0x08	; 8
    188e:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC10);
    1890:	a5 e5       	ldi	r26, 0x55	; 85
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	e5 e5       	ldi	r30, 0x55	; 85
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	8b 7f       	andi	r24, 0xFB	; 251
    189c:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC10);

#else
#error "Wrong INT1_SENSE_CONTROL Option"
#endif
}
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	08 95       	ret

000018a4 <EXTI_voidInt2SenseControl>:
void EXTI_voidInt2SenseControl(void)
{
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
#if INT2_SENSE_CONTROL == EXTI_FALLING_EDGE

	CLR_BIT(MCUCSR,MCUCSR_INT2);
    18ac:	a4 e5       	ldi	r26, 0x54	; 84
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	e4 e5       	ldi	r30, 0x54	; 84
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	8f 7b       	andi	r24, 0xBF	; 191
    18b8:	8c 93       	st	X, r24
	SET_BIT(MCUCSR,MCUCSR_INT2);

#else
#error "Wrong INT2_SENSE_CONTROL Option"
#endif
}
    18ba:	cf 91       	pop	r28
    18bc:	df 91       	pop	r29
    18be:	08 95       	ret

000018c0 <EXTI_u8IntEnable>:
u8 EXTI_u8IntEnable(u8 Copy_u8IntNumber)
{
    18c0:	df 93       	push	r29
    18c2:	cf 93       	push	r28
    18c4:	00 d0       	rcall	.+0      	; 0x18c6 <EXTI_u8IntEnable+0x6>
    18c6:	00 d0       	rcall	.+0      	; 0x18c8 <EXTI_u8IntEnable+0x8>
    18c8:	cd b7       	in	r28, 0x3d	; 61
    18ca:	de b7       	in	r29, 0x3e	; 62
    18cc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	89 83       	std	Y+1, r24	; 0x01

	switch (Copy_u8IntNumber)
    18d2:	8a 81       	ldd	r24, Y+2	; 0x02
    18d4:	28 2f       	mov	r18, r24
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	3c 83       	std	Y+4, r19	; 0x04
    18da:	2b 83       	std	Y+3, r18	; 0x03
    18dc:	8b 81       	ldd	r24, Y+3	; 0x03
    18de:	9c 81       	ldd	r25, Y+4	; 0x04
    18e0:	81 30       	cpi	r24, 0x01	; 1
    18e2:	91 05       	cpc	r25, r1
    18e4:	89 f0       	breq	.+34     	; 0x1908 <EXTI_u8IntEnable+0x48>
    18e6:	2b 81       	ldd	r18, Y+3	; 0x03
    18e8:	3c 81       	ldd	r19, Y+4	; 0x04
    18ea:	22 30       	cpi	r18, 0x02	; 2
    18ec:	31 05       	cpc	r19, r1
    18ee:	a1 f0       	breq	.+40     	; 0x1918 <EXTI_u8IntEnable+0x58>
    18f0:	8b 81       	ldd	r24, Y+3	; 0x03
    18f2:	9c 81       	ldd	r25, Y+4	; 0x04
    18f4:	00 97       	sbiw	r24, 0x00	; 0
    18f6:	c1 f4       	brne	.+48     	; 0x1928 <EXTI_u8IntEnable+0x68>
	{
	case EXTI_INT0: SET_BIT(GICR,GICR_INT0);
    18f8:	ab e5       	ldi	r26, 0x5B	; 91
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	eb e5       	ldi	r30, 0x5B	; 91
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	80 64       	ori	r24, 0x40	; 64
    1904:	8c 93       	st	X, r24
    1906:	11 c0       	rjmp	.+34     	; 0x192a <EXTI_u8IntEnable+0x6a>
	break;
	case EXTI_INT1: SET_BIT(GICR,GICR_INT1);
    1908:	ab e5       	ldi	r26, 0x5B	; 91
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	eb e5       	ldi	r30, 0x5B	; 91
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	80 68       	ori	r24, 0x80	; 128
    1914:	8c 93       	st	X, r24
    1916:	09 c0       	rjmp	.+18     	; 0x192a <EXTI_u8IntEnable+0x6a>
	break;
	case EXTI_INT2: SET_BIT(GICR,GICR_INT2);
    1918:	ab e5       	ldi	r26, 0x5B	; 91
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	eb e5       	ldi	r30, 0x5B	; 91
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	80 62       	ori	r24, 0x20	; 32
    1924:	8c 93       	st	X, r24
    1926:	01 c0       	rjmp	.+2      	; 0x192a <EXTI_u8IntEnable+0x6a>
	break;
	default  : Local_u8ErrorState = NOK ;
    1928:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    192a:	89 81       	ldd	r24, Y+1	; 0x01

}
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	cf 91       	pop	r28
    1936:	df 91       	pop	r29
    1938:	08 95       	ret

0000193a <EXTI_u8IntDisable>:
u8 EXTI_u8IntDisable(u8 Copy_u8IntNumber)
{
    193a:	df 93       	push	r29
    193c:	cf 93       	push	r28
    193e:	00 d0       	rcall	.+0      	; 0x1940 <EXTI_u8IntDisable+0x6>
    1940:	00 d0       	rcall	.+0      	; 0x1942 <EXTI_u8IntDisable+0x8>
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62
    1946:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	89 83       	std	Y+1, r24	; 0x01

	switch (Copy_u8IntNumber)
    194c:	8a 81       	ldd	r24, Y+2	; 0x02
    194e:	28 2f       	mov	r18, r24
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	3c 83       	std	Y+4, r19	; 0x04
    1954:	2b 83       	std	Y+3, r18	; 0x03
    1956:	8b 81       	ldd	r24, Y+3	; 0x03
    1958:	9c 81       	ldd	r25, Y+4	; 0x04
    195a:	81 30       	cpi	r24, 0x01	; 1
    195c:	91 05       	cpc	r25, r1
    195e:	89 f0       	breq	.+34     	; 0x1982 <EXTI_u8IntDisable+0x48>
    1960:	2b 81       	ldd	r18, Y+3	; 0x03
    1962:	3c 81       	ldd	r19, Y+4	; 0x04
    1964:	22 30       	cpi	r18, 0x02	; 2
    1966:	31 05       	cpc	r19, r1
    1968:	a1 f0       	breq	.+40     	; 0x1992 <EXTI_u8IntDisable+0x58>
    196a:	8b 81       	ldd	r24, Y+3	; 0x03
    196c:	9c 81       	ldd	r25, Y+4	; 0x04
    196e:	00 97       	sbiw	r24, 0x00	; 0
    1970:	c1 f4       	brne	.+48     	; 0x19a2 <EXTI_u8IntDisable+0x68>
	{
	case EXTI_INT0: CLR_BIT(GICR,GICR_INT0);
    1972:	ab e5       	ldi	r26, 0x5B	; 91
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	eb e5       	ldi	r30, 0x5B	; 91
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	8f 7b       	andi	r24, 0xBF	; 191
    197e:	8c 93       	st	X, r24
    1980:	11 c0       	rjmp	.+34     	; 0x19a4 <EXTI_u8IntDisable+0x6a>
	break;
	case EXTI_INT1: CLR_BIT(GICR,GICR_INT1);
    1982:	ab e5       	ldi	r26, 0x5B	; 91
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	eb e5       	ldi	r30, 0x5B	; 91
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	8f 77       	andi	r24, 0x7F	; 127
    198e:	8c 93       	st	X, r24
    1990:	09 c0       	rjmp	.+18     	; 0x19a4 <EXTI_u8IntDisable+0x6a>
	break;
	case EXTI_INT2: CLR_BIT(GICR,GICR_INT2);
    1992:	ab e5       	ldi	r26, 0x5B	; 91
    1994:	b0 e0       	ldi	r27, 0x00	; 0
    1996:	eb e5       	ldi	r30, 0x5B	; 91
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	8f 7d       	andi	r24, 0xDF	; 223
    199e:	8c 93       	st	X, r24
    19a0:	01 c0       	rjmp	.+2      	; 0x19a4 <EXTI_u8IntDisable+0x6a>
	break;
	default  : Local_u8ErrorState = NOK ;
    19a2:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    19a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	cf 91       	pop	r28
    19b0:	df 91       	pop	r29
    19b2:	08 95       	ret

000019b4 <EXTI_u8SetSenseControl>:
u8 EXTI_u8SetSenseControl(u8 Copy_u8IntNumber , u8 Copy_u8Sense)
{
    19b4:	df 93       	push	r29
    19b6:	cf 93       	push	r28
    19b8:	cd b7       	in	r28, 0x3d	; 61
    19ba:	de b7       	in	r29, 0x3e	; 62
    19bc:	2d 97       	sbiw	r28, 0x0d	; 13
    19be:	0f b6       	in	r0, 0x3f	; 63
    19c0:	f8 94       	cli
    19c2:	de bf       	out	0x3e, r29	; 62
    19c4:	0f be       	out	0x3f, r0	; 63
    19c6:	cd bf       	out	0x3d, r28	; 61
    19c8:	8a 83       	std	Y+2, r24	; 0x02
    19ca:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = OK;
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8Sense)
    19d0:	8b 81       	ldd	r24, Y+3	; 0x03
    19d2:	28 2f       	mov	r18, r24
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	3d 87       	std	Y+13, r19	; 0x0d
    19d8:	2c 87       	std	Y+12, r18	; 0x0c
    19da:	8c 85       	ldd	r24, Y+12	; 0x0c
    19dc:	9d 85       	ldd	r25, Y+13	; 0x0d
    19de:	82 30       	cpi	r24, 0x02	; 2
    19e0:	91 05       	cpc	r25, r1
    19e2:	09 f4       	brne	.+2      	; 0x19e6 <EXTI_u8SetSenseControl+0x32>
    19e4:	4e c0       	rjmp	.+156    	; 0x1a82 <EXTI_u8SetSenseControl+0xce>
    19e6:	2c 85       	ldd	r18, Y+12	; 0x0c
    19e8:	3d 85       	ldd	r19, Y+13	; 0x0d
    19ea:	23 30       	cpi	r18, 0x03	; 3
    19ec:	31 05       	cpc	r19, r1
    19ee:	34 f4       	brge	.+12     	; 0x19fc <EXTI_u8SetSenseControl+0x48>
    19f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    19f2:	9d 85       	ldd	r25, Y+13	; 0x0d
    19f4:	81 30       	cpi	r24, 0x01	; 1
    19f6:	91 05       	cpc	r25, r1
    19f8:	71 f0       	breq	.+28     	; 0x1a16 <EXTI_u8SetSenseControl+0x62>
    19fa:	ef c0       	rjmp	.+478    	; 0x1bda <EXTI_u8SetSenseControl+0x226>
    19fc:	2c 85       	ldd	r18, Y+12	; 0x0c
    19fe:	3d 85       	ldd	r19, Y+13	; 0x0d
    1a00:	23 30       	cpi	r18, 0x03	; 3
    1a02:	31 05       	cpc	r19, r1
    1a04:	09 f4       	brne	.+2      	; 0x1a08 <EXTI_u8SetSenseControl+0x54>
    1a06:	73 c0       	rjmp	.+230    	; 0x1aee <EXTI_u8SetSenseControl+0x13a>
    1a08:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a0a:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a0c:	84 30       	cpi	r24, 0x04	; 4
    1a0e:	91 05       	cpc	r25, r1
    1a10:	09 f4       	brne	.+2      	; 0x1a14 <EXTI_u8SetSenseControl+0x60>
    1a12:	a8 c0       	rjmp	.+336    	; 0x1b64 <EXTI_u8SetSenseControl+0x1b0>
    1a14:	e2 c0       	rjmp	.+452    	; 0x1bda <EXTI_u8SetSenseControl+0x226>
	{
	case EXTI_LOW_LEVEL :
		switch (Copy_u8IntNumber)
    1a16:	8a 81       	ldd	r24, Y+2	; 0x02
    1a18:	28 2f       	mov	r18, r24
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	3b 87       	std	Y+11, r19	; 0x0b
    1a1e:	2a 87       	std	Y+10, r18	; 0x0a
    1a20:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a22:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a24:	81 30       	cpi	r24, 0x01	; 1
    1a26:	91 05       	cpc	r25, r1
    1a28:	c1 f0       	breq	.+48     	; 0x1a5a <EXTI_u8SetSenseControl+0xa6>
    1a2a:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a2c:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a2e:	22 30       	cpi	r18, 0x02	; 2
    1a30:	31 05       	cpc	r19, r1
    1a32:	11 f1       	breq	.+68     	; 0x1a78 <EXTI_u8SetSenseControl+0xc4>
    1a34:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a36:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a38:	00 97       	sbiw	r24, 0x00	; 0
    1a3a:	09 f5       	brne	.+66     	; 0x1a7e <EXTI_u8SetSenseControl+0xca>
            		{
            		case EXTI_INT0 :

            			CLR_BIT(MCUCR,MCUCR_ISC01);
    1a3c:	a5 e5       	ldi	r26, 0x55	; 85
    1a3e:	b0 e0       	ldi	r27, 0x00	; 0
    1a40:	e5 e5       	ldi	r30, 0x55	; 85
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	80 81       	ld	r24, Z
    1a46:	8d 7f       	andi	r24, 0xFD	; 253
    1a48:	8c 93       	st	X, r24
            			CLR_BIT(MCUCR,MCUCR_ISC00);
    1a4a:	a5 e5       	ldi	r26, 0x55	; 85
    1a4c:	b0 e0       	ldi	r27, 0x00	; 0
    1a4e:	e5 e5       	ldi	r30, 0x55	; 85
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	8e 7f       	andi	r24, 0xFE	; 254
    1a56:	8c 93       	st	X, r24
    1a58:	c1 c0       	rjmp	.+386    	; 0x1bdc <EXTI_u8SetSenseControl+0x228>

            			break;
            		case EXTI_INT1 :

            			CLR_BIT(MCUCR,MCUCR_ISC11);
    1a5a:	a5 e5       	ldi	r26, 0x55	; 85
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	e5 e5       	ldi	r30, 0x55	; 85
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	87 7f       	andi	r24, 0xF7	; 247
    1a66:	8c 93       	st	X, r24
            			CLR_BIT(MCUCR,MCUCR_ISC10);
    1a68:	a5 e5       	ldi	r26, 0x55	; 85
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	e5 e5       	ldi	r30, 0x55	; 85
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	8b 7f       	andi	r24, 0xFB	; 251
    1a74:	8c 93       	st	X, r24
    1a76:	b2 c0       	rjmp	.+356    	; 0x1bdc <EXTI_u8SetSenseControl+0x228>

            			break;
            		case EXTI_INT2 :

            			Local_u8ErrorState = 2 ;
    1a78:	82 e0       	ldi	r24, 0x02	; 2
    1a7a:	89 83       	std	Y+1, r24	; 0x01
    1a7c:	af c0       	rjmp	.+350    	; 0x1bdc <EXTI_u8SetSenseControl+0x228>

            			break;
            		default : Local_u8ErrorState = NOK ;
    1a7e:	19 82       	std	Y+1, r1	; 0x01
    1a80:	ad c0       	rjmp	.+346    	; 0x1bdc <EXTI_u8SetSenseControl+0x228>
            		}
		break;
		case EXTI_ON_CHANGE :
			switch (Copy_u8IntNumber)
    1a82:	8a 81       	ldd	r24, Y+2	; 0x02
    1a84:	28 2f       	mov	r18, r24
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	39 87       	std	Y+9, r19	; 0x09
    1a8a:	28 87       	std	Y+8, r18	; 0x08
    1a8c:	88 85       	ldd	r24, Y+8	; 0x08
    1a8e:	99 85       	ldd	r25, Y+9	; 0x09
    1a90:	81 30       	cpi	r24, 0x01	; 1
    1a92:	91 05       	cpc	r25, r1
    1a94:	c1 f0       	breq	.+48     	; 0x1ac6 <EXTI_u8SetSenseControl+0x112>
    1a96:	28 85       	ldd	r18, Y+8	; 0x08
    1a98:	39 85       	ldd	r19, Y+9	; 0x09
    1a9a:	22 30       	cpi	r18, 0x02	; 2
    1a9c:	31 05       	cpc	r19, r1
    1a9e:	11 f1       	breq	.+68     	; 0x1ae4 <EXTI_u8SetSenseControl+0x130>
    1aa0:	88 85       	ldd	r24, Y+8	; 0x08
    1aa2:	99 85       	ldd	r25, Y+9	; 0x09
    1aa4:	00 97       	sbiw	r24, 0x00	; 0
    1aa6:	09 f5       	brne	.+66     	; 0x1aea <EXTI_u8SetSenseControl+0x136>
					{
					case EXTI_INT0 :

						CLR_BIT(MCUCR,MCUCR_ISC01);
    1aa8:	a5 e5       	ldi	r26, 0x55	; 85
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	e5 e5       	ldi	r30, 0x55	; 85
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	8d 7f       	andi	r24, 0xFD	; 253
    1ab4:	8c 93       	st	X, r24
						SET_BIT(MCUCR,MCUCR_ISC00);
    1ab6:	a5 e5       	ldi	r26, 0x55	; 85
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	e5 e5       	ldi	r30, 0x55	; 85
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	81 60       	ori	r24, 0x01	; 1
    1ac2:	8c 93       	st	X, r24
    1ac4:	8b c0       	rjmp	.+278    	; 0x1bdc <EXTI_u8SetSenseControl+0x228>

						break;
					case EXTI_INT1 :

						CLR_BIT(MCUCR,MCUCR_ISC11);
    1ac6:	a5 e5       	ldi	r26, 0x55	; 85
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	e5 e5       	ldi	r30, 0x55	; 85
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	87 7f       	andi	r24, 0xF7	; 247
    1ad2:	8c 93       	st	X, r24
						SET_BIT(MCUCR,MCUCR_ISC10);
    1ad4:	a5 e5       	ldi	r26, 0x55	; 85
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	e5 e5       	ldi	r30, 0x55	; 85
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	84 60       	ori	r24, 0x04	; 4
    1ae0:	8c 93       	st	X, r24
    1ae2:	7c c0       	rjmp	.+248    	; 0x1bdc <EXTI_u8SetSenseControl+0x228>

						break;
					case EXTI_INT2 :

						Local_u8ErrorState = 2 ;
    1ae4:	82 e0       	ldi	r24, 0x02	; 2
    1ae6:	89 83       	std	Y+1, r24	; 0x01
    1ae8:	79 c0       	rjmp	.+242    	; 0x1bdc <EXTI_u8SetSenseControl+0x228>

						break;
					default : Local_u8ErrorState = NOK ;
    1aea:	19 82       	std	Y+1, r1	; 0x01
    1aec:	77 c0       	rjmp	.+238    	; 0x1bdc <EXTI_u8SetSenseControl+0x228>
					}
			break;
		case EXTI_FALLING_EDGE :
			switch (Copy_u8IntNumber)
    1aee:	8a 81       	ldd	r24, Y+2	; 0x02
    1af0:	28 2f       	mov	r18, r24
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	3f 83       	std	Y+7, r19	; 0x07
    1af6:	2e 83       	std	Y+6, r18	; 0x06
    1af8:	8e 81       	ldd	r24, Y+6	; 0x06
    1afa:	9f 81       	ldd	r25, Y+7	; 0x07
    1afc:	81 30       	cpi	r24, 0x01	; 1
    1afe:	91 05       	cpc	r25, r1
    1b00:	c1 f0       	breq	.+48     	; 0x1b32 <EXTI_u8SetSenseControl+0x17e>
    1b02:	2e 81       	ldd	r18, Y+6	; 0x06
    1b04:	3f 81       	ldd	r19, Y+7	; 0x07
    1b06:	22 30       	cpi	r18, 0x02	; 2
    1b08:	31 05       	cpc	r19, r1
    1b0a:	11 f1       	breq	.+68     	; 0x1b50 <EXTI_u8SetSenseControl+0x19c>
    1b0c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b0e:	9f 81       	ldd	r25, Y+7	; 0x07
    1b10:	00 97       	sbiw	r24, 0x00	; 0
    1b12:	31 f5       	brne	.+76     	; 0x1b60 <EXTI_u8SetSenseControl+0x1ac>
					{
					case EXTI_INT0 :

						SET_BIT(MCUCR,MCUCR_ISC01);
    1b14:	a5 e5       	ldi	r26, 0x55	; 85
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	e5 e5       	ldi	r30, 0x55	; 85
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	82 60       	ori	r24, 0x02	; 2
    1b20:	8c 93       	st	X, r24
						CLR_BIT(MCUCR,MCUCR_ISC00);
    1b22:	a5 e5       	ldi	r26, 0x55	; 85
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	e5 e5       	ldi	r30, 0x55	; 85
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	8e 7f       	andi	r24, 0xFE	; 254
    1b2e:	8c 93       	st	X, r24
    1b30:	55 c0       	rjmp	.+170    	; 0x1bdc <EXTI_u8SetSenseControl+0x228>

						break;
					case EXTI_INT1 :

						SET_BIT(MCUCR,MCUCR_ISC11);
    1b32:	a5 e5       	ldi	r26, 0x55	; 85
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	e5 e5       	ldi	r30, 0x55	; 85
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	88 60       	ori	r24, 0x08	; 8
    1b3e:	8c 93       	st	X, r24
						CLR_BIT(MCUCR,MCUCR_ISC10);
    1b40:	a5 e5       	ldi	r26, 0x55	; 85
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	e5 e5       	ldi	r30, 0x55	; 85
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	8b 7f       	andi	r24, 0xFB	; 251
    1b4c:	8c 93       	st	X, r24
    1b4e:	46 c0       	rjmp	.+140    	; 0x1bdc <EXTI_u8SetSenseControl+0x228>

						break;
					case EXTI_INT2 :

						CLR_BIT(MCUCSR,MCUCSR_INT2);
    1b50:	a4 e5       	ldi	r26, 0x54	; 84
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	e4 e5       	ldi	r30, 0x54	; 84
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	8f 7b       	andi	r24, 0xBF	; 191
    1b5c:	8c 93       	st	X, r24
    1b5e:	3e c0       	rjmp	.+124    	; 0x1bdc <EXTI_u8SetSenseControl+0x228>

						break;
					default : Local_u8ErrorState = NOK ;
    1b60:	19 82       	std	Y+1, r1	; 0x01
    1b62:	3c c0       	rjmp	.+120    	; 0x1bdc <EXTI_u8SetSenseControl+0x228>
					}
			break;
		case EXTI_RISING_EDGE :
		switch (Copy_u8IntNumber)
    1b64:	8a 81       	ldd	r24, Y+2	; 0x02
    1b66:	28 2f       	mov	r18, r24
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	3d 83       	std	Y+5, r19	; 0x05
    1b6c:	2c 83       	std	Y+4, r18	; 0x04
    1b6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b70:	9d 81       	ldd	r25, Y+5	; 0x05
    1b72:	81 30       	cpi	r24, 0x01	; 1
    1b74:	91 05       	cpc	r25, r1
    1b76:	c1 f0       	breq	.+48     	; 0x1ba8 <EXTI_u8SetSenseControl+0x1f4>
    1b78:	2c 81       	ldd	r18, Y+4	; 0x04
    1b7a:	3d 81       	ldd	r19, Y+5	; 0x05
    1b7c:	22 30       	cpi	r18, 0x02	; 2
    1b7e:	31 05       	cpc	r19, r1
    1b80:	11 f1       	breq	.+68     	; 0x1bc6 <EXTI_u8SetSenseControl+0x212>
    1b82:	8c 81       	ldd	r24, Y+4	; 0x04
    1b84:	9d 81       	ldd	r25, Y+5	; 0x05
    1b86:	00 97       	sbiw	r24, 0x00	; 0
    1b88:	31 f5       	brne	.+76     	; 0x1bd6 <EXTI_u8SetSenseControl+0x222>
				{
				case EXTI_INT0 :

					SET_BIT(MCUCR,MCUCR_ISC01);
    1b8a:	a5 e5       	ldi	r26, 0x55	; 85
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	e5 e5       	ldi	r30, 0x55	; 85
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	82 60       	ori	r24, 0x02	; 2
    1b96:	8c 93       	st	X, r24
					SET_BIT(MCUCR,MCUCR_ISC00);
    1b98:	a5 e5       	ldi	r26, 0x55	; 85
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	e5 e5       	ldi	r30, 0x55	; 85
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	81 60       	ori	r24, 0x01	; 1
    1ba4:	8c 93       	st	X, r24
    1ba6:	1a c0       	rjmp	.+52     	; 0x1bdc <EXTI_u8SetSenseControl+0x228>

					break;
				case EXTI_INT1 :

					SET_BIT(MCUCR,MCUCR_ISC11);
    1ba8:	a5 e5       	ldi	r26, 0x55	; 85
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	e5 e5       	ldi	r30, 0x55	; 85
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	88 60       	ori	r24, 0x08	; 8
    1bb4:	8c 93       	st	X, r24
					SET_BIT(MCUCR,MCUCR_ISC10);
    1bb6:	a5 e5       	ldi	r26, 0x55	; 85
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	e5 e5       	ldi	r30, 0x55	; 85
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	84 60       	ori	r24, 0x04	; 4
    1bc2:	8c 93       	st	X, r24
    1bc4:	0b c0       	rjmp	.+22     	; 0x1bdc <EXTI_u8SetSenseControl+0x228>

					break;
				case EXTI_INT2 :

					SET_BIT(MCUCSR,MCUCSR_INT2);
    1bc6:	a4 e5       	ldi	r26, 0x54	; 84
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	e4 e5       	ldi	r30, 0x54	; 84
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	80 64       	ori	r24, 0x40	; 64
    1bd2:	8c 93       	st	X, r24
    1bd4:	03 c0       	rjmp	.+6      	; 0x1bdc <EXTI_u8SetSenseControl+0x228>

					break;
				default : Local_u8ErrorState = NOK ;
    1bd6:	19 82       	std	Y+1, r1	; 0x01
    1bd8:	01 c0       	rjmp	.+2      	; 0x1bdc <EXTI_u8SetSenseControl+0x228>
				}
		    break;
		default : Local_u8ErrorState = NOK ;
    1bda:	19 82       	std	Y+1, r1	; 0x01

	}

	return Local_u8ErrorState ;
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bde:	2d 96       	adiw	r28, 0x0d	; 13
    1be0:	0f b6       	in	r0, 0x3f	; 63
    1be2:	f8 94       	cli
    1be4:	de bf       	out	0x3e, r29	; 62
    1be6:	0f be       	out	0x3f, r0	; 63
    1be8:	cd bf       	out	0x3d, r28	; 61
    1bea:	cf 91       	pop	r28
    1bec:	df 91       	pop	r29
    1bee:	08 95       	ret

00001bf0 <EXTI_u8Int0SetCallBack>:

u8 EXTI_u8Int0SetCallBack(void (*Copy_pvInt0Func)(void))
{
    1bf0:	df 93       	push	r29
    1bf2:	cf 93       	push	r28
    1bf4:	00 d0       	rcall	.+0      	; 0x1bf6 <EXTI_u8Int0SetCallBack+0x6>
    1bf6:	0f 92       	push	r0
    1bf8:	cd b7       	in	r28, 0x3d	; 61
    1bfa:	de b7       	in	r29, 0x3e	; 62
    1bfc:	9b 83       	std	Y+3, r25	; 0x03
    1bfe:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_pvInt0Func != NULL)
    1c04:	8a 81       	ldd	r24, Y+2	; 0x02
    1c06:	9b 81       	ldd	r25, Y+3	; 0x03
    1c08:	00 97       	sbiw	r24, 0x00	; 0
    1c0a:	39 f0       	breq	.+14     	; 0x1c1a <EXTI_u8Int0SetCallBack+0x2a>
	{
		EXTI_pvInt0PtrFunc = Copy_pvInt0Func;
    1c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c10:	90 93 a9 00 	sts	0x00A9, r25
    1c14:	80 93 a8 00 	sts	0x00A8, r24
    1c18:	02 c0       	rjmp	.+4      	; 0x1c1e <EXTI_u8Int0SetCallBack+0x2e>
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER;
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1c1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c20:	0f 90       	pop	r0
    1c22:	0f 90       	pop	r0
    1c24:	0f 90       	pop	r0
    1c26:	cf 91       	pop	r28
    1c28:	df 91       	pop	r29
    1c2a:	08 95       	ret

00001c2c <EXTI_u8Int1SetCallBack>:
u8 EXTI_u8Int1SetCallBack(void (*Copy_pvInt1Func)(void))
{
    1c2c:	df 93       	push	r29
    1c2e:	cf 93       	push	r28
    1c30:	00 d0       	rcall	.+0      	; 0x1c32 <EXTI_u8Int1SetCallBack+0x6>
    1c32:	0f 92       	push	r0
    1c34:	cd b7       	in	r28, 0x3d	; 61
    1c36:	de b7       	in	r29, 0x3e	; 62
    1c38:	9b 83       	std	Y+3, r25	; 0x03
    1c3a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	89 83       	std	Y+1, r24	; 0x01

		if(Copy_pvInt1Func != NULL)
    1c40:	8a 81       	ldd	r24, Y+2	; 0x02
    1c42:	9b 81       	ldd	r25, Y+3	; 0x03
    1c44:	00 97       	sbiw	r24, 0x00	; 0
    1c46:	39 f0       	breq	.+14     	; 0x1c56 <EXTI_u8Int1SetCallBack+0x2a>
		{
			EXTI_pvInt0PtrFunc = Copy_pvInt1Func;
    1c48:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c4c:	90 93 a9 00 	sts	0x00A9, r25
    1c50:	80 93 a8 00 	sts	0x00A8, r24
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <EXTI_u8Int1SetCallBack+0x2e>
		}
		else
		{
			Local_u8ErrorState = NULL_POINTER;
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_u8ErrorState;
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c5c:	0f 90       	pop	r0
    1c5e:	0f 90       	pop	r0
    1c60:	0f 90       	pop	r0
    1c62:	cf 91       	pop	r28
    1c64:	df 91       	pop	r29
    1c66:	08 95       	ret

00001c68 <EXTI_u8Int2SetCallBack>:
u8 EXTI_u8Int2SetCallBack(void (*Copy_pvInt2Func)(void))
{
    1c68:	df 93       	push	r29
    1c6a:	cf 93       	push	r28
    1c6c:	00 d0       	rcall	.+0      	; 0x1c6e <EXTI_u8Int2SetCallBack+0x6>
    1c6e:	0f 92       	push	r0
    1c70:	cd b7       	in	r28, 0x3d	; 61
    1c72:	de b7       	in	r29, 0x3e	; 62
    1c74:	9b 83       	std	Y+3, r25	; 0x03
    1c76:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	89 83       	std	Y+1, r24	; 0x01

		if(Copy_pvInt2Func != NULL)
    1c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c80:	00 97       	sbiw	r24, 0x00	; 0
    1c82:	39 f0       	breq	.+14     	; 0x1c92 <EXTI_u8Int2SetCallBack+0x2a>
		{
			EXTI_pvInt0PtrFunc = Copy_pvInt2Func;
    1c84:	8a 81       	ldd	r24, Y+2	; 0x02
    1c86:	9b 81       	ldd	r25, Y+3	; 0x03
    1c88:	90 93 a9 00 	sts	0x00A9, r25
    1c8c:	80 93 a8 00 	sts	0x00A8, r24
    1c90:	02 c0       	rjmp	.+4      	; 0x1c96 <EXTI_u8Int2SetCallBack+0x2e>
		}
		else
		{
			Local_u8ErrorState = NULL_POINTER;
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_u8ErrorState;
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	0f 90       	pop	r0
    1c9e:	cf 91       	pop	r28
    1ca0:	df 91       	pop	r29
    1ca2:	08 95       	ret

00001ca4 <__vector_1>:

void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
    1ca4:	1f 92       	push	r1
    1ca6:	0f 92       	push	r0
    1ca8:	0f b6       	in	r0, 0x3f	; 63
    1caa:	0f 92       	push	r0
    1cac:	11 24       	eor	r1, r1
    1cae:	2f 93       	push	r18
    1cb0:	3f 93       	push	r19
    1cb2:	4f 93       	push	r20
    1cb4:	5f 93       	push	r21
    1cb6:	6f 93       	push	r22
    1cb8:	7f 93       	push	r23
    1cba:	8f 93       	push	r24
    1cbc:	9f 93       	push	r25
    1cbe:	af 93       	push	r26
    1cc0:	bf 93       	push	r27
    1cc2:	ef 93       	push	r30
    1cc4:	ff 93       	push	r31
    1cc6:	df 93       	push	r29
    1cc8:	cf 93       	push	r28
    1cca:	cd b7       	in	r28, 0x3d	; 61
    1ccc:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_pvInt0PtrFunc != NULL)
    1cce:	80 91 a8 00 	lds	r24, 0x00A8
    1cd2:	90 91 a9 00 	lds	r25, 0x00A9
    1cd6:	00 97       	sbiw	r24, 0x00	; 0
    1cd8:	29 f0       	breq	.+10     	; 0x1ce4 <__vector_1+0x40>
	{
		EXTI_pvInt0PtrFunc();
    1cda:	e0 91 a8 00 	lds	r30, 0x00A8
    1cde:	f0 91 a9 00 	lds	r31, 0x00A9
    1ce2:	09 95       	icall
	}
	else
	{

	}
}
    1ce4:	cf 91       	pop	r28
    1ce6:	df 91       	pop	r29
    1ce8:	ff 91       	pop	r31
    1cea:	ef 91       	pop	r30
    1cec:	bf 91       	pop	r27
    1cee:	af 91       	pop	r26
    1cf0:	9f 91       	pop	r25
    1cf2:	8f 91       	pop	r24
    1cf4:	7f 91       	pop	r23
    1cf6:	6f 91       	pop	r22
    1cf8:	5f 91       	pop	r21
    1cfa:	4f 91       	pop	r20
    1cfc:	3f 91       	pop	r19
    1cfe:	2f 91       	pop	r18
    1d00:	0f 90       	pop	r0
    1d02:	0f be       	out	0x3f, r0	; 63
    1d04:	0f 90       	pop	r0
    1d06:	1f 90       	pop	r1
    1d08:	18 95       	reti

00001d0a <__vector_2>:

void __vector_2 (void) __attribute__((signal));
void __vector_2 (void)
{
    1d0a:	1f 92       	push	r1
    1d0c:	0f 92       	push	r0
    1d0e:	0f b6       	in	r0, 0x3f	; 63
    1d10:	0f 92       	push	r0
    1d12:	11 24       	eor	r1, r1
    1d14:	2f 93       	push	r18
    1d16:	3f 93       	push	r19
    1d18:	4f 93       	push	r20
    1d1a:	5f 93       	push	r21
    1d1c:	6f 93       	push	r22
    1d1e:	7f 93       	push	r23
    1d20:	8f 93       	push	r24
    1d22:	9f 93       	push	r25
    1d24:	af 93       	push	r26
    1d26:	bf 93       	push	r27
    1d28:	ef 93       	push	r30
    1d2a:	ff 93       	push	r31
    1d2c:	df 93       	push	r29
    1d2e:	cf 93       	push	r28
    1d30:	cd b7       	in	r28, 0x3d	; 61
    1d32:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_pvInt1PtrFunc != NULL)
    1d34:	80 91 aa 00 	lds	r24, 0x00AA
    1d38:	90 91 ab 00 	lds	r25, 0x00AB
    1d3c:	00 97       	sbiw	r24, 0x00	; 0
    1d3e:	29 f0       	breq	.+10     	; 0x1d4a <__vector_2+0x40>
	{
		EXTI_pvInt1PtrFunc();
    1d40:	e0 91 aa 00 	lds	r30, 0x00AA
    1d44:	f0 91 ab 00 	lds	r31, 0x00AB
    1d48:	09 95       	icall
	}
	else
	{

	}
}
    1d4a:	cf 91       	pop	r28
    1d4c:	df 91       	pop	r29
    1d4e:	ff 91       	pop	r31
    1d50:	ef 91       	pop	r30
    1d52:	bf 91       	pop	r27
    1d54:	af 91       	pop	r26
    1d56:	9f 91       	pop	r25
    1d58:	8f 91       	pop	r24
    1d5a:	7f 91       	pop	r23
    1d5c:	6f 91       	pop	r22
    1d5e:	5f 91       	pop	r21
    1d60:	4f 91       	pop	r20
    1d62:	3f 91       	pop	r19
    1d64:	2f 91       	pop	r18
    1d66:	0f 90       	pop	r0
    1d68:	0f be       	out	0x3f, r0	; 63
    1d6a:	0f 90       	pop	r0
    1d6c:	1f 90       	pop	r1
    1d6e:	18 95       	reti

00001d70 <__vector_3>:

void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
    1d70:	1f 92       	push	r1
    1d72:	0f 92       	push	r0
    1d74:	0f b6       	in	r0, 0x3f	; 63
    1d76:	0f 92       	push	r0
    1d78:	11 24       	eor	r1, r1
    1d7a:	2f 93       	push	r18
    1d7c:	3f 93       	push	r19
    1d7e:	4f 93       	push	r20
    1d80:	5f 93       	push	r21
    1d82:	6f 93       	push	r22
    1d84:	7f 93       	push	r23
    1d86:	8f 93       	push	r24
    1d88:	9f 93       	push	r25
    1d8a:	af 93       	push	r26
    1d8c:	bf 93       	push	r27
    1d8e:	ef 93       	push	r30
    1d90:	ff 93       	push	r31
    1d92:	df 93       	push	r29
    1d94:	cf 93       	push	r28
    1d96:	cd b7       	in	r28, 0x3d	; 61
    1d98:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_pvInt2PtrFunc != NULL)
    1d9a:	80 91 ac 00 	lds	r24, 0x00AC
    1d9e:	90 91 ad 00 	lds	r25, 0x00AD
    1da2:	00 97       	sbiw	r24, 0x00	; 0
    1da4:	29 f0       	breq	.+10     	; 0x1db0 <__vector_3+0x40>
	{
		EXTI_pvInt2PtrFunc();
    1da6:	e0 91 ac 00 	lds	r30, 0x00AC
    1daa:	f0 91 ad 00 	lds	r31, 0x00AD
    1dae:	09 95       	icall
	}
	else
	{

	}
}
    1db0:	cf 91       	pop	r28
    1db2:	df 91       	pop	r29
    1db4:	ff 91       	pop	r31
    1db6:	ef 91       	pop	r30
    1db8:	bf 91       	pop	r27
    1dba:	af 91       	pop	r26
    1dbc:	9f 91       	pop	r25
    1dbe:	8f 91       	pop	r24
    1dc0:	7f 91       	pop	r23
    1dc2:	6f 91       	pop	r22
    1dc4:	5f 91       	pop	r21
    1dc6:	4f 91       	pop	r20
    1dc8:	3f 91       	pop	r19
    1dca:	2f 91       	pop	r18
    1dcc:	0f 90       	pop	r0
    1dce:	0f be       	out	0x3f, r0	; 63
    1dd0:	0f 90       	pop	r0
    1dd2:	1f 90       	pop	r1
    1dd4:	18 95       	reti

00001dd6 <HSWITCH_VidInit_PullUP>:
 */

#include"../../MCAL/MDIO/MDIO_Interface.h"
#include"HSWITCH_Interface.h"
void HSWITCH_VidInit_PullUP(SWITCH_t *Copy_SWITCH_tSwitch)
{
    1dd6:	df 93       	push	r29
    1dd8:	cf 93       	push	r28
    1dda:	00 d0       	rcall	.+0      	; 0x1ddc <HSWITCH_VidInit_PullUP+0x6>
    1ddc:	cd b7       	in	r28, 0x3d	; 61
    1dde:	de b7       	in	r29, 0x3e	; 62
    1de0:	9a 83       	std	Y+2, r25	; 0x02
    1de2:	89 83       	std	Y+1, r24	; 0x01
 /*Set pin direction*/
  /*Active Pull up resistor*/
  MDIO_VidActivePullUP(Copy_SWITCH_tSwitch->Copy_u8PinNumber, Copy_SWITCH_tSwitch->Copy_u8PortNumber);
    1de4:	e9 81       	ldd	r30, Y+1	; 0x01
    1de6:	fa 81       	ldd	r31, Y+2	; 0x02
    1de8:	81 81       	ldd	r24, Z+1	; 0x01
    1dea:	e9 81       	ldd	r30, Y+1	; 0x01
    1dec:	fa 81       	ldd	r31, Y+2	; 0x02
    1dee:	90 81       	ld	r25, Z
    1df0:	69 2f       	mov	r22, r25
    1df2:	0e 94 93 0b 	call	0x1726	; 0x1726 <MDIO_VidActivePullUP>
}
    1df6:	0f 90       	pop	r0
    1df8:	0f 90       	pop	r0
    1dfa:	cf 91       	pop	r28
    1dfc:	df 91       	pop	r29
    1dfe:	08 95       	ret

00001e00 <HSWITCH_u8SwitchState>:

/*get Switch Value*/
u8 HSWITCH_u8SwitchState(SWITCH_t *Copy_SWITCH_tSwitch)
{
    1e00:	df 93       	push	r29
    1e02:	cf 93       	push	r28
    1e04:	00 d0       	rcall	.+0      	; 0x1e06 <HSWITCH_u8SwitchState+0x6>
    1e06:	0f 92       	push	r0
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
    1e0c:	9b 83       	std	Y+3, r25	; 0x03
    1e0e:	8a 83       	std	Y+2, r24	; 0x02
       /*Default state for Switch NOT_PRESSED = 1 IN PULL UP RESISTANCE*/
     u8 Copy_u8Pinvalue = 1 ;
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	89 83       	std	Y+1, r24	; 0x01

	MDIO_Error_State_GetPinValue(Copy_SWITCH_tSwitch->Copy_u8PinNumber, Copy_SWITCH_tSwitch->Copy_u8PortNumber,&Copy_u8Pinvalue);
    1e14:	ea 81       	ldd	r30, Y+2	; 0x02
    1e16:	fb 81       	ldd	r31, Y+3	; 0x03
    1e18:	81 81       	ldd	r24, Z+1	; 0x01
    1e1a:	ea 81       	ldd	r30, Y+2	; 0x02
    1e1c:	fb 81       	ldd	r31, Y+3	; 0x03
    1e1e:	90 81       	ld	r25, Z
    1e20:	69 2f       	mov	r22, r25
    1e22:	9e 01       	movw	r18, r28
    1e24:	2f 5f       	subi	r18, 0xFF	; 255
    1e26:	3f 4f       	sbci	r19, 0xFF	; 255
    1e28:	a9 01       	movw	r20, r18
    1e2a:	0e 94 17 0a 	call	0x142e	; 0x142e <MDIO_Error_State_GetPinValue>


return Copy_u8Pinvalue ;
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e30:	0f 90       	pop	r0
    1e32:	0f 90       	pop	r0
    1e34:	0f 90       	pop	r0
    1e36:	cf 91       	pop	r28
    1e38:	df 91       	pop	r29
    1e3a:	08 95       	ret

00001e3c <HSEVEN_SEGMENT_VidInit>:



/*Seven Segment initialization*/
void HSEVEN_SEGMENT_VidInit(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG)
{
    1e3c:	df 93       	push	r29
    1e3e:	cf 93       	push	r28
    1e40:	00 d0       	rcall	.+0      	; 0x1e42 <HSEVEN_SEGMENT_VidInit+0x6>
    1e42:	cd b7       	in	r28, 0x3d	; 61
    1e44:	de b7       	in	r29, 0x3e	; 62
    1e46:	9a 83       	std	Y+2, r25	; 0x02
    1e48:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPortDirection(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,PORT_OUTPUT);
    1e4a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e4c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e4e:	80 81       	ld	r24, Z
    1e50:	6f ef       	ldi	r22, 0xFF	; 255
    1e52:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <MDIO_Error_State_SetPortDirection>
}
    1e56:	0f 90       	pop	r0
    1e58:	0f 90       	pop	r0
    1e5a:	cf 91       	pop	r28
    1e5c:	df 91       	pop	r29
    1e5e:	08 95       	ret

00001e60 <HSEVEN_SEGMENT_VidOff>:

/*Seven Segment OFF*/
void HSEVEN_SEGMENT_VidOff(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG,u8 Copy_u8Off)
{
    1e60:	df 93       	push	r29
    1e62:	cf 93       	push	r28
    1e64:	00 d0       	rcall	.+0      	; 0x1e66 <HSEVEN_SEGMENT_VidOff+0x6>
    1e66:	0f 92       	push	r0
    1e68:	cd b7       	in	r28, 0x3d	; 61
    1e6a:	de b7       	in	r29, 0x3e	; 62
    1e6c:	9a 83       	std	Y+2, r25	; 0x02
    1e6e:	89 83       	std	Y+1, r24	; 0x01
    1e70:	6b 83       	std	Y+3, r22	; 0x03
	if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_CATHODE)
    1e72:	e9 81       	ldd	r30, Y+1	; 0x01
    1e74:	fa 81       	ldd	r31, Y+2	; 0x02
    1e76:	81 81       	ldd	r24, Z+1	; 0x01
    1e78:	81 30       	cpi	r24, 0x01	; 1
    1e7a:	31 f4       	brne	.+12     	; 0x1e88 <HSEVEN_SEGMENT_VidOff+0x28>
	{
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,Copy_u8Off);
    1e7c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e7e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e80:	80 81       	ld	r24, Z
    1e82:	6b 81       	ldd	r22, Y+3	; 0x03
    1e84:	0e 94 cf 09 	call	0x139e	; 0x139e <MDIO_Error_State_SetPortValue>
	}
	if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_ANODE)
    1e88:	e9 81       	ldd	r30, Y+1	; 0x01
    1e8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e8c:	81 81       	ldd	r24, Z+1	; 0x01
    1e8e:	88 23       	and	r24, r24
    1e90:	51 f4       	brne	.+20     	; 0x1ea6 <HSEVEN_SEGMENT_VidOff+0x46>
	{
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~Copy_u8Off);
    1e92:	e9 81       	ldd	r30, Y+1	; 0x01
    1e94:	fa 81       	ldd	r31, Y+2	; 0x02
    1e96:	20 81       	ld	r18, Z
    1e98:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9a:	98 2f       	mov	r25, r24
    1e9c:	90 95       	com	r25
    1e9e:	82 2f       	mov	r24, r18
    1ea0:	69 2f       	mov	r22, r25
    1ea2:	0e 94 cf 09 	call	0x139e	; 0x139e <MDIO_Error_State_SetPortValue>
	}
}
    1ea6:	0f 90       	pop	r0
    1ea8:	0f 90       	pop	r0
    1eaa:	0f 90       	pop	r0
    1eac:	cf 91       	pop	r28
    1eae:	df 91       	pop	r29
    1eb0:	08 95       	ret

00001eb2 <HSEVEN_SEGMENT_VidDisplayNumber>:



/*Display a Number */
void HSEVEN_SEGMENT_VidDisplayNumber(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG,u8 Copy_u8Number)
{
    1eb2:	df 93       	push	r29
    1eb4:	cf 93       	push	r28
    1eb6:	cd b7       	in	r28, 0x3d	; 61
    1eb8:	de b7       	in	r29, 0x3e	; 62
    1eba:	27 97       	sbiw	r28, 0x07	; 7
    1ebc:	0f b6       	in	r0, 0x3f	; 63
    1ebe:	f8 94       	cli
    1ec0:	de bf       	out	0x3e, r29	; 62
    1ec2:	0f be       	out	0x3f, r0	; 63
    1ec4:	cd bf       	out	0x3d, r28	; 61
    1ec6:	9a 83       	std	Y+2, r25	; 0x02
    1ec8:	89 83       	std	Y+1, r24	; 0x01
    1eca:	6b 83       	std	Y+3, r22	; 0x03
if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_CATHODE)
    1ecc:	e9 81       	ldd	r30, Y+1	; 0x01
    1ece:	fa 81       	ldd	r31, Y+2	; 0x02
    1ed0:	81 81       	ldd	r24, Z+1	; 0x01
    1ed2:	81 30       	cpi	r24, 0x01	; 1
    1ed4:	09 f0       	breq	.+2      	; 0x1ed8 <HSEVEN_SEGMENT_VidDisplayNumber+0x26>
    1ed6:	9b c0       	rjmp	.+310    	; 0x200e <HSEVEN_SEGMENT_VidDisplayNumber+0x15c>
{
	switch(Copy_u8Number)
    1ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eda:	28 2f       	mov	r18, r24
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	3f 83       	std	Y+7, r19	; 0x07
    1ee0:	2e 83       	std	Y+6, r18	; 0x06
    1ee2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ee4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ee6:	84 30       	cpi	r24, 0x04	; 4
    1ee8:	91 05       	cpc	r25, r1
    1eea:	09 f4       	brne	.+2      	; 0x1eee <HSEVEN_SEGMENT_VidDisplayNumber+0x3c>
    1eec:	5f c0       	rjmp	.+190    	; 0x1fac <HSEVEN_SEGMENT_VidDisplayNumber+0xfa>
    1eee:	2e 81       	ldd	r18, Y+6	; 0x06
    1ef0:	3f 81       	ldd	r19, Y+7	; 0x07
    1ef2:	25 30       	cpi	r18, 0x05	; 5
    1ef4:	31 05       	cpc	r19, r1
    1ef6:	dc f4       	brge	.+54     	; 0x1f2e <HSEVEN_SEGMENT_VidDisplayNumber+0x7c>
    1ef8:	8e 81       	ldd	r24, Y+6	; 0x06
    1efa:	9f 81       	ldd	r25, Y+7	; 0x07
    1efc:	81 30       	cpi	r24, 0x01	; 1
    1efe:	91 05       	cpc	r25, r1
    1f00:	09 f4       	brne	.+2      	; 0x1f04 <HSEVEN_SEGMENT_VidDisplayNumber+0x52>
    1f02:	3f c0       	rjmp	.+126    	; 0x1f82 <HSEVEN_SEGMENT_VidDisplayNumber+0xd0>
    1f04:	2e 81       	ldd	r18, Y+6	; 0x06
    1f06:	3f 81       	ldd	r19, Y+7	; 0x07
    1f08:	22 30       	cpi	r18, 0x02	; 2
    1f0a:	31 05       	cpc	r19, r1
    1f0c:	2c f4       	brge	.+10     	; 0x1f18 <HSEVEN_SEGMENT_VidDisplayNumber+0x66>
    1f0e:	8e 81       	ldd	r24, Y+6	; 0x06
    1f10:	9f 81       	ldd	r25, Y+7	; 0x07
    1f12:	00 97       	sbiw	r24, 0x00	; 0
    1f14:	79 f1       	breq	.+94     	; 0x1f74 <HSEVEN_SEGMENT_VidDisplayNumber+0xc2>
    1f16:	74 c0       	rjmp	.+232    	; 0x2000 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    1f18:	2e 81       	ldd	r18, Y+6	; 0x06
    1f1a:	3f 81       	ldd	r19, Y+7	; 0x07
    1f1c:	22 30       	cpi	r18, 0x02	; 2
    1f1e:	31 05       	cpc	r19, r1
    1f20:	b9 f1       	breq	.+110    	; 0x1f90 <HSEVEN_SEGMENT_VidDisplayNumber+0xde>
    1f22:	8e 81       	ldd	r24, Y+6	; 0x06
    1f24:	9f 81       	ldd	r25, Y+7	; 0x07
    1f26:	83 30       	cpi	r24, 0x03	; 3
    1f28:	91 05       	cpc	r25, r1
    1f2a:	c9 f1       	breq	.+114    	; 0x1f9e <HSEVEN_SEGMENT_VidDisplayNumber+0xec>
    1f2c:	69 c0       	rjmp	.+210    	; 0x2000 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    1f2e:	2e 81       	ldd	r18, Y+6	; 0x06
    1f30:	3f 81       	ldd	r19, Y+7	; 0x07
    1f32:	27 30       	cpi	r18, 0x07	; 7
    1f34:	31 05       	cpc	r19, r1
    1f36:	09 f4       	brne	.+2      	; 0x1f3a <HSEVEN_SEGMENT_VidDisplayNumber+0x88>
    1f38:	4e c0       	rjmp	.+156    	; 0x1fd6 <HSEVEN_SEGMENT_VidDisplayNumber+0x124>
    1f3a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f3c:	9f 81       	ldd	r25, Y+7	; 0x07
    1f3e:	88 30       	cpi	r24, 0x08	; 8
    1f40:	91 05       	cpc	r25, r1
    1f42:	5c f4       	brge	.+22     	; 0x1f5a <HSEVEN_SEGMENT_VidDisplayNumber+0xa8>
    1f44:	2e 81       	ldd	r18, Y+6	; 0x06
    1f46:	3f 81       	ldd	r19, Y+7	; 0x07
    1f48:	25 30       	cpi	r18, 0x05	; 5
    1f4a:	31 05       	cpc	r19, r1
    1f4c:	b1 f1       	breq	.+108    	; 0x1fba <HSEVEN_SEGMENT_VidDisplayNumber+0x108>
    1f4e:	8e 81       	ldd	r24, Y+6	; 0x06
    1f50:	9f 81       	ldd	r25, Y+7	; 0x07
    1f52:	86 30       	cpi	r24, 0x06	; 6
    1f54:	91 05       	cpc	r25, r1
    1f56:	c1 f1       	breq	.+112    	; 0x1fc8 <HSEVEN_SEGMENT_VidDisplayNumber+0x116>
    1f58:	53 c0       	rjmp	.+166    	; 0x2000 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    1f5a:	2e 81       	ldd	r18, Y+6	; 0x06
    1f5c:	3f 81       	ldd	r19, Y+7	; 0x07
    1f5e:	28 30       	cpi	r18, 0x08	; 8
    1f60:	31 05       	cpc	r19, r1
    1f62:	09 f4       	brne	.+2      	; 0x1f66 <HSEVEN_SEGMENT_VidDisplayNumber+0xb4>
    1f64:	3f c0       	rjmp	.+126    	; 0x1fe4 <HSEVEN_SEGMENT_VidDisplayNumber+0x132>
    1f66:	8e 81       	ldd	r24, Y+6	; 0x06
    1f68:	9f 81       	ldd	r25, Y+7	; 0x07
    1f6a:	89 30       	cpi	r24, 0x09	; 9
    1f6c:	91 05       	cpc	r25, r1
    1f6e:	09 f4       	brne	.+2      	; 0x1f72 <HSEVEN_SEGMENT_VidDisplayNumber+0xc0>
    1f70:	40 c0       	rjmp	.+128    	; 0x1ff2 <HSEVEN_SEGMENT_VidDisplayNumber+0x140>
    1f72:	46 c0       	rjmp	.+140    	; 0x2000 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
	{
	case 0:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ZERO);
    1f74:	e9 81       	ldd	r30, Y+1	; 0x01
    1f76:	fa 81       	ldd	r31, Y+2	; 0x02
    1f78:	80 81       	ld	r24, Z
    1f7a:	6f e3       	ldi	r22, 0x3F	; 63
    1f7c:	0e 94 cf 09 	call	0x139e	; 0x139e <MDIO_Error_State_SetPortValue>
    1f80:	e6 c0       	rjmp	.+460    	; 0x214e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 1:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ONE);
    1f82:	e9 81       	ldd	r30, Y+1	; 0x01
    1f84:	fa 81       	ldd	r31, Y+2	; 0x02
    1f86:	80 81       	ld	r24, Z
    1f88:	66 e0       	ldi	r22, 0x06	; 6
    1f8a:	0e 94 cf 09 	call	0x139e	; 0x139e <MDIO_Error_State_SetPortValue>
    1f8e:	df c0       	rjmp	.+446    	; 0x214e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 2:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,TWO);
    1f90:	e9 81       	ldd	r30, Y+1	; 0x01
    1f92:	fa 81       	ldd	r31, Y+2	; 0x02
    1f94:	80 81       	ld	r24, Z
    1f96:	6b e5       	ldi	r22, 0x5B	; 91
    1f98:	0e 94 cf 09 	call	0x139e	; 0x139e <MDIO_Error_State_SetPortValue>
    1f9c:	d8 c0       	rjmp	.+432    	; 0x214e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 3:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,THREE);
    1f9e:	e9 81       	ldd	r30, Y+1	; 0x01
    1fa0:	fa 81       	ldd	r31, Y+2	; 0x02
    1fa2:	80 81       	ld	r24, Z
    1fa4:	6f e4       	ldi	r22, 0x4F	; 79
    1fa6:	0e 94 cf 09 	call	0x139e	; 0x139e <MDIO_Error_State_SetPortValue>
    1faa:	d1 c0       	rjmp	.+418    	; 0x214e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 4:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,FOUR);
    1fac:	e9 81       	ldd	r30, Y+1	; 0x01
    1fae:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb0:	80 81       	ld	r24, Z
    1fb2:	66 e6       	ldi	r22, 0x66	; 102
    1fb4:	0e 94 cf 09 	call	0x139e	; 0x139e <MDIO_Error_State_SetPortValue>
    1fb8:	ca c0       	rjmp	.+404    	; 0x214e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 5:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,FIVE);
    1fba:	e9 81       	ldd	r30, Y+1	; 0x01
    1fbc:	fa 81       	ldd	r31, Y+2	; 0x02
    1fbe:	80 81       	ld	r24, Z
    1fc0:	6d e6       	ldi	r22, 0x6D	; 109
    1fc2:	0e 94 cf 09 	call	0x139e	; 0x139e <MDIO_Error_State_SetPortValue>
    1fc6:	c3 c0       	rjmp	.+390    	; 0x214e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 6:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,SIX);
    1fc8:	e9 81       	ldd	r30, Y+1	; 0x01
    1fca:	fa 81       	ldd	r31, Y+2	; 0x02
    1fcc:	80 81       	ld	r24, Z
    1fce:	6d e7       	ldi	r22, 0x7D	; 125
    1fd0:	0e 94 cf 09 	call	0x139e	; 0x139e <MDIO_Error_State_SetPortValue>
    1fd4:	bc c0       	rjmp	.+376    	; 0x214e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 7:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,SEVEN);
    1fd6:	e9 81       	ldd	r30, Y+1	; 0x01
    1fd8:	fa 81       	ldd	r31, Y+2	; 0x02
    1fda:	80 81       	ld	r24, Z
    1fdc:	67 e0       	ldi	r22, 0x07	; 7
    1fde:	0e 94 cf 09 	call	0x139e	; 0x139e <MDIO_Error_State_SetPortValue>
    1fe2:	b5 c0       	rjmp	.+362    	; 0x214e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 8:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,EIGHT);
    1fe4:	e9 81       	ldd	r30, Y+1	; 0x01
    1fe6:	fa 81       	ldd	r31, Y+2	; 0x02
    1fe8:	80 81       	ld	r24, Z
    1fea:	6f e7       	ldi	r22, 0x7F	; 127
    1fec:	0e 94 cf 09 	call	0x139e	; 0x139e <MDIO_Error_State_SetPortValue>
    1ff0:	ae c0       	rjmp	.+348    	; 0x214e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 9:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,NINE);
    1ff2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ff4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ff6:	80 81       	ld	r24, Z
    1ff8:	6f e6       	ldi	r22, 0x6F	; 111
    1ffa:	0e 94 cf 09 	call	0x139e	; 0x139e <MDIO_Error_State_SetPortValue>
    1ffe:	a7 c0       	rjmp	.+334    	; 0x214e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	default:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ERROR);
    2000:	e9 81       	ldd	r30, Y+1	; 0x01
    2002:	fa 81       	ldd	r31, Y+2	; 0x02
    2004:	80 81       	ld	r24, Z
    2006:	69 e7       	ldi	r22, 0x79	; 121
    2008:	0e 94 cf 09 	call	0x139e	; 0x139e <MDIO_Error_State_SetPortValue>
    200c:	a0 c0       	rjmp	.+320    	; 0x214e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
	}
}
else if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration==COMMON_ANODE)
    200e:	e9 81       	ldd	r30, Y+1	; 0x01
    2010:	fa 81       	ldd	r31, Y+2	; 0x02
    2012:	81 81       	ldd	r24, Z+1	; 0x01
    2014:	88 23       	and	r24, r24
    2016:	09 f0       	breq	.+2      	; 0x201a <HSEVEN_SEGMENT_VidDisplayNumber+0x168>
    2018:	9a c0       	rjmp	.+308    	; 0x214e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
{
	switch(Copy_u8Number)
    201a:	8b 81       	ldd	r24, Y+3	; 0x03
    201c:	28 2f       	mov	r18, r24
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	3d 83       	std	Y+5, r19	; 0x05
    2022:	2c 83       	std	Y+4, r18	; 0x04
    2024:	8c 81       	ldd	r24, Y+4	; 0x04
    2026:	9d 81       	ldd	r25, Y+5	; 0x05
    2028:	84 30       	cpi	r24, 0x04	; 4
    202a:	91 05       	cpc	r25, r1
    202c:	09 f4       	brne	.+2      	; 0x2030 <HSEVEN_SEGMENT_VidDisplayNumber+0x17e>
    202e:	5f c0       	rjmp	.+190    	; 0x20ee <HSEVEN_SEGMENT_VidDisplayNumber+0x23c>
    2030:	2c 81       	ldd	r18, Y+4	; 0x04
    2032:	3d 81       	ldd	r19, Y+5	; 0x05
    2034:	25 30       	cpi	r18, 0x05	; 5
    2036:	31 05       	cpc	r19, r1
    2038:	dc f4       	brge	.+54     	; 0x2070 <HSEVEN_SEGMENT_VidDisplayNumber+0x1be>
    203a:	8c 81       	ldd	r24, Y+4	; 0x04
    203c:	9d 81       	ldd	r25, Y+5	; 0x05
    203e:	81 30       	cpi	r24, 0x01	; 1
    2040:	91 05       	cpc	r25, r1
    2042:	09 f4       	brne	.+2      	; 0x2046 <HSEVEN_SEGMENT_VidDisplayNumber+0x194>
    2044:	3f c0       	rjmp	.+126    	; 0x20c4 <HSEVEN_SEGMENT_VidDisplayNumber+0x212>
    2046:	2c 81       	ldd	r18, Y+4	; 0x04
    2048:	3d 81       	ldd	r19, Y+5	; 0x05
    204a:	22 30       	cpi	r18, 0x02	; 2
    204c:	31 05       	cpc	r19, r1
    204e:	2c f4       	brge	.+10     	; 0x205a <HSEVEN_SEGMENT_VidDisplayNumber+0x1a8>
    2050:	8c 81       	ldd	r24, Y+4	; 0x04
    2052:	9d 81       	ldd	r25, Y+5	; 0x05
    2054:	00 97       	sbiw	r24, 0x00	; 0
    2056:	79 f1       	breq	.+94     	; 0x20b6 <HSEVEN_SEGMENT_VidDisplayNumber+0x204>
    2058:	74 c0       	rjmp	.+232    	; 0x2142 <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    205a:	2c 81       	ldd	r18, Y+4	; 0x04
    205c:	3d 81       	ldd	r19, Y+5	; 0x05
    205e:	22 30       	cpi	r18, 0x02	; 2
    2060:	31 05       	cpc	r19, r1
    2062:	b9 f1       	breq	.+110    	; 0x20d2 <HSEVEN_SEGMENT_VidDisplayNumber+0x220>
    2064:	8c 81       	ldd	r24, Y+4	; 0x04
    2066:	9d 81       	ldd	r25, Y+5	; 0x05
    2068:	83 30       	cpi	r24, 0x03	; 3
    206a:	91 05       	cpc	r25, r1
    206c:	c9 f1       	breq	.+114    	; 0x20e0 <HSEVEN_SEGMENT_VidDisplayNumber+0x22e>
    206e:	69 c0       	rjmp	.+210    	; 0x2142 <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    2070:	2c 81       	ldd	r18, Y+4	; 0x04
    2072:	3d 81       	ldd	r19, Y+5	; 0x05
    2074:	27 30       	cpi	r18, 0x07	; 7
    2076:	31 05       	cpc	r19, r1
    2078:	09 f4       	brne	.+2      	; 0x207c <HSEVEN_SEGMENT_VidDisplayNumber+0x1ca>
    207a:	4e c0       	rjmp	.+156    	; 0x2118 <HSEVEN_SEGMENT_VidDisplayNumber+0x266>
    207c:	8c 81       	ldd	r24, Y+4	; 0x04
    207e:	9d 81       	ldd	r25, Y+5	; 0x05
    2080:	88 30       	cpi	r24, 0x08	; 8
    2082:	91 05       	cpc	r25, r1
    2084:	5c f4       	brge	.+22     	; 0x209c <HSEVEN_SEGMENT_VidDisplayNumber+0x1ea>
    2086:	2c 81       	ldd	r18, Y+4	; 0x04
    2088:	3d 81       	ldd	r19, Y+5	; 0x05
    208a:	25 30       	cpi	r18, 0x05	; 5
    208c:	31 05       	cpc	r19, r1
    208e:	b1 f1       	breq	.+108    	; 0x20fc <HSEVEN_SEGMENT_VidDisplayNumber+0x24a>
    2090:	8c 81       	ldd	r24, Y+4	; 0x04
    2092:	9d 81       	ldd	r25, Y+5	; 0x05
    2094:	86 30       	cpi	r24, 0x06	; 6
    2096:	91 05       	cpc	r25, r1
    2098:	c1 f1       	breq	.+112    	; 0x210a <HSEVEN_SEGMENT_VidDisplayNumber+0x258>
    209a:	53 c0       	rjmp	.+166    	; 0x2142 <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    209c:	2c 81       	ldd	r18, Y+4	; 0x04
    209e:	3d 81       	ldd	r19, Y+5	; 0x05
    20a0:	28 30       	cpi	r18, 0x08	; 8
    20a2:	31 05       	cpc	r19, r1
    20a4:	09 f4       	brne	.+2      	; 0x20a8 <HSEVEN_SEGMENT_VidDisplayNumber+0x1f6>
    20a6:	3f c0       	rjmp	.+126    	; 0x2126 <HSEVEN_SEGMENT_VidDisplayNumber+0x274>
    20a8:	8c 81       	ldd	r24, Y+4	; 0x04
    20aa:	9d 81       	ldd	r25, Y+5	; 0x05
    20ac:	89 30       	cpi	r24, 0x09	; 9
    20ae:	91 05       	cpc	r25, r1
    20b0:	09 f4       	brne	.+2      	; 0x20b4 <HSEVEN_SEGMENT_VidDisplayNumber+0x202>
    20b2:	40 c0       	rjmp	.+128    	; 0x2134 <HSEVEN_SEGMENT_VidDisplayNumber+0x282>
    20b4:	46 c0       	rjmp	.+140    	; 0x2142 <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
	{
	case 0:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ZERO);
    20b6:	e9 81       	ldd	r30, Y+1	; 0x01
    20b8:	fa 81       	ldd	r31, Y+2	; 0x02
    20ba:	80 81       	ld	r24, Z
    20bc:	60 ec       	ldi	r22, 0xC0	; 192
    20be:	0e 94 cf 09 	call	0x139e	; 0x139e <MDIO_Error_State_SetPortValue>
    20c2:	45 c0       	rjmp	.+138    	; 0x214e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 1:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ONE);
    20c4:	e9 81       	ldd	r30, Y+1	; 0x01
    20c6:	fa 81       	ldd	r31, Y+2	; 0x02
    20c8:	80 81       	ld	r24, Z
    20ca:	69 ef       	ldi	r22, 0xF9	; 249
    20cc:	0e 94 cf 09 	call	0x139e	; 0x139e <MDIO_Error_State_SetPortValue>
    20d0:	3e c0       	rjmp	.+124    	; 0x214e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 2:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~TWO);
    20d2:	e9 81       	ldd	r30, Y+1	; 0x01
    20d4:	fa 81       	ldd	r31, Y+2	; 0x02
    20d6:	80 81       	ld	r24, Z
    20d8:	64 ea       	ldi	r22, 0xA4	; 164
    20da:	0e 94 cf 09 	call	0x139e	; 0x139e <MDIO_Error_State_SetPortValue>
    20de:	37 c0       	rjmp	.+110    	; 0x214e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 3:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~THREE);
    20e0:	e9 81       	ldd	r30, Y+1	; 0x01
    20e2:	fa 81       	ldd	r31, Y+2	; 0x02
    20e4:	80 81       	ld	r24, Z
    20e6:	60 eb       	ldi	r22, 0xB0	; 176
    20e8:	0e 94 cf 09 	call	0x139e	; 0x139e <MDIO_Error_State_SetPortValue>
    20ec:	30 c0       	rjmp	.+96     	; 0x214e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 4:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~FOUR);
    20ee:	e9 81       	ldd	r30, Y+1	; 0x01
    20f0:	fa 81       	ldd	r31, Y+2	; 0x02
    20f2:	80 81       	ld	r24, Z
    20f4:	69 e9       	ldi	r22, 0x99	; 153
    20f6:	0e 94 cf 09 	call	0x139e	; 0x139e <MDIO_Error_State_SetPortValue>
    20fa:	29 c0       	rjmp	.+82     	; 0x214e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 5:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~FIVE);
    20fc:	e9 81       	ldd	r30, Y+1	; 0x01
    20fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2100:	80 81       	ld	r24, Z
    2102:	62 e9       	ldi	r22, 0x92	; 146
    2104:	0e 94 cf 09 	call	0x139e	; 0x139e <MDIO_Error_State_SetPortValue>
    2108:	22 c0       	rjmp	.+68     	; 0x214e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 6:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~SIX);
    210a:	e9 81       	ldd	r30, Y+1	; 0x01
    210c:	fa 81       	ldd	r31, Y+2	; 0x02
    210e:	80 81       	ld	r24, Z
    2110:	62 e8       	ldi	r22, 0x82	; 130
    2112:	0e 94 cf 09 	call	0x139e	; 0x139e <MDIO_Error_State_SetPortValue>
    2116:	1b c0       	rjmp	.+54     	; 0x214e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 7:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~SEVEN);
    2118:	e9 81       	ldd	r30, Y+1	; 0x01
    211a:	fa 81       	ldd	r31, Y+2	; 0x02
    211c:	80 81       	ld	r24, Z
    211e:	68 ef       	ldi	r22, 0xF8	; 248
    2120:	0e 94 cf 09 	call	0x139e	; 0x139e <MDIO_Error_State_SetPortValue>
    2124:	14 c0       	rjmp	.+40     	; 0x214e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 8:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~EIGHT);
    2126:	e9 81       	ldd	r30, Y+1	; 0x01
    2128:	fa 81       	ldd	r31, Y+2	; 0x02
    212a:	80 81       	ld	r24, Z
    212c:	60 e8       	ldi	r22, 0x80	; 128
    212e:	0e 94 cf 09 	call	0x139e	; 0x139e <MDIO_Error_State_SetPortValue>
    2132:	0d c0       	rjmp	.+26     	; 0x214e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 9:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~NINE);
    2134:	e9 81       	ldd	r30, Y+1	; 0x01
    2136:	fa 81       	ldd	r31, Y+2	; 0x02
    2138:	80 81       	ld	r24, Z
    213a:	60 e9       	ldi	r22, 0x90	; 144
    213c:	0e 94 cf 09 	call	0x139e	; 0x139e <MDIO_Error_State_SetPortValue>
    2140:	06 c0       	rjmp	.+12     	; 0x214e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	default:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ERROR);
    2142:	e9 81       	ldd	r30, Y+1	; 0x01
    2144:	fa 81       	ldd	r31, Y+2	; 0x02
    2146:	80 81       	ld	r24, Z
    2148:	66 e8       	ldi	r22, 0x86	; 134
    214a:	0e 94 cf 09 	call	0x139e	; 0x139e <MDIO_Error_State_SetPortValue>
	}
}
}
    214e:	27 96       	adiw	r28, 0x07	; 7
    2150:	0f b6       	in	r0, 0x3f	; 63
    2152:	f8 94       	cli
    2154:	de bf       	out	0x3e, r29	; 62
    2156:	0f be       	out	0x3f, r0	; 63
    2158:	cd bf       	out	0x3d, r28	; 61
    215a:	cf 91       	pop	r28
    215c:	df 91       	pop	r29
    215e:	08 95       	ret

00002160 <HLED_VidInit>:
       "/"*Fill This Function*"/"
}
 */
///by using struct
void HLED_VidInit(LED_t *Copy_Led)
{
    2160:	df 93       	push	r29
    2162:	cf 93       	push	r28
    2164:	00 d0       	rcall	.+0      	; 0x2166 <HLED_VidInit+0x6>
    2166:	cd b7       	in	r28, 0x3d	; 61
    2168:	de b7       	in	r29, 0x3e	; 62
    216a:	9a 83       	std	Y+2, r25	; 0x02
    216c:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinDirection(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_OUTPUT);
    216e:	e9 81       	ldd	r30, Y+1	; 0x01
    2170:	fa 81       	ldd	r31, Y+2	; 0x02
    2172:	81 81       	ldd	r24, Z+1	; 0x01
    2174:	e9 81       	ldd	r30, Y+1	; 0x01
    2176:	fa 81       	ldd	r31, Y+2	; 0x02
    2178:	90 81       	ld	r25, Z
    217a:	69 2f       	mov	r22, r25
    217c:	41 e0       	ldi	r20, 0x01	; 1
    217e:	0e 94 79 07 	call	0xef2	; 0xef2 <MDIO_Error_State_SetPinDirection>
}
    2182:	0f 90       	pop	r0
    2184:	0f 90       	pop	r0
    2186:	cf 91       	pop	r28
    2188:	df 91       	pop	r29
    218a:	08 95       	ret

0000218c <HLED_VidLed_On>:

void HLED_VidLed_On(LED_t *Copy_Led)
{
    218c:	df 93       	push	r29
    218e:	cf 93       	push	r28
    2190:	00 d0       	rcall	.+0      	; 0x2192 <HLED_VidLed_On+0x6>
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
    2196:	9a 83       	std	Y+2, r25	; 0x02
    2198:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_HIGH);
    219a:	e9 81       	ldd	r30, Y+1	; 0x01
    219c:	fa 81       	ldd	r31, Y+2	; 0x02
    219e:	81 81       	ldd	r24, Z+1	; 0x01
    21a0:	e9 81       	ldd	r30, Y+1	; 0x01
    21a2:	fa 81       	ldd	r31, Y+2	; 0x02
    21a4:	90 81       	ld	r25, Z
    21a6:	69 2f       	mov	r22, r25
    21a8:	41 e0       	ldi	r20, 0x01	; 1
    21aa:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
}
    21ae:	0f 90       	pop	r0
    21b0:	0f 90       	pop	r0
    21b2:	cf 91       	pop	r28
    21b4:	df 91       	pop	r29
    21b6:	08 95       	ret

000021b8 <HLED_VidLed_Off>:

void HLED_VidLed_Off(LED_t *Copy_Led)
{
    21b8:	df 93       	push	r29
    21ba:	cf 93       	push	r28
    21bc:	00 d0       	rcall	.+0      	; 0x21be <HLED_VidLed_Off+0x6>
    21be:	cd b7       	in	r28, 0x3d	; 61
    21c0:	de b7       	in	r29, 0x3e	; 62
    21c2:	9a 83       	std	Y+2, r25	; 0x02
    21c4:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_LOW);
    21c6:	e9 81       	ldd	r30, Y+1	; 0x01
    21c8:	fa 81       	ldd	r31, Y+2	; 0x02
    21ca:	81 81       	ldd	r24, Z+1	; 0x01
    21cc:	e9 81       	ldd	r30, Y+1	; 0x01
    21ce:	fa 81       	ldd	r31, Y+2	; 0x02
    21d0:	90 81       	ld	r25, Z
    21d2:	69 2f       	mov	r22, r25
    21d4:	40 e0       	ldi	r20, 0x00	; 0
    21d6:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
}
    21da:	0f 90       	pop	r0
    21dc:	0f 90       	pop	r0
    21de:	cf 91       	pop	r28
    21e0:	df 91       	pop	r29
    21e2:	08 95       	ret

000021e4 <HLED_VidLed_Toggle>:
void HLED_VidLed_Toggle(LED_t *Copy_Led)
{
    21e4:	df 93       	push	r29
    21e6:	cf 93       	push	r28
    21e8:	00 d0       	rcall	.+0      	; 0x21ea <HLED_VidLed_Toggle+0x6>
    21ea:	cd b7       	in	r28, 0x3d	; 61
    21ec:	de b7       	in	r29, 0x3e	; 62
    21ee:	9a 83       	std	Y+2, r25	; 0x02
    21f0:	89 83       	std	Y+1, r24	; 0x01
	          /*Fill This Function*/
	/*Toggle Function*/
	static u8 Flag=0;
	if(Flag==0)
    21f2:	80 91 ae 00 	lds	r24, 0x00AE
    21f6:	88 23       	and	r24, r24
    21f8:	71 f4       	brne	.+28     	; 0x2216 <HLED_VidLed_Toggle+0x32>
	{
		MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_HIGH);
    21fa:	e9 81       	ldd	r30, Y+1	; 0x01
    21fc:	fa 81       	ldd	r31, Y+2	; 0x02
    21fe:	81 81       	ldd	r24, Z+1	; 0x01
    2200:	e9 81       	ldd	r30, Y+1	; 0x01
    2202:	fa 81       	ldd	r31, Y+2	; 0x02
    2204:	90 81       	ld	r25, Z
    2206:	69 2f       	mov	r22, r25
    2208:	41 e0       	ldi	r20, 0x01	; 1
    220a:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
		Flag=1;
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	80 93 ae 00 	sts	0x00AE, r24
    2214:	0c c0       	rjmp	.+24     	; 0x222e <HLED_VidLed_Toggle+0x4a>
	}
	else
	{
		MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_LOW);
    2216:	e9 81       	ldd	r30, Y+1	; 0x01
    2218:	fa 81       	ldd	r31, Y+2	; 0x02
    221a:	81 81       	ldd	r24, Z+1	; 0x01
    221c:	e9 81       	ldd	r30, Y+1	; 0x01
    221e:	fa 81       	ldd	r31, Y+2	; 0x02
    2220:	90 81       	ld	r25, Z
    2222:	69 2f       	mov	r22, r25
    2224:	40 e0       	ldi	r20, 0x00	; 0
    2226:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
		Flag=0;
    222a:	10 92 ae 00 	sts	0x00AE, r1
	}
}
    222e:	0f 90       	pop	r0
    2230:	0f 90       	pop	r0
    2232:	cf 91       	pop	r28
    2234:	df 91       	pop	r29
    2236:	08 95       	ret

00002238 <HKPD_VidInit>:
		},
};
/*KPD INIT*/

void HKPD_VidInit(void)
{
    2238:	df 93       	push	r29
    223a:	cf 93       	push	r28
    223c:	cd b7       	in	r28, 0x3d	; 61
    223e:	de b7       	in	r29, 0x3e	; 62
	/* Set Row Pins as an Input */
	MDIO_Error_State_SetPinDirection(ROW_PIN0,ROW_PORT,PIN_INPUT);
    2240:	80 e0       	ldi	r24, 0x00	; 0
    2242:	62 e0       	ldi	r22, 0x02	; 2
    2244:	40 e0       	ldi	r20, 0x00	; 0
    2246:	0e 94 79 07 	call	0xef2	; 0xef2 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(ROW_PIN1,ROW_PORT,PIN_INPUT);
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	62 e0       	ldi	r22, 0x02	; 2
    224e:	40 e0       	ldi	r20, 0x00	; 0
    2250:	0e 94 79 07 	call	0xef2	; 0xef2 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(ROW_PIN2,ROW_PORT,PIN_INPUT);
    2254:	82 e0       	ldi	r24, 0x02	; 2
    2256:	62 e0       	ldi	r22, 0x02	; 2
    2258:	40 e0       	ldi	r20, 0x00	; 0
    225a:	0e 94 79 07 	call	0xef2	; 0xef2 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(ROW_PIN3,ROW_PORT,PIN_INPUT);
    225e:	83 e0       	ldi	r24, 0x03	; 3
    2260:	62 e0       	ldi	r22, 0x02	; 2
    2262:	40 e0       	ldi	r20, 0x00	; 0
    2264:	0e 94 79 07 	call	0xef2	; 0xef2 <MDIO_Error_State_SetPinDirection>
	/* Set Column Pins as an Output */
	MDIO_Error_State_SetPinDirection(COL_PIN0,COL_PORT,PIN_OUTPUT);
    2268:	84 e0       	ldi	r24, 0x04	; 4
    226a:	62 e0       	ldi	r22, 0x02	; 2
    226c:	41 e0       	ldi	r20, 0x01	; 1
    226e:	0e 94 79 07 	call	0xef2	; 0xef2 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(COL_PIN1,COL_PORT,PIN_OUTPUT);
    2272:	85 e0       	ldi	r24, 0x05	; 5
    2274:	62 e0       	ldi	r22, 0x02	; 2
    2276:	41 e0       	ldi	r20, 0x01	; 1
    2278:	0e 94 79 07 	call	0xef2	; 0xef2 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(COL_PIN2,COL_PORT,PIN_OUTPUT);
    227c:	86 e0       	ldi	r24, 0x06	; 6
    227e:	62 e0       	ldi	r22, 0x02	; 2
    2280:	41 e0       	ldi	r20, 0x01	; 1
    2282:	0e 94 79 07 	call	0xef2	; 0xef2 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(COL_PIN3,COL_PORT,PIN_OUTPUT);
    2286:	87 e0       	ldi	r24, 0x07	; 7
    2288:	62 e0       	ldi	r22, 0x02	; 2
    228a:	41 e0       	ldi	r20, 0x01	; 1
    228c:	0e 94 79 07 	call	0xef2	; 0xef2 <MDIO_Error_State_SetPinDirection>
	/* Active Pull Up Resistor For Row Pins */
	MDIO_Error_State_SetPinValue(ROW_PIN0,ROW_PORT,PIN_HIGH);
    2290:	80 e0       	ldi	r24, 0x00	; 0
    2292:	62 e0       	ldi	r22, 0x02	; 2
    2294:	41 e0       	ldi	r20, 0x01	; 1
    2296:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(ROW_PIN1,ROW_PORT,PIN_HIGH);
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	62 e0       	ldi	r22, 0x02	; 2
    229e:	41 e0       	ldi	r20, 0x01	; 1
    22a0:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(ROW_PIN2,ROW_PORT,PIN_HIGH);
    22a4:	82 e0       	ldi	r24, 0x02	; 2
    22a6:	62 e0       	ldi	r22, 0x02	; 2
    22a8:	41 e0       	ldi	r20, 0x01	; 1
    22aa:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(ROW_PIN3,ROW_PORT,PIN_HIGH);
    22ae:	83 e0       	ldi	r24, 0x03	; 3
    22b0:	62 e0       	ldi	r22, 0x02	; 2
    22b2:	41 e0       	ldi	r20, 0x01	; 1
    22b4:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
	/* Initialize 4 Column Pins By Ones */
	MDIO_Error_State_SetPinValue(COL_PIN0,COL_PORT,PIN_HIGH);
    22b8:	84 e0       	ldi	r24, 0x04	; 4
    22ba:	62 e0       	ldi	r22, 0x02	; 2
    22bc:	41 e0       	ldi	r20, 0x01	; 1
    22be:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(COL_PIN1,COL_PORT,PIN_HIGH);
    22c2:	85 e0       	ldi	r24, 0x05	; 5
    22c4:	62 e0       	ldi	r22, 0x02	; 2
    22c6:	41 e0       	ldi	r20, 0x01	; 1
    22c8:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(COL_PIN2,COL_PORT,PIN_HIGH);
    22cc:	86 e0       	ldi	r24, 0x06	; 6
    22ce:	62 e0       	ldi	r22, 0x02	; 2
    22d0:	41 e0       	ldi	r20, 0x01	; 1
    22d2:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(COL_PIN3,COL_PORT,PIN_HIGH);
    22d6:	87 e0       	ldi	r24, 0x07	; 7
    22d8:	62 e0       	ldi	r22, 0x02	; 2
    22da:	41 e0       	ldi	r20, 0x01	; 1
    22dc:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>

}
    22e0:	cf 91       	pop	r28
    22e2:	df 91       	pop	r29
    22e4:	08 95       	ret

000022e6 <HKPD_U8GetKeyPressed>:
/*KPD Get Pressed*/
u8 HKPD_U8GetKeyPressed(void)
{
    22e6:	df 93       	push	r29
    22e8:	cf 93       	push	r28
    22ea:	cd b7       	in	r28, 0x3d	; 61
    22ec:	de b7       	in	r29, 0x3e	; 62
    22ee:	62 97       	sbiw	r28, 0x12	; 18
    22f0:	0f b6       	in	r0, 0x3f	; 63
    22f2:	f8 94       	cli
    22f4:	de bf       	out	0x3e, r29	; 62
    22f6:	0f be       	out	0x3f, r0	; 63
    22f8:	cd bf       	out	0x3d, r28	; 61
	u8 LOC_U8RowCount;
	u8 LOC_U8ColCount;
	/*Initialize the switch status to NOT PRESSED*/
	u8 LOC_U8ReturnValue=NOT_PRESSED;
    22fa:	8f ef       	ldi	r24, 0xFF	; 255
    22fc:	8f 87       	std	Y+15, r24	; 0x0f
	u8 LOC_U8PinState;
	while(1){
		/*Looping on columns of the keypad*/
		for(LOC_U8ColCount=COL_INIT;LOC_U8ColCount<COL_END;LOC_U8ColCount++)
    22fe:	84 e0       	ldi	r24, 0x04	; 4
    2300:	88 8b       	std	Y+16, r24	; 0x10
    2302:	b5 c0       	rjmp	.+362    	; 0x246e <HKPD_U8GetKeyPressed+0x188>
		{
			/*Active the Column */
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_LOW);
    2304:	88 89       	ldd	r24, Y+16	; 0x10
    2306:	62 e0       	ldi	r22, 0x02	; 2
    2308:	40 e0       	ldi	r20, 0x00	; 0
    230a:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			/*Loop to read the all row pins*/
			for(LOC_U8RowCount=ROW_INIT;LOC_U8RowCount<ROW_END;LOC_U8RowCount++)
    230e:	19 8a       	std	Y+17, r1	; 0x11
    2310:	a2 c0       	rjmp	.+324    	; 0x2456 <HKPD_U8GetKeyPressed+0x170>
			{
				/*check the status of the switch*/
				MDIO_Error_State_GetPinValue(LOC_U8RowCount,ROW_PORT,&LOC_U8PinState);
    2312:	9e 01       	movw	r18, r28
    2314:	2e 5e       	subi	r18, 0xEE	; 238
    2316:	3f 4f       	sbci	r19, 0xFF	; 255
    2318:	89 89       	ldd	r24, Y+17	; 0x11
    231a:	62 e0       	ldi	r22, 0x02	; 2
    231c:	a9 01       	movw	r20, r18
    231e:	0e 94 17 0a 	call	0x142e	; 0x142e <MDIO_Error_State_GetPinValue>
				if(LOC_U8PinState==0)
    2322:	8a 89       	ldd	r24, Y+18	; 0x12
    2324:	88 23       	and	r24, r24
    2326:	09 f0       	breq	.+2      	; 0x232a <HKPD_U8GetKeyPressed+0x44>
    2328:	93 c0       	rjmp	.+294    	; 0x2450 <HKPD_U8GetKeyPressed+0x16a>
				{
					/*Get the Value of the current pressed switch*/
					LOC_U8ReturnValue=KPD_u8SwitchVal[LOC_U8ColCount-COL_INIT][LOC_U8RowCount-ROW_INIT];
    232a:	88 89       	ldd	r24, Y+16	; 0x10
    232c:	88 2f       	mov	r24, r24
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	ac 01       	movw	r20, r24
    2332:	44 50       	subi	r20, 0x04	; 4
    2334:	50 40       	sbci	r21, 0x00	; 0
    2336:	89 89       	ldd	r24, Y+17	; 0x11
    2338:	28 2f       	mov	r18, r24
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	ca 01       	movw	r24, r20
    233e:	88 0f       	add	r24, r24
    2340:	99 1f       	adc	r25, r25
    2342:	88 0f       	add	r24, r24
    2344:	99 1f       	adc	r25, r25
    2346:	82 0f       	add	r24, r18
    2348:	93 1f       	adc	r25, r19
    234a:	fc 01       	movw	r30, r24
    234c:	e8 56       	subi	r30, 0x68	; 104
    234e:	ff 4f       	sbci	r31, 0xFF	; 255
    2350:	80 81       	ld	r24, Z
    2352:	8f 87       	std	Y+15, r24	; 0x0f
    2354:	08 c0       	rjmp	.+16     	; 0x2366 <HKPD_U8GetKeyPressed+0x80>
					/*wait until the switch is released(Single Press)*/
					while(LOC_U8PinState==0)
					{
						MDIO_Error_State_GetPinValue(LOC_U8RowCount,ROW_PORT,&LOC_U8PinState);
    2356:	9e 01       	movw	r18, r28
    2358:	2e 5e       	subi	r18, 0xEE	; 238
    235a:	3f 4f       	sbci	r19, 0xFF	; 255
    235c:	89 89       	ldd	r24, Y+17	; 0x11
    235e:	62 e0       	ldi	r22, 0x02	; 2
    2360:	a9 01       	movw	r20, r18
    2362:	0e 94 17 0a 	call	0x142e	; 0x142e <MDIO_Error_State_GetPinValue>
				if(LOC_U8PinState==0)
				{
					/*Get the Value of the current pressed switch*/
					LOC_U8ReturnValue=KPD_u8SwitchVal[LOC_U8ColCount-COL_INIT][LOC_U8RowCount-ROW_INIT];
					/*wait until the switch is released(Single Press)*/
					while(LOC_U8PinState==0)
    2366:	8a 89       	ldd	r24, Y+18	; 0x12
    2368:	88 23       	and	r24, r24
    236a:	a9 f3       	breq	.-22     	; 0x2356 <HKPD_U8GetKeyPressed+0x70>
    236c:	80 e0       	ldi	r24, 0x00	; 0
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	a0 e2       	ldi	r26, 0x20	; 32
    2372:	b1 e4       	ldi	r27, 0x41	; 65
    2374:	8b 87       	std	Y+11, r24	; 0x0b
    2376:	9c 87       	std	Y+12, r25	; 0x0c
    2378:	ad 87       	std	Y+13, r26	; 0x0d
    237a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    237c:	6b 85       	ldd	r22, Y+11	; 0x0b
    237e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2380:	8d 85       	ldd	r24, Y+13	; 0x0d
    2382:	9e 85       	ldd	r25, Y+14	; 0x0e
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	4a ef       	ldi	r20, 0xFA	; 250
    238a:	54 e4       	ldi	r21, 0x44	; 68
    238c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	8f 83       	std	Y+7, r24	; 0x07
    2396:	98 87       	std	Y+8, r25	; 0x08
    2398:	a9 87       	std	Y+9, r26	; 0x09
    239a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    239c:	6f 81       	ldd	r22, Y+7	; 0x07
    239e:	78 85       	ldd	r23, Y+8	; 0x08
    23a0:	89 85       	ldd	r24, Y+9	; 0x09
    23a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	40 e8       	ldi	r20, 0x80	; 128
    23aa:	5f e3       	ldi	r21, 0x3F	; 63
    23ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23b0:	88 23       	and	r24, r24
    23b2:	2c f4       	brge	.+10     	; 0x23be <HKPD_U8GetKeyPressed+0xd8>
		__ticks = 1;
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	9e 83       	std	Y+6, r25	; 0x06
    23ba:	8d 83       	std	Y+5, r24	; 0x05
    23bc:	3f c0       	rjmp	.+126    	; 0x243c <HKPD_U8GetKeyPressed+0x156>
	else if (__tmp > 65535)
    23be:	6f 81       	ldd	r22, Y+7	; 0x07
    23c0:	78 85       	ldd	r23, Y+8	; 0x08
    23c2:	89 85       	ldd	r24, Y+9	; 0x09
    23c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	3f ef       	ldi	r19, 0xFF	; 255
    23ca:	4f e7       	ldi	r20, 0x7F	; 127
    23cc:	57 e4       	ldi	r21, 0x47	; 71
    23ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23d2:	18 16       	cp	r1, r24
    23d4:	4c f5       	brge	.+82     	; 0x2428 <HKPD_U8GetKeyPressed+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    23d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    23da:	8d 85       	ldd	r24, Y+13	; 0x0d
    23dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	40 e2       	ldi	r20, 0x20	; 32
    23e4:	51 e4       	ldi	r21, 0x41	; 65
    23e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ea:	dc 01       	movw	r26, r24
    23ec:	cb 01       	movw	r24, r22
    23ee:	bc 01       	movw	r22, r24
    23f0:	cd 01       	movw	r24, r26
    23f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f6:	dc 01       	movw	r26, r24
    23f8:	cb 01       	movw	r24, r22
    23fa:	9e 83       	std	Y+6, r25	; 0x06
    23fc:	8d 83       	std	Y+5, r24	; 0x05
    23fe:	0f c0       	rjmp	.+30     	; 0x241e <HKPD_U8GetKeyPressed+0x138>
    2400:	88 ec       	ldi	r24, 0xC8	; 200
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	9c 83       	std	Y+4, r25	; 0x04
    2406:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2408:	8b 81       	ldd	r24, Y+3	; 0x03
    240a:	9c 81       	ldd	r25, Y+4	; 0x04
    240c:	01 97       	sbiw	r24, 0x01	; 1
    240e:	f1 f7       	brne	.-4      	; 0x240c <HKPD_U8GetKeyPressed+0x126>
    2410:	9c 83       	std	Y+4, r25	; 0x04
    2412:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2414:	8d 81       	ldd	r24, Y+5	; 0x05
    2416:	9e 81       	ldd	r25, Y+6	; 0x06
    2418:	01 97       	sbiw	r24, 0x01	; 1
    241a:	9e 83       	std	Y+6, r25	; 0x06
    241c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    241e:	8d 81       	ldd	r24, Y+5	; 0x05
    2420:	9e 81       	ldd	r25, Y+6	; 0x06
    2422:	00 97       	sbiw	r24, 0x00	; 0
    2424:	69 f7       	brne	.-38     	; 0x2400 <HKPD_U8GetKeyPressed+0x11a>
    2426:	14 c0       	rjmp	.+40     	; 0x2450 <HKPD_U8GetKeyPressed+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2428:	6f 81       	ldd	r22, Y+7	; 0x07
    242a:	78 85       	ldd	r23, Y+8	; 0x08
    242c:	89 85       	ldd	r24, Y+9	; 0x09
    242e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2430:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	9e 83       	std	Y+6, r25	; 0x06
    243a:	8d 83       	std	Y+5, r24	; 0x05
    243c:	8d 81       	ldd	r24, Y+5	; 0x05
    243e:	9e 81       	ldd	r25, Y+6	; 0x06
    2440:	9a 83       	std	Y+2, r25	; 0x02
    2442:	89 83       	std	Y+1, r24	; 0x01
    2444:	89 81       	ldd	r24, Y+1	; 0x01
    2446:	9a 81       	ldd	r25, Y+2	; 0x02
    2448:	01 97       	sbiw	r24, 0x01	; 1
    244a:	f1 f7       	brne	.-4      	; 0x2448 <HKPD_U8GetKeyPressed+0x162>
    244c:	9a 83       	std	Y+2, r25	; 0x02
    244e:	89 83       	std	Y+1, r24	; 0x01
		for(LOC_U8ColCount=COL_INIT;LOC_U8ColCount<COL_END;LOC_U8ColCount++)
		{
			/*Active the Column */
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_LOW);
			/*Loop to read the all row pins*/
			for(LOC_U8RowCount=ROW_INIT;LOC_U8RowCount<ROW_END;LOC_U8RowCount++)
    2450:	89 89       	ldd	r24, Y+17	; 0x11
    2452:	8f 5f       	subi	r24, 0xFF	; 255
    2454:	89 8b       	std	Y+17, r24	; 0x11
    2456:	89 89       	ldd	r24, Y+17	; 0x11
    2458:	84 30       	cpi	r24, 0x04	; 4
    245a:	08 f4       	brcc	.+2      	; 0x245e <HKPD_U8GetKeyPressed+0x178>
    245c:	5a cf       	rjmp	.-332    	; 0x2312 <HKPD_U8GetKeyPressed+0x2c>
				{
					/*Do Nothing*/
				}
			}
			/*Deactivate the Column*/
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_HIGH);
    245e:	88 89       	ldd	r24, Y+16	; 0x10
    2460:	62 e0       	ldi	r22, 0x02	; 2
    2462:	41 e0       	ldi	r20, 0x01	; 1
    2464:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
	/*Initialize the switch status to NOT PRESSED*/
	u8 LOC_U8ReturnValue=NOT_PRESSED;
	u8 LOC_U8PinState;
	while(1){
		/*Looping on columns of the keypad*/
		for(LOC_U8ColCount=COL_INIT;LOC_U8ColCount<COL_END;LOC_U8ColCount++)
    2468:	88 89       	ldd	r24, Y+16	; 0x10
    246a:	8f 5f       	subi	r24, 0xFF	; 255
    246c:	88 8b       	std	Y+16, r24	; 0x10
    246e:	88 89       	ldd	r24, Y+16	; 0x10
    2470:	88 30       	cpi	r24, 0x08	; 8
    2472:	08 f4       	brcc	.+2      	; 0x2476 <HKPD_U8GetKeyPressed+0x190>
    2474:	47 cf       	rjmp	.-370    	; 0x2304 <HKPD_U8GetKeyPressed+0x1e>
				}
			}
			/*Deactivate the Column*/
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_HIGH);
		}
	if(LOC_U8ReturnValue!=255)
    2476:	8f 85       	ldd	r24, Y+15	; 0x0f
    2478:	8f 3f       	cpi	r24, 0xFF	; 255
    247a:	09 f4       	brne	.+2      	; 0x247e <HKPD_U8GetKeyPressed+0x198>
    247c:	40 cf       	rjmp	.-384    	; 0x22fe <HKPD_U8GetKeyPressed+0x18>
		return LOC_U8ReturnValue;
    247e:	8f 85       	ldd	r24, Y+15	; 0x0f
	}



}
    2480:	62 96       	adiw	r28, 0x12	; 18
    2482:	0f b6       	in	r0, 0x3f	; 63
    2484:	f8 94       	cli
    2486:	de bf       	out	0x3e, r29	; 62
    2488:	0f be       	out	0x3f, r0	; 63
    248a:	cd bf       	out	0x3d, r28	; 61
    248c:	cf 91       	pop	r28
    248e:	df 91       	pop	r29
    2490:	08 95       	ret

00002492 <HCLCD_Vid8Bits_SendCommand>:


/*Send Command 8 Bits*/

void HCLCD_Vid8Bits_SendCommand(u8 Copy_u8Command)
{
    2492:	df 93       	push	r29
    2494:	cf 93       	push	r28
    2496:	cd b7       	in	r28, 0x3d	; 61
    2498:	de b7       	in	r29, 0x3e	; 62
    249a:	6d 97       	sbiw	r28, 0x1d	; 29
    249c:	0f b6       	in	r0, 0x3f	; 63
    249e:	f8 94       	cli
    24a0:	de bf       	out	0x3e, r29	; 62
    24a2:	0f be       	out	0x3f, r0	; 63
    24a4:	cd bf       	out	0x3d, r28	; 61
    24a6:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Select command register-->Write zero on RS Pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_LOW);
    24a8:	80 e0       	ldi	r24, 0x00	; 0
    24aa:	62 e0       	ldi	r22, 0x02	; 2
    24ac:	40 e0       	ldi	r20, 0x00	; 0
    24ae:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
	/**select Write mode--> Write zero on RW Pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	62 e0       	ldi	r22, 0x02	; 2
    24b6:	40 e0       	ldi	r20, 0x00	; 0
    24b8:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
	/*Send Command ON port Data*/
	MDIO_Error_State_SetPortValue(DATA_PORT,Copy_u8Command);
    24bc:	82 e0       	ldi	r24, 0x02	; 2
    24be:	6d 8d       	ldd	r22, Y+29	; 0x1d
    24c0:	0e 94 cf 09 	call	0x139e	; 0x139e <MDIO_Error_State_SetPortValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    24c4:	82 e0       	ldi	r24, 0x02	; 2
    24c6:	62 e0       	ldi	r22, 0x02	; 2
    24c8:	41 e0       	ldi	r20, 0x01	; 1
    24ca:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
    24ce:	80 e0       	ldi	r24, 0x00	; 0
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	a0 e0       	ldi	r26, 0x00	; 0
    24d4:	b0 e4       	ldi	r27, 0x40	; 64
    24d6:	89 8f       	std	Y+25, r24	; 0x19
    24d8:	9a 8f       	std	Y+26, r25	; 0x1a
    24da:	ab 8f       	std	Y+27, r26	; 0x1b
    24dc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24de:	69 8d       	ldd	r22, Y+25	; 0x19
    24e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	4a ef       	ldi	r20, 0xFA	; 250
    24ec:	54 e4       	ldi	r21, 0x44	; 68
    24ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f2:	dc 01       	movw	r26, r24
    24f4:	cb 01       	movw	r24, r22
    24f6:	8d 8b       	std	Y+21, r24	; 0x15
    24f8:	9e 8b       	std	Y+22, r25	; 0x16
    24fa:	af 8b       	std	Y+23, r26	; 0x17
    24fc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2500:	7e 89       	ldd	r23, Y+22	; 0x16
    2502:	8f 89       	ldd	r24, Y+23	; 0x17
    2504:	98 8d       	ldd	r25, Y+24	; 0x18
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	40 e8       	ldi	r20, 0x80	; 128
    250c:	5f e3       	ldi	r21, 0x3F	; 63
    250e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2512:	88 23       	and	r24, r24
    2514:	2c f4       	brge	.+10     	; 0x2520 <HCLCD_Vid8Bits_SendCommand+0x8e>
		__ticks = 1;
    2516:	81 e0       	ldi	r24, 0x01	; 1
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	9c 8b       	std	Y+20, r25	; 0x14
    251c:	8b 8b       	std	Y+19, r24	; 0x13
    251e:	3f c0       	rjmp	.+126    	; 0x259e <HCLCD_Vid8Bits_SendCommand+0x10c>
	else if (__tmp > 65535)
    2520:	6d 89       	ldd	r22, Y+21	; 0x15
    2522:	7e 89       	ldd	r23, Y+22	; 0x16
    2524:	8f 89       	ldd	r24, Y+23	; 0x17
    2526:	98 8d       	ldd	r25, Y+24	; 0x18
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	3f ef       	ldi	r19, 0xFF	; 255
    252c:	4f e7       	ldi	r20, 0x7F	; 127
    252e:	57 e4       	ldi	r21, 0x47	; 71
    2530:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2534:	18 16       	cp	r1, r24
    2536:	4c f5       	brge	.+82     	; 0x258a <HCLCD_Vid8Bits_SendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2538:	69 8d       	ldd	r22, Y+25	; 0x19
    253a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    253c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    253e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	40 e2       	ldi	r20, 0x20	; 32
    2546:	51 e4       	ldi	r21, 0x41	; 65
    2548:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	bc 01       	movw	r22, r24
    2552:	cd 01       	movw	r24, r26
    2554:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	9c 8b       	std	Y+20, r25	; 0x14
    255e:	8b 8b       	std	Y+19, r24	; 0x13
    2560:	0f c0       	rjmp	.+30     	; 0x2580 <HCLCD_Vid8Bits_SendCommand+0xee>
    2562:	88 ec       	ldi	r24, 0xC8	; 200
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	9a 8b       	std	Y+18, r25	; 0x12
    2568:	89 8b       	std	Y+17, r24	; 0x11
    256a:	89 89       	ldd	r24, Y+17	; 0x11
    256c:	9a 89       	ldd	r25, Y+18	; 0x12
    256e:	01 97       	sbiw	r24, 0x01	; 1
    2570:	f1 f7       	brne	.-4      	; 0x256e <HCLCD_Vid8Bits_SendCommand+0xdc>
    2572:	9a 8b       	std	Y+18, r25	; 0x12
    2574:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2576:	8b 89       	ldd	r24, Y+19	; 0x13
    2578:	9c 89       	ldd	r25, Y+20	; 0x14
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	9c 8b       	std	Y+20, r25	; 0x14
    257e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2580:	8b 89       	ldd	r24, Y+19	; 0x13
    2582:	9c 89       	ldd	r25, Y+20	; 0x14
    2584:	00 97       	sbiw	r24, 0x00	; 0
    2586:	69 f7       	brne	.-38     	; 0x2562 <HCLCD_Vid8Bits_SendCommand+0xd0>
    2588:	14 c0       	rjmp	.+40     	; 0x25b2 <HCLCD_Vid8Bits_SendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    258a:	6d 89       	ldd	r22, Y+21	; 0x15
    258c:	7e 89       	ldd	r23, Y+22	; 0x16
    258e:	8f 89       	ldd	r24, Y+23	; 0x17
    2590:	98 8d       	ldd	r25, Y+24	; 0x18
    2592:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2596:	dc 01       	movw	r26, r24
    2598:	cb 01       	movw	r24, r22
    259a:	9c 8b       	std	Y+20, r25	; 0x14
    259c:	8b 8b       	std	Y+19, r24	; 0x13
    259e:	8b 89       	ldd	r24, Y+19	; 0x13
    25a0:	9c 89       	ldd	r25, Y+20	; 0x14
    25a2:	98 8b       	std	Y+16, r25	; 0x10
    25a4:	8f 87       	std	Y+15, r24	; 0x0f
    25a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    25a8:	98 89       	ldd	r25, Y+16	; 0x10
    25aa:	01 97       	sbiw	r24, 0x01	; 1
    25ac:	f1 f7       	brne	.-4      	; 0x25aa <HCLCD_Vid8Bits_SendCommand+0x118>
    25ae:	98 8b       	std	Y+16, r25	; 0x10
    25b0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    25b2:	82 e0       	ldi	r24, 0x02	; 2
    25b4:	62 e0       	ldi	r22, 0x02	; 2
    25b6:	40 e0       	ldi	r20, 0x00	; 0
    25b8:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
    25bc:	80 e0       	ldi	r24, 0x00	; 0
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	a0 e0       	ldi	r26, 0x00	; 0
    25c2:	b0 e4       	ldi	r27, 0x40	; 64
    25c4:	8b 87       	std	Y+11, r24	; 0x0b
    25c6:	9c 87       	std	Y+12, r25	; 0x0c
    25c8:	ad 87       	std	Y+13, r26	; 0x0d
    25ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    25d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    25d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	4a ef       	ldi	r20, 0xFA	; 250
    25da:	54 e4       	ldi	r21, 0x44	; 68
    25dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e0:	dc 01       	movw	r26, r24
    25e2:	cb 01       	movw	r24, r22
    25e4:	8f 83       	std	Y+7, r24	; 0x07
    25e6:	98 87       	std	Y+8, r25	; 0x08
    25e8:	a9 87       	std	Y+9, r26	; 0x09
    25ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25ec:	6f 81       	ldd	r22, Y+7	; 0x07
    25ee:	78 85       	ldd	r23, Y+8	; 0x08
    25f0:	89 85       	ldd	r24, Y+9	; 0x09
    25f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f4:	20 e0       	ldi	r18, 0x00	; 0
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	40 e8       	ldi	r20, 0x80	; 128
    25fa:	5f e3       	ldi	r21, 0x3F	; 63
    25fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2600:	88 23       	and	r24, r24
    2602:	2c f4       	brge	.+10     	; 0x260e <HCLCD_Vid8Bits_SendCommand+0x17c>
		__ticks = 1;
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	9e 83       	std	Y+6, r25	; 0x06
    260a:	8d 83       	std	Y+5, r24	; 0x05
    260c:	3f c0       	rjmp	.+126    	; 0x268c <HCLCD_Vid8Bits_SendCommand+0x1fa>
	else if (__tmp > 65535)
    260e:	6f 81       	ldd	r22, Y+7	; 0x07
    2610:	78 85       	ldd	r23, Y+8	; 0x08
    2612:	89 85       	ldd	r24, Y+9	; 0x09
    2614:	9a 85       	ldd	r25, Y+10	; 0x0a
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	3f ef       	ldi	r19, 0xFF	; 255
    261a:	4f e7       	ldi	r20, 0x7F	; 127
    261c:	57 e4       	ldi	r21, 0x47	; 71
    261e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2622:	18 16       	cp	r1, r24
    2624:	4c f5       	brge	.+82     	; 0x2678 <HCLCD_Vid8Bits_SendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2626:	6b 85       	ldd	r22, Y+11	; 0x0b
    2628:	7c 85       	ldd	r23, Y+12	; 0x0c
    262a:	8d 85       	ldd	r24, Y+13	; 0x0d
    262c:	9e 85       	ldd	r25, Y+14	; 0x0e
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	40 e2       	ldi	r20, 0x20	; 32
    2634:	51 e4       	ldi	r21, 0x41	; 65
    2636:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    263a:	dc 01       	movw	r26, r24
    263c:	cb 01       	movw	r24, r22
    263e:	bc 01       	movw	r22, r24
    2640:	cd 01       	movw	r24, r26
    2642:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2646:	dc 01       	movw	r26, r24
    2648:	cb 01       	movw	r24, r22
    264a:	9e 83       	std	Y+6, r25	; 0x06
    264c:	8d 83       	std	Y+5, r24	; 0x05
    264e:	0f c0       	rjmp	.+30     	; 0x266e <HCLCD_Vid8Bits_SendCommand+0x1dc>
    2650:	88 ec       	ldi	r24, 0xC8	; 200
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	9c 83       	std	Y+4, r25	; 0x04
    2656:	8b 83       	std	Y+3, r24	; 0x03
    2658:	8b 81       	ldd	r24, Y+3	; 0x03
    265a:	9c 81       	ldd	r25, Y+4	; 0x04
    265c:	01 97       	sbiw	r24, 0x01	; 1
    265e:	f1 f7       	brne	.-4      	; 0x265c <HCLCD_Vid8Bits_SendCommand+0x1ca>
    2660:	9c 83       	std	Y+4, r25	; 0x04
    2662:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2664:	8d 81       	ldd	r24, Y+5	; 0x05
    2666:	9e 81       	ldd	r25, Y+6	; 0x06
    2668:	01 97       	sbiw	r24, 0x01	; 1
    266a:	9e 83       	std	Y+6, r25	; 0x06
    266c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    266e:	8d 81       	ldd	r24, Y+5	; 0x05
    2670:	9e 81       	ldd	r25, Y+6	; 0x06
    2672:	00 97       	sbiw	r24, 0x00	; 0
    2674:	69 f7       	brne	.-38     	; 0x2650 <HCLCD_Vid8Bits_SendCommand+0x1be>
    2676:	14 c0       	rjmp	.+40     	; 0x26a0 <HCLCD_Vid8Bits_SendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2678:	6f 81       	ldd	r22, Y+7	; 0x07
    267a:	78 85       	ldd	r23, Y+8	; 0x08
    267c:	89 85       	ldd	r24, Y+9	; 0x09
    267e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	9e 83       	std	Y+6, r25	; 0x06
    268a:	8d 83       	std	Y+5, r24	; 0x05
    268c:	8d 81       	ldd	r24, Y+5	; 0x05
    268e:	9e 81       	ldd	r25, Y+6	; 0x06
    2690:	9a 83       	std	Y+2, r25	; 0x02
    2692:	89 83       	std	Y+1, r24	; 0x01
    2694:	89 81       	ldd	r24, Y+1	; 0x01
    2696:	9a 81       	ldd	r25, Y+2	; 0x02
    2698:	01 97       	sbiw	r24, 0x01	; 1
    269a:	f1 f7       	brne	.-4      	; 0x2698 <HCLCD_Vid8Bits_SendCommand+0x206>
    269c:	9a 83       	std	Y+2, r25	; 0x02
    269e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    26a0:	82 e0       	ldi	r24, 0x02	; 2
    26a2:	62 e0       	ldi	r22, 0x02	; 2
    26a4:	41 e0       	ldi	r20, 0x01	; 1
    26a6:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
}
    26aa:	6d 96       	adiw	r28, 0x1d	; 29
    26ac:	0f b6       	in	r0, 0x3f	; 63
    26ae:	f8 94       	cli
    26b0:	de bf       	out	0x3e, r29	; 62
    26b2:	0f be       	out	0x3f, r0	; 63
    26b4:	cd bf       	out	0x3d, r28	; 61
    26b6:	cf 91       	pop	r28
    26b8:	df 91       	pop	r29
    26ba:	08 95       	ret

000026bc <HCLCD_Vid8Bits_Init>:

/*LCD 8 Bits Initialization*/
void HCLCD_Vid8Bits_Init(void)
{
    26bc:	df 93       	push	r29
    26be:	cf 93       	push	r28
    26c0:	cd b7       	in	r28, 0x3d	; 61
    26c2:	de b7       	in	r29, 0x3e	; 62
    26c4:	e8 97       	sbiw	r28, 0x38	; 56
    26c6:	0f b6       	in	r0, 0x3f	; 63
    26c8:	f8 94       	cli
    26ca:	de bf       	out	0x3e, r29	; 62
    26cc:	0f be       	out	0x3f, r0	; 63
    26ce:	cd bf       	out	0x3d, r28	; 61
	/*LCD Data and Control Port Initialization*/
	MDIO_Error_State_SetPortDirection(DATA_PORT,PORT_OUTPUT);
    26d0:	82 e0       	ldi	r24, 0x02	; 2
    26d2:	6f ef       	ldi	r22, 0xFF	; 255
    26d4:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <MDIO_Error_State_SetPortDirection>
	MDIO_Error_State_SetPinDirection(RS,CONTROL_PORT,PIN_OUTPUT);
    26d8:	80 e0       	ldi	r24, 0x00	; 0
    26da:	62 e0       	ldi	r22, 0x02	; 2
    26dc:	41 e0       	ldi	r20, 0x01	; 1
    26de:	0e 94 79 07 	call	0xef2	; 0xef2 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(RW,CONTROL_PORT,PIN_OUTPUT);
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	62 e0       	ldi	r22, 0x02	; 2
    26e6:	41 e0       	ldi	r20, 0x01	; 1
    26e8:	0e 94 79 07 	call	0xef2	; 0xef2 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(E,CONTROL_PORT,PIN_OUTPUT);
    26ec:	82 e0       	ldi	r24, 0x02	; 2
    26ee:	62 e0       	ldi	r22, 0x02	; 2
    26f0:	41 e0       	ldi	r20, 0x01	; 1
    26f2:	0e 94 79 07 	call	0xef2	; 0xef2 <MDIO_Error_State_SetPinDirection>
    26f6:	80 e0       	ldi	r24, 0x00	; 0
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	a0 ef       	ldi	r26, 0xF0	; 240
    26fc:	b1 e4       	ldi	r27, 0x41	; 65
    26fe:	8d ab       	std	Y+53, r24	; 0x35
    2700:	9e ab       	std	Y+54, r25	; 0x36
    2702:	af ab       	std	Y+55, r26	; 0x37
    2704:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2706:	6d a9       	ldd	r22, Y+53	; 0x35
    2708:	7e a9       	ldd	r23, Y+54	; 0x36
    270a:	8f a9       	ldd	r24, Y+55	; 0x37
    270c:	98 ad       	ldd	r25, Y+56	; 0x38
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	4a ef       	ldi	r20, 0xFA	; 250
    2714:	54 e4       	ldi	r21, 0x44	; 68
    2716:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	89 ab       	std	Y+49, r24	; 0x31
    2720:	9a ab       	std	Y+50, r25	; 0x32
    2722:	ab ab       	std	Y+51, r26	; 0x33
    2724:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2726:	69 a9       	ldd	r22, Y+49	; 0x31
    2728:	7a a9       	ldd	r23, Y+50	; 0x32
    272a:	8b a9       	ldd	r24, Y+51	; 0x33
    272c:	9c a9       	ldd	r25, Y+52	; 0x34
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	40 e8       	ldi	r20, 0x80	; 128
    2734:	5f e3       	ldi	r21, 0x3F	; 63
    2736:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    273a:	88 23       	and	r24, r24
    273c:	2c f4       	brge	.+10     	; 0x2748 <HCLCD_Vid8Bits_Init+0x8c>
		__ticks = 1;
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	98 ab       	std	Y+48, r25	; 0x30
    2744:	8f a7       	std	Y+47, r24	; 0x2f
    2746:	3f c0       	rjmp	.+126    	; 0x27c6 <HCLCD_Vid8Bits_Init+0x10a>
	else if (__tmp > 65535)
    2748:	69 a9       	ldd	r22, Y+49	; 0x31
    274a:	7a a9       	ldd	r23, Y+50	; 0x32
    274c:	8b a9       	ldd	r24, Y+51	; 0x33
    274e:	9c a9       	ldd	r25, Y+52	; 0x34
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	3f ef       	ldi	r19, 0xFF	; 255
    2754:	4f e7       	ldi	r20, 0x7F	; 127
    2756:	57 e4       	ldi	r21, 0x47	; 71
    2758:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    275c:	18 16       	cp	r1, r24
    275e:	4c f5       	brge	.+82     	; 0x27b2 <HCLCD_Vid8Bits_Init+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2760:	6d a9       	ldd	r22, Y+53	; 0x35
    2762:	7e a9       	ldd	r23, Y+54	; 0x36
    2764:	8f a9       	ldd	r24, Y+55	; 0x37
    2766:	98 ad       	ldd	r25, Y+56	; 0x38
    2768:	20 e0       	ldi	r18, 0x00	; 0
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	40 e2       	ldi	r20, 0x20	; 32
    276e:	51 e4       	ldi	r21, 0x41	; 65
    2770:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2774:	dc 01       	movw	r26, r24
    2776:	cb 01       	movw	r24, r22
    2778:	bc 01       	movw	r22, r24
    277a:	cd 01       	movw	r24, r26
    277c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	98 ab       	std	Y+48, r25	; 0x30
    2786:	8f a7       	std	Y+47, r24	; 0x2f
    2788:	0f c0       	rjmp	.+30     	; 0x27a8 <HCLCD_Vid8Bits_Init+0xec>
    278a:	88 ec       	ldi	r24, 0xC8	; 200
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	9e a7       	std	Y+46, r25	; 0x2e
    2790:	8d a7       	std	Y+45, r24	; 0x2d
    2792:	8d a5       	ldd	r24, Y+45	; 0x2d
    2794:	9e a5       	ldd	r25, Y+46	; 0x2e
    2796:	01 97       	sbiw	r24, 0x01	; 1
    2798:	f1 f7       	brne	.-4      	; 0x2796 <HCLCD_Vid8Bits_Init+0xda>
    279a:	9e a7       	std	Y+46, r25	; 0x2e
    279c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    279e:	8f a5       	ldd	r24, Y+47	; 0x2f
    27a0:	98 a9       	ldd	r25, Y+48	; 0x30
    27a2:	01 97       	sbiw	r24, 0x01	; 1
    27a4:	98 ab       	std	Y+48, r25	; 0x30
    27a6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    27aa:	98 a9       	ldd	r25, Y+48	; 0x30
    27ac:	00 97       	sbiw	r24, 0x00	; 0
    27ae:	69 f7       	brne	.-38     	; 0x278a <HCLCD_Vid8Bits_Init+0xce>
    27b0:	14 c0       	rjmp	.+40     	; 0x27da <HCLCD_Vid8Bits_Init+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b2:	69 a9       	ldd	r22, Y+49	; 0x31
    27b4:	7a a9       	ldd	r23, Y+50	; 0x32
    27b6:	8b a9       	ldd	r24, Y+51	; 0x33
    27b8:	9c a9       	ldd	r25, Y+52	; 0x34
    27ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27be:	dc 01       	movw	r26, r24
    27c0:	cb 01       	movw	r24, r22
    27c2:	98 ab       	std	Y+48, r25	; 0x30
    27c4:	8f a7       	std	Y+47, r24	; 0x2f
    27c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    27c8:	98 a9       	ldd	r25, Y+48	; 0x30
    27ca:	9c a7       	std	Y+44, r25	; 0x2c
    27cc:	8b a7       	std	Y+43, r24	; 0x2b
    27ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    27d0:	9c a5       	ldd	r25, Y+44	; 0x2c
    27d2:	01 97       	sbiw	r24, 0x01	; 1
    27d4:	f1 f7       	brne	.-4      	; 0x27d2 <HCLCD_Vid8Bits_Init+0x116>
    27d6:	9c a7       	std	Y+44, r25	; 0x2c
    27d8:	8b a7       	std	Y+43, r24	; 0x2b
	/*wait to 30 ms*/
	_delay_ms(30);
	/*Send function Send Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_FUNCTION_SET);
    27da:	88 e2       	ldi	r24, 0x28	; 40
    27dc:	0e 94 49 12 	call	0x2492	; 0x2492 <HCLCD_Vid8Bits_SendCommand>
    27e0:	80 e0       	ldi	r24, 0x00	; 0
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	a0 e8       	ldi	r26, 0x80	; 128
    27e6:	bf e3       	ldi	r27, 0x3F	; 63
    27e8:	8f a3       	std	Y+39, r24	; 0x27
    27ea:	98 a7       	std	Y+40, r25	; 0x28
    27ec:	a9 a7       	std	Y+41, r26	; 0x29
    27ee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f0:	6f a1       	ldd	r22, Y+39	; 0x27
    27f2:	78 a5       	ldd	r23, Y+40	; 0x28
    27f4:	89 a5       	ldd	r24, Y+41	; 0x29
    27f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	4a ef       	ldi	r20, 0xFA	; 250
    27fe:	54 e4       	ldi	r21, 0x44	; 68
    2800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2804:	dc 01       	movw	r26, r24
    2806:	cb 01       	movw	r24, r22
    2808:	8b a3       	std	Y+35, r24	; 0x23
    280a:	9c a3       	std	Y+36, r25	; 0x24
    280c:	ad a3       	std	Y+37, r26	; 0x25
    280e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2810:	6b a1       	ldd	r22, Y+35	; 0x23
    2812:	7c a1       	ldd	r23, Y+36	; 0x24
    2814:	8d a1       	ldd	r24, Y+37	; 0x25
    2816:	9e a1       	ldd	r25, Y+38	; 0x26
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	40 e8       	ldi	r20, 0x80	; 128
    281e:	5f e3       	ldi	r21, 0x3F	; 63
    2820:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2824:	88 23       	and	r24, r24
    2826:	2c f4       	brge	.+10     	; 0x2832 <HCLCD_Vid8Bits_Init+0x176>
		__ticks = 1;
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	9a a3       	std	Y+34, r25	; 0x22
    282e:	89 a3       	std	Y+33, r24	; 0x21
    2830:	3f c0       	rjmp	.+126    	; 0x28b0 <HCLCD_Vid8Bits_Init+0x1f4>
	else if (__tmp > 65535)
    2832:	6b a1       	ldd	r22, Y+35	; 0x23
    2834:	7c a1       	ldd	r23, Y+36	; 0x24
    2836:	8d a1       	ldd	r24, Y+37	; 0x25
    2838:	9e a1       	ldd	r25, Y+38	; 0x26
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	3f ef       	ldi	r19, 0xFF	; 255
    283e:	4f e7       	ldi	r20, 0x7F	; 127
    2840:	57 e4       	ldi	r21, 0x47	; 71
    2842:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2846:	18 16       	cp	r1, r24
    2848:	4c f5       	brge	.+82     	; 0x289c <HCLCD_Vid8Bits_Init+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    284a:	6f a1       	ldd	r22, Y+39	; 0x27
    284c:	78 a5       	ldd	r23, Y+40	; 0x28
    284e:	89 a5       	ldd	r24, Y+41	; 0x29
    2850:	9a a5       	ldd	r25, Y+42	; 0x2a
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	40 e2       	ldi	r20, 0x20	; 32
    2858:	51 e4       	ldi	r21, 0x41	; 65
    285a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    285e:	dc 01       	movw	r26, r24
    2860:	cb 01       	movw	r24, r22
    2862:	bc 01       	movw	r22, r24
    2864:	cd 01       	movw	r24, r26
    2866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	9a a3       	std	Y+34, r25	; 0x22
    2870:	89 a3       	std	Y+33, r24	; 0x21
    2872:	0f c0       	rjmp	.+30     	; 0x2892 <HCLCD_Vid8Bits_Init+0x1d6>
    2874:	88 ec       	ldi	r24, 0xC8	; 200
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	98 a3       	std	Y+32, r25	; 0x20
    287a:	8f 8f       	std	Y+31, r24	; 0x1f
    287c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    287e:	98 a1       	ldd	r25, Y+32	; 0x20
    2880:	01 97       	sbiw	r24, 0x01	; 1
    2882:	f1 f7       	brne	.-4      	; 0x2880 <HCLCD_Vid8Bits_Init+0x1c4>
    2884:	98 a3       	std	Y+32, r25	; 0x20
    2886:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2888:	89 a1       	ldd	r24, Y+33	; 0x21
    288a:	9a a1       	ldd	r25, Y+34	; 0x22
    288c:	01 97       	sbiw	r24, 0x01	; 1
    288e:	9a a3       	std	Y+34, r25	; 0x22
    2890:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2892:	89 a1       	ldd	r24, Y+33	; 0x21
    2894:	9a a1       	ldd	r25, Y+34	; 0x22
    2896:	00 97       	sbiw	r24, 0x00	; 0
    2898:	69 f7       	brne	.-38     	; 0x2874 <HCLCD_Vid8Bits_Init+0x1b8>
    289a:	14 c0       	rjmp	.+40     	; 0x28c4 <HCLCD_Vid8Bits_Init+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    289c:	6b a1       	ldd	r22, Y+35	; 0x23
    289e:	7c a1       	ldd	r23, Y+36	; 0x24
    28a0:	8d a1       	ldd	r24, Y+37	; 0x25
    28a2:	9e a1       	ldd	r25, Y+38	; 0x26
    28a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	9a a3       	std	Y+34, r25	; 0x22
    28ae:	89 a3       	std	Y+33, r24	; 0x21
    28b0:	89 a1       	ldd	r24, Y+33	; 0x21
    28b2:	9a a1       	ldd	r25, Y+34	; 0x22
    28b4:	9e 8f       	std	Y+30, r25	; 0x1e
    28b6:	8d 8f       	std	Y+29, r24	; 0x1d
    28b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28bc:	01 97       	sbiw	r24, 0x01	; 1
    28be:	f1 f7       	brne	.-4      	; 0x28bc <HCLCD_Vid8Bits_Init+0x200>
    28c0:	9e 8f       	std	Y+30, r25	; 0x1e
    28c2:	8d 8f       	std	Y+29, r24	; 0x1d
	/*wait to 30 ms*/
	_delay_ms(1);
	/*Send  Display on/off Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_DISPLAY_ON_OFF);
    28c4:	8c e0       	ldi	r24, 0x0C	; 12
    28c6:	0e 94 49 12 	call	0x2492	; 0x2492 <HCLCD_Vid8Bits_SendCommand>
    28ca:	80 e0       	ldi	r24, 0x00	; 0
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	a0 e8       	ldi	r26, 0x80	; 128
    28d0:	bf e3       	ldi	r27, 0x3F	; 63
    28d2:	89 8f       	std	Y+25, r24	; 0x19
    28d4:	9a 8f       	std	Y+26, r25	; 0x1a
    28d6:	ab 8f       	std	Y+27, r26	; 0x1b
    28d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28da:	69 8d       	ldd	r22, Y+25	; 0x19
    28dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	4a ef       	ldi	r20, 0xFA	; 250
    28e8:	54 e4       	ldi	r21, 0x44	; 68
    28ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ee:	dc 01       	movw	r26, r24
    28f0:	cb 01       	movw	r24, r22
    28f2:	8d 8b       	std	Y+21, r24	; 0x15
    28f4:	9e 8b       	std	Y+22, r25	; 0x16
    28f6:	af 8b       	std	Y+23, r26	; 0x17
    28f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28fa:	6d 89       	ldd	r22, Y+21	; 0x15
    28fc:	7e 89       	ldd	r23, Y+22	; 0x16
    28fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2900:	98 8d       	ldd	r25, Y+24	; 0x18
    2902:	20 e0       	ldi	r18, 0x00	; 0
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	40 e8       	ldi	r20, 0x80	; 128
    2908:	5f e3       	ldi	r21, 0x3F	; 63
    290a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    290e:	88 23       	and	r24, r24
    2910:	2c f4       	brge	.+10     	; 0x291c <HCLCD_Vid8Bits_Init+0x260>
		__ticks = 1;
    2912:	81 e0       	ldi	r24, 0x01	; 1
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	9c 8b       	std	Y+20, r25	; 0x14
    2918:	8b 8b       	std	Y+19, r24	; 0x13
    291a:	3f c0       	rjmp	.+126    	; 0x299a <HCLCD_Vid8Bits_Init+0x2de>
	else if (__tmp > 65535)
    291c:	6d 89       	ldd	r22, Y+21	; 0x15
    291e:	7e 89       	ldd	r23, Y+22	; 0x16
    2920:	8f 89       	ldd	r24, Y+23	; 0x17
    2922:	98 8d       	ldd	r25, Y+24	; 0x18
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	3f ef       	ldi	r19, 0xFF	; 255
    2928:	4f e7       	ldi	r20, 0x7F	; 127
    292a:	57 e4       	ldi	r21, 0x47	; 71
    292c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2930:	18 16       	cp	r1, r24
    2932:	4c f5       	brge	.+82     	; 0x2986 <HCLCD_Vid8Bits_Init+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2934:	69 8d       	ldd	r22, Y+25	; 0x19
    2936:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2938:	8b 8d       	ldd	r24, Y+27	; 0x1b
    293a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	40 e2       	ldi	r20, 0x20	; 32
    2942:	51 e4       	ldi	r21, 0x41	; 65
    2944:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2948:	dc 01       	movw	r26, r24
    294a:	cb 01       	movw	r24, r22
    294c:	bc 01       	movw	r22, r24
    294e:	cd 01       	movw	r24, r26
    2950:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2954:	dc 01       	movw	r26, r24
    2956:	cb 01       	movw	r24, r22
    2958:	9c 8b       	std	Y+20, r25	; 0x14
    295a:	8b 8b       	std	Y+19, r24	; 0x13
    295c:	0f c0       	rjmp	.+30     	; 0x297c <HCLCD_Vid8Bits_Init+0x2c0>
    295e:	88 ec       	ldi	r24, 0xC8	; 200
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	9a 8b       	std	Y+18, r25	; 0x12
    2964:	89 8b       	std	Y+17, r24	; 0x11
    2966:	89 89       	ldd	r24, Y+17	; 0x11
    2968:	9a 89       	ldd	r25, Y+18	; 0x12
    296a:	01 97       	sbiw	r24, 0x01	; 1
    296c:	f1 f7       	brne	.-4      	; 0x296a <HCLCD_Vid8Bits_Init+0x2ae>
    296e:	9a 8b       	std	Y+18, r25	; 0x12
    2970:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2972:	8b 89       	ldd	r24, Y+19	; 0x13
    2974:	9c 89       	ldd	r25, Y+20	; 0x14
    2976:	01 97       	sbiw	r24, 0x01	; 1
    2978:	9c 8b       	std	Y+20, r25	; 0x14
    297a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    297c:	8b 89       	ldd	r24, Y+19	; 0x13
    297e:	9c 89       	ldd	r25, Y+20	; 0x14
    2980:	00 97       	sbiw	r24, 0x00	; 0
    2982:	69 f7       	brne	.-38     	; 0x295e <HCLCD_Vid8Bits_Init+0x2a2>
    2984:	14 c0       	rjmp	.+40     	; 0x29ae <HCLCD_Vid8Bits_Init+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2986:	6d 89       	ldd	r22, Y+21	; 0x15
    2988:	7e 89       	ldd	r23, Y+22	; 0x16
    298a:	8f 89       	ldd	r24, Y+23	; 0x17
    298c:	98 8d       	ldd	r25, Y+24	; 0x18
    298e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2992:	dc 01       	movw	r26, r24
    2994:	cb 01       	movw	r24, r22
    2996:	9c 8b       	std	Y+20, r25	; 0x14
    2998:	8b 8b       	std	Y+19, r24	; 0x13
    299a:	8b 89       	ldd	r24, Y+19	; 0x13
    299c:	9c 89       	ldd	r25, Y+20	; 0x14
    299e:	98 8b       	std	Y+16, r25	; 0x10
    29a0:	8f 87       	std	Y+15, r24	; 0x0f
    29a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    29a4:	98 89       	ldd	r25, Y+16	; 0x10
    29a6:	01 97       	sbiw	r24, 0x01	; 1
    29a8:	f1 f7       	brne	.-4      	; 0x29a6 <HCLCD_Vid8Bits_Init+0x2ea>
    29aa:	98 8b       	std	Y+16, r25	; 0x10
    29ac:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*Send Display Clear Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_DISPLAY_CLEAR);
    29ae:	81 e0       	ldi	r24, 0x01	; 1
    29b0:	0e 94 49 12 	call	0x2492	; 0x2492 <HCLCD_Vid8Bits_SendCommand>
    29b4:	80 e0       	ldi	r24, 0x00	; 0
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	a0 e0       	ldi	r26, 0x00	; 0
    29ba:	b0 e4       	ldi	r27, 0x40	; 64
    29bc:	8b 87       	std	Y+11, r24	; 0x0b
    29be:	9c 87       	std	Y+12, r25	; 0x0c
    29c0:	ad 87       	std	Y+13, r26	; 0x0d
    29c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    29c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    29c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    29cc:	20 e0       	ldi	r18, 0x00	; 0
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	4a ef       	ldi	r20, 0xFA	; 250
    29d2:	54 e4       	ldi	r21, 0x44	; 68
    29d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d8:	dc 01       	movw	r26, r24
    29da:	cb 01       	movw	r24, r22
    29dc:	8f 83       	std	Y+7, r24	; 0x07
    29de:	98 87       	std	Y+8, r25	; 0x08
    29e0:	a9 87       	std	Y+9, r26	; 0x09
    29e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29e4:	6f 81       	ldd	r22, Y+7	; 0x07
    29e6:	78 85       	ldd	r23, Y+8	; 0x08
    29e8:	89 85       	ldd	r24, Y+9	; 0x09
    29ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ec:	20 e0       	ldi	r18, 0x00	; 0
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	40 e8       	ldi	r20, 0x80	; 128
    29f2:	5f e3       	ldi	r21, 0x3F	; 63
    29f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29f8:	88 23       	and	r24, r24
    29fa:	2c f4       	brge	.+10     	; 0x2a06 <HCLCD_Vid8Bits_Init+0x34a>
		__ticks = 1;
    29fc:	81 e0       	ldi	r24, 0x01	; 1
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	9e 83       	std	Y+6, r25	; 0x06
    2a02:	8d 83       	std	Y+5, r24	; 0x05
    2a04:	3f c0       	rjmp	.+126    	; 0x2a84 <HCLCD_Vid8Bits_Init+0x3c8>
	else if (__tmp > 65535)
    2a06:	6f 81       	ldd	r22, Y+7	; 0x07
    2a08:	78 85       	ldd	r23, Y+8	; 0x08
    2a0a:	89 85       	ldd	r24, Y+9	; 0x09
    2a0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a0e:	20 e0       	ldi	r18, 0x00	; 0
    2a10:	3f ef       	ldi	r19, 0xFF	; 255
    2a12:	4f e7       	ldi	r20, 0x7F	; 127
    2a14:	57 e4       	ldi	r21, 0x47	; 71
    2a16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a1a:	18 16       	cp	r1, r24
    2a1c:	4c f5       	brge	.+82     	; 0x2a70 <HCLCD_Vid8Bits_Init+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a20:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a22:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a24:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a26:	20 e0       	ldi	r18, 0x00	; 0
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	40 e2       	ldi	r20, 0x20	; 32
    2a2c:	51 e4       	ldi	r21, 0x41	; 65
    2a2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a32:	dc 01       	movw	r26, r24
    2a34:	cb 01       	movw	r24, r22
    2a36:	bc 01       	movw	r22, r24
    2a38:	cd 01       	movw	r24, r26
    2a3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a3e:	dc 01       	movw	r26, r24
    2a40:	cb 01       	movw	r24, r22
    2a42:	9e 83       	std	Y+6, r25	; 0x06
    2a44:	8d 83       	std	Y+5, r24	; 0x05
    2a46:	0f c0       	rjmp	.+30     	; 0x2a66 <HCLCD_Vid8Bits_Init+0x3aa>
    2a48:	88 ec       	ldi	r24, 0xC8	; 200
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	9c 83       	std	Y+4, r25	; 0x04
    2a4e:	8b 83       	std	Y+3, r24	; 0x03
    2a50:	8b 81       	ldd	r24, Y+3	; 0x03
    2a52:	9c 81       	ldd	r25, Y+4	; 0x04
    2a54:	01 97       	sbiw	r24, 0x01	; 1
    2a56:	f1 f7       	brne	.-4      	; 0x2a54 <HCLCD_Vid8Bits_Init+0x398>
    2a58:	9c 83       	std	Y+4, r25	; 0x04
    2a5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a60:	01 97       	sbiw	r24, 0x01	; 1
    2a62:	9e 83       	std	Y+6, r25	; 0x06
    2a64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a66:	8d 81       	ldd	r24, Y+5	; 0x05
    2a68:	9e 81       	ldd	r25, Y+6	; 0x06
    2a6a:	00 97       	sbiw	r24, 0x00	; 0
    2a6c:	69 f7       	brne	.-38     	; 0x2a48 <HCLCD_Vid8Bits_Init+0x38c>
    2a6e:	14 c0       	rjmp	.+40     	; 0x2a98 <HCLCD_Vid8Bits_Init+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a70:	6f 81       	ldd	r22, Y+7	; 0x07
    2a72:	78 85       	ldd	r23, Y+8	; 0x08
    2a74:	89 85       	ldd	r24, Y+9	; 0x09
    2a76:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	cb 01       	movw	r24, r22
    2a80:	9e 83       	std	Y+6, r25	; 0x06
    2a82:	8d 83       	std	Y+5, r24	; 0x05
    2a84:	8d 81       	ldd	r24, Y+5	; 0x05
    2a86:	9e 81       	ldd	r25, Y+6	; 0x06
    2a88:	9a 83       	std	Y+2, r25	; 0x02
    2a8a:	89 83       	std	Y+1, r24	; 0x01
    2a8c:	89 81       	ldd	r24, Y+1	; 0x01
    2a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a90:	01 97       	sbiw	r24, 0x01	; 1
    2a92:	f1 f7       	brne	.-4      	; 0x2a90 <HCLCD_Vid8Bits_Init+0x3d4>
    2a94:	9a 83       	std	Y+2, r25	; 0x02
    2a96:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*Send Entry Mode Set Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_ENTRY_MODE_SET);
    2a98:	86 e0       	ldi	r24, 0x06	; 6
    2a9a:	0e 94 49 12 	call	0x2492	; 0x2492 <HCLCD_Vid8Bits_SendCommand>
}
    2a9e:	e8 96       	adiw	r28, 0x38	; 56
    2aa0:	0f b6       	in	r0, 0x3f	; 63
    2aa2:	f8 94       	cli
    2aa4:	de bf       	out	0x3e, r29	; 62
    2aa6:	0f be       	out	0x3f, r0	; 63
    2aa8:	cd bf       	out	0x3d, r28	; 61
    2aaa:	cf 91       	pop	r28
    2aac:	df 91       	pop	r29
    2aae:	08 95       	ret

00002ab0 <HCLCD_Vid8Bits_DispalyCharacter>:

/*Display Character 8 Bits*/

void HCLCD_Vid8Bits_DispalyCharacter(u8 Copy_u8Data)
{
    2ab0:	df 93       	push	r29
    2ab2:	cf 93       	push	r28
    2ab4:	cd b7       	in	r28, 0x3d	; 61
    2ab6:	de b7       	in	r29, 0x3e	; 62
    2ab8:	6d 97       	sbiw	r28, 0x1d	; 29
    2aba:	0f b6       	in	r0, 0x3f	; 63
    2abc:	f8 94       	cli
    2abe:	de bf       	out	0x3e, r29	; 62
    2ac0:	0f be       	out	0x3f, r0	; 63
    2ac2:	cd bf       	out	0x3d, r28	; 61
    2ac4:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Select Data register-->Write one on RS PIN*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_HIGH);
    2ac6:	80 e0       	ldi	r24, 0x00	; 0
    2ac8:	62 e0       	ldi	r22, 0x02	; 2
    2aca:	41 e0       	ldi	r20, 0x01	; 1
    2acc:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
	/**select Write mode--> Write zero on RW Pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    2ad0:	81 e0       	ldi	r24, 0x01	; 1
    2ad2:	62 e0       	ldi	r22, 0x02	; 2
    2ad4:	40 e0       	ldi	r20, 0x00	; 0
    2ad6:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
	/*Send Command ON port Data*/
	MDIO_Error_State_SetPortValue(DATA_PORT,Copy_u8Data);
    2ada:	82 e0       	ldi	r24, 0x02	; 2
    2adc:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2ade:	0e 94 cf 09 	call	0x139e	; 0x139e <MDIO_Error_State_SetPortValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    2ae2:	82 e0       	ldi	r24, 0x02	; 2
    2ae4:	62 e0       	ldi	r22, 0x02	; 2
    2ae6:	41 e0       	ldi	r20, 0x01	; 1
    2ae8:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
    2aec:	80 e0       	ldi	r24, 0x00	; 0
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	a0 e0       	ldi	r26, 0x00	; 0
    2af2:	b0 e4       	ldi	r27, 0x40	; 64
    2af4:	89 8f       	std	Y+25, r24	; 0x19
    2af6:	9a 8f       	std	Y+26, r25	; 0x1a
    2af8:	ab 8f       	std	Y+27, r26	; 0x1b
    2afa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2afc:	69 8d       	ldd	r22, Y+25	; 0x19
    2afe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	4a ef       	ldi	r20, 0xFA	; 250
    2b0a:	54 e4       	ldi	r21, 0x44	; 68
    2b0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b10:	dc 01       	movw	r26, r24
    2b12:	cb 01       	movw	r24, r22
    2b14:	8d 8b       	std	Y+21, r24	; 0x15
    2b16:	9e 8b       	std	Y+22, r25	; 0x16
    2b18:	af 8b       	std	Y+23, r26	; 0x17
    2b1a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b1c:	6d 89       	ldd	r22, Y+21	; 0x15
    2b1e:	7e 89       	ldd	r23, Y+22	; 0x16
    2b20:	8f 89       	ldd	r24, Y+23	; 0x17
    2b22:	98 8d       	ldd	r25, Y+24	; 0x18
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	40 e8       	ldi	r20, 0x80	; 128
    2b2a:	5f e3       	ldi	r21, 0x3F	; 63
    2b2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b30:	88 23       	and	r24, r24
    2b32:	2c f4       	brge	.+10     	; 0x2b3e <HCLCD_Vid8Bits_DispalyCharacter+0x8e>
		__ticks = 1;
    2b34:	81 e0       	ldi	r24, 0x01	; 1
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	9c 8b       	std	Y+20, r25	; 0x14
    2b3a:	8b 8b       	std	Y+19, r24	; 0x13
    2b3c:	3f c0       	rjmp	.+126    	; 0x2bbc <HCLCD_Vid8Bits_DispalyCharacter+0x10c>
	else if (__tmp > 65535)
    2b3e:	6d 89       	ldd	r22, Y+21	; 0x15
    2b40:	7e 89       	ldd	r23, Y+22	; 0x16
    2b42:	8f 89       	ldd	r24, Y+23	; 0x17
    2b44:	98 8d       	ldd	r25, Y+24	; 0x18
    2b46:	20 e0       	ldi	r18, 0x00	; 0
    2b48:	3f ef       	ldi	r19, 0xFF	; 255
    2b4a:	4f e7       	ldi	r20, 0x7F	; 127
    2b4c:	57 e4       	ldi	r21, 0x47	; 71
    2b4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b52:	18 16       	cp	r1, r24
    2b54:	4c f5       	brge	.+82     	; 0x2ba8 <HCLCD_Vid8Bits_DispalyCharacter+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b56:	69 8d       	ldd	r22, Y+25	; 0x19
    2b58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	40 e2       	ldi	r20, 0x20	; 32
    2b64:	51 e4       	ldi	r21, 0x41	; 65
    2b66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	bc 01       	movw	r22, r24
    2b70:	cd 01       	movw	r24, r26
    2b72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b76:	dc 01       	movw	r26, r24
    2b78:	cb 01       	movw	r24, r22
    2b7a:	9c 8b       	std	Y+20, r25	; 0x14
    2b7c:	8b 8b       	std	Y+19, r24	; 0x13
    2b7e:	0f c0       	rjmp	.+30     	; 0x2b9e <HCLCD_Vid8Bits_DispalyCharacter+0xee>
    2b80:	88 ec       	ldi	r24, 0xC8	; 200
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	9a 8b       	std	Y+18, r25	; 0x12
    2b86:	89 8b       	std	Y+17, r24	; 0x11
    2b88:	89 89       	ldd	r24, Y+17	; 0x11
    2b8a:	9a 89       	ldd	r25, Y+18	; 0x12
    2b8c:	01 97       	sbiw	r24, 0x01	; 1
    2b8e:	f1 f7       	brne	.-4      	; 0x2b8c <HCLCD_Vid8Bits_DispalyCharacter+0xdc>
    2b90:	9a 8b       	std	Y+18, r25	; 0x12
    2b92:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b94:	8b 89       	ldd	r24, Y+19	; 0x13
    2b96:	9c 89       	ldd	r25, Y+20	; 0x14
    2b98:	01 97       	sbiw	r24, 0x01	; 1
    2b9a:	9c 8b       	std	Y+20, r25	; 0x14
    2b9c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b9e:	8b 89       	ldd	r24, Y+19	; 0x13
    2ba0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ba2:	00 97       	sbiw	r24, 0x00	; 0
    2ba4:	69 f7       	brne	.-38     	; 0x2b80 <HCLCD_Vid8Bits_DispalyCharacter+0xd0>
    2ba6:	14 c0       	rjmp	.+40     	; 0x2bd0 <HCLCD_Vid8Bits_DispalyCharacter+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ba8:	6d 89       	ldd	r22, Y+21	; 0x15
    2baa:	7e 89       	ldd	r23, Y+22	; 0x16
    2bac:	8f 89       	ldd	r24, Y+23	; 0x17
    2bae:	98 8d       	ldd	r25, Y+24	; 0x18
    2bb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb4:	dc 01       	movw	r26, r24
    2bb6:	cb 01       	movw	r24, r22
    2bb8:	9c 8b       	std	Y+20, r25	; 0x14
    2bba:	8b 8b       	std	Y+19, r24	; 0x13
    2bbc:	8b 89       	ldd	r24, Y+19	; 0x13
    2bbe:	9c 89       	ldd	r25, Y+20	; 0x14
    2bc0:	98 8b       	std	Y+16, r25	; 0x10
    2bc2:	8f 87       	std	Y+15, r24	; 0x0f
    2bc4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bc6:	98 89       	ldd	r25, Y+16	; 0x10
    2bc8:	01 97       	sbiw	r24, 0x01	; 1
    2bca:	f1 f7       	brne	.-4      	; 0x2bc8 <HCLCD_Vid8Bits_DispalyCharacter+0x118>
    2bcc:	98 8b       	std	Y+16, r25	; 0x10
    2bce:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    2bd0:	82 e0       	ldi	r24, 0x02	; 2
    2bd2:	62 e0       	ldi	r22, 0x02	; 2
    2bd4:	40 e0       	ldi	r20, 0x00	; 0
    2bd6:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
    2bda:	80 e0       	ldi	r24, 0x00	; 0
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	a0 e0       	ldi	r26, 0x00	; 0
    2be0:	b0 e4       	ldi	r27, 0x40	; 64
    2be2:	8b 87       	std	Y+11, r24	; 0x0b
    2be4:	9c 87       	std	Y+12, r25	; 0x0c
    2be6:	ad 87       	std	Y+13, r26	; 0x0d
    2be8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bea:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bec:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bee:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	4a ef       	ldi	r20, 0xFA	; 250
    2bf8:	54 e4       	ldi	r21, 0x44	; 68
    2bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	8f 83       	std	Y+7, r24	; 0x07
    2c04:	98 87       	std	Y+8, r25	; 0x08
    2c06:	a9 87       	std	Y+9, r26	; 0x09
    2c08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c0a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c0c:	78 85       	ldd	r23, Y+8	; 0x08
    2c0e:	89 85       	ldd	r24, Y+9	; 0x09
    2c10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c12:	20 e0       	ldi	r18, 0x00	; 0
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	40 e8       	ldi	r20, 0x80	; 128
    2c18:	5f e3       	ldi	r21, 0x3F	; 63
    2c1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c1e:	88 23       	and	r24, r24
    2c20:	2c f4       	brge	.+10     	; 0x2c2c <HCLCD_Vid8Bits_DispalyCharacter+0x17c>
		__ticks = 1;
    2c22:	81 e0       	ldi	r24, 0x01	; 1
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	9e 83       	std	Y+6, r25	; 0x06
    2c28:	8d 83       	std	Y+5, r24	; 0x05
    2c2a:	3f c0       	rjmp	.+126    	; 0x2caa <HCLCD_Vid8Bits_DispalyCharacter+0x1fa>
	else if (__tmp > 65535)
    2c2c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c2e:	78 85       	ldd	r23, Y+8	; 0x08
    2c30:	89 85       	ldd	r24, Y+9	; 0x09
    2c32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c34:	20 e0       	ldi	r18, 0x00	; 0
    2c36:	3f ef       	ldi	r19, 0xFF	; 255
    2c38:	4f e7       	ldi	r20, 0x7F	; 127
    2c3a:	57 e4       	ldi	r21, 0x47	; 71
    2c3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c40:	18 16       	cp	r1, r24
    2c42:	4c f5       	brge	.+82     	; 0x2c96 <HCLCD_Vid8Bits_DispalyCharacter+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c44:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c46:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c48:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	40 e2       	ldi	r20, 0x20	; 32
    2c52:	51 e4       	ldi	r21, 0x41	; 65
    2c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c58:	dc 01       	movw	r26, r24
    2c5a:	cb 01       	movw	r24, r22
    2c5c:	bc 01       	movw	r22, r24
    2c5e:	cd 01       	movw	r24, r26
    2c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c64:	dc 01       	movw	r26, r24
    2c66:	cb 01       	movw	r24, r22
    2c68:	9e 83       	std	Y+6, r25	; 0x06
    2c6a:	8d 83       	std	Y+5, r24	; 0x05
    2c6c:	0f c0       	rjmp	.+30     	; 0x2c8c <HCLCD_Vid8Bits_DispalyCharacter+0x1dc>
    2c6e:	88 ec       	ldi	r24, 0xC8	; 200
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	9c 83       	std	Y+4, r25	; 0x04
    2c74:	8b 83       	std	Y+3, r24	; 0x03
    2c76:	8b 81       	ldd	r24, Y+3	; 0x03
    2c78:	9c 81       	ldd	r25, Y+4	; 0x04
    2c7a:	01 97       	sbiw	r24, 0x01	; 1
    2c7c:	f1 f7       	brne	.-4      	; 0x2c7a <HCLCD_Vid8Bits_DispalyCharacter+0x1ca>
    2c7e:	9c 83       	std	Y+4, r25	; 0x04
    2c80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c82:	8d 81       	ldd	r24, Y+5	; 0x05
    2c84:	9e 81       	ldd	r25, Y+6	; 0x06
    2c86:	01 97       	sbiw	r24, 0x01	; 1
    2c88:	9e 83       	std	Y+6, r25	; 0x06
    2c8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c90:	00 97       	sbiw	r24, 0x00	; 0
    2c92:	69 f7       	brne	.-38     	; 0x2c6e <HCLCD_Vid8Bits_DispalyCharacter+0x1be>
    2c94:	14 c0       	rjmp	.+40     	; 0x2cbe <HCLCD_Vid8Bits_DispalyCharacter+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c96:	6f 81       	ldd	r22, Y+7	; 0x07
    2c98:	78 85       	ldd	r23, Y+8	; 0x08
    2c9a:	89 85       	ldd	r24, Y+9	; 0x09
    2c9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca2:	dc 01       	movw	r26, r24
    2ca4:	cb 01       	movw	r24, r22
    2ca6:	9e 83       	std	Y+6, r25	; 0x06
    2ca8:	8d 83       	std	Y+5, r24	; 0x05
    2caa:	8d 81       	ldd	r24, Y+5	; 0x05
    2cac:	9e 81       	ldd	r25, Y+6	; 0x06
    2cae:	9a 83       	std	Y+2, r25	; 0x02
    2cb0:	89 83       	std	Y+1, r24	; 0x01
    2cb2:	89 81       	ldd	r24, Y+1	; 0x01
    2cb4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cb6:	01 97       	sbiw	r24, 0x01	; 1
    2cb8:	f1 f7       	brne	.-4      	; 0x2cb6 <HCLCD_Vid8Bits_DispalyCharacter+0x206>
    2cba:	9a 83       	std	Y+2, r25	; 0x02
    2cbc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    2cbe:	82 e0       	ldi	r24, 0x02	; 2
    2cc0:	62 e0       	ldi	r22, 0x02	; 2
    2cc2:	41 e0       	ldi	r20, 0x01	; 1
    2cc4:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
}
    2cc8:	6d 96       	adiw	r28, 0x1d	; 29
    2cca:	0f b6       	in	r0, 0x3f	; 63
    2ccc:	f8 94       	cli
    2cce:	de bf       	out	0x3e, r29	; 62
    2cd0:	0f be       	out	0x3f, r0	; 63
    2cd2:	cd bf       	out	0x3d, r28	; 61
    2cd4:	cf 91       	pop	r28
    2cd6:	df 91       	pop	r29
    2cd8:	08 95       	ret

00002cda <HCLCD_Vid8Bits_DisplayString>:

/*Display String 8 Bits*/

void HCLCD_Vid8Bits_DisplayString(u8* PCopy_u8String)
{
    2cda:	df 93       	push	r29
    2cdc:	cf 93       	push	r28
    2cde:	00 d0       	rcall	.+0      	; 0x2ce0 <HCLCD_Vid8Bits_DisplayString+0x6>
    2ce0:	0f 92       	push	r0
    2ce2:	cd b7       	in	r28, 0x3d	; 61
    2ce4:	de b7       	in	r29, 0x3e	; 62
    2ce6:	9b 83       	std	Y+3, r25	; 0x03
    2ce8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Count=0;
    2cea:	19 82       	std	Y+1, r1	; 0x01
    2cec:	0e c0       	rjmp	.+28     	; 0x2d0a <HCLCD_Vid8Bits_DisplayString+0x30>
	while(PCopy_u8String[Loc_u8Count]!=NULL)
	{
		HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8String[Loc_u8Count]);
    2cee:	89 81       	ldd	r24, Y+1	; 0x01
    2cf0:	28 2f       	mov	r18, r24
    2cf2:	30 e0       	ldi	r19, 0x00	; 0
    2cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf6:	9b 81       	ldd	r25, Y+3	; 0x03
    2cf8:	fc 01       	movw	r30, r24
    2cfa:	e2 0f       	add	r30, r18
    2cfc:	f3 1f       	adc	r31, r19
    2cfe:	80 81       	ld	r24, Z
    2d00:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <HCLCD_Vid8Bits_DispalyCharacter>
		Loc_u8Count++;
    2d04:	89 81       	ldd	r24, Y+1	; 0x01
    2d06:	8f 5f       	subi	r24, 0xFF	; 255
    2d08:	89 83       	std	Y+1, r24	; 0x01
/*Display String 8 Bits*/

void HCLCD_Vid8Bits_DisplayString(u8* PCopy_u8String)
{
	u8 Loc_u8Count=0;
	while(PCopy_u8String[Loc_u8Count]!=NULL)
    2d0a:	89 81       	ldd	r24, Y+1	; 0x01
    2d0c:	28 2f       	mov	r18, r24
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	8a 81       	ldd	r24, Y+2	; 0x02
    2d12:	9b 81       	ldd	r25, Y+3	; 0x03
    2d14:	fc 01       	movw	r30, r24
    2d16:	e2 0f       	add	r30, r18
    2d18:	f3 1f       	adc	r31, r19
    2d1a:	80 81       	ld	r24, Z
    2d1c:	88 23       	and	r24, r24
    2d1e:	39 f7       	brne	.-50     	; 0x2cee <HCLCD_Vid8Bits_DisplayString+0x14>
	{
		HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8String[Loc_u8Count]);
		Loc_u8Count++;
	}
}
    2d20:	0f 90       	pop	r0
    2d22:	0f 90       	pop	r0
    2d24:	0f 90       	pop	r0
    2d26:	cf 91       	pop	r28
    2d28:	df 91       	pop	r29
    2d2a:	08 95       	ret

00002d2c <HCLCD_Vid8Bits_DisplayNumber>:

void HCLCD_Vid8Bits_DisplayNumber(u32 Copy_u8Number)
{
    2d2c:	0f 93       	push	r16
    2d2e:	1f 93       	push	r17
    2d30:	df 93       	push	r29
    2d32:	cf 93       	push	r28
    2d34:	cd b7       	in	r28, 0x3d	; 61
    2d36:	de b7       	in	r29, 0x3e	; 62
    2d38:	60 97       	sbiw	r28, 0x10	; 16
    2d3a:	0f b6       	in	r0, 0x3f	; 63
    2d3c:	f8 94       	cli
    2d3e:	de bf       	out	0x3e, r29	; 62
    2d40:	0f be       	out	0x3f, r0	; 63
    2d42:	cd bf       	out	0x3d, r28	; 61
    2d44:	6d 87       	std	Y+13, r22	; 0x0d
    2d46:	7e 87       	std	Y+14, r23	; 0x0e
    2d48:	8f 87       	std	Y+15, r24	; 0x0f
    2d4a:	98 8b       	std	Y+16, r25	; 0x10
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
    2d4c:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u8Number>0)
    2d4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d50:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d52:	af 85       	ldd	r26, Y+15	; 0x0f
    2d54:	b8 89       	ldd	r27, Y+16	; 0x10
    2d56:	00 97       	sbiw	r24, 0x00	; 0
    2d58:	a1 05       	cpc	r26, r1
    2d5a:	b1 05       	cpc	r27, r1
    2d5c:	09 f4       	brne	.+2      	; 0x2d60 <HCLCD_Vid8Bits_DisplayNumber+0x34>
    2d5e:	4f c0       	rjmp	.+158    	; 0x2dfe <HCLCD_Vid8Bits_DisplayNumber+0xd2>
    2d60:	2d c0       	rjmp	.+90     	; 0x2dbc <HCLCD_Vid8Bits_DisplayNumber+0x90>
	{
		while(Copy_u8Number!=0)
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
    2d62:	8a 81       	ldd	r24, Y+2	; 0x02
    2d64:	08 2f       	mov	r16, r24
    2d66:	10 e0       	ldi	r17, 0x00	; 0
    2d68:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d6c:	af 85       	ldd	r26, Y+15	; 0x0f
    2d6e:	b8 89       	ldd	r27, Y+16	; 0x10
    2d70:	2a e0       	ldi	r18, 0x0A	; 10
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	40 e0       	ldi	r20, 0x00	; 0
    2d76:	50 e0       	ldi	r21, 0x00	; 0
    2d78:	bc 01       	movw	r22, r24
    2d7a:	cd 01       	movw	r24, r26
    2d7c:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <__udivmodsi4>
    2d80:	dc 01       	movw	r26, r24
    2d82:	cb 01       	movw	r24, r22
    2d84:	28 2f       	mov	r18, r24
    2d86:	ce 01       	movw	r24, r28
    2d88:	03 96       	adiw	r24, 0x03	; 3
    2d8a:	fc 01       	movw	r30, r24
    2d8c:	e0 0f       	add	r30, r16
    2d8e:	f1 1f       	adc	r31, r17
    2d90:	20 83       	st	Z, r18
			Copy_u8Number/=10;
    2d92:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d94:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d96:	af 85       	ldd	r26, Y+15	; 0x0f
    2d98:	b8 89       	ldd	r27, Y+16	; 0x10
    2d9a:	2a e0       	ldi	r18, 0x0A	; 10
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	40 e0       	ldi	r20, 0x00	; 0
    2da0:	50 e0       	ldi	r21, 0x00	; 0
    2da2:	bc 01       	movw	r22, r24
    2da4:	cd 01       	movw	r24, r26
    2da6:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <__udivmodsi4>
    2daa:	da 01       	movw	r26, r20
    2dac:	c9 01       	movw	r24, r18
    2dae:	8d 87       	std	Y+13, r24	; 0x0d
    2db0:	9e 87       	std	Y+14, r25	; 0x0e
    2db2:	af 87       	std	Y+15, r26	; 0x0f
    2db4:	b8 8b       	std	Y+16, r27	; 0x10
			LOC_Count++;
    2db6:	8a 81       	ldd	r24, Y+2	; 0x02
    2db8:	8f 5f       	subi	r24, 0xFF	; 255
    2dba:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
	if(Copy_u8Number>0)
	{
		while(Copy_u8Number!=0)
    2dbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dc0:	af 85       	ldd	r26, Y+15	; 0x0f
    2dc2:	b8 89       	ldd	r27, Y+16	; 0x10
    2dc4:	00 97       	sbiw	r24, 0x00	; 0
    2dc6:	a1 05       	cpc	r26, r1
    2dc8:	b1 05       	cpc	r27, r1
    2dca:	59 f6       	brne	.-106    	; 0x2d62 <HCLCD_Vid8Bits_DisplayNumber+0x36>
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    2dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dce:	81 50       	subi	r24, 0x01	; 1
    2dd0:	89 83       	std	Y+1, r24	; 0x01
    2dd2:	11 c0       	rjmp	.+34     	; 0x2df6 <HCLCD_Vid8Bits_DisplayNumber+0xca>
		{
			HCLCD_Vid8Bits_DispalyCharacter(ARR_Digits[i]+'0');  //ASCII of '0'--->48
    2dd4:	89 81       	ldd	r24, Y+1	; 0x01
    2dd6:	28 2f       	mov	r18, r24
    2dd8:	33 27       	eor	r19, r19
    2dda:	27 fd       	sbrc	r18, 7
    2ddc:	30 95       	com	r19
    2dde:	ce 01       	movw	r24, r28
    2de0:	03 96       	adiw	r24, 0x03	; 3
    2de2:	fc 01       	movw	r30, r24
    2de4:	e2 0f       	add	r30, r18
    2de6:	f3 1f       	adc	r31, r19
    2de8:	80 81       	ld	r24, Z
    2dea:	80 5d       	subi	r24, 0xD0	; 208
    2dec:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <HCLCD_Vid8Bits_DispalyCharacter>
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    2df0:	89 81       	ldd	r24, Y+1	; 0x01
    2df2:	81 50       	subi	r24, 0x01	; 1
    2df4:	89 83       	std	Y+1, r24	; 0x01
    2df6:	89 81       	ldd	r24, Y+1	; 0x01
    2df8:	88 23       	and	r24, r24
    2dfa:	64 f7       	brge	.-40     	; 0x2dd4 <HCLCD_Vid8Bits_DisplayNumber+0xa8>
    2dfc:	03 c0       	rjmp	.+6      	; 0x2e04 <HCLCD_Vid8Bits_DisplayNumber+0xd8>
			HCLCD_Vid8Bits_DispalyCharacter(ARR_Digits[i]+'0');  //ASCII of '0'--->48
		}
	}
	else
	{
		HCLCD_Vid8Bits_DispalyCharacter('0');
    2dfe:	80 e3       	ldi	r24, 0x30	; 48
    2e00:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <HCLCD_Vid8Bits_DispalyCharacter>
	}
}
    2e04:	60 96       	adiw	r28, 0x10	; 16
    2e06:	0f b6       	in	r0, 0x3f	; 63
    2e08:	f8 94       	cli
    2e0a:	de bf       	out	0x3e, r29	; 62
    2e0c:	0f be       	out	0x3f, r0	; 63
    2e0e:	cd bf       	out	0x3d, r28	; 61
    2e10:	cf 91       	pop	r28
    2e12:	df 91       	pop	r29
    2e14:	1f 91       	pop	r17
    2e16:	0f 91       	pop	r16
    2e18:	08 95       	ret

00002e1a <HCLCD_Vid8Bits_SetPosition>:

void HCLCD_Vid8Bits_SetPosition(u8 Copy_u8LineNumber,u8 Copy_u8PositionNumber)
{
    2e1a:	df 93       	push	r29
    2e1c:	cf 93       	push	r28
    2e1e:	00 d0       	rcall	.+0      	; 0x2e20 <HCLCD_Vid8Bits_SetPosition+0x6>
    2e20:	cd b7       	in	r28, 0x3d	; 61
    2e22:	de b7       	in	r29, 0x3e	; 62
    2e24:	89 83       	std	Y+1, r24	; 0x01
    2e26:	6a 83       	std	Y+2, r22	; 0x02

	if((Copy_u8LineNumber==HCLCD_LINE1)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    2e28:	89 81       	ldd	r24, Y+1	; 0x01
    2e2a:	81 30       	cpi	r24, 0x01	; 1
    2e2c:	41 f4       	brne	.+16     	; 0x2e3e <HCLCD_Vid8Bits_SetPosition+0x24>
    2e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e30:	80 31       	cpi	r24, 0x10	; 16
    2e32:	28 f4       	brcc	.+10     	; 0x2e3e <HCLCD_Vid8Bits_SetPosition+0x24>
	{
		HCLCD_Vid8Bits_SendCommand((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber));
    2e34:	8a 81       	ldd	r24, Y+2	; 0x02
    2e36:	80 58       	subi	r24, 0x80	; 128
    2e38:	0e 94 49 12 	call	0x2492	; 0x2492 <HCLCD_Vid8Bits_SendCommand>
    2e3c:	0a c0       	rjmp	.+20     	; 0x2e52 <HCLCD_Vid8Bits_SetPosition+0x38>
	}
	else if((Copy_u8LineNumber==HCLCD_LINE2)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    2e3e:	89 81       	ldd	r24, Y+1	; 0x01
    2e40:	82 30       	cpi	r24, 0x02	; 2
    2e42:	39 f4       	brne	.+14     	; 0x2e52 <HCLCD_Vid8Bits_SetPosition+0x38>
    2e44:	8a 81       	ldd	r24, Y+2	; 0x02
    2e46:	80 31       	cpi	r24, 0x10	; 16
    2e48:	20 f4       	brcc	.+8      	; 0x2e52 <HCLCD_Vid8Bits_SetPosition+0x38>
	{
		HCLCD_Vid8Bits_SendCommand((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber));
    2e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4c:	80 54       	subi	r24, 0x40	; 64
    2e4e:	0e 94 49 12 	call	0x2492	; 0x2492 <HCLCD_Vid8Bits_SendCommand>
	else
	{

	}

}
    2e52:	0f 90       	pop	r0
    2e54:	0f 90       	pop	r0
    2e56:	cf 91       	pop	r28
    2e58:	df 91       	pop	r29
    2e5a:	08 95       	ret

00002e5c <HCLCD_Vid8Bits_CustomAlphChar>:
/*LCD Create SpecialCharacter 8 Bits*/
void HCLCD_Vid8Bits_CustomAlphChar(u8 Copy_u8PatternNumber, u8* PCopy_u8Pattern)
{
    2e5c:	df 93       	push	r29
    2e5e:	cf 93       	push	r28
    2e60:	00 d0       	rcall	.+0      	; 0x2e62 <HCLCD_Vid8Bits_CustomAlphChar+0x6>
    2e62:	00 d0       	rcall	.+0      	; 0x2e64 <HCLCD_Vid8Bits_CustomAlphChar+0x8>
    2e64:	cd b7       	in	r28, 0x3d	; 61
    2e66:	de b7       	in	r29, 0x3e	; 62
    2e68:	8a 83       	std	Y+2, r24	; 0x02
    2e6a:	7c 83       	std	Y+4, r23	; 0x04
    2e6c:	6b 83       	std	Y+3, r22	; 0x03
	       /*you have only 8 patterns to be customized */
	      u8 i;
	      if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
    2e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e70:	88 30       	cpi	r24, 0x08	; 8
    2e72:	f8 f4       	brcc	.+62     	; 0x2eb2 <HCLCD_Vid8Bits_CustomAlphChar+0x56>
	      {
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid8Bits_SendCommand(CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE));
    2e74:	8a 81       	ldd	r24, Y+2	; 0x02
    2e76:	88 2f       	mov	r24, r24
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	08 96       	adiw	r24, 0x08	; 8
    2e7c:	88 0f       	add	r24, r24
    2e7e:	99 1f       	adc	r25, r25
    2e80:	88 0f       	add	r24, r24
    2e82:	99 1f       	adc	r25, r25
    2e84:	88 0f       	add	r24, r24
    2e86:	99 1f       	adc	r25, r25
    2e88:	0e 94 49 12 	call	0x2492	; 0x2492 <HCLCD_Vid8Bits_SendCommand>
	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    2e8c:	19 82       	std	Y+1, r1	; 0x01
    2e8e:	0e c0       	rjmp	.+28     	; 0x2eac <HCLCD_Vid8Bits_CustomAlphChar+0x50>
	          {
	        	  HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8Pattern[ i ]);
    2e90:	89 81       	ldd	r24, Y+1	; 0x01
    2e92:	28 2f       	mov	r18, r24
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	8b 81       	ldd	r24, Y+3	; 0x03
    2e98:	9c 81       	ldd	r25, Y+4	; 0x04
    2e9a:	fc 01       	movw	r30, r24
    2e9c:	e2 0f       	add	r30, r18
    2e9e:	f3 1f       	adc	r31, r19
    2ea0:	80 81       	ld	r24, Z
    2ea2:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <HCLCD_Vid8Bits_DispalyCharacter>
	      if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
	      {
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid8Bits_SendCommand(CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE));
	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    2ea6:	89 81       	ldd	r24, Y+1	; 0x01
    2ea8:	8f 5f       	subi	r24, 0xFF	; 255
    2eaa:	89 83       	std	Y+1, r24	; 0x01
    2eac:	89 81       	ldd	r24, Y+1	; 0x01
    2eae:	88 30       	cpi	r24, 0x08	; 8
    2eb0:	78 f3       	brcs	.-34     	; 0x2e90 <HCLCD_Vid8Bits_CustomAlphChar+0x34>
	          {
	        	  HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8Pattern[ i ]);
	          }
	      }
}
    2eb2:	0f 90       	pop	r0
    2eb4:	0f 90       	pop	r0
    2eb6:	0f 90       	pop	r0
    2eb8:	0f 90       	pop	r0
    2eba:	cf 91       	pop	r28
    2ebc:	df 91       	pop	r29
    2ebe:	08 95       	ret

00002ec0 <HCLCD_Vid8Bits_ClearScreen>:
/**/
void HCLCD_Vid8Bits_ClearScreen(void)
{
    2ec0:	df 93       	push	r29
    2ec2:	cf 93       	push	r28
    2ec4:	cd b7       	in	r28, 0x3d	; 61
    2ec6:	de b7       	in	r29, 0x3e	; 62
    2ec8:	2e 97       	sbiw	r28, 0x0e	; 14
    2eca:	0f b6       	in	r0, 0x3f	; 63
    2ecc:	f8 94       	cli
    2ece:	de bf       	out	0x3e, r29	; 62
    2ed0:	0f be       	out	0x3f, r0	; 63
    2ed2:	cd bf       	out	0x3d, r28	; 61
  HCLCD_Vid8Bits_SendCommand(DISPLAY_CLEAR);
    2ed4:	81 e0       	ldi	r24, 0x01	; 1
    2ed6:	0e 94 49 12 	call	0x2492	; 0x2492 <HCLCD_Vid8Bits_SendCommand>
    2eda:	80 e0       	ldi	r24, 0x00	; 0
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	a0 e0       	ldi	r26, 0x00	; 0
    2ee0:	b0 e4       	ldi	r27, 0x40	; 64
    2ee2:	8b 87       	std	Y+11, r24	; 0x0b
    2ee4:	9c 87       	std	Y+12, r25	; 0x0c
    2ee6:	ad 87       	std	Y+13, r26	; 0x0d
    2ee8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eea:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eec:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eee:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ef0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ef2:	20 e0       	ldi	r18, 0x00	; 0
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	4a ef       	ldi	r20, 0xFA	; 250
    2ef8:	54 e4       	ldi	r21, 0x44	; 68
    2efa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2efe:	dc 01       	movw	r26, r24
    2f00:	cb 01       	movw	r24, r22
    2f02:	8f 83       	std	Y+7, r24	; 0x07
    2f04:	98 87       	std	Y+8, r25	; 0x08
    2f06:	a9 87       	std	Y+9, r26	; 0x09
    2f08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f0a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f0c:	78 85       	ldd	r23, Y+8	; 0x08
    2f0e:	89 85       	ldd	r24, Y+9	; 0x09
    2f10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f12:	20 e0       	ldi	r18, 0x00	; 0
    2f14:	30 e0       	ldi	r19, 0x00	; 0
    2f16:	40 e8       	ldi	r20, 0x80	; 128
    2f18:	5f e3       	ldi	r21, 0x3F	; 63
    2f1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f1e:	88 23       	and	r24, r24
    2f20:	2c f4       	brge	.+10     	; 0x2f2c <HCLCD_Vid8Bits_ClearScreen+0x6c>
		__ticks = 1;
    2f22:	81 e0       	ldi	r24, 0x01	; 1
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	9e 83       	std	Y+6, r25	; 0x06
    2f28:	8d 83       	std	Y+5, r24	; 0x05
    2f2a:	3f c0       	rjmp	.+126    	; 0x2faa <HCLCD_Vid8Bits_ClearScreen+0xea>
	else if (__tmp > 65535)
    2f2c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f2e:	78 85       	ldd	r23, Y+8	; 0x08
    2f30:	89 85       	ldd	r24, Y+9	; 0x09
    2f32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f34:	20 e0       	ldi	r18, 0x00	; 0
    2f36:	3f ef       	ldi	r19, 0xFF	; 255
    2f38:	4f e7       	ldi	r20, 0x7F	; 127
    2f3a:	57 e4       	ldi	r21, 0x47	; 71
    2f3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f40:	18 16       	cp	r1, r24
    2f42:	4c f5       	brge	.+82     	; 0x2f96 <HCLCD_Vid8Bits_ClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f44:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f46:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f48:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f4c:	20 e0       	ldi	r18, 0x00	; 0
    2f4e:	30 e0       	ldi	r19, 0x00	; 0
    2f50:	40 e2       	ldi	r20, 0x20	; 32
    2f52:	51 e4       	ldi	r21, 0x41	; 65
    2f54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f58:	dc 01       	movw	r26, r24
    2f5a:	cb 01       	movw	r24, r22
    2f5c:	bc 01       	movw	r22, r24
    2f5e:	cd 01       	movw	r24, r26
    2f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f64:	dc 01       	movw	r26, r24
    2f66:	cb 01       	movw	r24, r22
    2f68:	9e 83       	std	Y+6, r25	; 0x06
    2f6a:	8d 83       	std	Y+5, r24	; 0x05
    2f6c:	0f c0       	rjmp	.+30     	; 0x2f8c <HCLCD_Vid8Bits_ClearScreen+0xcc>
    2f6e:	88 ec       	ldi	r24, 0xC8	; 200
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	9c 83       	std	Y+4, r25	; 0x04
    2f74:	8b 83       	std	Y+3, r24	; 0x03
    2f76:	8b 81       	ldd	r24, Y+3	; 0x03
    2f78:	9c 81       	ldd	r25, Y+4	; 0x04
    2f7a:	01 97       	sbiw	r24, 0x01	; 1
    2f7c:	f1 f7       	brne	.-4      	; 0x2f7a <HCLCD_Vid8Bits_ClearScreen+0xba>
    2f7e:	9c 83       	std	Y+4, r25	; 0x04
    2f80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f82:	8d 81       	ldd	r24, Y+5	; 0x05
    2f84:	9e 81       	ldd	r25, Y+6	; 0x06
    2f86:	01 97       	sbiw	r24, 0x01	; 1
    2f88:	9e 83       	std	Y+6, r25	; 0x06
    2f8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f90:	00 97       	sbiw	r24, 0x00	; 0
    2f92:	69 f7       	brne	.-38     	; 0x2f6e <HCLCD_Vid8Bits_ClearScreen+0xae>
    2f94:	14 c0       	rjmp	.+40     	; 0x2fbe <HCLCD_Vid8Bits_ClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f96:	6f 81       	ldd	r22, Y+7	; 0x07
    2f98:	78 85       	ldd	r23, Y+8	; 0x08
    2f9a:	89 85       	ldd	r24, Y+9	; 0x09
    2f9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa2:	dc 01       	movw	r26, r24
    2fa4:	cb 01       	movw	r24, r22
    2fa6:	9e 83       	std	Y+6, r25	; 0x06
    2fa8:	8d 83       	std	Y+5, r24	; 0x05
    2faa:	8d 81       	ldd	r24, Y+5	; 0x05
    2fac:	9e 81       	ldd	r25, Y+6	; 0x06
    2fae:	9a 83       	std	Y+2, r25	; 0x02
    2fb0:	89 83       	std	Y+1, r24	; 0x01
    2fb2:	89 81       	ldd	r24, Y+1	; 0x01
    2fb4:	9a 81       	ldd	r25, Y+2	; 0x02
    2fb6:	01 97       	sbiw	r24, 0x01	; 1
    2fb8:	f1 f7       	brne	.-4      	; 0x2fb6 <HCLCD_Vid8Bits_ClearScreen+0xf6>
    2fba:	9a 83       	std	Y+2, r25	; 0x02
    2fbc:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(2);
}
    2fbe:	2e 96       	adiw	r28, 0x0e	; 14
    2fc0:	0f b6       	in	r0, 0x3f	; 63
    2fc2:	f8 94       	cli
    2fc4:	de bf       	out	0x3e, r29	; 62
    2fc6:	0f be       	out	0x3f, r0	; 63
    2fc8:	cd bf       	out	0x3d, r28	; 61
    2fca:	cf 91       	pop	r28
    2fcc:	df 91       	pop	r29
    2fce:	08 95       	ret

00002fd0 <HCLCD_Vid8Bits_DisplayShiftLeft>:
/**/
 void HCLCD_Vid8Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
    2fd0:	df 93       	push	r29
    2fd2:	cf 93       	push	r28
    2fd4:	cd b7       	in	r28, 0x3d	; 61
    2fd6:	de b7       	in	r29, 0x3e	; 62
    2fd8:	60 97       	sbiw	r28, 0x10	; 16
    2fda:	0f b6       	in	r0, 0x3f	; 63
    2fdc:	f8 94       	cli
    2fde:	de bf       	out	0x3e, r29	; 62
    2fe0:	0f be       	out	0x3f, r0	; 63
    2fe2:	cd bf       	out	0x3d, r28	; 61
    2fe4:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    2fe6:	1f 86       	std	Y+15, r1	; 0x0f
    2fe8:	78 c0       	rjmp	.+240    	; 0x30da <HCLCD_Vid8Bits_DisplayShiftLeft+0x10a>
 {
	 HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_LEFT);
    2fea:	88 e1       	ldi	r24, 0x18	; 24
    2fec:	0e 94 49 12 	call	0x2492	; 0x2492 <HCLCD_Vid8Bits_SendCommand>
    2ff0:	80 e0       	ldi	r24, 0x00	; 0
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	a6 e9       	ldi	r26, 0x96	; 150
    2ff6:	b3 e4       	ldi	r27, 0x43	; 67
    2ff8:	8b 87       	std	Y+11, r24	; 0x0b
    2ffa:	9c 87       	std	Y+12, r25	; 0x0c
    2ffc:	ad 87       	std	Y+13, r26	; 0x0d
    2ffe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3000:	6b 85       	ldd	r22, Y+11	; 0x0b
    3002:	7c 85       	ldd	r23, Y+12	; 0x0c
    3004:	8d 85       	ldd	r24, Y+13	; 0x0d
    3006:	9e 85       	ldd	r25, Y+14	; 0x0e
    3008:	20 e0       	ldi	r18, 0x00	; 0
    300a:	30 e0       	ldi	r19, 0x00	; 0
    300c:	4a ef       	ldi	r20, 0xFA	; 250
    300e:	54 e4       	ldi	r21, 0x44	; 68
    3010:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3014:	dc 01       	movw	r26, r24
    3016:	cb 01       	movw	r24, r22
    3018:	8f 83       	std	Y+7, r24	; 0x07
    301a:	98 87       	std	Y+8, r25	; 0x08
    301c:	a9 87       	std	Y+9, r26	; 0x09
    301e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3020:	6f 81       	ldd	r22, Y+7	; 0x07
    3022:	78 85       	ldd	r23, Y+8	; 0x08
    3024:	89 85       	ldd	r24, Y+9	; 0x09
    3026:	9a 85       	ldd	r25, Y+10	; 0x0a
    3028:	20 e0       	ldi	r18, 0x00	; 0
    302a:	30 e0       	ldi	r19, 0x00	; 0
    302c:	40 e8       	ldi	r20, 0x80	; 128
    302e:	5f e3       	ldi	r21, 0x3F	; 63
    3030:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3034:	88 23       	and	r24, r24
    3036:	2c f4       	brge	.+10     	; 0x3042 <HCLCD_Vid8Bits_DisplayShiftLeft+0x72>
		__ticks = 1;
    3038:	81 e0       	ldi	r24, 0x01	; 1
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	9e 83       	std	Y+6, r25	; 0x06
    303e:	8d 83       	std	Y+5, r24	; 0x05
    3040:	3f c0       	rjmp	.+126    	; 0x30c0 <HCLCD_Vid8Bits_DisplayShiftLeft+0xf0>
	else if (__tmp > 65535)
    3042:	6f 81       	ldd	r22, Y+7	; 0x07
    3044:	78 85       	ldd	r23, Y+8	; 0x08
    3046:	89 85       	ldd	r24, Y+9	; 0x09
    3048:	9a 85       	ldd	r25, Y+10	; 0x0a
    304a:	20 e0       	ldi	r18, 0x00	; 0
    304c:	3f ef       	ldi	r19, 0xFF	; 255
    304e:	4f e7       	ldi	r20, 0x7F	; 127
    3050:	57 e4       	ldi	r21, 0x47	; 71
    3052:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3056:	18 16       	cp	r1, r24
    3058:	4c f5       	brge	.+82     	; 0x30ac <HCLCD_Vid8Bits_DisplayShiftLeft+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    305a:	6b 85       	ldd	r22, Y+11	; 0x0b
    305c:	7c 85       	ldd	r23, Y+12	; 0x0c
    305e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3060:	9e 85       	ldd	r25, Y+14	; 0x0e
    3062:	20 e0       	ldi	r18, 0x00	; 0
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	40 e2       	ldi	r20, 0x20	; 32
    3068:	51 e4       	ldi	r21, 0x41	; 65
    306a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    306e:	dc 01       	movw	r26, r24
    3070:	cb 01       	movw	r24, r22
    3072:	bc 01       	movw	r22, r24
    3074:	cd 01       	movw	r24, r26
    3076:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    307a:	dc 01       	movw	r26, r24
    307c:	cb 01       	movw	r24, r22
    307e:	9e 83       	std	Y+6, r25	; 0x06
    3080:	8d 83       	std	Y+5, r24	; 0x05
    3082:	0f c0       	rjmp	.+30     	; 0x30a2 <HCLCD_Vid8Bits_DisplayShiftLeft+0xd2>
    3084:	88 ec       	ldi	r24, 0xC8	; 200
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	9c 83       	std	Y+4, r25	; 0x04
    308a:	8b 83       	std	Y+3, r24	; 0x03
    308c:	8b 81       	ldd	r24, Y+3	; 0x03
    308e:	9c 81       	ldd	r25, Y+4	; 0x04
    3090:	01 97       	sbiw	r24, 0x01	; 1
    3092:	f1 f7       	brne	.-4      	; 0x3090 <HCLCD_Vid8Bits_DisplayShiftLeft+0xc0>
    3094:	9c 83       	std	Y+4, r25	; 0x04
    3096:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3098:	8d 81       	ldd	r24, Y+5	; 0x05
    309a:	9e 81       	ldd	r25, Y+6	; 0x06
    309c:	01 97       	sbiw	r24, 0x01	; 1
    309e:	9e 83       	std	Y+6, r25	; 0x06
    30a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30a2:	8d 81       	ldd	r24, Y+5	; 0x05
    30a4:	9e 81       	ldd	r25, Y+6	; 0x06
    30a6:	00 97       	sbiw	r24, 0x00	; 0
    30a8:	69 f7       	brne	.-38     	; 0x3084 <HCLCD_Vid8Bits_DisplayShiftLeft+0xb4>
    30aa:	14 c0       	rjmp	.+40     	; 0x30d4 <HCLCD_Vid8Bits_DisplayShiftLeft+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30ac:	6f 81       	ldd	r22, Y+7	; 0x07
    30ae:	78 85       	ldd	r23, Y+8	; 0x08
    30b0:	89 85       	ldd	r24, Y+9	; 0x09
    30b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    30b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b8:	dc 01       	movw	r26, r24
    30ba:	cb 01       	movw	r24, r22
    30bc:	9e 83       	std	Y+6, r25	; 0x06
    30be:	8d 83       	std	Y+5, r24	; 0x05
    30c0:	8d 81       	ldd	r24, Y+5	; 0x05
    30c2:	9e 81       	ldd	r25, Y+6	; 0x06
    30c4:	9a 83       	std	Y+2, r25	; 0x02
    30c6:	89 83       	std	Y+1, r24	; 0x01
    30c8:	89 81       	ldd	r24, Y+1	; 0x01
    30ca:	9a 81       	ldd	r25, Y+2	; 0x02
    30cc:	01 97       	sbiw	r24, 0x01	; 1
    30ce:	f1 f7       	brne	.-4      	; 0x30cc <HCLCD_Vid8Bits_DisplayShiftLeft+0xfc>
    30d0:	9a 83       	std	Y+2, r25	; 0x02
    30d2:	89 83       	std	Y+1, r24	; 0x01
}
/**/
 void HCLCD_Vid8Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    30d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    30d6:	8f 5f       	subi	r24, 0xFF	; 255
    30d8:	8f 87       	std	Y+15, r24	; 0x0f
    30da:	9f 85       	ldd	r25, Y+15	; 0x0f
    30dc:	88 89       	ldd	r24, Y+16	; 0x10
    30de:	98 17       	cp	r25, r24
    30e0:	08 f4       	brcc	.+2      	; 0x30e4 <HCLCD_Vid8Bits_DisplayShiftLeft+0x114>
    30e2:	83 cf       	rjmp	.-250    	; 0x2fea <HCLCD_Vid8Bits_DisplayShiftLeft+0x1a>
 {
	 HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_LEFT);
  _delay_ms(300);
 }
}
    30e4:	60 96       	adiw	r28, 0x10	; 16
    30e6:	0f b6       	in	r0, 0x3f	; 63
    30e8:	f8 94       	cli
    30ea:	de bf       	out	0x3e, r29	; 62
    30ec:	0f be       	out	0x3f, r0	; 63
    30ee:	cd bf       	out	0x3d, r28	; 61
    30f0:	cf 91       	pop	r28
    30f2:	df 91       	pop	r29
    30f4:	08 95       	ret

000030f6 <HCLCD_Vid8Bits_DisplayShiftRight>:
/**/
 void HCLCD_Vid8Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
    30f6:	df 93       	push	r29
    30f8:	cf 93       	push	r28
    30fa:	cd b7       	in	r28, 0x3d	; 61
    30fc:	de b7       	in	r29, 0x3e	; 62
    30fe:	60 97       	sbiw	r28, 0x10	; 16
    3100:	0f b6       	in	r0, 0x3f	; 63
    3102:	f8 94       	cli
    3104:	de bf       	out	0x3e, r29	; 62
    3106:	0f be       	out	0x3f, r0	; 63
    3108:	cd bf       	out	0x3d, r28	; 61
    310a:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    310c:	1f 86       	std	Y+15, r1	; 0x0f
    310e:	78 c0       	rjmp	.+240    	; 0x3200 <HCLCD_Vid8Bits_DisplayShiftRight+0x10a>
	{
		HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_RIGHT);
    3110:	8c e1       	ldi	r24, 0x1C	; 28
    3112:	0e 94 49 12 	call	0x2492	; 0x2492 <HCLCD_Vid8Bits_SendCommand>
    3116:	80 e0       	ldi	r24, 0x00	; 0
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	a6 e9       	ldi	r26, 0x96	; 150
    311c:	b3 e4       	ldi	r27, 0x43	; 67
    311e:	8b 87       	std	Y+11, r24	; 0x0b
    3120:	9c 87       	std	Y+12, r25	; 0x0c
    3122:	ad 87       	std	Y+13, r26	; 0x0d
    3124:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3126:	6b 85       	ldd	r22, Y+11	; 0x0b
    3128:	7c 85       	ldd	r23, Y+12	; 0x0c
    312a:	8d 85       	ldd	r24, Y+13	; 0x0d
    312c:	9e 85       	ldd	r25, Y+14	; 0x0e
    312e:	20 e0       	ldi	r18, 0x00	; 0
    3130:	30 e0       	ldi	r19, 0x00	; 0
    3132:	4a ef       	ldi	r20, 0xFA	; 250
    3134:	54 e4       	ldi	r21, 0x44	; 68
    3136:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    313a:	dc 01       	movw	r26, r24
    313c:	cb 01       	movw	r24, r22
    313e:	8f 83       	std	Y+7, r24	; 0x07
    3140:	98 87       	std	Y+8, r25	; 0x08
    3142:	a9 87       	std	Y+9, r26	; 0x09
    3144:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3146:	6f 81       	ldd	r22, Y+7	; 0x07
    3148:	78 85       	ldd	r23, Y+8	; 0x08
    314a:	89 85       	ldd	r24, Y+9	; 0x09
    314c:	9a 85       	ldd	r25, Y+10	; 0x0a
    314e:	20 e0       	ldi	r18, 0x00	; 0
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	40 e8       	ldi	r20, 0x80	; 128
    3154:	5f e3       	ldi	r21, 0x3F	; 63
    3156:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    315a:	88 23       	and	r24, r24
    315c:	2c f4       	brge	.+10     	; 0x3168 <HCLCD_Vid8Bits_DisplayShiftRight+0x72>
		__ticks = 1;
    315e:	81 e0       	ldi	r24, 0x01	; 1
    3160:	90 e0       	ldi	r25, 0x00	; 0
    3162:	9e 83       	std	Y+6, r25	; 0x06
    3164:	8d 83       	std	Y+5, r24	; 0x05
    3166:	3f c0       	rjmp	.+126    	; 0x31e6 <HCLCD_Vid8Bits_DisplayShiftRight+0xf0>
	else if (__tmp > 65535)
    3168:	6f 81       	ldd	r22, Y+7	; 0x07
    316a:	78 85       	ldd	r23, Y+8	; 0x08
    316c:	89 85       	ldd	r24, Y+9	; 0x09
    316e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3170:	20 e0       	ldi	r18, 0x00	; 0
    3172:	3f ef       	ldi	r19, 0xFF	; 255
    3174:	4f e7       	ldi	r20, 0x7F	; 127
    3176:	57 e4       	ldi	r21, 0x47	; 71
    3178:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    317c:	18 16       	cp	r1, r24
    317e:	4c f5       	brge	.+82     	; 0x31d2 <HCLCD_Vid8Bits_DisplayShiftRight+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3180:	6b 85       	ldd	r22, Y+11	; 0x0b
    3182:	7c 85       	ldd	r23, Y+12	; 0x0c
    3184:	8d 85       	ldd	r24, Y+13	; 0x0d
    3186:	9e 85       	ldd	r25, Y+14	; 0x0e
    3188:	20 e0       	ldi	r18, 0x00	; 0
    318a:	30 e0       	ldi	r19, 0x00	; 0
    318c:	40 e2       	ldi	r20, 0x20	; 32
    318e:	51 e4       	ldi	r21, 0x41	; 65
    3190:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3194:	dc 01       	movw	r26, r24
    3196:	cb 01       	movw	r24, r22
    3198:	bc 01       	movw	r22, r24
    319a:	cd 01       	movw	r24, r26
    319c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a0:	dc 01       	movw	r26, r24
    31a2:	cb 01       	movw	r24, r22
    31a4:	9e 83       	std	Y+6, r25	; 0x06
    31a6:	8d 83       	std	Y+5, r24	; 0x05
    31a8:	0f c0       	rjmp	.+30     	; 0x31c8 <HCLCD_Vid8Bits_DisplayShiftRight+0xd2>
    31aa:	88 ec       	ldi	r24, 0xC8	; 200
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	9c 83       	std	Y+4, r25	; 0x04
    31b0:	8b 83       	std	Y+3, r24	; 0x03
    31b2:	8b 81       	ldd	r24, Y+3	; 0x03
    31b4:	9c 81       	ldd	r25, Y+4	; 0x04
    31b6:	01 97       	sbiw	r24, 0x01	; 1
    31b8:	f1 f7       	brne	.-4      	; 0x31b6 <HCLCD_Vid8Bits_DisplayShiftRight+0xc0>
    31ba:	9c 83       	std	Y+4, r25	; 0x04
    31bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31be:	8d 81       	ldd	r24, Y+5	; 0x05
    31c0:	9e 81       	ldd	r25, Y+6	; 0x06
    31c2:	01 97       	sbiw	r24, 0x01	; 1
    31c4:	9e 83       	std	Y+6, r25	; 0x06
    31c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31c8:	8d 81       	ldd	r24, Y+5	; 0x05
    31ca:	9e 81       	ldd	r25, Y+6	; 0x06
    31cc:	00 97       	sbiw	r24, 0x00	; 0
    31ce:	69 f7       	brne	.-38     	; 0x31aa <HCLCD_Vid8Bits_DisplayShiftRight+0xb4>
    31d0:	14 c0       	rjmp	.+40     	; 0x31fa <HCLCD_Vid8Bits_DisplayShiftRight+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31d2:	6f 81       	ldd	r22, Y+7	; 0x07
    31d4:	78 85       	ldd	r23, Y+8	; 0x08
    31d6:	89 85       	ldd	r24, Y+9	; 0x09
    31d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    31da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31de:	dc 01       	movw	r26, r24
    31e0:	cb 01       	movw	r24, r22
    31e2:	9e 83       	std	Y+6, r25	; 0x06
    31e4:	8d 83       	std	Y+5, r24	; 0x05
    31e6:	8d 81       	ldd	r24, Y+5	; 0x05
    31e8:	9e 81       	ldd	r25, Y+6	; 0x06
    31ea:	9a 83       	std	Y+2, r25	; 0x02
    31ec:	89 83       	std	Y+1, r24	; 0x01
    31ee:	89 81       	ldd	r24, Y+1	; 0x01
    31f0:	9a 81       	ldd	r25, Y+2	; 0x02
    31f2:	01 97       	sbiw	r24, 0x01	; 1
    31f4:	f1 f7       	brne	.-4      	; 0x31f2 <HCLCD_Vid8Bits_DisplayShiftRight+0xfc>
    31f6:	9a 83       	std	Y+2, r25	; 0x02
    31f8:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid8Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    31fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    31fc:	8f 5f       	subi	r24, 0xFF	; 255
    31fe:	8f 87       	std	Y+15, r24	; 0x0f
    3200:	9f 85       	ldd	r25, Y+15	; 0x0f
    3202:	88 89       	ldd	r24, Y+16	; 0x10
    3204:	98 17       	cp	r25, r24
    3206:	08 f4       	brcc	.+2      	; 0x320a <HCLCD_Vid8Bits_DisplayShiftRight+0x114>
    3208:	83 cf       	rjmp	.-250    	; 0x3110 <HCLCD_Vid8Bits_DisplayShiftRight+0x1a>
	{
		HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_RIGHT);
      _delay_ms(300);
	}
}
    320a:	60 96       	adiw	r28, 0x10	; 16
    320c:	0f b6       	in	r0, 0x3f	; 63
    320e:	f8 94       	cli
    3210:	de bf       	out	0x3e, r29	; 62
    3212:	0f be       	out	0x3f, r0	; 63
    3214:	cd bf       	out	0x3d, r28	; 61
    3216:	cf 91       	pop	r28
    3218:	df 91       	pop	r29
    321a:	08 95       	ret

0000321c <HCLCD_Vid8Bits_CursorShiftLeft>:
 /**/
 void HCLCD_Vid8Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
    321c:	df 93       	push	r29
    321e:	cf 93       	push	r28
    3220:	cd b7       	in	r28, 0x3d	; 61
    3222:	de b7       	in	r29, 0x3e	; 62
    3224:	60 97       	sbiw	r28, 0x10	; 16
    3226:	0f b6       	in	r0, 0x3f	; 63
    3228:	f8 94       	cli
    322a:	de bf       	out	0x3e, r29	; 62
    322c:	0f be       	out	0x3f, r0	; 63
    322e:	cd bf       	out	0x3d, r28	; 61
    3230:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    3232:	1f 86       	std	Y+15, r1	; 0x0f
    3234:	78 c0       	rjmp	.+240    	; 0x3326 <HCLCD_Vid8Bits_CursorShiftLeft+0x10a>
 {
	 HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_LEFT);
    3236:	80 e1       	ldi	r24, 0x10	; 16
    3238:	0e 94 49 12 	call	0x2492	; 0x2492 <HCLCD_Vid8Bits_SendCommand>
    323c:	80 e0       	ldi	r24, 0x00	; 0
    323e:	90 e0       	ldi	r25, 0x00	; 0
    3240:	a6 e9       	ldi	r26, 0x96	; 150
    3242:	b3 e4       	ldi	r27, 0x43	; 67
    3244:	8b 87       	std	Y+11, r24	; 0x0b
    3246:	9c 87       	std	Y+12, r25	; 0x0c
    3248:	ad 87       	std	Y+13, r26	; 0x0d
    324a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    324c:	6b 85       	ldd	r22, Y+11	; 0x0b
    324e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3250:	8d 85       	ldd	r24, Y+13	; 0x0d
    3252:	9e 85       	ldd	r25, Y+14	; 0x0e
    3254:	20 e0       	ldi	r18, 0x00	; 0
    3256:	30 e0       	ldi	r19, 0x00	; 0
    3258:	4a ef       	ldi	r20, 0xFA	; 250
    325a:	54 e4       	ldi	r21, 0x44	; 68
    325c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3260:	dc 01       	movw	r26, r24
    3262:	cb 01       	movw	r24, r22
    3264:	8f 83       	std	Y+7, r24	; 0x07
    3266:	98 87       	std	Y+8, r25	; 0x08
    3268:	a9 87       	std	Y+9, r26	; 0x09
    326a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    326c:	6f 81       	ldd	r22, Y+7	; 0x07
    326e:	78 85       	ldd	r23, Y+8	; 0x08
    3270:	89 85       	ldd	r24, Y+9	; 0x09
    3272:	9a 85       	ldd	r25, Y+10	; 0x0a
    3274:	20 e0       	ldi	r18, 0x00	; 0
    3276:	30 e0       	ldi	r19, 0x00	; 0
    3278:	40 e8       	ldi	r20, 0x80	; 128
    327a:	5f e3       	ldi	r21, 0x3F	; 63
    327c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3280:	88 23       	and	r24, r24
    3282:	2c f4       	brge	.+10     	; 0x328e <HCLCD_Vid8Bits_CursorShiftLeft+0x72>
		__ticks = 1;
    3284:	81 e0       	ldi	r24, 0x01	; 1
    3286:	90 e0       	ldi	r25, 0x00	; 0
    3288:	9e 83       	std	Y+6, r25	; 0x06
    328a:	8d 83       	std	Y+5, r24	; 0x05
    328c:	3f c0       	rjmp	.+126    	; 0x330c <HCLCD_Vid8Bits_CursorShiftLeft+0xf0>
	else if (__tmp > 65535)
    328e:	6f 81       	ldd	r22, Y+7	; 0x07
    3290:	78 85       	ldd	r23, Y+8	; 0x08
    3292:	89 85       	ldd	r24, Y+9	; 0x09
    3294:	9a 85       	ldd	r25, Y+10	; 0x0a
    3296:	20 e0       	ldi	r18, 0x00	; 0
    3298:	3f ef       	ldi	r19, 0xFF	; 255
    329a:	4f e7       	ldi	r20, 0x7F	; 127
    329c:	57 e4       	ldi	r21, 0x47	; 71
    329e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32a2:	18 16       	cp	r1, r24
    32a4:	4c f5       	brge	.+82     	; 0x32f8 <HCLCD_Vid8Bits_CursorShiftLeft+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    32a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    32aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    32ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    32ae:	20 e0       	ldi	r18, 0x00	; 0
    32b0:	30 e0       	ldi	r19, 0x00	; 0
    32b2:	40 e2       	ldi	r20, 0x20	; 32
    32b4:	51 e4       	ldi	r21, 0x41	; 65
    32b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ba:	dc 01       	movw	r26, r24
    32bc:	cb 01       	movw	r24, r22
    32be:	bc 01       	movw	r22, r24
    32c0:	cd 01       	movw	r24, r26
    32c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32c6:	dc 01       	movw	r26, r24
    32c8:	cb 01       	movw	r24, r22
    32ca:	9e 83       	std	Y+6, r25	; 0x06
    32cc:	8d 83       	std	Y+5, r24	; 0x05
    32ce:	0f c0       	rjmp	.+30     	; 0x32ee <HCLCD_Vid8Bits_CursorShiftLeft+0xd2>
    32d0:	88 ec       	ldi	r24, 0xC8	; 200
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	9c 83       	std	Y+4, r25	; 0x04
    32d6:	8b 83       	std	Y+3, r24	; 0x03
    32d8:	8b 81       	ldd	r24, Y+3	; 0x03
    32da:	9c 81       	ldd	r25, Y+4	; 0x04
    32dc:	01 97       	sbiw	r24, 0x01	; 1
    32de:	f1 f7       	brne	.-4      	; 0x32dc <HCLCD_Vid8Bits_CursorShiftLeft+0xc0>
    32e0:	9c 83       	std	Y+4, r25	; 0x04
    32e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32e4:	8d 81       	ldd	r24, Y+5	; 0x05
    32e6:	9e 81       	ldd	r25, Y+6	; 0x06
    32e8:	01 97       	sbiw	r24, 0x01	; 1
    32ea:	9e 83       	std	Y+6, r25	; 0x06
    32ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32ee:	8d 81       	ldd	r24, Y+5	; 0x05
    32f0:	9e 81       	ldd	r25, Y+6	; 0x06
    32f2:	00 97       	sbiw	r24, 0x00	; 0
    32f4:	69 f7       	brne	.-38     	; 0x32d0 <HCLCD_Vid8Bits_CursorShiftLeft+0xb4>
    32f6:	14 c0       	rjmp	.+40     	; 0x3320 <HCLCD_Vid8Bits_CursorShiftLeft+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32f8:	6f 81       	ldd	r22, Y+7	; 0x07
    32fa:	78 85       	ldd	r23, Y+8	; 0x08
    32fc:	89 85       	ldd	r24, Y+9	; 0x09
    32fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3300:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3304:	dc 01       	movw	r26, r24
    3306:	cb 01       	movw	r24, r22
    3308:	9e 83       	std	Y+6, r25	; 0x06
    330a:	8d 83       	std	Y+5, r24	; 0x05
    330c:	8d 81       	ldd	r24, Y+5	; 0x05
    330e:	9e 81       	ldd	r25, Y+6	; 0x06
    3310:	9a 83       	std	Y+2, r25	; 0x02
    3312:	89 83       	std	Y+1, r24	; 0x01
    3314:	89 81       	ldd	r24, Y+1	; 0x01
    3316:	9a 81       	ldd	r25, Y+2	; 0x02
    3318:	01 97       	sbiw	r24, 0x01	; 1
    331a:	f1 f7       	brne	.-4      	; 0x3318 <HCLCD_Vid8Bits_CursorShiftLeft+0xfc>
    331c:	9a 83       	std	Y+2, r25	; 0x02
    331e:	89 83       	std	Y+1, r24	; 0x01
}
 /**/
 void HCLCD_Vid8Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    3320:	8f 85       	ldd	r24, Y+15	; 0x0f
    3322:	8f 5f       	subi	r24, 0xFF	; 255
    3324:	8f 87       	std	Y+15, r24	; 0x0f
    3326:	9f 85       	ldd	r25, Y+15	; 0x0f
    3328:	88 89       	ldd	r24, Y+16	; 0x10
    332a:	98 17       	cp	r25, r24
    332c:	08 f4       	brcc	.+2      	; 0x3330 <HCLCD_Vid8Bits_CursorShiftLeft+0x114>
    332e:	83 cf       	rjmp	.-250    	; 0x3236 <HCLCD_Vid8Bits_CursorShiftLeft+0x1a>
 {
	 HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_LEFT);
  _delay_ms(300);
 }
}
    3330:	60 96       	adiw	r28, 0x10	; 16
    3332:	0f b6       	in	r0, 0x3f	; 63
    3334:	f8 94       	cli
    3336:	de bf       	out	0x3e, r29	; 62
    3338:	0f be       	out	0x3f, r0	; 63
    333a:	cd bf       	out	0x3d, r28	; 61
    333c:	cf 91       	pop	r28
    333e:	df 91       	pop	r29
    3340:	08 95       	ret

00003342 <HCLCD_Vid8Bits_CursorShiftRight>:
/**/
 void HCLCD_Vid8Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
    3342:	df 93       	push	r29
    3344:	cf 93       	push	r28
    3346:	cd b7       	in	r28, 0x3d	; 61
    3348:	de b7       	in	r29, 0x3e	; 62
    334a:	60 97       	sbiw	r28, 0x10	; 16
    334c:	0f b6       	in	r0, 0x3f	; 63
    334e:	f8 94       	cli
    3350:	de bf       	out	0x3e, r29	; 62
    3352:	0f be       	out	0x3f, r0	; 63
    3354:	cd bf       	out	0x3d, r28	; 61
    3356:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    3358:	1f 86       	std	Y+15, r1	; 0x0f
    335a:	78 c0       	rjmp	.+240    	; 0x344c <HCLCD_Vid8Bits_CursorShiftRight+0x10a>
	{
		HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_RIGHT);
    335c:	84 e1       	ldi	r24, 0x14	; 20
    335e:	0e 94 49 12 	call	0x2492	; 0x2492 <HCLCD_Vid8Bits_SendCommand>
    3362:	80 e0       	ldi	r24, 0x00	; 0
    3364:	90 e0       	ldi	r25, 0x00	; 0
    3366:	a6 e9       	ldi	r26, 0x96	; 150
    3368:	b3 e4       	ldi	r27, 0x43	; 67
    336a:	8b 87       	std	Y+11, r24	; 0x0b
    336c:	9c 87       	std	Y+12, r25	; 0x0c
    336e:	ad 87       	std	Y+13, r26	; 0x0d
    3370:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3372:	6b 85       	ldd	r22, Y+11	; 0x0b
    3374:	7c 85       	ldd	r23, Y+12	; 0x0c
    3376:	8d 85       	ldd	r24, Y+13	; 0x0d
    3378:	9e 85       	ldd	r25, Y+14	; 0x0e
    337a:	20 e0       	ldi	r18, 0x00	; 0
    337c:	30 e0       	ldi	r19, 0x00	; 0
    337e:	4a ef       	ldi	r20, 0xFA	; 250
    3380:	54 e4       	ldi	r21, 0x44	; 68
    3382:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3386:	dc 01       	movw	r26, r24
    3388:	cb 01       	movw	r24, r22
    338a:	8f 83       	std	Y+7, r24	; 0x07
    338c:	98 87       	std	Y+8, r25	; 0x08
    338e:	a9 87       	std	Y+9, r26	; 0x09
    3390:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3392:	6f 81       	ldd	r22, Y+7	; 0x07
    3394:	78 85       	ldd	r23, Y+8	; 0x08
    3396:	89 85       	ldd	r24, Y+9	; 0x09
    3398:	9a 85       	ldd	r25, Y+10	; 0x0a
    339a:	20 e0       	ldi	r18, 0x00	; 0
    339c:	30 e0       	ldi	r19, 0x00	; 0
    339e:	40 e8       	ldi	r20, 0x80	; 128
    33a0:	5f e3       	ldi	r21, 0x3F	; 63
    33a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33a6:	88 23       	and	r24, r24
    33a8:	2c f4       	brge	.+10     	; 0x33b4 <HCLCD_Vid8Bits_CursorShiftRight+0x72>
		__ticks = 1;
    33aa:	81 e0       	ldi	r24, 0x01	; 1
    33ac:	90 e0       	ldi	r25, 0x00	; 0
    33ae:	9e 83       	std	Y+6, r25	; 0x06
    33b0:	8d 83       	std	Y+5, r24	; 0x05
    33b2:	3f c0       	rjmp	.+126    	; 0x3432 <HCLCD_Vid8Bits_CursorShiftRight+0xf0>
	else if (__tmp > 65535)
    33b4:	6f 81       	ldd	r22, Y+7	; 0x07
    33b6:	78 85       	ldd	r23, Y+8	; 0x08
    33b8:	89 85       	ldd	r24, Y+9	; 0x09
    33ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    33bc:	20 e0       	ldi	r18, 0x00	; 0
    33be:	3f ef       	ldi	r19, 0xFF	; 255
    33c0:	4f e7       	ldi	r20, 0x7F	; 127
    33c2:	57 e4       	ldi	r21, 0x47	; 71
    33c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33c8:	18 16       	cp	r1, r24
    33ca:	4c f5       	brge	.+82     	; 0x341e <HCLCD_Vid8Bits_CursorShiftRight+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    33ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    33d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    33d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    33d4:	20 e0       	ldi	r18, 0x00	; 0
    33d6:	30 e0       	ldi	r19, 0x00	; 0
    33d8:	40 e2       	ldi	r20, 0x20	; 32
    33da:	51 e4       	ldi	r21, 0x41	; 65
    33dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e0:	dc 01       	movw	r26, r24
    33e2:	cb 01       	movw	r24, r22
    33e4:	bc 01       	movw	r22, r24
    33e6:	cd 01       	movw	r24, r26
    33e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ec:	dc 01       	movw	r26, r24
    33ee:	cb 01       	movw	r24, r22
    33f0:	9e 83       	std	Y+6, r25	; 0x06
    33f2:	8d 83       	std	Y+5, r24	; 0x05
    33f4:	0f c0       	rjmp	.+30     	; 0x3414 <HCLCD_Vid8Bits_CursorShiftRight+0xd2>
    33f6:	88 ec       	ldi	r24, 0xC8	; 200
    33f8:	90 e0       	ldi	r25, 0x00	; 0
    33fa:	9c 83       	std	Y+4, r25	; 0x04
    33fc:	8b 83       	std	Y+3, r24	; 0x03
    33fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3400:	9c 81       	ldd	r25, Y+4	; 0x04
    3402:	01 97       	sbiw	r24, 0x01	; 1
    3404:	f1 f7       	brne	.-4      	; 0x3402 <HCLCD_Vid8Bits_CursorShiftRight+0xc0>
    3406:	9c 83       	std	Y+4, r25	; 0x04
    3408:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    340a:	8d 81       	ldd	r24, Y+5	; 0x05
    340c:	9e 81       	ldd	r25, Y+6	; 0x06
    340e:	01 97       	sbiw	r24, 0x01	; 1
    3410:	9e 83       	std	Y+6, r25	; 0x06
    3412:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3414:	8d 81       	ldd	r24, Y+5	; 0x05
    3416:	9e 81       	ldd	r25, Y+6	; 0x06
    3418:	00 97       	sbiw	r24, 0x00	; 0
    341a:	69 f7       	brne	.-38     	; 0x33f6 <HCLCD_Vid8Bits_CursorShiftRight+0xb4>
    341c:	14 c0       	rjmp	.+40     	; 0x3446 <HCLCD_Vid8Bits_CursorShiftRight+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    341e:	6f 81       	ldd	r22, Y+7	; 0x07
    3420:	78 85       	ldd	r23, Y+8	; 0x08
    3422:	89 85       	ldd	r24, Y+9	; 0x09
    3424:	9a 85       	ldd	r25, Y+10	; 0x0a
    3426:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    342a:	dc 01       	movw	r26, r24
    342c:	cb 01       	movw	r24, r22
    342e:	9e 83       	std	Y+6, r25	; 0x06
    3430:	8d 83       	std	Y+5, r24	; 0x05
    3432:	8d 81       	ldd	r24, Y+5	; 0x05
    3434:	9e 81       	ldd	r25, Y+6	; 0x06
    3436:	9a 83       	std	Y+2, r25	; 0x02
    3438:	89 83       	std	Y+1, r24	; 0x01
    343a:	89 81       	ldd	r24, Y+1	; 0x01
    343c:	9a 81       	ldd	r25, Y+2	; 0x02
    343e:	01 97       	sbiw	r24, 0x01	; 1
    3440:	f1 f7       	brne	.-4      	; 0x343e <HCLCD_Vid8Bits_CursorShiftRight+0xfc>
    3442:	9a 83       	std	Y+2, r25	; 0x02
    3444:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid8Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    3446:	8f 85       	ldd	r24, Y+15	; 0x0f
    3448:	8f 5f       	subi	r24, 0xFF	; 255
    344a:	8f 87       	std	Y+15, r24	; 0x0f
    344c:	9f 85       	ldd	r25, Y+15	; 0x0f
    344e:	88 89       	ldd	r24, Y+16	; 0x10
    3450:	98 17       	cp	r25, r24
    3452:	08 f4       	brcc	.+2      	; 0x3456 <HCLCD_Vid8Bits_CursorShiftRight+0x114>
    3454:	83 cf       	rjmp	.-250    	; 0x335c <HCLCD_Vid8Bits_CursorShiftRight+0x1a>
	{
		HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_RIGHT);
      _delay_ms(300);
	}
}
    3456:	60 96       	adiw	r28, 0x10	; 16
    3458:	0f b6       	in	r0, 0x3f	; 63
    345a:	f8 94       	cli
    345c:	de bf       	out	0x3e, r29	; 62
    345e:	0f be       	out	0x3f, r0	; 63
    3460:	cd bf       	out	0x3d, r28	; 61
    3462:	cf 91       	pop	r28
    3464:	df 91       	pop	r29
    3466:	08 95       	ret

00003468 <HCLCD_Vid4Bits_SendCommand>:
/****************************************************************************************************************************************/

/*Send Command 4 Bits*/
void HCLCD_Vid4Bits_SendCommand(u8 Copy_u8Command )
{
    3468:	df 93       	push	r29
    346a:	cf 93       	push	r28
    346c:	cd b7       	in	r28, 0x3d	; 61
    346e:	de b7       	in	r29, 0x3e	; 62
    3470:	2f 97       	sbiw	r28, 0x0f	; 15
    3472:	0f b6       	in	r0, 0x3f	; 63
    3474:	f8 94       	cli
    3476:	de bf       	out	0x3e, r29	; 62
    3478:	0f be       	out	0x3f, r0	; 63
    347a:	cd bf       	out	0x3d, r28	; 61
    347c:	8f 87       	std	Y+15, r24	; 0x0f
	//u8 LOC_u8CopyCommand;
	/*select Command register--> Write zero on Rs pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_LOW);
    347e:	80 e0       	ldi	r24, 0x00	; 0
    3480:	62 e0       	ldi	r22, 0x02	; 2
    3482:	40 e0       	ldi	r20, 0x00	; 0
    3484:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
	/*select Write mode--> Write zero on RW pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    3488:	81 e0       	ldi	r24, 0x01	; 1
    348a:	62 e0       	ldi	r22, 0x02	; 2
    348c:	40 e0       	ldi	r20, 0x00	; 0
    348e:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
	/*Send  Command*/
	//LOC_u8CopyCommand=(Copy_u8Command&0x0F)<<HCLCD_PINSTART;
	MDIO_Error_State_SetNippleValue(HCLCD_PINSTART,DATA_PORT,Copy_u8Command);
    3492:	84 e0       	ldi	r24, 0x04	; 4
    3494:	62 e0       	ldi	r22, 0x02	; 2
    3496:	4f 85       	ldd	r20, Y+15	; 0x0f
    3498:	0e 94 af 0a 	call	0x155e	; 0x155e <MDIO_Error_State_SetNippleValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    349c:	82 e0       	ldi	r24, 0x02	; 2
    349e:	62 e0       	ldi	r22, 0x02	; 2
    34a0:	41 e0       	ldi	r20, 0x01	; 1
    34a2:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
    34a6:	80 e0       	ldi	r24, 0x00	; 0
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	a0 e0       	ldi	r26, 0x00	; 0
    34ac:	b0 e4       	ldi	r27, 0x40	; 64
    34ae:	8b 87       	std	Y+11, r24	; 0x0b
    34b0:	9c 87       	std	Y+12, r25	; 0x0c
    34b2:	ad 87       	std	Y+13, r26	; 0x0d
    34b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    34b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    34ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    34bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    34be:	20 e0       	ldi	r18, 0x00	; 0
    34c0:	30 e0       	ldi	r19, 0x00	; 0
    34c2:	4a ef       	ldi	r20, 0xFA	; 250
    34c4:	54 e4       	ldi	r21, 0x44	; 68
    34c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ca:	dc 01       	movw	r26, r24
    34cc:	cb 01       	movw	r24, r22
    34ce:	8f 83       	std	Y+7, r24	; 0x07
    34d0:	98 87       	std	Y+8, r25	; 0x08
    34d2:	a9 87       	std	Y+9, r26	; 0x09
    34d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34d6:	6f 81       	ldd	r22, Y+7	; 0x07
    34d8:	78 85       	ldd	r23, Y+8	; 0x08
    34da:	89 85       	ldd	r24, Y+9	; 0x09
    34dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    34de:	20 e0       	ldi	r18, 0x00	; 0
    34e0:	30 e0       	ldi	r19, 0x00	; 0
    34e2:	40 e8       	ldi	r20, 0x80	; 128
    34e4:	5f e3       	ldi	r21, 0x3F	; 63
    34e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34ea:	88 23       	and	r24, r24
    34ec:	2c f4       	brge	.+10     	; 0x34f8 <HCLCD_Vid4Bits_SendCommand+0x90>
		__ticks = 1;
    34ee:	81 e0       	ldi	r24, 0x01	; 1
    34f0:	90 e0       	ldi	r25, 0x00	; 0
    34f2:	9e 83       	std	Y+6, r25	; 0x06
    34f4:	8d 83       	std	Y+5, r24	; 0x05
    34f6:	3f c0       	rjmp	.+126    	; 0x3576 <HCLCD_Vid4Bits_SendCommand+0x10e>
	else if (__tmp > 65535)
    34f8:	6f 81       	ldd	r22, Y+7	; 0x07
    34fa:	78 85       	ldd	r23, Y+8	; 0x08
    34fc:	89 85       	ldd	r24, Y+9	; 0x09
    34fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3500:	20 e0       	ldi	r18, 0x00	; 0
    3502:	3f ef       	ldi	r19, 0xFF	; 255
    3504:	4f e7       	ldi	r20, 0x7F	; 127
    3506:	57 e4       	ldi	r21, 0x47	; 71
    3508:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    350c:	18 16       	cp	r1, r24
    350e:	4c f5       	brge	.+82     	; 0x3562 <HCLCD_Vid4Bits_SendCommand+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3510:	6b 85       	ldd	r22, Y+11	; 0x0b
    3512:	7c 85       	ldd	r23, Y+12	; 0x0c
    3514:	8d 85       	ldd	r24, Y+13	; 0x0d
    3516:	9e 85       	ldd	r25, Y+14	; 0x0e
    3518:	20 e0       	ldi	r18, 0x00	; 0
    351a:	30 e0       	ldi	r19, 0x00	; 0
    351c:	40 e2       	ldi	r20, 0x20	; 32
    351e:	51 e4       	ldi	r21, 0x41	; 65
    3520:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3524:	dc 01       	movw	r26, r24
    3526:	cb 01       	movw	r24, r22
    3528:	bc 01       	movw	r22, r24
    352a:	cd 01       	movw	r24, r26
    352c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3530:	dc 01       	movw	r26, r24
    3532:	cb 01       	movw	r24, r22
    3534:	9e 83       	std	Y+6, r25	; 0x06
    3536:	8d 83       	std	Y+5, r24	; 0x05
    3538:	0f c0       	rjmp	.+30     	; 0x3558 <HCLCD_Vid4Bits_SendCommand+0xf0>
    353a:	88 ec       	ldi	r24, 0xC8	; 200
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	9c 83       	std	Y+4, r25	; 0x04
    3540:	8b 83       	std	Y+3, r24	; 0x03
    3542:	8b 81       	ldd	r24, Y+3	; 0x03
    3544:	9c 81       	ldd	r25, Y+4	; 0x04
    3546:	01 97       	sbiw	r24, 0x01	; 1
    3548:	f1 f7       	brne	.-4      	; 0x3546 <HCLCD_Vid4Bits_SendCommand+0xde>
    354a:	9c 83       	std	Y+4, r25	; 0x04
    354c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    354e:	8d 81       	ldd	r24, Y+5	; 0x05
    3550:	9e 81       	ldd	r25, Y+6	; 0x06
    3552:	01 97       	sbiw	r24, 0x01	; 1
    3554:	9e 83       	std	Y+6, r25	; 0x06
    3556:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3558:	8d 81       	ldd	r24, Y+5	; 0x05
    355a:	9e 81       	ldd	r25, Y+6	; 0x06
    355c:	00 97       	sbiw	r24, 0x00	; 0
    355e:	69 f7       	brne	.-38     	; 0x353a <HCLCD_Vid4Bits_SendCommand+0xd2>
    3560:	14 c0       	rjmp	.+40     	; 0x358a <HCLCD_Vid4Bits_SendCommand+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3562:	6f 81       	ldd	r22, Y+7	; 0x07
    3564:	78 85       	ldd	r23, Y+8	; 0x08
    3566:	89 85       	ldd	r24, Y+9	; 0x09
    3568:	9a 85       	ldd	r25, Y+10	; 0x0a
    356a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    356e:	dc 01       	movw	r26, r24
    3570:	cb 01       	movw	r24, r22
    3572:	9e 83       	std	Y+6, r25	; 0x06
    3574:	8d 83       	std	Y+5, r24	; 0x05
    3576:	8d 81       	ldd	r24, Y+5	; 0x05
    3578:	9e 81       	ldd	r25, Y+6	; 0x06
    357a:	9a 83       	std	Y+2, r25	; 0x02
    357c:	89 83       	std	Y+1, r24	; 0x01
    357e:	89 81       	ldd	r24, Y+1	; 0x01
    3580:	9a 81       	ldd	r25, Y+2	; 0x02
    3582:	01 97       	sbiw	r24, 0x01	; 1
    3584:	f1 f7       	brne	.-4      	; 0x3582 <HCLCD_Vid4Bits_SendCommand+0x11a>
    3586:	9a 83       	std	Y+2, r25	; 0x02
    3588:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    358a:	82 e0       	ldi	r24, 0x02	; 2
    358c:	62 e0       	ldi	r22, 0x02	; 2
    358e:	40 e0       	ldi	r20, 0x00	; 0
    3590:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
}
    3594:	2f 96       	adiw	r28, 0x0f	; 15
    3596:	0f b6       	in	r0, 0x3f	; 63
    3598:	f8 94       	cli
    359a:	de bf       	out	0x3e, r29	; 62
    359c:	0f be       	out	0x3f, r0	; 63
    359e:	cd bf       	out	0x3d, r28	; 61
    35a0:	cf 91       	pop	r28
    35a2:	df 91       	pop	r29
    35a4:	08 95       	ret

000035a6 <HCLCD_Vid4Bits_Init>:


/*LCD 4 Bits Initialization*/

void HCLCD_Vid4Bits_Init(void)
{
    35a6:	df 93       	push	r29
    35a8:	cf 93       	push	r28
    35aa:	cd b7       	in	r28, 0x3d	; 61
    35ac:	de b7       	in	r29, 0x3e	; 62
    35ae:	e9 97       	sbiw	r28, 0x39	; 57
    35b0:	0f b6       	in	r0, 0x3f	; 63
    35b2:	f8 94       	cli
    35b4:	de bf       	out	0x3e, r29	; 62
    35b6:	0f be       	out	0x3f, r0	; 63
    35b8:	cd bf       	out	0x3d, r28	; 61
	/*Fill This Function*/
	s8 LOC_u8PinCount;
	/*LCD Data and control port initialization*/
	for(LOC_u8PinCount=HCLCD_PINEND;LOC_u8PinCount>=HCLCD_PINSTART;LOC_u8PinCount--)
    35ba:	87 e0       	ldi	r24, 0x07	; 7
    35bc:	89 af       	std	Y+57, r24	; 0x39
    35be:	08 c0       	rjmp	.+16     	; 0x35d0 <HCLCD_Vid4Bits_Init+0x2a>
	{
		MDIO_Error_State_SetPinDirection(LOC_u8PinCount,DATA_PORT,PIN_OUTPUT);
    35c0:	89 ad       	ldd	r24, Y+57	; 0x39
    35c2:	62 e0       	ldi	r22, 0x02	; 2
    35c4:	41 e0       	ldi	r20, 0x01	; 1
    35c6:	0e 94 79 07 	call	0xef2	; 0xef2 <MDIO_Error_State_SetPinDirection>
void HCLCD_Vid4Bits_Init(void)
{
	/*Fill This Function*/
	s8 LOC_u8PinCount;
	/*LCD Data and control port initialization*/
	for(LOC_u8PinCount=HCLCD_PINEND;LOC_u8PinCount>=HCLCD_PINSTART;LOC_u8PinCount--)
    35ca:	89 ad       	ldd	r24, Y+57	; 0x39
    35cc:	81 50       	subi	r24, 0x01	; 1
    35ce:	89 af       	std	Y+57, r24	; 0x39
    35d0:	89 ad       	ldd	r24, Y+57	; 0x39
    35d2:	84 30       	cpi	r24, 0x04	; 4
    35d4:	ac f7       	brge	.-22     	; 0x35c0 <HCLCD_Vid4Bits_Init+0x1a>
	{
		MDIO_Error_State_SetPinDirection(LOC_u8PinCount,DATA_PORT,PIN_OUTPUT);
	}
	MDIO_Error_State_SetPinDirection(RS,CONTROL_PORT,PIN_OUTPUT);
    35d6:	80 e0       	ldi	r24, 0x00	; 0
    35d8:	62 e0       	ldi	r22, 0x02	; 2
    35da:	41 e0       	ldi	r20, 0x01	; 1
    35dc:	0e 94 79 07 	call	0xef2	; 0xef2 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(RW,CONTROL_PORT,PIN_OUTPUT);
    35e0:	81 e0       	ldi	r24, 0x01	; 1
    35e2:	62 e0       	ldi	r22, 0x02	; 2
    35e4:	41 e0       	ldi	r20, 0x01	; 1
    35e6:	0e 94 79 07 	call	0xef2	; 0xef2 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(E,CONTROL_PORT,PIN_OUTPUT);
    35ea:	82 e0       	ldi	r24, 0x02	; 2
    35ec:	62 e0       	ldi	r22, 0x02	; 2
    35ee:	41 e0       	ldi	r20, 0x01	; 1
    35f0:	0e 94 79 07 	call	0xef2	; 0xef2 <MDIO_Error_State_SetPinDirection>
    35f4:	80 e0       	ldi	r24, 0x00	; 0
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	a0 ef       	ldi	r26, 0xF0	; 240
    35fa:	b1 e4       	ldi	r27, 0x41	; 65
    35fc:	8d ab       	std	Y+53, r24	; 0x35
    35fe:	9e ab       	std	Y+54, r25	; 0x36
    3600:	af ab       	std	Y+55, r26	; 0x37
    3602:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3604:	6d a9       	ldd	r22, Y+53	; 0x35
    3606:	7e a9       	ldd	r23, Y+54	; 0x36
    3608:	8f a9       	ldd	r24, Y+55	; 0x37
    360a:	98 ad       	ldd	r25, Y+56	; 0x38
    360c:	20 e0       	ldi	r18, 0x00	; 0
    360e:	30 e0       	ldi	r19, 0x00	; 0
    3610:	4a ef       	ldi	r20, 0xFA	; 250
    3612:	54 e4       	ldi	r21, 0x44	; 68
    3614:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3618:	dc 01       	movw	r26, r24
    361a:	cb 01       	movw	r24, r22
    361c:	89 ab       	std	Y+49, r24	; 0x31
    361e:	9a ab       	std	Y+50, r25	; 0x32
    3620:	ab ab       	std	Y+51, r26	; 0x33
    3622:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3624:	69 a9       	ldd	r22, Y+49	; 0x31
    3626:	7a a9       	ldd	r23, Y+50	; 0x32
    3628:	8b a9       	ldd	r24, Y+51	; 0x33
    362a:	9c a9       	ldd	r25, Y+52	; 0x34
    362c:	20 e0       	ldi	r18, 0x00	; 0
    362e:	30 e0       	ldi	r19, 0x00	; 0
    3630:	40 e8       	ldi	r20, 0x80	; 128
    3632:	5f e3       	ldi	r21, 0x3F	; 63
    3634:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3638:	88 23       	and	r24, r24
    363a:	2c f4       	brge	.+10     	; 0x3646 <HCLCD_Vid4Bits_Init+0xa0>
		__ticks = 1;
    363c:	81 e0       	ldi	r24, 0x01	; 1
    363e:	90 e0       	ldi	r25, 0x00	; 0
    3640:	98 ab       	std	Y+48, r25	; 0x30
    3642:	8f a7       	std	Y+47, r24	; 0x2f
    3644:	3f c0       	rjmp	.+126    	; 0x36c4 <HCLCD_Vid4Bits_Init+0x11e>
	else if (__tmp > 65535)
    3646:	69 a9       	ldd	r22, Y+49	; 0x31
    3648:	7a a9       	ldd	r23, Y+50	; 0x32
    364a:	8b a9       	ldd	r24, Y+51	; 0x33
    364c:	9c a9       	ldd	r25, Y+52	; 0x34
    364e:	20 e0       	ldi	r18, 0x00	; 0
    3650:	3f ef       	ldi	r19, 0xFF	; 255
    3652:	4f e7       	ldi	r20, 0x7F	; 127
    3654:	57 e4       	ldi	r21, 0x47	; 71
    3656:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    365a:	18 16       	cp	r1, r24
    365c:	4c f5       	brge	.+82     	; 0x36b0 <HCLCD_Vid4Bits_Init+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    365e:	6d a9       	ldd	r22, Y+53	; 0x35
    3660:	7e a9       	ldd	r23, Y+54	; 0x36
    3662:	8f a9       	ldd	r24, Y+55	; 0x37
    3664:	98 ad       	ldd	r25, Y+56	; 0x38
    3666:	20 e0       	ldi	r18, 0x00	; 0
    3668:	30 e0       	ldi	r19, 0x00	; 0
    366a:	40 e2       	ldi	r20, 0x20	; 32
    366c:	51 e4       	ldi	r21, 0x41	; 65
    366e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3672:	dc 01       	movw	r26, r24
    3674:	cb 01       	movw	r24, r22
    3676:	bc 01       	movw	r22, r24
    3678:	cd 01       	movw	r24, r26
    367a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    367e:	dc 01       	movw	r26, r24
    3680:	cb 01       	movw	r24, r22
    3682:	98 ab       	std	Y+48, r25	; 0x30
    3684:	8f a7       	std	Y+47, r24	; 0x2f
    3686:	0f c0       	rjmp	.+30     	; 0x36a6 <HCLCD_Vid4Bits_Init+0x100>
    3688:	88 ec       	ldi	r24, 0xC8	; 200
    368a:	90 e0       	ldi	r25, 0x00	; 0
    368c:	9e a7       	std	Y+46, r25	; 0x2e
    368e:	8d a7       	std	Y+45, r24	; 0x2d
    3690:	8d a5       	ldd	r24, Y+45	; 0x2d
    3692:	9e a5       	ldd	r25, Y+46	; 0x2e
    3694:	01 97       	sbiw	r24, 0x01	; 1
    3696:	f1 f7       	brne	.-4      	; 0x3694 <HCLCD_Vid4Bits_Init+0xee>
    3698:	9e a7       	std	Y+46, r25	; 0x2e
    369a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    369c:	8f a5       	ldd	r24, Y+47	; 0x2f
    369e:	98 a9       	ldd	r25, Y+48	; 0x30
    36a0:	01 97       	sbiw	r24, 0x01	; 1
    36a2:	98 ab       	std	Y+48, r25	; 0x30
    36a4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    36a8:	98 a9       	ldd	r25, Y+48	; 0x30
    36aa:	00 97       	sbiw	r24, 0x00	; 0
    36ac:	69 f7       	brne	.-38     	; 0x3688 <HCLCD_Vid4Bits_Init+0xe2>
    36ae:	14 c0       	rjmp	.+40     	; 0x36d8 <HCLCD_Vid4Bits_Init+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36b0:	69 a9       	ldd	r22, Y+49	; 0x31
    36b2:	7a a9       	ldd	r23, Y+50	; 0x32
    36b4:	8b a9       	ldd	r24, Y+51	; 0x33
    36b6:	9c a9       	ldd	r25, Y+52	; 0x34
    36b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36bc:	dc 01       	movw	r26, r24
    36be:	cb 01       	movw	r24, r22
    36c0:	98 ab       	std	Y+48, r25	; 0x30
    36c2:	8f a7       	std	Y+47, r24	; 0x2f
    36c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    36c6:	98 a9       	ldd	r25, Y+48	; 0x30
    36c8:	9c a7       	std	Y+44, r25	; 0x2c
    36ca:	8b a7       	std	Y+43, r24	; 0x2b
    36cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    36ce:	9c a5       	ldd	r25, Y+44	; 0x2c
    36d0:	01 97       	sbiw	r24, 0x01	; 1
    36d2:	f1 f7       	brne	.-4      	; 0x36d0 <HCLCD_Vid4Bits_Init+0x12a>
    36d4:	9c a7       	std	Y+44, r25	; 0x2c
    36d6:	8b a7       	std	Y+43, r24	; 0x2b
	/*wait to 30ms*/
	_delay_ms(30);
	/*send function set command*/
	HCLCD_Vid4Bits_SendCommand(HCLCD_FUNCTION_SET>>4);
    36d8:	82 e0       	ldi	r24, 0x02	; 2
    36da:	0e 94 34 1a 	call	0x3468	; 0x3468 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_FUNCTION_SET>>4);
    36de:	82 e0       	ldi	r24, 0x02	; 2
    36e0:	0e 94 34 1a 	call	0x3468	; 0x3468 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_FUNCTION_SET);
    36e4:	88 e2       	ldi	r24, 0x28	; 40
    36e6:	0e 94 34 1a 	call	0x3468	; 0x3468 <HCLCD_Vid4Bits_SendCommand>
    36ea:	80 e0       	ldi	r24, 0x00	; 0
    36ec:	90 e0       	ldi	r25, 0x00	; 0
    36ee:	a0 e8       	ldi	r26, 0x80	; 128
    36f0:	bf e3       	ldi	r27, 0x3F	; 63
    36f2:	8f a3       	std	Y+39, r24	; 0x27
    36f4:	98 a7       	std	Y+40, r25	; 0x28
    36f6:	a9 a7       	std	Y+41, r26	; 0x29
    36f8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36fa:	6f a1       	ldd	r22, Y+39	; 0x27
    36fc:	78 a5       	ldd	r23, Y+40	; 0x28
    36fe:	89 a5       	ldd	r24, Y+41	; 0x29
    3700:	9a a5       	ldd	r25, Y+42	; 0x2a
    3702:	20 e0       	ldi	r18, 0x00	; 0
    3704:	30 e0       	ldi	r19, 0x00	; 0
    3706:	4a ef       	ldi	r20, 0xFA	; 250
    3708:	54 e4       	ldi	r21, 0x44	; 68
    370a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    370e:	dc 01       	movw	r26, r24
    3710:	cb 01       	movw	r24, r22
    3712:	8b a3       	std	Y+35, r24	; 0x23
    3714:	9c a3       	std	Y+36, r25	; 0x24
    3716:	ad a3       	std	Y+37, r26	; 0x25
    3718:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    371a:	6b a1       	ldd	r22, Y+35	; 0x23
    371c:	7c a1       	ldd	r23, Y+36	; 0x24
    371e:	8d a1       	ldd	r24, Y+37	; 0x25
    3720:	9e a1       	ldd	r25, Y+38	; 0x26
    3722:	20 e0       	ldi	r18, 0x00	; 0
    3724:	30 e0       	ldi	r19, 0x00	; 0
    3726:	40 e8       	ldi	r20, 0x80	; 128
    3728:	5f e3       	ldi	r21, 0x3F	; 63
    372a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    372e:	88 23       	and	r24, r24
    3730:	2c f4       	brge	.+10     	; 0x373c <HCLCD_Vid4Bits_Init+0x196>
		__ticks = 1;
    3732:	81 e0       	ldi	r24, 0x01	; 1
    3734:	90 e0       	ldi	r25, 0x00	; 0
    3736:	9a a3       	std	Y+34, r25	; 0x22
    3738:	89 a3       	std	Y+33, r24	; 0x21
    373a:	3f c0       	rjmp	.+126    	; 0x37ba <HCLCD_Vid4Bits_Init+0x214>
	else if (__tmp > 65535)
    373c:	6b a1       	ldd	r22, Y+35	; 0x23
    373e:	7c a1       	ldd	r23, Y+36	; 0x24
    3740:	8d a1       	ldd	r24, Y+37	; 0x25
    3742:	9e a1       	ldd	r25, Y+38	; 0x26
    3744:	20 e0       	ldi	r18, 0x00	; 0
    3746:	3f ef       	ldi	r19, 0xFF	; 255
    3748:	4f e7       	ldi	r20, 0x7F	; 127
    374a:	57 e4       	ldi	r21, 0x47	; 71
    374c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3750:	18 16       	cp	r1, r24
    3752:	4c f5       	brge	.+82     	; 0x37a6 <HCLCD_Vid4Bits_Init+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3754:	6f a1       	ldd	r22, Y+39	; 0x27
    3756:	78 a5       	ldd	r23, Y+40	; 0x28
    3758:	89 a5       	ldd	r24, Y+41	; 0x29
    375a:	9a a5       	ldd	r25, Y+42	; 0x2a
    375c:	20 e0       	ldi	r18, 0x00	; 0
    375e:	30 e0       	ldi	r19, 0x00	; 0
    3760:	40 e2       	ldi	r20, 0x20	; 32
    3762:	51 e4       	ldi	r21, 0x41	; 65
    3764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3768:	dc 01       	movw	r26, r24
    376a:	cb 01       	movw	r24, r22
    376c:	bc 01       	movw	r22, r24
    376e:	cd 01       	movw	r24, r26
    3770:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3774:	dc 01       	movw	r26, r24
    3776:	cb 01       	movw	r24, r22
    3778:	9a a3       	std	Y+34, r25	; 0x22
    377a:	89 a3       	std	Y+33, r24	; 0x21
    377c:	0f c0       	rjmp	.+30     	; 0x379c <HCLCD_Vid4Bits_Init+0x1f6>
    377e:	88 ec       	ldi	r24, 0xC8	; 200
    3780:	90 e0       	ldi	r25, 0x00	; 0
    3782:	98 a3       	std	Y+32, r25	; 0x20
    3784:	8f 8f       	std	Y+31, r24	; 0x1f
    3786:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3788:	98 a1       	ldd	r25, Y+32	; 0x20
    378a:	01 97       	sbiw	r24, 0x01	; 1
    378c:	f1 f7       	brne	.-4      	; 0x378a <HCLCD_Vid4Bits_Init+0x1e4>
    378e:	98 a3       	std	Y+32, r25	; 0x20
    3790:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3792:	89 a1       	ldd	r24, Y+33	; 0x21
    3794:	9a a1       	ldd	r25, Y+34	; 0x22
    3796:	01 97       	sbiw	r24, 0x01	; 1
    3798:	9a a3       	std	Y+34, r25	; 0x22
    379a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    379c:	89 a1       	ldd	r24, Y+33	; 0x21
    379e:	9a a1       	ldd	r25, Y+34	; 0x22
    37a0:	00 97       	sbiw	r24, 0x00	; 0
    37a2:	69 f7       	brne	.-38     	; 0x377e <HCLCD_Vid4Bits_Init+0x1d8>
    37a4:	14 c0       	rjmp	.+40     	; 0x37ce <HCLCD_Vid4Bits_Init+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37a6:	6b a1       	ldd	r22, Y+35	; 0x23
    37a8:	7c a1       	ldd	r23, Y+36	; 0x24
    37aa:	8d a1       	ldd	r24, Y+37	; 0x25
    37ac:	9e a1       	ldd	r25, Y+38	; 0x26
    37ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b2:	dc 01       	movw	r26, r24
    37b4:	cb 01       	movw	r24, r22
    37b6:	9a a3       	std	Y+34, r25	; 0x22
    37b8:	89 a3       	std	Y+33, r24	; 0x21
    37ba:	89 a1       	ldd	r24, Y+33	; 0x21
    37bc:	9a a1       	ldd	r25, Y+34	; 0x22
    37be:	9e 8f       	std	Y+30, r25	; 0x1e
    37c0:	8d 8f       	std	Y+29, r24	; 0x1d
    37c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    37c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    37c6:	01 97       	sbiw	r24, 0x01	; 1
    37c8:	f1 f7       	brne	.-4      	; 0x37c6 <HCLCD_Vid4Bits_Init+0x220>
    37ca:	9e 8f       	std	Y+30, r25	; 0x1e
    37cc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*send Display on/off  command*/
	HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_ON_OFF>>4);
    37ce:	80 e0       	ldi	r24, 0x00	; 0
    37d0:	0e 94 34 1a 	call	0x3468	; 0x3468 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_ON_OFF);
    37d4:	8c e0       	ldi	r24, 0x0C	; 12
    37d6:	0e 94 34 1a 	call	0x3468	; 0x3468 <HCLCD_Vid4Bits_SendCommand>
    37da:	80 e0       	ldi	r24, 0x00	; 0
    37dc:	90 e0       	ldi	r25, 0x00	; 0
    37de:	a0 e8       	ldi	r26, 0x80	; 128
    37e0:	bf e3       	ldi	r27, 0x3F	; 63
    37e2:	89 8f       	std	Y+25, r24	; 0x19
    37e4:	9a 8f       	std	Y+26, r25	; 0x1a
    37e6:	ab 8f       	std	Y+27, r26	; 0x1b
    37e8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37ea:	69 8d       	ldd	r22, Y+25	; 0x19
    37ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37f2:	20 e0       	ldi	r18, 0x00	; 0
    37f4:	30 e0       	ldi	r19, 0x00	; 0
    37f6:	4a ef       	ldi	r20, 0xFA	; 250
    37f8:	54 e4       	ldi	r21, 0x44	; 68
    37fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37fe:	dc 01       	movw	r26, r24
    3800:	cb 01       	movw	r24, r22
    3802:	8d 8b       	std	Y+21, r24	; 0x15
    3804:	9e 8b       	std	Y+22, r25	; 0x16
    3806:	af 8b       	std	Y+23, r26	; 0x17
    3808:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    380a:	6d 89       	ldd	r22, Y+21	; 0x15
    380c:	7e 89       	ldd	r23, Y+22	; 0x16
    380e:	8f 89       	ldd	r24, Y+23	; 0x17
    3810:	98 8d       	ldd	r25, Y+24	; 0x18
    3812:	20 e0       	ldi	r18, 0x00	; 0
    3814:	30 e0       	ldi	r19, 0x00	; 0
    3816:	40 e8       	ldi	r20, 0x80	; 128
    3818:	5f e3       	ldi	r21, 0x3F	; 63
    381a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    381e:	88 23       	and	r24, r24
    3820:	2c f4       	brge	.+10     	; 0x382c <HCLCD_Vid4Bits_Init+0x286>
		__ticks = 1;
    3822:	81 e0       	ldi	r24, 0x01	; 1
    3824:	90 e0       	ldi	r25, 0x00	; 0
    3826:	9c 8b       	std	Y+20, r25	; 0x14
    3828:	8b 8b       	std	Y+19, r24	; 0x13
    382a:	3f c0       	rjmp	.+126    	; 0x38aa <HCLCD_Vid4Bits_Init+0x304>
	else if (__tmp > 65535)
    382c:	6d 89       	ldd	r22, Y+21	; 0x15
    382e:	7e 89       	ldd	r23, Y+22	; 0x16
    3830:	8f 89       	ldd	r24, Y+23	; 0x17
    3832:	98 8d       	ldd	r25, Y+24	; 0x18
    3834:	20 e0       	ldi	r18, 0x00	; 0
    3836:	3f ef       	ldi	r19, 0xFF	; 255
    3838:	4f e7       	ldi	r20, 0x7F	; 127
    383a:	57 e4       	ldi	r21, 0x47	; 71
    383c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3840:	18 16       	cp	r1, r24
    3842:	4c f5       	brge	.+82     	; 0x3896 <HCLCD_Vid4Bits_Init+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3844:	69 8d       	ldd	r22, Y+25	; 0x19
    3846:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3848:	8b 8d       	ldd	r24, Y+27	; 0x1b
    384a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    384c:	20 e0       	ldi	r18, 0x00	; 0
    384e:	30 e0       	ldi	r19, 0x00	; 0
    3850:	40 e2       	ldi	r20, 0x20	; 32
    3852:	51 e4       	ldi	r21, 0x41	; 65
    3854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3858:	dc 01       	movw	r26, r24
    385a:	cb 01       	movw	r24, r22
    385c:	bc 01       	movw	r22, r24
    385e:	cd 01       	movw	r24, r26
    3860:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3864:	dc 01       	movw	r26, r24
    3866:	cb 01       	movw	r24, r22
    3868:	9c 8b       	std	Y+20, r25	; 0x14
    386a:	8b 8b       	std	Y+19, r24	; 0x13
    386c:	0f c0       	rjmp	.+30     	; 0x388c <HCLCD_Vid4Bits_Init+0x2e6>
    386e:	88 ec       	ldi	r24, 0xC8	; 200
    3870:	90 e0       	ldi	r25, 0x00	; 0
    3872:	9a 8b       	std	Y+18, r25	; 0x12
    3874:	89 8b       	std	Y+17, r24	; 0x11
    3876:	89 89       	ldd	r24, Y+17	; 0x11
    3878:	9a 89       	ldd	r25, Y+18	; 0x12
    387a:	01 97       	sbiw	r24, 0x01	; 1
    387c:	f1 f7       	brne	.-4      	; 0x387a <HCLCD_Vid4Bits_Init+0x2d4>
    387e:	9a 8b       	std	Y+18, r25	; 0x12
    3880:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3882:	8b 89       	ldd	r24, Y+19	; 0x13
    3884:	9c 89       	ldd	r25, Y+20	; 0x14
    3886:	01 97       	sbiw	r24, 0x01	; 1
    3888:	9c 8b       	std	Y+20, r25	; 0x14
    388a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    388c:	8b 89       	ldd	r24, Y+19	; 0x13
    388e:	9c 89       	ldd	r25, Y+20	; 0x14
    3890:	00 97       	sbiw	r24, 0x00	; 0
    3892:	69 f7       	brne	.-38     	; 0x386e <HCLCD_Vid4Bits_Init+0x2c8>
    3894:	14 c0       	rjmp	.+40     	; 0x38be <HCLCD_Vid4Bits_Init+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3896:	6d 89       	ldd	r22, Y+21	; 0x15
    3898:	7e 89       	ldd	r23, Y+22	; 0x16
    389a:	8f 89       	ldd	r24, Y+23	; 0x17
    389c:	98 8d       	ldd	r25, Y+24	; 0x18
    389e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38a2:	dc 01       	movw	r26, r24
    38a4:	cb 01       	movw	r24, r22
    38a6:	9c 8b       	std	Y+20, r25	; 0x14
    38a8:	8b 8b       	std	Y+19, r24	; 0x13
    38aa:	8b 89       	ldd	r24, Y+19	; 0x13
    38ac:	9c 89       	ldd	r25, Y+20	; 0x14
    38ae:	98 8b       	std	Y+16, r25	; 0x10
    38b0:	8f 87       	std	Y+15, r24	; 0x0f
    38b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    38b4:	98 89       	ldd	r25, Y+16	; 0x10
    38b6:	01 97       	sbiw	r24, 0x01	; 1
    38b8:	f1 f7       	brne	.-4      	; 0x38b6 <HCLCD_Vid4Bits_Init+0x310>
    38ba:	98 8b       	std	Y+16, r25	; 0x10
    38bc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*send Display Clear  command*/
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR>>4);
    38be:	80 e0       	ldi	r24, 0x00	; 0
    38c0:	0e 94 34 1a 	call	0x3468	; 0x3468 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR);
    38c4:	81 e0       	ldi	r24, 0x01	; 1
    38c6:	0e 94 34 1a 	call	0x3468	; 0x3468 <HCLCD_Vid4Bits_SendCommand>
    38ca:	80 e0       	ldi	r24, 0x00	; 0
    38cc:	90 e0       	ldi	r25, 0x00	; 0
    38ce:	a0 e0       	ldi	r26, 0x00	; 0
    38d0:	b0 e4       	ldi	r27, 0x40	; 64
    38d2:	8b 87       	std	Y+11, r24	; 0x0b
    38d4:	9c 87       	std	Y+12, r25	; 0x0c
    38d6:	ad 87       	std	Y+13, r26	; 0x0d
    38d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38da:	6b 85       	ldd	r22, Y+11	; 0x0b
    38dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    38de:	8d 85       	ldd	r24, Y+13	; 0x0d
    38e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    38e2:	20 e0       	ldi	r18, 0x00	; 0
    38e4:	30 e0       	ldi	r19, 0x00	; 0
    38e6:	4a ef       	ldi	r20, 0xFA	; 250
    38e8:	54 e4       	ldi	r21, 0x44	; 68
    38ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ee:	dc 01       	movw	r26, r24
    38f0:	cb 01       	movw	r24, r22
    38f2:	8f 83       	std	Y+7, r24	; 0x07
    38f4:	98 87       	std	Y+8, r25	; 0x08
    38f6:	a9 87       	std	Y+9, r26	; 0x09
    38f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38fa:	6f 81       	ldd	r22, Y+7	; 0x07
    38fc:	78 85       	ldd	r23, Y+8	; 0x08
    38fe:	89 85       	ldd	r24, Y+9	; 0x09
    3900:	9a 85       	ldd	r25, Y+10	; 0x0a
    3902:	20 e0       	ldi	r18, 0x00	; 0
    3904:	30 e0       	ldi	r19, 0x00	; 0
    3906:	40 e8       	ldi	r20, 0x80	; 128
    3908:	5f e3       	ldi	r21, 0x3F	; 63
    390a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    390e:	88 23       	and	r24, r24
    3910:	2c f4       	brge	.+10     	; 0x391c <HCLCD_Vid4Bits_Init+0x376>
		__ticks = 1;
    3912:	81 e0       	ldi	r24, 0x01	; 1
    3914:	90 e0       	ldi	r25, 0x00	; 0
    3916:	9e 83       	std	Y+6, r25	; 0x06
    3918:	8d 83       	std	Y+5, r24	; 0x05
    391a:	3f c0       	rjmp	.+126    	; 0x399a <HCLCD_Vid4Bits_Init+0x3f4>
	else if (__tmp > 65535)
    391c:	6f 81       	ldd	r22, Y+7	; 0x07
    391e:	78 85       	ldd	r23, Y+8	; 0x08
    3920:	89 85       	ldd	r24, Y+9	; 0x09
    3922:	9a 85       	ldd	r25, Y+10	; 0x0a
    3924:	20 e0       	ldi	r18, 0x00	; 0
    3926:	3f ef       	ldi	r19, 0xFF	; 255
    3928:	4f e7       	ldi	r20, 0x7F	; 127
    392a:	57 e4       	ldi	r21, 0x47	; 71
    392c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3930:	18 16       	cp	r1, r24
    3932:	4c f5       	brge	.+82     	; 0x3986 <HCLCD_Vid4Bits_Init+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3934:	6b 85       	ldd	r22, Y+11	; 0x0b
    3936:	7c 85       	ldd	r23, Y+12	; 0x0c
    3938:	8d 85       	ldd	r24, Y+13	; 0x0d
    393a:	9e 85       	ldd	r25, Y+14	; 0x0e
    393c:	20 e0       	ldi	r18, 0x00	; 0
    393e:	30 e0       	ldi	r19, 0x00	; 0
    3940:	40 e2       	ldi	r20, 0x20	; 32
    3942:	51 e4       	ldi	r21, 0x41	; 65
    3944:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3948:	dc 01       	movw	r26, r24
    394a:	cb 01       	movw	r24, r22
    394c:	bc 01       	movw	r22, r24
    394e:	cd 01       	movw	r24, r26
    3950:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3954:	dc 01       	movw	r26, r24
    3956:	cb 01       	movw	r24, r22
    3958:	9e 83       	std	Y+6, r25	; 0x06
    395a:	8d 83       	std	Y+5, r24	; 0x05
    395c:	0f c0       	rjmp	.+30     	; 0x397c <HCLCD_Vid4Bits_Init+0x3d6>
    395e:	88 ec       	ldi	r24, 0xC8	; 200
    3960:	90 e0       	ldi	r25, 0x00	; 0
    3962:	9c 83       	std	Y+4, r25	; 0x04
    3964:	8b 83       	std	Y+3, r24	; 0x03
    3966:	8b 81       	ldd	r24, Y+3	; 0x03
    3968:	9c 81       	ldd	r25, Y+4	; 0x04
    396a:	01 97       	sbiw	r24, 0x01	; 1
    396c:	f1 f7       	brne	.-4      	; 0x396a <HCLCD_Vid4Bits_Init+0x3c4>
    396e:	9c 83       	std	Y+4, r25	; 0x04
    3970:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3972:	8d 81       	ldd	r24, Y+5	; 0x05
    3974:	9e 81       	ldd	r25, Y+6	; 0x06
    3976:	01 97       	sbiw	r24, 0x01	; 1
    3978:	9e 83       	std	Y+6, r25	; 0x06
    397a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    397c:	8d 81       	ldd	r24, Y+5	; 0x05
    397e:	9e 81       	ldd	r25, Y+6	; 0x06
    3980:	00 97       	sbiw	r24, 0x00	; 0
    3982:	69 f7       	brne	.-38     	; 0x395e <HCLCD_Vid4Bits_Init+0x3b8>
    3984:	14 c0       	rjmp	.+40     	; 0x39ae <HCLCD_Vid4Bits_Init+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3986:	6f 81       	ldd	r22, Y+7	; 0x07
    3988:	78 85       	ldd	r23, Y+8	; 0x08
    398a:	89 85       	ldd	r24, Y+9	; 0x09
    398c:	9a 85       	ldd	r25, Y+10	; 0x0a
    398e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3992:	dc 01       	movw	r26, r24
    3994:	cb 01       	movw	r24, r22
    3996:	9e 83       	std	Y+6, r25	; 0x06
    3998:	8d 83       	std	Y+5, r24	; 0x05
    399a:	8d 81       	ldd	r24, Y+5	; 0x05
    399c:	9e 81       	ldd	r25, Y+6	; 0x06
    399e:	9a 83       	std	Y+2, r25	; 0x02
    39a0:	89 83       	std	Y+1, r24	; 0x01
    39a2:	89 81       	ldd	r24, Y+1	; 0x01
    39a4:	9a 81       	ldd	r25, Y+2	; 0x02
    39a6:	01 97       	sbiw	r24, 0x01	; 1
    39a8:	f1 f7       	brne	.-4      	; 0x39a6 <HCLCD_Vid4Bits_Init+0x400>
    39aa:	9a 83       	std	Y+2, r25	; 0x02
    39ac:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*send Entry Mode  set command*/
	HCLCD_Vid4Bits_SendCommand(HCLCD_ENTRY_MODE_SET>>4);
    39ae:	80 e0       	ldi	r24, 0x00	; 0
    39b0:	0e 94 34 1a 	call	0x3468	; 0x3468 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_ENTRY_MODE_SET);
    39b4:	86 e0       	ldi	r24, 0x06	; 6
    39b6:	0e 94 34 1a 	call	0x3468	; 0x3468 <HCLCD_Vid4Bits_SendCommand>
}
    39ba:	e9 96       	adiw	r28, 0x39	; 57
    39bc:	0f b6       	in	r0, 0x3f	; 63
    39be:	f8 94       	cli
    39c0:	de bf       	out	0x3e, r29	; 62
    39c2:	0f be       	out	0x3f, r0	; 63
    39c4:	cd bf       	out	0x3d, r28	; 61
    39c6:	cf 91       	pop	r28
    39c8:	df 91       	pop	r29
    39ca:	08 95       	ret

000039cc <HCLCD_VidWriteChar_4Bits>:


/*Helper function*/
void HCLCD_VidWriteChar_4Bits(u8 Copy_u8Data)
{
    39cc:	df 93       	push	r29
    39ce:	cf 93       	push	r28
    39d0:	cd b7       	in	r28, 0x3d	; 61
    39d2:	de b7       	in	r29, 0x3e	; 62
    39d4:	2f 97       	sbiw	r28, 0x0f	; 15
    39d6:	0f b6       	in	r0, 0x3f	; 63
    39d8:	f8 94       	cli
    39da:	de bf       	out	0x3e, r29	; 62
    39dc:	0f be       	out	0x3f, r0	; 63
    39de:	cd bf       	out	0x3d, r28	; 61
    39e0:	8f 87       	std	Y+15, r24	; 0x0f
	//u8 LOC_u8CopyData;
	/*select Data register--> Write One on Rs pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_HIGH);
    39e2:	80 e0       	ldi	r24, 0x00	; 0
    39e4:	62 e0       	ldi	r22, 0x02	; 2
    39e6:	41 e0       	ldi	r20, 0x01	; 1
    39e8:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
	/*select Write mode--> Write zero on RW pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    39ec:	81 e0       	ldi	r24, 0x01	; 1
    39ee:	62 e0       	ldi	r22, 0x02	; 2
    39f0:	40 e0       	ldi	r20, 0x00	; 0
    39f2:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
	/*Send Data*/
	//LOC_u8CopyData=(Copy_u8Data&0x0F)<<HCLCD_PINSTART;
	MDIO_Error_State_SetNippleValue(HCLCD_PINSTART,DATA_PORT,Copy_u8Data);
    39f6:	84 e0       	ldi	r24, 0x04	; 4
    39f8:	62 e0       	ldi	r22, 0x02	; 2
    39fa:	4f 85       	ldd	r20, Y+15	; 0x0f
    39fc:	0e 94 af 0a 	call	0x155e	; 0x155e <MDIO_Error_State_SetNippleValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    3a00:	82 e0       	ldi	r24, 0x02	; 2
    3a02:	62 e0       	ldi	r22, 0x02	; 2
    3a04:	41 e0       	ldi	r20, 0x01	; 1
    3a06:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
    3a0a:	80 e0       	ldi	r24, 0x00	; 0
    3a0c:	90 e0       	ldi	r25, 0x00	; 0
    3a0e:	a0 e0       	ldi	r26, 0x00	; 0
    3a10:	b0 e4       	ldi	r27, 0x40	; 64
    3a12:	8b 87       	std	Y+11, r24	; 0x0b
    3a14:	9c 87       	std	Y+12, r25	; 0x0c
    3a16:	ad 87       	std	Y+13, r26	; 0x0d
    3a18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a20:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a22:	20 e0       	ldi	r18, 0x00	; 0
    3a24:	30 e0       	ldi	r19, 0x00	; 0
    3a26:	4a ef       	ldi	r20, 0xFA	; 250
    3a28:	54 e4       	ldi	r21, 0x44	; 68
    3a2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a2e:	dc 01       	movw	r26, r24
    3a30:	cb 01       	movw	r24, r22
    3a32:	8f 83       	std	Y+7, r24	; 0x07
    3a34:	98 87       	std	Y+8, r25	; 0x08
    3a36:	a9 87       	std	Y+9, r26	; 0x09
    3a38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a3a:	6f 81       	ldd	r22, Y+7	; 0x07
    3a3c:	78 85       	ldd	r23, Y+8	; 0x08
    3a3e:	89 85       	ldd	r24, Y+9	; 0x09
    3a40:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a42:	20 e0       	ldi	r18, 0x00	; 0
    3a44:	30 e0       	ldi	r19, 0x00	; 0
    3a46:	40 e8       	ldi	r20, 0x80	; 128
    3a48:	5f e3       	ldi	r21, 0x3F	; 63
    3a4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a4e:	88 23       	and	r24, r24
    3a50:	2c f4       	brge	.+10     	; 0x3a5c <HCLCD_VidWriteChar_4Bits+0x90>
		__ticks = 1;
    3a52:	81 e0       	ldi	r24, 0x01	; 1
    3a54:	90 e0       	ldi	r25, 0x00	; 0
    3a56:	9e 83       	std	Y+6, r25	; 0x06
    3a58:	8d 83       	std	Y+5, r24	; 0x05
    3a5a:	3f c0       	rjmp	.+126    	; 0x3ada <HCLCD_VidWriteChar_4Bits+0x10e>
	else if (__tmp > 65535)
    3a5c:	6f 81       	ldd	r22, Y+7	; 0x07
    3a5e:	78 85       	ldd	r23, Y+8	; 0x08
    3a60:	89 85       	ldd	r24, Y+9	; 0x09
    3a62:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a64:	20 e0       	ldi	r18, 0x00	; 0
    3a66:	3f ef       	ldi	r19, 0xFF	; 255
    3a68:	4f e7       	ldi	r20, 0x7F	; 127
    3a6a:	57 e4       	ldi	r21, 0x47	; 71
    3a6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a70:	18 16       	cp	r1, r24
    3a72:	4c f5       	brge	.+82     	; 0x3ac6 <HCLCD_VidWriteChar_4Bits+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a74:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a76:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a78:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a7c:	20 e0       	ldi	r18, 0x00	; 0
    3a7e:	30 e0       	ldi	r19, 0x00	; 0
    3a80:	40 e2       	ldi	r20, 0x20	; 32
    3a82:	51 e4       	ldi	r21, 0x41	; 65
    3a84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a88:	dc 01       	movw	r26, r24
    3a8a:	cb 01       	movw	r24, r22
    3a8c:	bc 01       	movw	r22, r24
    3a8e:	cd 01       	movw	r24, r26
    3a90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a94:	dc 01       	movw	r26, r24
    3a96:	cb 01       	movw	r24, r22
    3a98:	9e 83       	std	Y+6, r25	; 0x06
    3a9a:	8d 83       	std	Y+5, r24	; 0x05
    3a9c:	0f c0       	rjmp	.+30     	; 0x3abc <HCLCD_VidWriteChar_4Bits+0xf0>
    3a9e:	88 ec       	ldi	r24, 0xC8	; 200
    3aa0:	90 e0       	ldi	r25, 0x00	; 0
    3aa2:	9c 83       	std	Y+4, r25	; 0x04
    3aa4:	8b 83       	std	Y+3, r24	; 0x03
    3aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    3aa8:	9c 81       	ldd	r25, Y+4	; 0x04
    3aaa:	01 97       	sbiw	r24, 0x01	; 1
    3aac:	f1 f7       	brne	.-4      	; 0x3aaa <HCLCD_VidWriteChar_4Bits+0xde>
    3aae:	9c 83       	std	Y+4, r25	; 0x04
    3ab0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ab2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ab4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ab6:	01 97       	sbiw	r24, 0x01	; 1
    3ab8:	9e 83       	std	Y+6, r25	; 0x06
    3aba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3abc:	8d 81       	ldd	r24, Y+5	; 0x05
    3abe:	9e 81       	ldd	r25, Y+6	; 0x06
    3ac0:	00 97       	sbiw	r24, 0x00	; 0
    3ac2:	69 f7       	brne	.-38     	; 0x3a9e <HCLCD_VidWriteChar_4Bits+0xd2>
    3ac4:	14 c0       	rjmp	.+40     	; 0x3aee <HCLCD_VidWriteChar_4Bits+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ac6:	6f 81       	ldd	r22, Y+7	; 0x07
    3ac8:	78 85       	ldd	r23, Y+8	; 0x08
    3aca:	89 85       	ldd	r24, Y+9	; 0x09
    3acc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ace:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ad2:	dc 01       	movw	r26, r24
    3ad4:	cb 01       	movw	r24, r22
    3ad6:	9e 83       	std	Y+6, r25	; 0x06
    3ad8:	8d 83       	std	Y+5, r24	; 0x05
    3ada:	8d 81       	ldd	r24, Y+5	; 0x05
    3adc:	9e 81       	ldd	r25, Y+6	; 0x06
    3ade:	9a 83       	std	Y+2, r25	; 0x02
    3ae0:	89 83       	std	Y+1, r24	; 0x01
    3ae2:	89 81       	ldd	r24, Y+1	; 0x01
    3ae4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ae6:	01 97       	sbiw	r24, 0x01	; 1
    3ae8:	f1 f7       	brne	.-4      	; 0x3ae6 <HCLCD_VidWriteChar_4Bits+0x11a>
    3aea:	9a 83       	std	Y+2, r25	; 0x02
    3aec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    3aee:	82 e0       	ldi	r24, 0x02	; 2
    3af0:	62 e0       	ldi	r22, 0x02	; 2
    3af2:	40 e0       	ldi	r20, 0x00	; 0
    3af4:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
}
    3af8:	2f 96       	adiw	r28, 0x0f	; 15
    3afa:	0f b6       	in	r0, 0x3f	; 63
    3afc:	f8 94       	cli
    3afe:	de bf       	out	0x3e, r29	; 62
    3b00:	0f be       	out	0x3f, r0	; 63
    3b02:	cd bf       	out	0x3d, r28	; 61
    3b04:	cf 91       	pop	r28
    3b06:	df 91       	pop	r29
    3b08:	08 95       	ret

00003b0a <HCLCD_Vid4Bits_DisplayCharacter>:
/*Display Character 4 Bits*/
void HCLCD_Vid4Bits_DisplayCharacter(u8 Copy_u8Data)
{
    3b0a:	df 93       	push	r29
    3b0c:	cf 93       	push	r28
    3b0e:	0f 92       	push	r0
    3b10:	cd b7       	in	r28, 0x3d	; 61
    3b12:	de b7       	in	r29, 0x3e	; 62
    3b14:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_VidWriteChar_4Bits(Copy_u8Data>>4);
    3b16:	89 81       	ldd	r24, Y+1	; 0x01
    3b18:	82 95       	swap	r24
    3b1a:	8f 70       	andi	r24, 0x0F	; 15
    3b1c:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <HCLCD_VidWriteChar_4Bits>
	HCLCD_VidWriteChar_4Bits(Copy_u8Data);
    3b20:	89 81       	ldd	r24, Y+1	; 0x01
    3b22:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <HCLCD_VidWriteChar_4Bits>
}
    3b26:	0f 90       	pop	r0
    3b28:	cf 91       	pop	r28
    3b2a:	df 91       	pop	r29
    3b2c:	08 95       	ret

00003b2e <HCLCD_Vid4Bits_DisplayString>:

/*Display String 4 Bits*/

void HCLCD_Vid4Bits_DisplayString(u8* PCopy_u8String)
{
    3b2e:	df 93       	push	r29
    3b30:	cf 93       	push	r28
    3b32:	00 d0       	rcall	.+0      	; 0x3b34 <HCLCD_Vid4Bits_DisplayString+0x6>
    3b34:	0f 92       	push	r0
    3b36:	cd b7       	in	r28, 0x3d	; 61
    3b38:	de b7       	in	r29, 0x3e	; 62
    3b3a:	9b 83       	std	Y+3, r25	; 0x03
    3b3c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Count=0;
    3b3e:	19 82       	std	Y+1, r1	; 0x01
    3b40:	0e c0       	rjmp	.+28     	; 0x3b5e <HCLCD_Vid4Bits_DisplayString+0x30>
	while(PCopy_u8String[Loc_u8Count]!=NULL)
	{
		HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8String[Loc_u8Count]);
    3b42:	89 81       	ldd	r24, Y+1	; 0x01
    3b44:	28 2f       	mov	r18, r24
    3b46:	30 e0       	ldi	r19, 0x00	; 0
    3b48:	8a 81       	ldd	r24, Y+2	; 0x02
    3b4a:	9b 81       	ldd	r25, Y+3	; 0x03
    3b4c:	fc 01       	movw	r30, r24
    3b4e:	e2 0f       	add	r30, r18
    3b50:	f3 1f       	adc	r31, r19
    3b52:	80 81       	ld	r24, Z
    3b54:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <HCLCD_Vid4Bits_DisplayCharacter>
		Loc_u8Count++;
    3b58:	89 81       	ldd	r24, Y+1	; 0x01
    3b5a:	8f 5f       	subi	r24, 0xFF	; 255
    3b5c:	89 83       	std	Y+1, r24	; 0x01
/*Display String 4 Bits*/

void HCLCD_Vid4Bits_DisplayString(u8* PCopy_u8String)
{
	u8 Loc_u8Count=0;
	while(PCopy_u8String[Loc_u8Count]!=NULL)
    3b5e:	89 81       	ldd	r24, Y+1	; 0x01
    3b60:	28 2f       	mov	r18, r24
    3b62:	30 e0       	ldi	r19, 0x00	; 0
    3b64:	8a 81       	ldd	r24, Y+2	; 0x02
    3b66:	9b 81       	ldd	r25, Y+3	; 0x03
    3b68:	fc 01       	movw	r30, r24
    3b6a:	e2 0f       	add	r30, r18
    3b6c:	f3 1f       	adc	r31, r19
    3b6e:	80 81       	ld	r24, Z
    3b70:	88 23       	and	r24, r24
    3b72:	39 f7       	brne	.-50     	; 0x3b42 <HCLCD_Vid4Bits_DisplayString+0x14>
	{
		HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8String[Loc_u8Count]);
		Loc_u8Count++;
	}
}
    3b74:	0f 90       	pop	r0
    3b76:	0f 90       	pop	r0
    3b78:	0f 90       	pop	r0
    3b7a:	cf 91       	pop	r28
    3b7c:	df 91       	pop	r29
    3b7e:	08 95       	ret

00003b80 <HCLCD_Vid4Bits_DisplayNumber>:

void HCLCD_Vid4Bits_DisplayNumber(u32 Copy_u8Number)
{
    3b80:	0f 93       	push	r16
    3b82:	1f 93       	push	r17
    3b84:	df 93       	push	r29
    3b86:	cf 93       	push	r28
    3b88:	cd b7       	in	r28, 0x3d	; 61
    3b8a:	de b7       	in	r29, 0x3e	; 62
    3b8c:	60 97       	sbiw	r28, 0x10	; 16
    3b8e:	0f b6       	in	r0, 0x3f	; 63
    3b90:	f8 94       	cli
    3b92:	de bf       	out	0x3e, r29	; 62
    3b94:	0f be       	out	0x3f, r0	; 63
    3b96:	cd bf       	out	0x3d, r28	; 61
    3b98:	6d 87       	std	Y+13, r22	; 0x0d
    3b9a:	7e 87       	std	Y+14, r23	; 0x0e
    3b9c:	8f 87       	std	Y+15, r24	; 0x0f
    3b9e:	98 8b       	std	Y+16, r25	; 0x10
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
    3ba0:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u8Number>0)
    3ba2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ba4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ba6:	af 85       	ldd	r26, Y+15	; 0x0f
    3ba8:	b8 89       	ldd	r27, Y+16	; 0x10
    3baa:	00 97       	sbiw	r24, 0x00	; 0
    3bac:	a1 05       	cpc	r26, r1
    3bae:	b1 05       	cpc	r27, r1
    3bb0:	09 f4       	brne	.+2      	; 0x3bb4 <HCLCD_Vid4Bits_DisplayNumber+0x34>
    3bb2:	4f c0       	rjmp	.+158    	; 0x3c52 <HCLCD_Vid4Bits_DisplayNumber+0xd2>
    3bb4:	2d c0       	rjmp	.+90     	; 0x3c10 <HCLCD_Vid4Bits_DisplayNumber+0x90>
	{
		while(Copy_u8Number!=0)
		{
			ARR_Digits[LOC_Count] = (Copy_u8Number%10);
    3bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    3bb8:	08 2f       	mov	r16, r24
    3bba:	10 e0       	ldi	r17, 0x00	; 0
    3bbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bc0:	af 85       	ldd	r26, Y+15	; 0x0f
    3bc2:	b8 89       	ldd	r27, Y+16	; 0x10
    3bc4:	2a e0       	ldi	r18, 0x0A	; 10
    3bc6:	30 e0       	ldi	r19, 0x00	; 0
    3bc8:	40 e0       	ldi	r20, 0x00	; 0
    3bca:	50 e0       	ldi	r21, 0x00	; 0
    3bcc:	bc 01       	movw	r22, r24
    3bce:	cd 01       	movw	r24, r26
    3bd0:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <__udivmodsi4>
    3bd4:	dc 01       	movw	r26, r24
    3bd6:	cb 01       	movw	r24, r22
    3bd8:	28 2f       	mov	r18, r24
    3bda:	ce 01       	movw	r24, r28
    3bdc:	03 96       	adiw	r24, 0x03	; 3
    3bde:	fc 01       	movw	r30, r24
    3be0:	e0 0f       	add	r30, r16
    3be2:	f1 1f       	adc	r31, r17
    3be4:	20 83       	st	Z, r18
			Copy_u8Number/=10;
    3be6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3be8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bea:	af 85       	ldd	r26, Y+15	; 0x0f
    3bec:	b8 89       	ldd	r27, Y+16	; 0x10
    3bee:	2a e0       	ldi	r18, 0x0A	; 10
    3bf0:	30 e0       	ldi	r19, 0x00	; 0
    3bf2:	40 e0       	ldi	r20, 0x00	; 0
    3bf4:	50 e0       	ldi	r21, 0x00	; 0
    3bf6:	bc 01       	movw	r22, r24
    3bf8:	cd 01       	movw	r24, r26
    3bfa:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <__udivmodsi4>
    3bfe:	da 01       	movw	r26, r20
    3c00:	c9 01       	movw	r24, r18
    3c02:	8d 87       	std	Y+13, r24	; 0x0d
    3c04:	9e 87       	std	Y+14, r25	; 0x0e
    3c06:	af 87       	std	Y+15, r26	; 0x0f
    3c08:	b8 8b       	std	Y+16, r27	; 0x10
			LOC_Count++;
    3c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c0c:	8f 5f       	subi	r24, 0xFF	; 255
    3c0e:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
	if(Copy_u8Number>0)
	{
		while(Copy_u8Number!=0)
    3c10:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c12:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c14:	af 85       	ldd	r26, Y+15	; 0x0f
    3c16:	b8 89       	ldd	r27, Y+16	; 0x10
    3c18:	00 97       	sbiw	r24, 0x00	; 0
    3c1a:	a1 05       	cpc	r26, r1
    3c1c:	b1 05       	cpc	r27, r1
    3c1e:	59 f6       	brne	.-106    	; 0x3bb6 <HCLCD_Vid4Bits_DisplayNumber+0x36>
		{
			ARR_Digits[LOC_Count] = (Copy_u8Number%10);
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    3c20:	8a 81       	ldd	r24, Y+2	; 0x02
    3c22:	81 50       	subi	r24, 0x01	; 1
    3c24:	89 83       	std	Y+1, r24	; 0x01
    3c26:	11 c0       	rjmp	.+34     	; 0x3c4a <HCLCD_Vid4Bits_DisplayNumber+0xca>
		{
			HCLCD_Vid4Bits_DisplayCharacter(ARR_Digits[i]+'0');
    3c28:	89 81       	ldd	r24, Y+1	; 0x01
    3c2a:	28 2f       	mov	r18, r24
    3c2c:	33 27       	eor	r19, r19
    3c2e:	27 fd       	sbrc	r18, 7
    3c30:	30 95       	com	r19
    3c32:	ce 01       	movw	r24, r28
    3c34:	03 96       	adiw	r24, 0x03	; 3
    3c36:	fc 01       	movw	r30, r24
    3c38:	e2 0f       	add	r30, r18
    3c3a:	f3 1f       	adc	r31, r19
    3c3c:	80 81       	ld	r24, Z
    3c3e:	80 5d       	subi	r24, 0xD0	; 208
    3c40:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <HCLCD_Vid4Bits_DisplayCharacter>
		{
			ARR_Digits[LOC_Count] = (Copy_u8Number%10);
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    3c44:	89 81       	ldd	r24, Y+1	; 0x01
    3c46:	81 50       	subi	r24, 0x01	; 1
    3c48:	89 83       	std	Y+1, r24	; 0x01
    3c4a:	89 81       	ldd	r24, Y+1	; 0x01
    3c4c:	88 23       	and	r24, r24
    3c4e:	64 f7       	brge	.-40     	; 0x3c28 <HCLCD_Vid4Bits_DisplayNumber+0xa8>
    3c50:	03 c0       	rjmp	.+6      	; 0x3c58 <HCLCD_Vid4Bits_DisplayNumber+0xd8>
			HCLCD_Vid4Bits_DisplayCharacter(ARR_Digits[i]+'0');
		}
	}
	else
	{
		HCLCD_Vid4Bits_DisplayCharacter('0');
    3c52:	80 e3       	ldi	r24, 0x30	; 48
    3c54:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <HCLCD_Vid4Bits_DisplayCharacter>
	}

}
    3c58:	60 96       	adiw	r28, 0x10	; 16
    3c5a:	0f b6       	in	r0, 0x3f	; 63
    3c5c:	f8 94       	cli
    3c5e:	de bf       	out	0x3e, r29	; 62
    3c60:	0f be       	out	0x3f, r0	; 63
    3c62:	cd bf       	out	0x3d, r28	; 61
    3c64:	cf 91       	pop	r28
    3c66:	df 91       	pop	r29
    3c68:	1f 91       	pop	r17
    3c6a:	0f 91       	pop	r16
    3c6c:	08 95       	ret

00003c6e <HCLCD_Vid4Bits_SetPosition>:


void HCLCD_Vid4Bits_SetPosition(u8 Copy_u8LineNumber,u8 Copy_u8PositionNumber)
{
    3c6e:	df 93       	push	r29
    3c70:	cf 93       	push	r28
    3c72:	00 d0       	rcall	.+0      	; 0x3c74 <HCLCD_Vid4Bits_SetPosition+0x6>
    3c74:	cd b7       	in	r28, 0x3d	; 61
    3c76:	de b7       	in	r29, 0x3e	; 62
    3c78:	89 83       	std	Y+1, r24	; 0x01
    3c7a:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8LineNumber==HCLCD_LINE1)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    3c7c:	89 81       	ldd	r24, Y+1	; 0x01
    3c7e:	81 30       	cpi	r24, 0x01	; 1
    3c80:	b9 f4       	brne	.+46     	; 0x3cb0 <HCLCD_Vid4Bits_SetPosition+0x42>
    3c82:	8a 81       	ldd	r24, Y+2	; 0x02
    3c84:	80 31       	cpi	r24, 0x10	; 16
    3c86:	a0 f4       	brcc	.+40     	; 0x3cb0 <HCLCD_Vid4Bits_SetPosition+0x42>
	{
		HCLCD_Vid4Bits_SendCommand((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber)>>4);
    3c88:	8a 81       	ldd	r24, Y+2	; 0x02
    3c8a:	88 2f       	mov	r24, r24
    3c8c:	90 e0       	ldi	r25, 0x00	; 0
    3c8e:	80 58       	subi	r24, 0x80	; 128
    3c90:	9f 4f       	sbci	r25, 0xFF	; 255
    3c92:	95 95       	asr	r25
    3c94:	87 95       	ror	r24
    3c96:	95 95       	asr	r25
    3c98:	87 95       	ror	r24
    3c9a:	95 95       	asr	r25
    3c9c:	87 95       	ror	r24
    3c9e:	95 95       	asr	r25
    3ca0:	87 95       	ror	r24
    3ca2:	0e 94 34 1a 	call	0x3468	; 0x3468 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber));
    3ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ca8:	80 58       	subi	r24, 0x80	; 128
    3caa:	0e 94 34 1a 	call	0x3468	; 0x3468 <HCLCD_Vid4Bits_SendCommand>
    3cae:	19 c0       	rjmp	.+50     	; 0x3ce2 <HCLCD_Vid4Bits_SetPosition+0x74>
	}
	else if((Copy_u8LineNumber==HCLCD_LINE2)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    3cb0:	89 81       	ldd	r24, Y+1	; 0x01
    3cb2:	82 30       	cpi	r24, 0x02	; 2
    3cb4:	b1 f4       	brne	.+44     	; 0x3ce2 <HCLCD_Vid4Bits_SetPosition+0x74>
    3cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    3cb8:	80 31       	cpi	r24, 0x10	; 16
    3cba:	98 f4       	brcc	.+38     	; 0x3ce2 <HCLCD_Vid4Bits_SetPosition+0x74>
	{
		HCLCD_Vid4Bits_SendCommand((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber)>>4);
    3cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    3cbe:	88 2f       	mov	r24, r24
    3cc0:	90 e0       	ldi	r25, 0x00	; 0
    3cc2:	80 54       	subi	r24, 0x40	; 64
    3cc4:	9f 4f       	sbci	r25, 0xFF	; 255
    3cc6:	95 95       	asr	r25
    3cc8:	87 95       	ror	r24
    3cca:	95 95       	asr	r25
    3ccc:	87 95       	ror	r24
    3cce:	95 95       	asr	r25
    3cd0:	87 95       	ror	r24
    3cd2:	95 95       	asr	r25
    3cd4:	87 95       	ror	r24
    3cd6:	0e 94 34 1a 	call	0x3468	; 0x3468 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber));
    3cda:	8a 81       	ldd	r24, Y+2	; 0x02
    3cdc:	80 54       	subi	r24, 0x40	; 64
    3cde:	0e 94 34 1a 	call	0x3468	; 0x3468 <HCLCD_Vid4Bits_SendCommand>
	}
	else
	{
	}
}
    3ce2:	0f 90       	pop	r0
    3ce4:	0f 90       	pop	r0
    3ce6:	cf 91       	pop	r28
    3ce8:	df 91       	pop	r29
    3cea:	08 95       	ret

00003cec <HCLCD_Vid4Bits_CustomAlphChar>:
 }
*/

/*LCD Create SpecialCharacter 4 Bits*/
void HCLCD_Vid4Bits_CustomAlphChar(u8 Copy_u8PatternNumber, u8* PCopy_u8Pattern)
{
    3cec:	df 93       	push	r29
    3cee:	cf 93       	push	r28
    3cf0:	00 d0       	rcall	.+0      	; 0x3cf2 <HCLCD_Vid4Bits_CustomAlphChar+0x6>
    3cf2:	00 d0       	rcall	.+0      	; 0x3cf4 <HCLCD_Vid4Bits_CustomAlphChar+0x8>
    3cf4:	cd b7       	in	r28, 0x3d	; 61
    3cf6:	de b7       	in	r29, 0x3e	; 62
    3cf8:	8a 83       	std	Y+2, r24	; 0x02
    3cfa:	7c 83       	std	Y+4, r23	; 0x04
    3cfc:	6b 83       	std	Y+3, r22	; 0x03
	       /*you have only 8 patterns to be customized */
	      u8 i;
	      if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
    3cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    3d00:	88 30       	cpi	r24, 0x08	; 8
    3d02:	98 f5       	brcc	.+102    	; 0x3d6a <HCLCD_Vid4Bits_CustomAlphChar+0x7e>
	      {
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE))>>4);
    3d04:	8a 81       	ldd	r24, Y+2	; 0x02
    3d06:	88 2f       	mov	r24, r24
    3d08:	90 e0       	ldi	r25, 0x00	; 0
    3d0a:	08 96       	adiw	r24, 0x08	; 8
    3d0c:	88 0f       	add	r24, r24
    3d0e:	99 1f       	adc	r25, r25
    3d10:	88 0f       	add	r24, r24
    3d12:	99 1f       	adc	r25, r25
    3d14:	88 0f       	add	r24, r24
    3d16:	99 1f       	adc	r25, r25
    3d18:	95 95       	asr	r25
    3d1a:	87 95       	ror	r24
    3d1c:	95 95       	asr	r25
    3d1e:	87 95       	ror	r24
    3d20:	95 95       	asr	r25
    3d22:	87 95       	ror	r24
    3d24:	95 95       	asr	r25
    3d26:	87 95       	ror	r24
    3d28:	0e 94 34 1a 	call	0x3468	; 0x3468 <HCLCD_Vid4Bits_SendCommand>
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE)));
    3d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d2e:	88 2f       	mov	r24, r24
    3d30:	90 e0       	ldi	r25, 0x00	; 0
    3d32:	08 96       	adiw	r24, 0x08	; 8
    3d34:	88 0f       	add	r24, r24
    3d36:	99 1f       	adc	r25, r25
    3d38:	88 0f       	add	r24, r24
    3d3a:	99 1f       	adc	r25, r25
    3d3c:	88 0f       	add	r24, r24
    3d3e:	99 1f       	adc	r25, r25
    3d40:	0e 94 34 1a 	call	0x3468	; 0x3468 <HCLCD_Vid4Bits_SendCommand>

	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    3d44:	19 82       	std	Y+1, r1	; 0x01
    3d46:	0e c0       	rjmp	.+28     	; 0x3d64 <HCLCD_Vid4Bits_CustomAlphChar+0x78>
	          {
	        	  HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8Pattern[i]);
    3d48:	89 81       	ldd	r24, Y+1	; 0x01
    3d4a:	28 2f       	mov	r18, r24
    3d4c:	30 e0       	ldi	r19, 0x00	; 0
    3d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d50:	9c 81       	ldd	r25, Y+4	; 0x04
    3d52:	fc 01       	movw	r30, r24
    3d54:	e2 0f       	add	r30, r18
    3d56:	f3 1f       	adc	r31, r19
    3d58:	80 81       	ld	r24, Z
    3d5a:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <HCLCD_Vid4Bits_DisplayCharacter>
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE))>>4);
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE)));

	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    3d5e:	89 81       	ldd	r24, Y+1	; 0x01
    3d60:	8f 5f       	subi	r24, 0xFF	; 255
    3d62:	89 83       	std	Y+1, r24	; 0x01
    3d64:	89 81       	ldd	r24, Y+1	; 0x01
    3d66:	88 30       	cpi	r24, 0x08	; 8
    3d68:	78 f3       	brcs	.-34     	; 0x3d48 <HCLCD_Vid4Bits_CustomAlphChar+0x5c>
	          {
	        	  HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8Pattern[i]);
	          }
	      }
}
    3d6a:	0f 90       	pop	r0
    3d6c:	0f 90       	pop	r0
    3d6e:	0f 90       	pop	r0
    3d70:	0f 90       	pop	r0
    3d72:	cf 91       	pop	r28
    3d74:	df 91       	pop	r29
    3d76:	08 95       	ret

00003d78 <HCLCD_Vid4Bits_ClearScreen>:
/**/
void HCLCD_Vid4Bits_ClearScreen(void)
{
    3d78:	df 93       	push	r29
    3d7a:	cf 93       	push	r28
    3d7c:	cd b7       	in	r28, 0x3d	; 61
    3d7e:	de b7       	in	r29, 0x3e	; 62
    3d80:	2e 97       	sbiw	r28, 0x0e	; 14
    3d82:	0f b6       	in	r0, 0x3f	; 63
    3d84:	f8 94       	cli
    3d86:	de bf       	out	0x3e, r29	; 62
    3d88:	0f be       	out	0x3f, r0	; 63
    3d8a:	cd bf       	out	0x3d, r28	; 61
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR>>4);
    3d8c:	80 e0       	ldi	r24, 0x00	; 0
    3d8e:	0e 94 34 1a 	call	0x3468	; 0x3468 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR);
    3d92:	81 e0       	ldi	r24, 0x01	; 1
    3d94:	0e 94 34 1a 	call	0x3468	; 0x3468 <HCLCD_Vid4Bits_SendCommand>
    3d98:	80 e0       	ldi	r24, 0x00	; 0
    3d9a:	90 e0       	ldi	r25, 0x00	; 0
    3d9c:	a0 e0       	ldi	r26, 0x00	; 0
    3d9e:	b0 e4       	ldi	r27, 0x40	; 64
    3da0:	8b 87       	std	Y+11, r24	; 0x0b
    3da2:	9c 87       	std	Y+12, r25	; 0x0c
    3da4:	ad 87       	std	Y+13, r26	; 0x0d
    3da6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3da8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3daa:	7c 85       	ldd	r23, Y+12	; 0x0c
    3dac:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dae:	9e 85       	ldd	r25, Y+14	; 0x0e
    3db0:	20 e0       	ldi	r18, 0x00	; 0
    3db2:	30 e0       	ldi	r19, 0x00	; 0
    3db4:	4a ef       	ldi	r20, 0xFA	; 250
    3db6:	54 e4       	ldi	r21, 0x44	; 68
    3db8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dbc:	dc 01       	movw	r26, r24
    3dbe:	cb 01       	movw	r24, r22
    3dc0:	8f 83       	std	Y+7, r24	; 0x07
    3dc2:	98 87       	std	Y+8, r25	; 0x08
    3dc4:	a9 87       	std	Y+9, r26	; 0x09
    3dc6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3dc8:	6f 81       	ldd	r22, Y+7	; 0x07
    3dca:	78 85       	ldd	r23, Y+8	; 0x08
    3dcc:	89 85       	ldd	r24, Y+9	; 0x09
    3dce:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dd0:	20 e0       	ldi	r18, 0x00	; 0
    3dd2:	30 e0       	ldi	r19, 0x00	; 0
    3dd4:	40 e8       	ldi	r20, 0x80	; 128
    3dd6:	5f e3       	ldi	r21, 0x3F	; 63
    3dd8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ddc:	88 23       	and	r24, r24
    3dde:	2c f4       	brge	.+10     	; 0x3dea <HCLCD_Vid4Bits_ClearScreen+0x72>
		__ticks = 1;
    3de0:	81 e0       	ldi	r24, 0x01	; 1
    3de2:	90 e0       	ldi	r25, 0x00	; 0
    3de4:	9e 83       	std	Y+6, r25	; 0x06
    3de6:	8d 83       	std	Y+5, r24	; 0x05
    3de8:	3f c0       	rjmp	.+126    	; 0x3e68 <HCLCD_Vid4Bits_ClearScreen+0xf0>
	else if (__tmp > 65535)
    3dea:	6f 81       	ldd	r22, Y+7	; 0x07
    3dec:	78 85       	ldd	r23, Y+8	; 0x08
    3dee:	89 85       	ldd	r24, Y+9	; 0x09
    3df0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3df2:	20 e0       	ldi	r18, 0x00	; 0
    3df4:	3f ef       	ldi	r19, 0xFF	; 255
    3df6:	4f e7       	ldi	r20, 0x7F	; 127
    3df8:	57 e4       	ldi	r21, 0x47	; 71
    3dfa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3dfe:	18 16       	cp	r1, r24
    3e00:	4c f5       	brge	.+82     	; 0x3e54 <HCLCD_Vid4Bits_ClearScreen+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e02:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e04:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e06:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e08:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e0a:	20 e0       	ldi	r18, 0x00	; 0
    3e0c:	30 e0       	ldi	r19, 0x00	; 0
    3e0e:	40 e2       	ldi	r20, 0x20	; 32
    3e10:	51 e4       	ldi	r21, 0x41	; 65
    3e12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e16:	dc 01       	movw	r26, r24
    3e18:	cb 01       	movw	r24, r22
    3e1a:	bc 01       	movw	r22, r24
    3e1c:	cd 01       	movw	r24, r26
    3e1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e22:	dc 01       	movw	r26, r24
    3e24:	cb 01       	movw	r24, r22
    3e26:	9e 83       	std	Y+6, r25	; 0x06
    3e28:	8d 83       	std	Y+5, r24	; 0x05
    3e2a:	0f c0       	rjmp	.+30     	; 0x3e4a <HCLCD_Vid4Bits_ClearScreen+0xd2>
    3e2c:	88 ec       	ldi	r24, 0xC8	; 200
    3e2e:	90 e0       	ldi	r25, 0x00	; 0
    3e30:	9c 83       	std	Y+4, r25	; 0x04
    3e32:	8b 83       	std	Y+3, r24	; 0x03
    3e34:	8b 81       	ldd	r24, Y+3	; 0x03
    3e36:	9c 81       	ldd	r25, Y+4	; 0x04
    3e38:	01 97       	sbiw	r24, 0x01	; 1
    3e3a:	f1 f7       	brne	.-4      	; 0x3e38 <HCLCD_Vid4Bits_ClearScreen+0xc0>
    3e3c:	9c 83       	std	Y+4, r25	; 0x04
    3e3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e40:	8d 81       	ldd	r24, Y+5	; 0x05
    3e42:	9e 81       	ldd	r25, Y+6	; 0x06
    3e44:	01 97       	sbiw	r24, 0x01	; 1
    3e46:	9e 83       	std	Y+6, r25	; 0x06
    3e48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e4a:	8d 81       	ldd	r24, Y+5	; 0x05
    3e4c:	9e 81       	ldd	r25, Y+6	; 0x06
    3e4e:	00 97       	sbiw	r24, 0x00	; 0
    3e50:	69 f7       	brne	.-38     	; 0x3e2c <HCLCD_Vid4Bits_ClearScreen+0xb4>
    3e52:	14 c0       	rjmp	.+40     	; 0x3e7c <HCLCD_Vid4Bits_ClearScreen+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e54:	6f 81       	ldd	r22, Y+7	; 0x07
    3e56:	78 85       	ldd	r23, Y+8	; 0x08
    3e58:	89 85       	ldd	r24, Y+9	; 0x09
    3e5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e60:	dc 01       	movw	r26, r24
    3e62:	cb 01       	movw	r24, r22
    3e64:	9e 83       	std	Y+6, r25	; 0x06
    3e66:	8d 83       	std	Y+5, r24	; 0x05
    3e68:	8d 81       	ldd	r24, Y+5	; 0x05
    3e6a:	9e 81       	ldd	r25, Y+6	; 0x06
    3e6c:	9a 83       	std	Y+2, r25	; 0x02
    3e6e:	89 83       	std	Y+1, r24	; 0x01
    3e70:	89 81       	ldd	r24, Y+1	; 0x01
    3e72:	9a 81       	ldd	r25, Y+2	; 0x02
    3e74:	01 97       	sbiw	r24, 0x01	; 1
    3e76:	f1 f7       	brne	.-4      	; 0x3e74 <HCLCD_Vid4Bits_ClearScreen+0xfc>
    3e78:	9a 83       	std	Y+2, r25	; 0x02
    3e7a:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(2);
}
    3e7c:	2e 96       	adiw	r28, 0x0e	; 14
    3e7e:	0f b6       	in	r0, 0x3f	; 63
    3e80:	f8 94       	cli
    3e82:	de bf       	out	0x3e, r29	; 62
    3e84:	0f be       	out	0x3f, r0	; 63
    3e86:	cd bf       	out	0x3d, r28	; 61
    3e88:	cf 91       	pop	r28
    3e8a:	df 91       	pop	r29
    3e8c:	08 95       	ret

00003e8e <HCLCD_Vid4Bits_DisplayShiftLeft>:
/**/
 void HCLCD_Vid4Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
    3e8e:	df 93       	push	r29
    3e90:	cf 93       	push	r28
    3e92:	cd b7       	in	r28, 0x3d	; 61
    3e94:	de b7       	in	r29, 0x3e	; 62
    3e96:	60 97       	sbiw	r28, 0x10	; 16
    3e98:	0f b6       	in	r0, 0x3f	; 63
    3e9a:	f8 94       	cli
    3e9c:	de bf       	out	0x3e, r29	; 62
    3e9e:	0f be       	out	0x3f, r0	; 63
    3ea0:	cd bf       	out	0x3d, r28	; 61
    3ea2:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    3ea4:	1f 86       	std	Y+15, r1	; 0x0f
    3ea6:	7b c0       	rjmp	.+246    	; 0x3f9e <HCLCD_Vid4Bits_DisplayShiftLeft+0x110>
 {
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT>>4);
    3ea8:	81 e0       	ldi	r24, 0x01	; 1
    3eaa:	0e 94 34 1a 	call	0x3468	; 0x3468 <HCLCD_Vid4Bits_SendCommand>
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT);
    3eae:	88 e1       	ldi	r24, 0x18	; 24
    3eb0:	0e 94 34 1a 	call	0x3468	; 0x3468 <HCLCD_Vid4Bits_SendCommand>
    3eb4:	80 e0       	ldi	r24, 0x00	; 0
    3eb6:	90 e0       	ldi	r25, 0x00	; 0
    3eb8:	a6 e9       	ldi	r26, 0x96	; 150
    3eba:	b3 e4       	ldi	r27, 0x43	; 67
    3ebc:	8b 87       	std	Y+11, r24	; 0x0b
    3ebe:	9c 87       	std	Y+12, r25	; 0x0c
    3ec0:	ad 87       	std	Y+13, r26	; 0x0d
    3ec2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ec4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ec6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ec8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3eca:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ecc:	20 e0       	ldi	r18, 0x00	; 0
    3ece:	30 e0       	ldi	r19, 0x00	; 0
    3ed0:	4a ef       	ldi	r20, 0xFA	; 250
    3ed2:	54 e4       	ldi	r21, 0x44	; 68
    3ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ed8:	dc 01       	movw	r26, r24
    3eda:	cb 01       	movw	r24, r22
    3edc:	8f 83       	std	Y+7, r24	; 0x07
    3ede:	98 87       	std	Y+8, r25	; 0x08
    3ee0:	a9 87       	std	Y+9, r26	; 0x09
    3ee2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ee4:	6f 81       	ldd	r22, Y+7	; 0x07
    3ee6:	78 85       	ldd	r23, Y+8	; 0x08
    3ee8:	89 85       	ldd	r24, Y+9	; 0x09
    3eea:	9a 85       	ldd	r25, Y+10	; 0x0a
    3eec:	20 e0       	ldi	r18, 0x00	; 0
    3eee:	30 e0       	ldi	r19, 0x00	; 0
    3ef0:	40 e8       	ldi	r20, 0x80	; 128
    3ef2:	5f e3       	ldi	r21, 0x3F	; 63
    3ef4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ef8:	88 23       	and	r24, r24
    3efa:	2c f4       	brge	.+10     	; 0x3f06 <HCLCD_Vid4Bits_DisplayShiftLeft+0x78>
		__ticks = 1;
    3efc:	81 e0       	ldi	r24, 0x01	; 1
    3efe:	90 e0       	ldi	r25, 0x00	; 0
    3f00:	9e 83       	std	Y+6, r25	; 0x06
    3f02:	8d 83       	std	Y+5, r24	; 0x05
    3f04:	3f c0       	rjmp	.+126    	; 0x3f84 <HCLCD_Vid4Bits_DisplayShiftLeft+0xf6>
	else if (__tmp > 65535)
    3f06:	6f 81       	ldd	r22, Y+7	; 0x07
    3f08:	78 85       	ldd	r23, Y+8	; 0x08
    3f0a:	89 85       	ldd	r24, Y+9	; 0x09
    3f0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f0e:	20 e0       	ldi	r18, 0x00	; 0
    3f10:	3f ef       	ldi	r19, 0xFF	; 255
    3f12:	4f e7       	ldi	r20, 0x7F	; 127
    3f14:	57 e4       	ldi	r21, 0x47	; 71
    3f16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f1a:	18 16       	cp	r1, r24
    3f1c:	4c f5       	brge	.+82     	; 0x3f70 <HCLCD_Vid4Bits_DisplayShiftLeft+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f20:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f22:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f24:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f26:	20 e0       	ldi	r18, 0x00	; 0
    3f28:	30 e0       	ldi	r19, 0x00	; 0
    3f2a:	40 e2       	ldi	r20, 0x20	; 32
    3f2c:	51 e4       	ldi	r21, 0x41	; 65
    3f2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f32:	dc 01       	movw	r26, r24
    3f34:	cb 01       	movw	r24, r22
    3f36:	bc 01       	movw	r22, r24
    3f38:	cd 01       	movw	r24, r26
    3f3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f3e:	dc 01       	movw	r26, r24
    3f40:	cb 01       	movw	r24, r22
    3f42:	9e 83       	std	Y+6, r25	; 0x06
    3f44:	8d 83       	std	Y+5, r24	; 0x05
    3f46:	0f c0       	rjmp	.+30     	; 0x3f66 <HCLCD_Vid4Bits_DisplayShiftLeft+0xd8>
    3f48:	88 ec       	ldi	r24, 0xC8	; 200
    3f4a:	90 e0       	ldi	r25, 0x00	; 0
    3f4c:	9c 83       	std	Y+4, r25	; 0x04
    3f4e:	8b 83       	std	Y+3, r24	; 0x03
    3f50:	8b 81       	ldd	r24, Y+3	; 0x03
    3f52:	9c 81       	ldd	r25, Y+4	; 0x04
    3f54:	01 97       	sbiw	r24, 0x01	; 1
    3f56:	f1 f7       	brne	.-4      	; 0x3f54 <HCLCD_Vid4Bits_DisplayShiftLeft+0xc6>
    3f58:	9c 83       	std	Y+4, r25	; 0x04
    3f5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f5c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f5e:	9e 81       	ldd	r25, Y+6	; 0x06
    3f60:	01 97       	sbiw	r24, 0x01	; 1
    3f62:	9e 83       	std	Y+6, r25	; 0x06
    3f64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f66:	8d 81       	ldd	r24, Y+5	; 0x05
    3f68:	9e 81       	ldd	r25, Y+6	; 0x06
    3f6a:	00 97       	sbiw	r24, 0x00	; 0
    3f6c:	69 f7       	brne	.-38     	; 0x3f48 <HCLCD_Vid4Bits_DisplayShiftLeft+0xba>
    3f6e:	14 c0       	rjmp	.+40     	; 0x3f98 <HCLCD_Vid4Bits_DisplayShiftLeft+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f70:	6f 81       	ldd	r22, Y+7	; 0x07
    3f72:	78 85       	ldd	r23, Y+8	; 0x08
    3f74:	89 85       	ldd	r24, Y+9	; 0x09
    3f76:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f7c:	dc 01       	movw	r26, r24
    3f7e:	cb 01       	movw	r24, r22
    3f80:	9e 83       	std	Y+6, r25	; 0x06
    3f82:	8d 83       	std	Y+5, r24	; 0x05
    3f84:	8d 81       	ldd	r24, Y+5	; 0x05
    3f86:	9e 81       	ldd	r25, Y+6	; 0x06
    3f88:	9a 83       	std	Y+2, r25	; 0x02
    3f8a:	89 83       	std	Y+1, r24	; 0x01
    3f8c:	89 81       	ldd	r24, Y+1	; 0x01
    3f8e:	9a 81       	ldd	r25, Y+2	; 0x02
    3f90:	01 97       	sbiw	r24, 0x01	; 1
    3f92:	f1 f7       	brne	.-4      	; 0x3f90 <HCLCD_Vid4Bits_DisplayShiftLeft+0x102>
    3f94:	9a 83       	std	Y+2, r25	; 0x02
    3f96:	89 83       	std	Y+1, r24	; 0x01
}
/**/
 void HCLCD_Vid4Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    3f98:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f9a:	8f 5f       	subi	r24, 0xFF	; 255
    3f9c:	8f 87       	std	Y+15, r24	; 0x0f
    3f9e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3fa0:	88 89       	ldd	r24, Y+16	; 0x10
    3fa2:	98 17       	cp	r25, r24
    3fa4:	08 f4       	brcc	.+2      	; 0x3fa8 <HCLCD_Vid4Bits_DisplayShiftLeft+0x11a>
    3fa6:	80 cf       	rjmp	.-256    	; 0x3ea8 <HCLCD_Vid4Bits_DisplayShiftLeft+0x1a>
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT>>4);
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT);

  _delay_ms(300);
 }
}
    3fa8:	60 96       	adiw	r28, 0x10	; 16
    3faa:	0f b6       	in	r0, 0x3f	; 63
    3fac:	f8 94       	cli
    3fae:	de bf       	out	0x3e, r29	; 62
    3fb0:	0f be       	out	0x3f, r0	; 63
    3fb2:	cd bf       	out	0x3d, r28	; 61
    3fb4:	cf 91       	pop	r28
    3fb6:	df 91       	pop	r29
    3fb8:	08 95       	ret

00003fba <HCLCD_Vid4Bits_DisplayShiftRight>:
/**/
 void HCLCD_Vid4Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
    3fba:	df 93       	push	r29
    3fbc:	cf 93       	push	r28
    3fbe:	cd b7       	in	r28, 0x3d	; 61
    3fc0:	de b7       	in	r29, 0x3e	; 62
    3fc2:	60 97       	sbiw	r28, 0x10	; 16
    3fc4:	0f b6       	in	r0, 0x3f	; 63
    3fc6:	f8 94       	cli
    3fc8:	de bf       	out	0x3e, r29	; 62
    3fca:	0f be       	out	0x3f, r0	; 63
    3fcc:	cd bf       	out	0x3d, r28	; 61
    3fce:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    3fd0:	1f 86       	std	Y+15, r1	; 0x0f
    3fd2:	7b c0       	rjmp	.+246    	; 0x40ca <HCLCD_Vid4Bits_DisplayShiftRight+0x110>
	{
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT>>4);
    3fd4:	81 e0       	ldi	r24, 0x01	; 1
    3fd6:	0e 94 34 1a 	call	0x3468	; 0x3468 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT);
    3fda:	8c e1       	ldi	r24, 0x1C	; 28
    3fdc:	0e 94 34 1a 	call	0x3468	; 0x3468 <HCLCD_Vid4Bits_SendCommand>
    3fe0:	80 e0       	ldi	r24, 0x00	; 0
    3fe2:	90 e0       	ldi	r25, 0x00	; 0
    3fe4:	a6 e9       	ldi	r26, 0x96	; 150
    3fe6:	b3 e4       	ldi	r27, 0x43	; 67
    3fe8:	8b 87       	std	Y+11, r24	; 0x0b
    3fea:	9c 87       	std	Y+12, r25	; 0x0c
    3fec:	ad 87       	std	Y+13, r26	; 0x0d
    3fee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ff0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ff2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ff4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ff6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ff8:	20 e0       	ldi	r18, 0x00	; 0
    3ffa:	30 e0       	ldi	r19, 0x00	; 0
    3ffc:	4a ef       	ldi	r20, 0xFA	; 250
    3ffe:	54 e4       	ldi	r21, 0x44	; 68
    4000:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4004:	dc 01       	movw	r26, r24
    4006:	cb 01       	movw	r24, r22
    4008:	8f 83       	std	Y+7, r24	; 0x07
    400a:	98 87       	std	Y+8, r25	; 0x08
    400c:	a9 87       	std	Y+9, r26	; 0x09
    400e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4010:	6f 81       	ldd	r22, Y+7	; 0x07
    4012:	78 85       	ldd	r23, Y+8	; 0x08
    4014:	89 85       	ldd	r24, Y+9	; 0x09
    4016:	9a 85       	ldd	r25, Y+10	; 0x0a
    4018:	20 e0       	ldi	r18, 0x00	; 0
    401a:	30 e0       	ldi	r19, 0x00	; 0
    401c:	40 e8       	ldi	r20, 0x80	; 128
    401e:	5f e3       	ldi	r21, 0x3F	; 63
    4020:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4024:	88 23       	and	r24, r24
    4026:	2c f4       	brge	.+10     	; 0x4032 <HCLCD_Vid4Bits_DisplayShiftRight+0x78>
		__ticks = 1;
    4028:	81 e0       	ldi	r24, 0x01	; 1
    402a:	90 e0       	ldi	r25, 0x00	; 0
    402c:	9e 83       	std	Y+6, r25	; 0x06
    402e:	8d 83       	std	Y+5, r24	; 0x05
    4030:	3f c0       	rjmp	.+126    	; 0x40b0 <HCLCD_Vid4Bits_DisplayShiftRight+0xf6>
	else if (__tmp > 65535)
    4032:	6f 81       	ldd	r22, Y+7	; 0x07
    4034:	78 85       	ldd	r23, Y+8	; 0x08
    4036:	89 85       	ldd	r24, Y+9	; 0x09
    4038:	9a 85       	ldd	r25, Y+10	; 0x0a
    403a:	20 e0       	ldi	r18, 0x00	; 0
    403c:	3f ef       	ldi	r19, 0xFF	; 255
    403e:	4f e7       	ldi	r20, 0x7F	; 127
    4040:	57 e4       	ldi	r21, 0x47	; 71
    4042:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4046:	18 16       	cp	r1, r24
    4048:	4c f5       	brge	.+82     	; 0x409c <HCLCD_Vid4Bits_DisplayShiftRight+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    404a:	6b 85       	ldd	r22, Y+11	; 0x0b
    404c:	7c 85       	ldd	r23, Y+12	; 0x0c
    404e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4050:	9e 85       	ldd	r25, Y+14	; 0x0e
    4052:	20 e0       	ldi	r18, 0x00	; 0
    4054:	30 e0       	ldi	r19, 0x00	; 0
    4056:	40 e2       	ldi	r20, 0x20	; 32
    4058:	51 e4       	ldi	r21, 0x41	; 65
    405a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    405e:	dc 01       	movw	r26, r24
    4060:	cb 01       	movw	r24, r22
    4062:	bc 01       	movw	r22, r24
    4064:	cd 01       	movw	r24, r26
    4066:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    406a:	dc 01       	movw	r26, r24
    406c:	cb 01       	movw	r24, r22
    406e:	9e 83       	std	Y+6, r25	; 0x06
    4070:	8d 83       	std	Y+5, r24	; 0x05
    4072:	0f c0       	rjmp	.+30     	; 0x4092 <HCLCD_Vid4Bits_DisplayShiftRight+0xd8>
    4074:	88 ec       	ldi	r24, 0xC8	; 200
    4076:	90 e0       	ldi	r25, 0x00	; 0
    4078:	9c 83       	std	Y+4, r25	; 0x04
    407a:	8b 83       	std	Y+3, r24	; 0x03
    407c:	8b 81       	ldd	r24, Y+3	; 0x03
    407e:	9c 81       	ldd	r25, Y+4	; 0x04
    4080:	01 97       	sbiw	r24, 0x01	; 1
    4082:	f1 f7       	brne	.-4      	; 0x4080 <HCLCD_Vid4Bits_DisplayShiftRight+0xc6>
    4084:	9c 83       	std	Y+4, r25	; 0x04
    4086:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4088:	8d 81       	ldd	r24, Y+5	; 0x05
    408a:	9e 81       	ldd	r25, Y+6	; 0x06
    408c:	01 97       	sbiw	r24, 0x01	; 1
    408e:	9e 83       	std	Y+6, r25	; 0x06
    4090:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4092:	8d 81       	ldd	r24, Y+5	; 0x05
    4094:	9e 81       	ldd	r25, Y+6	; 0x06
    4096:	00 97       	sbiw	r24, 0x00	; 0
    4098:	69 f7       	brne	.-38     	; 0x4074 <HCLCD_Vid4Bits_DisplayShiftRight+0xba>
    409a:	14 c0       	rjmp	.+40     	; 0x40c4 <HCLCD_Vid4Bits_DisplayShiftRight+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    409c:	6f 81       	ldd	r22, Y+7	; 0x07
    409e:	78 85       	ldd	r23, Y+8	; 0x08
    40a0:	89 85       	ldd	r24, Y+9	; 0x09
    40a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    40a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40a8:	dc 01       	movw	r26, r24
    40aa:	cb 01       	movw	r24, r22
    40ac:	9e 83       	std	Y+6, r25	; 0x06
    40ae:	8d 83       	std	Y+5, r24	; 0x05
    40b0:	8d 81       	ldd	r24, Y+5	; 0x05
    40b2:	9e 81       	ldd	r25, Y+6	; 0x06
    40b4:	9a 83       	std	Y+2, r25	; 0x02
    40b6:	89 83       	std	Y+1, r24	; 0x01
    40b8:	89 81       	ldd	r24, Y+1	; 0x01
    40ba:	9a 81       	ldd	r25, Y+2	; 0x02
    40bc:	01 97       	sbiw	r24, 0x01	; 1
    40be:	f1 f7       	brne	.-4      	; 0x40bc <HCLCD_Vid4Bits_DisplayShiftRight+0x102>
    40c0:	9a 83       	std	Y+2, r25	; 0x02
    40c2:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid4Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    40c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    40c6:	8f 5f       	subi	r24, 0xFF	; 255
    40c8:	8f 87       	std	Y+15, r24	; 0x0f
    40ca:	9f 85       	ldd	r25, Y+15	; 0x0f
    40cc:	88 89       	ldd	r24, Y+16	; 0x10
    40ce:	98 17       	cp	r25, r24
    40d0:	08 f4       	brcc	.+2      	; 0x40d4 <HCLCD_Vid4Bits_DisplayShiftRight+0x11a>
    40d2:	80 cf       	rjmp	.-256    	; 0x3fd4 <HCLCD_Vid4Bits_DisplayShiftRight+0x1a>
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT>>4);
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT);

      _delay_ms(300);
	}
}
    40d4:	60 96       	adiw	r28, 0x10	; 16
    40d6:	0f b6       	in	r0, 0x3f	; 63
    40d8:	f8 94       	cli
    40da:	de bf       	out	0x3e, r29	; 62
    40dc:	0f be       	out	0x3f, r0	; 63
    40de:	cd bf       	out	0x3d, r28	; 61
    40e0:	cf 91       	pop	r28
    40e2:	df 91       	pop	r29
    40e4:	08 95       	ret

000040e6 <HCLCD_Vid4Bits_CursorShiftLeft>:
 /**/
 void HCLCD_Vid4Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
    40e6:	df 93       	push	r29
    40e8:	cf 93       	push	r28
    40ea:	cd b7       	in	r28, 0x3d	; 61
    40ec:	de b7       	in	r29, 0x3e	; 62
    40ee:	60 97       	sbiw	r28, 0x10	; 16
    40f0:	0f b6       	in	r0, 0x3f	; 63
    40f2:	f8 94       	cli
    40f4:	de bf       	out	0x3e, r29	; 62
    40f6:	0f be       	out	0x3f, r0	; 63
    40f8:	cd bf       	out	0x3d, r28	; 61
    40fa:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    40fc:	1f 86       	std	Y+15, r1	; 0x0f
    40fe:	7b c0       	rjmp	.+246    	; 0x41f6 <HCLCD_Vid4Bits_CursorShiftLeft+0x110>
 {
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT>>4);
    4100:	81 e0       	ldi	r24, 0x01	; 1
    4102:	0e 94 34 1a 	call	0x3468	; 0x3468 <HCLCD_Vid4Bits_SendCommand>
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT);
    4106:	80 e1       	ldi	r24, 0x10	; 16
    4108:	0e 94 34 1a 	call	0x3468	; 0x3468 <HCLCD_Vid4Bits_SendCommand>
    410c:	80 e0       	ldi	r24, 0x00	; 0
    410e:	90 e0       	ldi	r25, 0x00	; 0
    4110:	a6 e9       	ldi	r26, 0x96	; 150
    4112:	b3 e4       	ldi	r27, 0x43	; 67
    4114:	8b 87       	std	Y+11, r24	; 0x0b
    4116:	9c 87       	std	Y+12, r25	; 0x0c
    4118:	ad 87       	std	Y+13, r26	; 0x0d
    411a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    411c:	6b 85       	ldd	r22, Y+11	; 0x0b
    411e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4120:	8d 85       	ldd	r24, Y+13	; 0x0d
    4122:	9e 85       	ldd	r25, Y+14	; 0x0e
    4124:	20 e0       	ldi	r18, 0x00	; 0
    4126:	30 e0       	ldi	r19, 0x00	; 0
    4128:	4a ef       	ldi	r20, 0xFA	; 250
    412a:	54 e4       	ldi	r21, 0x44	; 68
    412c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4130:	dc 01       	movw	r26, r24
    4132:	cb 01       	movw	r24, r22
    4134:	8f 83       	std	Y+7, r24	; 0x07
    4136:	98 87       	std	Y+8, r25	; 0x08
    4138:	a9 87       	std	Y+9, r26	; 0x09
    413a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    413c:	6f 81       	ldd	r22, Y+7	; 0x07
    413e:	78 85       	ldd	r23, Y+8	; 0x08
    4140:	89 85       	ldd	r24, Y+9	; 0x09
    4142:	9a 85       	ldd	r25, Y+10	; 0x0a
    4144:	20 e0       	ldi	r18, 0x00	; 0
    4146:	30 e0       	ldi	r19, 0x00	; 0
    4148:	40 e8       	ldi	r20, 0x80	; 128
    414a:	5f e3       	ldi	r21, 0x3F	; 63
    414c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4150:	88 23       	and	r24, r24
    4152:	2c f4       	brge	.+10     	; 0x415e <HCLCD_Vid4Bits_CursorShiftLeft+0x78>
		__ticks = 1;
    4154:	81 e0       	ldi	r24, 0x01	; 1
    4156:	90 e0       	ldi	r25, 0x00	; 0
    4158:	9e 83       	std	Y+6, r25	; 0x06
    415a:	8d 83       	std	Y+5, r24	; 0x05
    415c:	3f c0       	rjmp	.+126    	; 0x41dc <HCLCD_Vid4Bits_CursorShiftLeft+0xf6>
	else if (__tmp > 65535)
    415e:	6f 81       	ldd	r22, Y+7	; 0x07
    4160:	78 85       	ldd	r23, Y+8	; 0x08
    4162:	89 85       	ldd	r24, Y+9	; 0x09
    4164:	9a 85       	ldd	r25, Y+10	; 0x0a
    4166:	20 e0       	ldi	r18, 0x00	; 0
    4168:	3f ef       	ldi	r19, 0xFF	; 255
    416a:	4f e7       	ldi	r20, 0x7F	; 127
    416c:	57 e4       	ldi	r21, 0x47	; 71
    416e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4172:	18 16       	cp	r1, r24
    4174:	4c f5       	brge	.+82     	; 0x41c8 <HCLCD_Vid4Bits_CursorShiftLeft+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4176:	6b 85       	ldd	r22, Y+11	; 0x0b
    4178:	7c 85       	ldd	r23, Y+12	; 0x0c
    417a:	8d 85       	ldd	r24, Y+13	; 0x0d
    417c:	9e 85       	ldd	r25, Y+14	; 0x0e
    417e:	20 e0       	ldi	r18, 0x00	; 0
    4180:	30 e0       	ldi	r19, 0x00	; 0
    4182:	40 e2       	ldi	r20, 0x20	; 32
    4184:	51 e4       	ldi	r21, 0x41	; 65
    4186:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    418a:	dc 01       	movw	r26, r24
    418c:	cb 01       	movw	r24, r22
    418e:	bc 01       	movw	r22, r24
    4190:	cd 01       	movw	r24, r26
    4192:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4196:	dc 01       	movw	r26, r24
    4198:	cb 01       	movw	r24, r22
    419a:	9e 83       	std	Y+6, r25	; 0x06
    419c:	8d 83       	std	Y+5, r24	; 0x05
    419e:	0f c0       	rjmp	.+30     	; 0x41be <HCLCD_Vid4Bits_CursorShiftLeft+0xd8>
    41a0:	88 ec       	ldi	r24, 0xC8	; 200
    41a2:	90 e0       	ldi	r25, 0x00	; 0
    41a4:	9c 83       	std	Y+4, r25	; 0x04
    41a6:	8b 83       	std	Y+3, r24	; 0x03
    41a8:	8b 81       	ldd	r24, Y+3	; 0x03
    41aa:	9c 81       	ldd	r25, Y+4	; 0x04
    41ac:	01 97       	sbiw	r24, 0x01	; 1
    41ae:	f1 f7       	brne	.-4      	; 0x41ac <HCLCD_Vid4Bits_CursorShiftLeft+0xc6>
    41b0:	9c 83       	std	Y+4, r25	; 0x04
    41b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41b4:	8d 81       	ldd	r24, Y+5	; 0x05
    41b6:	9e 81       	ldd	r25, Y+6	; 0x06
    41b8:	01 97       	sbiw	r24, 0x01	; 1
    41ba:	9e 83       	std	Y+6, r25	; 0x06
    41bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41be:	8d 81       	ldd	r24, Y+5	; 0x05
    41c0:	9e 81       	ldd	r25, Y+6	; 0x06
    41c2:	00 97       	sbiw	r24, 0x00	; 0
    41c4:	69 f7       	brne	.-38     	; 0x41a0 <HCLCD_Vid4Bits_CursorShiftLeft+0xba>
    41c6:	14 c0       	rjmp	.+40     	; 0x41f0 <HCLCD_Vid4Bits_CursorShiftLeft+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41c8:	6f 81       	ldd	r22, Y+7	; 0x07
    41ca:	78 85       	ldd	r23, Y+8	; 0x08
    41cc:	89 85       	ldd	r24, Y+9	; 0x09
    41ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    41d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41d4:	dc 01       	movw	r26, r24
    41d6:	cb 01       	movw	r24, r22
    41d8:	9e 83       	std	Y+6, r25	; 0x06
    41da:	8d 83       	std	Y+5, r24	; 0x05
    41dc:	8d 81       	ldd	r24, Y+5	; 0x05
    41de:	9e 81       	ldd	r25, Y+6	; 0x06
    41e0:	9a 83       	std	Y+2, r25	; 0x02
    41e2:	89 83       	std	Y+1, r24	; 0x01
    41e4:	89 81       	ldd	r24, Y+1	; 0x01
    41e6:	9a 81       	ldd	r25, Y+2	; 0x02
    41e8:	01 97       	sbiw	r24, 0x01	; 1
    41ea:	f1 f7       	brne	.-4      	; 0x41e8 <HCLCD_Vid4Bits_CursorShiftLeft+0x102>
    41ec:	9a 83       	std	Y+2, r25	; 0x02
    41ee:	89 83       	std	Y+1, r24	; 0x01
}
 /**/
 void HCLCD_Vid4Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    41f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    41f2:	8f 5f       	subi	r24, 0xFF	; 255
    41f4:	8f 87       	std	Y+15, r24	; 0x0f
    41f6:	9f 85       	ldd	r25, Y+15	; 0x0f
    41f8:	88 89       	ldd	r24, Y+16	; 0x10
    41fa:	98 17       	cp	r25, r24
    41fc:	08 f4       	brcc	.+2      	; 0x4200 <HCLCD_Vid4Bits_CursorShiftLeft+0x11a>
    41fe:	80 cf       	rjmp	.-256    	; 0x4100 <HCLCD_Vid4Bits_CursorShiftLeft+0x1a>
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT>>4);
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT);

  _delay_ms(300);
 }
}
    4200:	60 96       	adiw	r28, 0x10	; 16
    4202:	0f b6       	in	r0, 0x3f	; 63
    4204:	f8 94       	cli
    4206:	de bf       	out	0x3e, r29	; 62
    4208:	0f be       	out	0x3f, r0	; 63
    420a:	cd bf       	out	0x3d, r28	; 61
    420c:	cf 91       	pop	r28
    420e:	df 91       	pop	r29
    4210:	08 95       	ret

00004212 <HCLCD_Vid4Bits_CursorShiftRight>:
/**/
 void HCLCD_Vid4Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
    4212:	df 93       	push	r29
    4214:	cf 93       	push	r28
    4216:	cd b7       	in	r28, 0x3d	; 61
    4218:	de b7       	in	r29, 0x3e	; 62
    421a:	60 97       	sbiw	r28, 0x10	; 16
    421c:	0f b6       	in	r0, 0x3f	; 63
    421e:	f8 94       	cli
    4220:	de bf       	out	0x3e, r29	; 62
    4222:	0f be       	out	0x3f, r0	; 63
    4224:	cd bf       	out	0x3d, r28	; 61
    4226:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    4228:	1f 86       	std	Y+15, r1	; 0x0f
    422a:	7b c0       	rjmp	.+246    	; 0x4322 <HCLCD_Vid4Bits_CursorShiftRight+0x110>
	{
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT>>4);
    422c:	81 e0       	ldi	r24, 0x01	; 1
    422e:	0e 94 34 1a 	call	0x3468	; 0x3468 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT);
    4232:	84 e1       	ldi	r24, 0x14	; 20
    4234:	0e 94 34 1a 	call	0x3468	; 0x3468 <HCLCD_Vid4Bits_SendCommand>
    4238:	80 e0       	ldi	r24, 0x00	; 0
    423a:	90 e0       	ldi	r25, 0x00	; 0
    423c:	a6 e9       	ldi	r26, 0x96	; 150
    423e:	b3 e4       	ldi	r27, 0x43	; 67
    4240:	8b 87       	std	Y+11, r24	; 0x0b
    4242:	9c 87       	std	Y+12, r25	; 0x0c
    4244:	ad 87       	std	Y+13, r26	; 0x0d
    4246:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4248:	6b 85       	ldd	r22, Y+11	; 0x0b
    424a:	7c 85       	ldd	r23, Y+12	; 0x0c
    424c:	8d 85       	ldd	r24, Y+13	; 0x0d
    424e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4250:	20 e0       	ldi	r18, 0x00	; 0
    4252:	30 e0       	ldi	r19, 0x00	; 0
    4254:	4a ef       	ldi	r20, 0xFA	; 250
    4256:	54 e4       	ldi	r21, 0x44	; 68
    4258:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    425c:	dc 01       	movw	r26, r24
    425e:	cb 01       	movw	r24, r22
    4260:	8f 83       	std	Y+7, r24	; 0x07
    4262:	98 87       	std	Y+8, r25	; 0x08
    4264:	a9 87       	std	Y+9, r26	; 0x09
    4266:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4268:	6f 81       	ldd	r22, Y+7	; 0x07
    426a:	78 85       	ldd	r23, Y+8	; 0x08
    426c:	89 85       	ldd	r24, Y+9	; 0x09
    426e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4270:	20 e0       	ldi	r18, 0x00	; 0
    4272:	30 e0       	ldi	r19, 0x00	; 0
    4274:	40 e8       	ldi	r20, 0x80	; 128
    4276:	5f e3       	ldi	r21, 0x3F	; 63
    4278:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    427c:	88 23       	and	r24, r24
    427e:	2c f4       	brge	.+10     	; 0x428a <HCLCD_Vid4Bits_CursorShiftRight+0x78>
		__ticks = 1;
    4280:	81 e0       	ldi	r24, 0x01	; 1
    4282:	90 e0       	ldi	r25, 0x00	; 0
    4284:	9e 83       	std	Y+6, r25	; 0x06
    4286:	8d 83       	std	Y+5, r24	; 0x05
    4288:	3f c0       	rjmp	.+126    	; 0x4308 <HCLCD_Vid4Bits_CursorShiftRight+0xf6>
	else if (__tmp > 65535)
    428a:	6f 81       	ldd	r22, Y+7	; 0x07
    428c:	78 85       	ldd	r23, Y+8	; 0x08
    428e:	89 85       	ldd	r24, Y+9	; 0x09
    4290:	9a 85       	ldd	r25, Y+10	; 0x0a
    4292:	20 e0       	ldi	r18, 0x00	; 0
    4294:	3f ef       	ldi	r19, 0xFF	; 255
    4296:	4f e7       	ldi	r20, 0x7F	; 127
    4298:	57 e4       	ldi	r21, 0x47	; 71
    429a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    429e:	18 16       	cp	r1, r24
    42a0:	4c f5       	brge	.+82     	; 0x42f4 <HCLCD_Vid4Bits_CursorShiftRight+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    42a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    42a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    42a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    42aa:	20 e0       	ldi	r18, 0x00	; 0
    42ac:	30 e0       	ldi	r19, 0x00	; 0
    42ae:	40 e2       	ldi	r20, 0x20	; 32
    42b0:	51 e4       	ldi	r21, 0x41	; 65
    42b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42b6:	dc 01       	movw	r26, r24
    42b8:	cb 01       	movw	r24, r22
    42ba:	bc 01       	movw	r22, r24
    42bc:	cd 01       	movw	r24, r26
    42be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42c2:	dc 01       	movw	r26, r24
    42c4:	cb 01       	movw	r24, r22
    42c6:	9e 83       	std	Y+6, r25	; 0x06
    42c8:	8d 83       	std	Y+5, r24	; 0x05
    42ca:	0f c0       	rjmp	.+30     	; 0x42ea <HCLCD_Vid4Bits_CursorShiftRight+0xd8>
    42cc:	88 ec       	ldi	r24, 0xC8	; 200
    42ce:	90 e0       	ldi	r25, 0x00	; 0
    42d0:	9c 83       	std	Y+4, r25	; 0x04
    42d2:	8b 83       	std	Y+3, r24	; 0x03
    42d4:	8b 81       	ldd	r24, Y+3	; 0x03
    42d6:	9c 81       	ldd	r25, Y+4	; 0x04
    42d8:	01 97       	sbiw	r24, 0x01	; 1
    42da:	f1 f7       	brne	.-4      	; 0x42d8 <HCLCD_Vid4Bits_CursorShiftRight+0xc6>
    42dc:	9c 83       	std	Y+4, r25	; 0x04
    42de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42e0:	8d 81       	ldd	r24, Y+5	; 0x05
    42e2:	9e 81       	ldd	r25, Y+6	; 0x06
    42e4:	01 97       	sbiw	r24, 0x01	; 1
    42e6:	9e 83       	std	Y+6, r25	; 0x06
    42e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42ea:	8d 81       	ldd	r24, Y+5	; 0x05
    42ec:	9e 81       	ldd	r25, Y+6	; 0x06
    42ee:	00 97       	sbiw	r24, 0x00	; 0
    42f0:	69 f7       	brne	.-38     	; 0x42cc <HCLCD_Vid4Bits_CursorShiftRight+0xba>
    42f2:	14 c0       	rjmp	.+40     	; 0x431c <HCLCD_Vid4Bits_CursorShiftRight+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42f4:	6f 81       	ldd	r22, Y+7	; 0x07
    42f6:	78 85       	ldd	r23, Y+8	; 0x08
    42f8:	89 85       	ldd	r24, Y+9	; 0x09
    42fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    42fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4300:	dc 01       	movw	r26, r24
    4302:	cb 01       	movw	r24, r22
    4304:	9e 83       	std	Y+6, r25	; 0x06
    4306:	8d 83       	std	Y+5, r24	; 0x05
    4308:	8d 81       	ldd	r24, Y+5	; 0x05
    430a:	9e 81       	ldd	r25, Y+6	; 0x06
    430c:	9a 83       	std	Y+2, r25	; 0x02
    430e:	89 83       	std	Y+1, r24	; 0x01
    4310:	89 81       	ldd	r24, Y+1	; 0x01
    4312:	9a 81       	ldd	r25, Y+2	; 0x02
    4314:	01 97       	sbiw	r24, 0x01	; 1
    4316:	f1 f7       	brne	.-4      	; 0x4314 <HCLCD_Vid4Bits_CursorShiftRight+0x102>
    4318:	9a 83       	std	Y+2, r25	; 0x02
    431a:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid4Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    431c:	8f 85       	ldd	r24, Y+15	; 0x0f
    431e:	8f 5f       	subi	r24, 0xFF	; 255
    4320:	8f 87       	std	Y+15, r24	; 0x0f
    4322:	9f 85       	ldd	r25, Y+15	; 0x0f
    4324:	88 89       	ldd	r24, Y+16	; 0x10
    4326:	98 17       	cp	r25, r24
    4328:	08 f4       	brcc	.+2      	; 0x432c <HCLCD_Vid4Bits_CursorShiftRight+0x11a>
    432a:	80 cf       	rjmp	.-256    	; 0x422c <HCLCD_Vid4Bits_CursorShiftRight+0x1a>
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT>>4);
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT);

      _delay_ms(300);
	}
}
    432c:	60 96       	adiw	r28, 0x10	; 16
    432e:	0f b6       	in	r0, 0x3f	; 63
    4330:	f8 94       	cli
    4332:	de bf       	out	0x3e, r29	; 62
    4334:	0f be       	out	0x3f, r0	; 63
    4336:	cd bf       	out	0x3d, r28	; 61
    4338:	cf 91       	pop	r28
    433a:	df 91       	pop	r29
    433c:	08 95       	ret

0000433e <main>:
#include<util\delay.h>

void ISR(void);

int main(void)
{
    433e:	df 93       	push	r29
    4340:	cf 93       	push	r28
    4342:	cd b7       	in	r28, 0x3d	; 61
    4344:	de b7       	in	r29, 0x3e	; 62
    4346:	af 97       	sbiw	r28, 0x2f	; 47
    4348:	0f b6       	in	r0, 0x3f	; 63
    434a:	f8 94       	cli
    434c:	de bf       	out	0x3e, r29	; 62
    434e:	0f be       	out	0x3f, r0	; 63
    4350:	cd bf       	out	0x3d, r28	; 61
	u8 temp;




	MDIO_Error_State_SetPinDirection(PIN7,MDIO_PORTD,PIN_OUTPUT);
    4352:	87 e0       	ldi	r24, 0x07	; 7
    4354:	63 e0       	ldi	r22, 0x03	; 3
    4356:	41 e0       	ldi	r20, 0x01	; 1
    4358:	0e 94 79 07 	call	0xef2	; 0xef2 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(PIN2,MDIO_PORTD,PIN_INPUT);
    435c:	82 e0       	ldi	r24, 0x02	; 2
    435e:	63 e0       	ldi	r22, 0x03	; 3
    4360:	40 e0       	ldi	r20, 0x00	; 0
    4362:	0e 94 79 07 	call	0xef2	; 0xef2 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinValue(PIN2, MDIO_PORTD, PIN_HIGH);
    4366:	82 e0       	ldi	r24, 0x02	; 2
    4368:	63 e0       	ldi	r22, 0x03	; 3
    436a:	41 e0       	ldi	r20, 0x01	; 1
    436c:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPortDirection(MDIO_PORTB,PORT_OUTPUT);
    4370:	81 e0       	ldi	r24, 0x01	; 1
    4372:	6f ef       	ldi	r22, 0xFF	; 255
    4374:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <MDIO_Error_State_SetPortDirection>


	EXTI_voidInt0SenseControl();
    4378:	0e 94 28 0c 	call	0x1850	; 0x1850 <EXTI_voidInt0SenseControl>
	EXTI_u8Int0SetCallBack(&ISR);
    437c:	86 ef       	ldi	r24, 0xF6	; 246
    437e:	94 e2       	ldi	r25, 0x24	; 36
    4380:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <EXTI_u8Int0SetCallBack>
	EXTI_u8IntEnable(EXTI_INT0);
    4384:	80 e0       	ldi	r24, 0x00	; 0
    4386:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <EXTI_u8IntEnable>
	GIE_voidEnable();
    438a:	0e 94 0c 0c 	call	0x1818	; 0x1818 <GIE_voidEnable>



	MADC_VidInit();                                       //  Initialize ADC
    438e:	0e 94 a9 0b 	call	0x1752	; 0x1752 <MADC_VidInit>
	HCLCD_Vid4Bits_Init();
    4392:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <HCLCD_Vid4Bits_Init>
	HCLCD_Vid4Bits_ClearScreen();
    4396:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <HCLCD_Vid4Bits_ClearScreen>
	HCLCD_Vid4Bits_SetPosition(1, 0);
    439a:	81 e0       	ldi	r24, 0x01	; 1
    439c:	60 e0       	ldi	r22, 0x00	; 0
    439e:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <HCLCD_Vid4Bits_SetPosition>

	HCLCD_Vid4Bits_DisplayString((u8*) "SMART HOME");
    43a2:	80 e6       	ldi	r24, 0x60	; 96
    43a4:	90 e0       	ldi	r25, 0x00	; 0
    43a6:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <HCLCD_Vid4Bits_DisplayString>
    43aa:	80 e0       	ldi	r24, 0x00	; 0
    43ac:	90 e0       	ldi	r25, 0x00	; 0
    43ae:	aa e7       	ldi	r26, 0x7A	; 122
    43b0:	b4 e4       	ldi	r27, 0x44	; 68
    43b2:	8f a3       	std	Y+39, r24	; 0x27
    43b4:	98 a7       	std	Y+40, r25	; 0x28
    43b6:	a9 a7       	std	Y+41, r26	; 0x29
    43b8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43ba:	6f a1       	ldd	r22, Y+39	; 0x27
    43bc:	78 a5       	ldd	r23, Y+40	; 0x28
    43be:	89 a5       	ldd	r24, Y+41	; 0x29
    43c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    43c2:	20 e0       	ldi	r18, 0x00	; 0
    43c4:	30 e0       	ldi	r19, 0x00	; 0
    43c6:	4a ef       	ldi	r20, 0xFA	; 250
    43c8:	54 e4       	ldi	r21, 0x44	; 68
    43ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43ce:	dc 01       	movw	r26, r24
    43d0:	cb 01       	movw	r24, r22
    43d2:	8b a3       	std	Y+35, r24	; 0x23
    43d4:	9c a3       	std	Y+36, r25	; 0x24
    43d6:	ad a3       	std	Y+37, r26	; 0x25
    43d8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    43da:	6b a1       	ldd	r22, Y+35	; 0x23
    43dc:	7c a1       	ldd	r23, Y+36	; 0x24
    43de:	8d a1       	ldd	r24, Y+37	; 0x25
    43e0:	9e a1       	ldd	r25, Y+38	; 0x26
    43e2:	20 e0       	ldi	r18, 0x00	; 0
    43e4:	30 e0       	ldi	r19, 0x00	; 0
    43e6:	40 e8       	ldi	r20, 0x80	; 128
    43e8:	5f e3       	ldi	r21, 0x3F	; 63
    43ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    43ee:	88 23       	and	r24, r24
    43f0:	2c f4       	brge	.+10     	; 0x43fc <main+0xbe>
		__ticks = 1;
    43f2:	81 e0       	ldi	r24, 0x01	; 1
    43f4:	90 e0       	ldi	r25, 0x00	; 0
    43f6:	9a a3       	std	Y+34, r25	; 0x22
    43f8:	89 a3       	std	Y+33, r24	; 0x21
    43fa:	3f c0       	rjmp	.+126    	; 0x447a <main+0x13c>
	else if (__tmp > 65535)
    43fc:	6b a1       	ldd	r22, Y+35	; 0x23
    43fe:	7c a1       	ldd	r23, Y+36	; 0x24
    4400:	8d a1       	ldd	r24, Y+37	; 0x25
    4402:	9e a1       	ldd	r25, Y+38	; 0x26
    4404:	20 e0       	ldi	r18, 0x00	; 0
    4406:	3f ef       	ldi	r19, 0xFF	; 255
    4408:	4f e7       	ldi	r20, 0x7F	; 127
    440a:	57 e4       	ldi	r21, 0x47	; 71
    440c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4410:	18 16       	cp	r1, r24
    4412:	4c f5       	brge	.+82     	; 0x4466 <main+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4414:	6f a1       	ldd	r22, Y+39	; 0x27
    4416:	78 a5       	ldd	r23, Y+40	; 0x28
    4418:	89 a5       	ldd	r24, Y+41	; 0x29
    441a:	9a a5       	ldd	r25, Y+42	; 0x2a
    441c:	20 e0       	ldi	r18, 0x00	; 0
    441e:	30 e0       	ldi	r19, 0x00	; 0
    4420:	40 e2       	ldi	r20, 0x20	; 32
    4422:	51 e4       	ldi	r21, 0x41	; 65
    4424:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4428:	dc 01       	movw	r26, r24
    442a:	cb 01       	movw	r24, r22
    442c:	bc 01       	movw	r22, r24
    442e:	cd 01       	movw	r24, r26
    4430:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4434:	dc 01       	movw	r26, r24
    4436:	cb 01       	movw	r24, r22
    4438:	9a a3       	std	Y+34, r25	; 0x22
    443a:	89 a3       	std	Y+33, r24	; 0x21
    443c:	0f c0       	rjmp	.+30     	; 0x445c <main+0x11e>
    443e:	88 ec       	ldi	r24, 0xC8	; 200
    4440:	90 e0       	ldi	r25, 0x00	; 0
    4442:	98 a3       	std	Y+32, r25	; 0x20
    4444:	8f 8f       	std	Y+31, r24	; 0x1f
    4446:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4448:	98 a1       	ldd	r25, Y+32	; 0x20
    444a:	01 97       	sbiw	r24, 0x01	; 1
    444c:	f1 f7       	brne	.-4      	; 0x444a <main+0x10c>
    444e:	98 a3       	std	Y+32, r25	; 0x20
    4450:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4452:	89 a1       	ldd	r24, Y+33	; 0x21
    4454:	9a a1       	ldd	r25, Y+34	; 0x22
    4456:	01 97       	sbiw	r24, 0x01	; 1
    4458:	9a a3       	std	Y+34, r25	; 0x22
    445a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    445c:	89 a1       	ldd	r24, Y+33	; 0x21
    445e:	9a a1       	ldd	r25, Y+34	; 0x22
    4460:	00 97       	sbiw	r24, 0x00	; 0
    4462:	69 f7       	brne	.-38     	; 0x443e <main+0x100>
    4464:	14 c0       	rjmp	.+40     	; 0x448e <main+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4466:	6b a1       	ldd	r22, Y+35	; 0x23
    4468:	7c a1       	ldd	r23, Y+36	; 0x24
    446a:	8d a1       	ldd	r24, Y+37	; 0x25
    446c:	9e a1       	ldd	r25, Y+38	; 0x26
    446e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4472:	dc 01       	movw	r26, r24
    4474:	cb 01       	movw	r24, r22
    4476:	9a a3       	std	Y+34, r25	; 0x22
    4478:	89 a3       	std	Y+33, r24	; 0x21
    447a:	89 a1       	ldd	r24, Y+33	; 0x21
    447c:	9a a1       	ldd	r25, Y+34	; 0x22
    447e:	9e 8f       	std	Y+30, r25	; 0x1e
    4480:	8d 8f       	std	Y+29, r24	; 0x1d
    4482:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4484:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4486:	01 97       	sbiw	r24, 0x01	; 1
    4488:	f1 f7       	brne	.-4      	; 0x4486 <main+0x148>
    448a:	9e 8f       	std	Y+30, r25	; 0x1e
    448c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	HCLCD_Vid4Bits_ClearScreen();
    448e:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <HCLCD_Vid4Bits_ClearScreen>
    4492:	80 e0       	ldi	r24, 0x00	; 0
    4494:	90 e0       	ldi	r25, 0x00	; 0
    4496:	aa e7       	ldi	r26, 0x7A	; 122
    4498:	b4 e4       	ldi	r27, 0x44	; 68
    449a:	89 8f       	std	Y+25, r24	; 0x19
    449c:	9a 8f       	std	Y+26, r25	; 0x1a
    449e:	ab 8f       	std	Y+27, r26	; 0x1b
    44a0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44a2:	69 8d       	ldd	r22, Y+25	; 0x19
    44a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    44a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44aa:	20 e0       	ldi	r18, 0x00	; 0
    44ac:	30 e0       	ldi	r19, 0x00	; 0
    44ae:	4a ef       	ldi	r20, 0xFA	; 250
    44b0:	54 e4       	ldi	r21, 0x44	; 68
    44b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44b6:	dc 01       	movw	r26, r24
    44b8:	cb 01       	movw	r24, r22
    44ba:	8d 8b       	std	Y+21, r24	; 0x15
    44bc:	9e 8b       	std	Y+22, r25	; 0x16
    44be:	af 8b       	std	Y+23, r26	; 0x17
    44c0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    44c2:	6d 89       	ldd	r22, Y+21	; 0x15
    44c4:	7e 89       	ldd	r23, Y+22	; 0x16
    44c6:	8f 89       	ldd	r24, Y+23	; 0x17
    44c8:	98 8d       	ldd	r25, Y+24	; 0x18
    44ca:	20 e0       	ldi	r18, 0x00	; 0
    44cc:	30 e0       	ldi	r19, 0x00	; 0
    44ce:	40 e8       	ldi	r20, 0x80	; 128
    44d0:	5f e3       	ldi	r21, 0x3F	; 63
    44d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    44d6:	88 23       	and	r24, r24
    44d8:	2c f4       	brge	.+10     	; 0x44e4 <main+0x1a6>
		__ticks = 1;
    44da:	81 e0       	ldi	r24, 0x01	; 1
    44dc:	90 e0       	ldi	r25, 0x00	; 0
    44de:	9c 8b       	std	Y+20, r25	; 0x14
    44e0:	8b 8b       	std	Y+19, r24	; 0x13
    44e2:	3f c0       	rjmp	.+126    	; 0x4562 <main+0x224>
	else if (__tmp > 65535)
    44e4:	6d 89       	ldd	r22, Y+21	; 0x15
    44e6:	7e 89       	ldd	r23, Y+22	; 0x16
    44e8:	8f 89       	ldd	r24, Y+23	; 0x17
    44ea:	98 8d       	ldd	r25, Y+24	; 0x18
    44ec:	20 e0       	ldi	r18, 0x00	; 0
    44ee:	3f ef       	ldi	r19, 0xFF	; 255
    44f0:	4f e7       	ldi	r20, 0x7F	; 127
    44f2:	57 e4       	ldi	r21, 0x47	; 71
    44f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    44f8:	18 16       	cp	r1, r24
    44fa:	4c f5       	brge	.+82     	; 0x454e <main+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44fc:	69 8d       	ldd	r22, Y+25	; 0x19
    44fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4500:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4502:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4504:	20 e0       	ldi	r18, 0x00	; 0
    4506:	30 e0       	ldi	r19, 0x00	; 0
    4508:	40 e2       	ldi	r20, 0x20	; 32
    450a:	51 e4       	ldi	r21, 0x41	; 65
    450c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4510:	dc 01       	movw	r26, r24
    4512:	cb 01       	movw	r24, r22
    4514:	bc 01       	movw	r22, r24
    4516:	cd 01       	movw	r24, r26
    4518:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    451c:	dc 01       	movw	r26, r24
    451e:	cb 01       	movw	r24, r22
    4520:	9c 8b       	std	Y+20, r25	; 0x14
    4522:	8b 8b       	std	Y+19, r24	; 0x13
    4524:	0f c0       	rjmp	.+30     	; 0x4544 <main+0x206>
    4526:	88 ec       	ldi	r24, 0xC8	; 200
    4528:	90 e0       	ldi	r25, 0x00	; 0
    452a:	9a 8b       	std	Y+18, r25	; 0x12
    452c:	89 8b       	std	Y+17, r24	; 0x11
    452e:	89 89       	ldd	r24, Y+17	; 0x11
    4530:	9a 89       	ldd	r25, Y+18	; 0x12
    4532:	01 97       	sbiw	r24, 0x01	; 1
    4534:	f1 f7       	brne	.-4      	; 0x4532 <main+0x1f4>
    4536:	9a 8b       	std	Y+18, r25	; 0x12
    4538:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    453a:	8b 89       	ldd	r24, Y+19	; 0x13
    453c:	9c 89       	ldd	r25, Y+20	; 0x14
    453e:	01 97       	sbiw	r24, 0x01	; 1
    4540:	9c 8b       	std	Y+20, r25	; 0x14
    4542:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4544:	8b 89       	ldd	r24, Y+19	; 0x13
    4546:	9c 89       	ldd	r25, Y+20	; 0x14
    4548:	00 97       	sbiw	r24, 0x00	; 0
    454a:	69 f7       	brne	.-38     	; 0x4526 <main+0x1e8>
    454c:	14 c0       	rjmp	.+40     	; 0x4576 <main+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    454e:	6d 89       	ldd	r22, Y+21	; 0x15
    4550:	7e 89       	ldd	r23, Y+22	; 0x16
    4552:	8f 89       	ldd	r24, Y+23	; 0x17
    4554:	98 8d       	ldd	r25, Y+24	; 0x18
    4556:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    455a:	dc 01       	movw	r26, r24
    455c:	cb 01       	movw	r24, r22
    455e:	9c 8b       	std	Y+20, r25	; 0x14
    4560:	8b 8b       	std	Y+19, r24	; 0x13
    4562:	8b 89       	ldd	r24, Y+19	; 0x13
    4564:	9c 89       	ldd	r25, Y+20	; 0x14
    4566:	98 8b       	std	Y+16, r25	; 0x10
    4568:	8f 87       	std	Y+15, r24	; 0x0f
    456a:	8f 85       	ldd	r24, Y+15	; 0x0f
    456c:	98 89       	ldd	r25, Y+16	; 0x10
    456e:	01 97       	sbiw	r24, 0x01	; 1
    4570:	f1 f7       	brne	.-4      	; 0x456e <main+0x230>
    4572:	98 8b       	std	Y+16, r25	; 0x10
    4574:	8f 87       	std	Y+15, r24	; 0x0f



	while (1)
	{
		Local_u8ADCLM35 = MADC_u16ADC_StartConversion(CHANNEL_0);
    4576:	80 e0       	ldi	r24, 0x00	; 0
    4578:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <MADC_u16ADC_StartConversion>
    457c:	8f a7       	std	Y+47, r24	; 0x2f
		Local_u8ADCLDR  = MADC_u16ADC_StartConversion(CHANNEL_1);
    457e:	81 e0       	ldi	r24, 0x01	; 1
    4580:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <MADC_u16ADC_StartConversion>
    4584:	8e a7       	std	Y+46, r24	; 0x2e
		MilliVolt = (u16) ((u32) Local_u8ADCLM35 * 5000UL) / 256UL;
    4586:	8f a5       	ldd	r24, Y+47	; 0x2f
    4588:	88 2f       	mov	r24, r24
    458a:	90 e0       	ldi	r25, 0x00	; 0
    458c:	a0 e0       	ldi	r26, 0x00	; 0
    458e:	b0 e0       	ldi	r27, 0x00	; 0
    4590:	28 e8       	ldi	r18, 0x88	; 136
    4592:	33 e1       	ldi	r19, 0x13	; 19
    4594:	40 e0       	ldi	r20, 0x00	; 0
    4596:	50 e0       	ldi	r21, 0x00	; 0
    4598:	bc 01       	movw	r22, r24
    459a:	cd 01       	movw	r24, r26
    459c:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <__mulsi3>
    45a0:	dc 01       	movw	r26, r24
    45a2:	cb 01       	movw	r24, r22
    45a4:	89 2f       	mov	r24, r25
    45a6:	99 27       	eor	r25, r25
    45a8:	9d a7       	std	Y+45, r25	; 0x2d
    45aa:	8c a7       	std	Y+44, r24	; 0x2c
		temp = MilliVolt / 10;
    45ac:	8c a5       	ldd	r24, Y+44	; 0x2c
    45ae:	9d a5       	ldd	r25, Y+45	; 0x2d
    45b0:	2a e0       	ldi	r18, 0x0A	; 10
    45b2:	30 e0       	ldi	r19, 0x00	; 0
    45b4:	b9 01       	movw	r22, r18
    45b6:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <__udivmodhi4>
    45ba:	cb 01       	movw	r24, r22
    45bc:	8b a7       	std	Y+43, r24	; 0x2b
		if ((Local_u8ADCLDR == 0) && (Local_u8ADCLDR <= 28)) {
    45be:	8e a5       	ldd	r24, Y+46	; 0x2e
    45c0:	88 23       	and	r24, r24
    45c2:	61 f5       	brne	.+88     	; 0x461c <main+0x2de>
    45c4:	8e a5       	ldd	r24, Y+46	; 0x2e
    45c6:	8d 31       	cpi	r24, 0x1D	; 29
    45c8:	48 f5       	brcc	.+82     	; 0x461c <main+0x2de>
			MDIO_Error_State_SetPinValue(PIN0, MDIO_PORTB, PIN_HIGH);
    45ca:	80 e0       	ldi	r24, 0x00	; 0
    45cc:	61 e0       	ldi	r22, 0x01	; 1
    45ce:	41 e0       	ldi	r20, 0x01	; 1
    45d0:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN1, MDIO_PORTB, PIN_HIGH);
    45d4:	81 e0       	ldi	r24, 0x01	; 1
    45d6:	61 e0       	ldi	r22, 0x01	; 1
    45d8:	41 e0       	ldi	r20, 0x01	; 1
    45da:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN2, MDIO_PORTB, PIN_HIGH);
    45de:	82 e0       	ldi	r24, 0x02	; 2
    45e0:	61 e0       	ldi	r22, 0x01	; 1
    45e2:	41 e0       	ldi	r20, 0x01	; 1
    45e4:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN3, MDIO_PORTB, PIN_HIGH);
    45e8:	83 e0       	ldi	r24, 0x03	; 3
    45ea:	61 e0       	ldi	r22, 0x01	; 1
    45ec:	41 e0       	ldi	r20, 0x01	; 1
    45ee:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN4, MDIO_PORTB, PIN_HIGH);
    45f2:	84 e0       	ldi	r24, 0x04	; 4
    45f4:	61 e0       	ldi	r22, 0x01	; 1
    45f6:	41 e0       	ldi	r20, 0x01	; 1
    45f8:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN5, MDIO_PORTB, PIN_HIGH);
    45fc:	85 e0       	ldi	r24, 0x05	; 5
    45fe:	61 e0       	ldi	r22, 0x01	; 1
    4600:	41 e0       	ldi	r20, 0x01	; 1
    4602:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN6, MDIO_PORTB, PIN_HIGH);
    4606:	86 e0       	ldi	r24, 0x06	; 6
    4608:	61 e0       	ldi	r22, 0x01	; 1
    460a:	41 e0       	ldi	r20, 0x01	; 1
    460c:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN7, MDIO_PORTB, PIN_HIGH);
    4610:	87 e0       	ldi	r24, 0x07	; 7
    4612:	61 e0       	ldi	r22, 0x01	; 1
    4614:	41 e0       	ldi	r20, 0x01	; 1
    4616:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
    461a:	48 c1       	rjmp	.+656    	; 0x48ac <main+0x56e>
		} else if ((Local_u8ADCLDR > 28) && (Local_u8ADCLDR <= 56)) {
    461c:	8e a5       	ldd	r24, Y+46	; 0x2e
    461e:	8d 31       	cpi	r24, 0x1D	; 29
    4620:	60 f1       	brcs	.+88     	; 0x467a <main+0x33c>
    4622:	8e a5       	ldd	r24, Y+46	; 0x2e
    4624:	89 33       	cpi	r24, 0x39	; 57
    4626:	48 f5       	brcc	.+82     	; 0x467a <main+0x33c>
			MDIO_Error_State_SetPinValue(PIN0, MDIO_PORTB, PIN_HIGH);
    4628:	80 e0       	ldi	r24, 0x00	; 0
    462a:	61 e0       	ldi	r22, 0x01	; 1
    462c:	41 e0       	ldi	r20, 0x01	; 1
    462e:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN1, MDIO_PORTB, PIN_HIGH);
    4632:	81 e0       	ldi	r24, 0x01	; 1
    4634:	61 e0       	ldi	r22, 0x01	; 1
    4636:	41 e0       	ldi	r20, 0x01	; 1
    4638:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN2, MDIO_PORTB, PIN_HIGH);
    463c:	82 e0       	ldi	r24, 0x02	; 2
    463e:	61 e0       	ldi	r22, 0x01	; 1
    4640:	41 e0       	ldi	r20, 0x01	; 1
    4642:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN3, MDIO_PORTB, PIN_HIGH);
    4646:	83 e0       	ldi	r24, 0x03	; 3
    4648:	61 e0       	ldi	r22, 0x01	; 1
    464a:	41 e0       	ldi	r20, 0x01	; 1
    464c:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN4, MDIO_PORTB, PIN_HIGH);
    4650:	84 e0       	ldi	r24, 0x04	; 4
    4652:	61 e0       	ldi	r22, 0x01	; 1
    4654:	41 e0       	ldi	r20, 0x01	; 1
    4656:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN5, MDIO_PORTB, PIN_HIGH);
    465a:	85 e0       	ldi	r24, 0x05	; 5
    465c:	61 e0       	ldi	r22, 0x01	; 1
    465e:	41 e0       	ldi	r20, 0x01	; 1
    4660:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN6, MDIO_PORTB, PIN_HIGH);
    4664:	86 e0       	ldi	r24, 0x06	; 6
    4666:	61 e0       	ldi	r22, 0x01	; 1
    4668:	41 e0       	ldi	r20, 0x01	; 1
    466a:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN7, MDIO_PORTB, PIN_LOW);
    466e:	87 e0       	ldi	r24, 0x07	; 7
    4670:	61 e0       	ldi	r22, 0x01	; 1
    4672:	40 e0       	ldi	r20, 0x00	; 0
    4674:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
    4678:	19 c1       	rjmp	.+562    	; 0x48ac <main+0x56e>
		} else if ((Local_u8ADCLDR > 56) && (Local_u8ADCLDR <= 84)) {
    467a:	8e a5       	ldd	r24, Y+46	; 0x2e
    467c:	89 33       	cpi	r24, 0x39	; 57
    467e:	60 f1       	brcs	.+88     	; 0x46d8 <main+0x39a>
    4680:	8e a5       	ldd	r24, Y+46	; 0x2e
    4682:	85 35       	cpi	r24, 0x55	; 85
    4684:	48 f5       	brcc	.+82     	; 0x46d8 <main+0x39a>
			MDIO_Error_State_SetPinValue(PIN0, MDIO_PORTB, PIN_HIGH);
    4686:	80 e0       	ldi	r24, 0x00	; 0
    4688:	61 e0       	ldi	r22, 0x01	; 1
    468a:	41 e0       	ldi	r20, 0x01	; 1
    468c:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN1, MDIO_PORTB, PIN_HIGH);
    4690:	81 e0       	ldi	r24, 0x01	; 1
    4692:	61 e0       	ldi	r22, 0x01	; 1
    4694:	41 e0       	ldi	r20, 0x01	; 1
    4696:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN2, MDIO_PORTB, PIN_HIGH);
    469a:	82 e0       	ldi	r24, 0x02	; 2
    469c:	61 e0       	ldi	r22, 0x01	; 1
    469e:	41 e0       	ldi	r20, 0x01	; 1
    46a0:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN3, MDIO_PORTB, PIN_HIGH);
    46a4:	83 e0       	ldi	r24, 0x03	; 3
    46a6:	61 e0       	ldi	r22, 0x01	; 1
    46a8:	41 e0       	ldi	r20, 0x01	; 1
    46aa:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN4, MDIO_PORTB, PIN_HIGH);
    46ae:	84 e0       	ldi	r24, 0x04	; 4
    46b0:	61 e0       	ldi	r22, 0x01	; 1
    46b2:	41 e0       	ldi	r20, 0x01	; 1
    46b4:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN5, MDIO_PORTB, PIN_HIGH);
    46b8:	85 e0       	ldi	r24, 0x05	; 5
    46ba:	61 e0       	ldi	r22, 0x01	; 1
    46bc:	41 e0       	ldi	r20, 0x01	; 1
    46be:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN6, MDIO_PORTB, PIN_LOW);
    46c2:	86 e0       	ldi	r24, 0x06	; 6
    46c4:	61 e0       	ldi	r22, 0x01	; 1
    46c6:	40 e0       	ldi	r20, 0x00	; 0
    46c8:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN7, MDIO_PORTB, PIN_LOW);
    46cc:	87 e0       	ldi	r24, 0x07	; 7
    46ce:	61 e0       	ldi	r22, 0x01	; 1
    46d0:	40 e0       	ldi	r20, 0x00	; 0
    46d2:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
    46d6:	ea c0       	rjmp	.+468    	; 0x48ac <main+0x56e>
		} else if ((Local_u8ADCLDR > 84) && (Local_u8ADCLDR <= 112)) {
    46d8:	8e a5       	ldd	r24, Y+46	; 0x2e
    46da:	85 35       	cpi	r24, 0x55	; 85
    46dc:	60 f1       	brcs	.+88     	; 0x4736 <main+0x3f8>
    46de:	8e a5       	ldd	r24, Y+46	; 0x2e
    46e0:	81 37       	cpi	r24, 0x71	; 113
    46e2:	48 f5       	brcc	.+82     	; 0x4736 <main+0x3f8>
			MDIO_Error_State_SetPinValue(PIN0, MDIO_PORTB, PIN_HIGH);
    46e4:	80 e0       	ldi	r24, 0x00	; 0
    46e6:	61 e0       	ldi	r22, 0x01	; 1
    46e8:	41 e0       	ldi	r20, 0x01	; 1
    46ea:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN1, MDIO_PORTB, PIN_HIGH);
    46ee:	81 e0       	ldi	r24, 0x01	; 1
    46f0:	61 e0       	ldi	r22, 0x01	; 1
    46f2:	41 e0       	ldi	r20, 0x01	; 1
    46f4:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN2, MDIO_PORTB, PIN_HIGH);
    46f8:	82 e0       	ldi	r24, 0x02	; 2
    46fa:	61 e0       	ldi	r22, 0x01	; 1
    46fc:	41 e0       	ldi	r20, 0x01	; 1
    46fe:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN3, MDIO_PORTB, PIN_HIGH);
    4702:	83 e0       	ldi	r24, 0x03	; 3
    4704:	61 e0       	ldi	r22, 0x01	; 1
    4706:	41 e0       	ldi	r20, 0x01	; 1
    4708:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN4, MDIO_PORTB, PIN_HIGH);
    470c:	84 e0       	ldi	r24, 0x04	; 4
    470e:	61 e0       	ldi	r22, 0x01	; 1
    4710:	41 e0       	ldi	r20, 0x01	; 1
    4712:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN5, MDIO_PORTB, PIN_LOW);
    4716:	85 e0       	ldi	r24, 0x05	; 5
    4718:	61 e0       	ldi	r22, 0x01	; 1
    471a:	40 e0       	ldi	r20, 0x00	; 0
    471c:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN6, MDIO_PORTB, PIN_LOW);
    4720:	86 e0       	ldi	r24, 0x06	; 6
    4722:	61 e0       	ldi	r22, 0x01	; 1
    4724:	40 e0       	ldi	r20, 0x00	; 0
    4726:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN7, MDIO_PORTB, PIN_LOW);
    472a:	87 e0       	ldi	r24, 0x07	; 7
    472c:	61 e0       	ldi	r22, 0x01	; 1
    472e:	40 e0       	ldi	r20, 0x00	; 0
    4730:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
    4734:	bb c0       	rjmp	.+374    	; 0x48ac <main+0x56e>
		} else if ((Local_u8ADCLDR > 112) && (Local_u8ADCLDR <= 140)) {
    4736:	8e a5       	ldd	r24, Y+46	; 0x2e
    4738:	81 37       	cpi	r24, 0x71	; 113
    473a:	60 f1       	brcs	.+88     	; 0x4794 <main+0x456>
    473c:	8e a5       	ldd	r24, Y+46	; 0x2e
    473e:	8d 38       	cpi	r24, 0x8D	; 141
    4740:	48 f5       	brcc	.+82     	; 0x4794 <main+0x456>
			MDIO_Error_State_SetPinValue(PIN0, MDIO_PORTB, PIN_HIGH);
    4742:	80 e0       	ldi	r24, 0x00	; 0
    4744:	61 e0       	ldi	r22, 0x01	; 1
    4746:	41 e0       	ldi	r20, 0x01	; 1
    4748:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN1, MDIO_PORTB, PIN_HIGH);
    474c:	81 e0       	ldi	r24, 0x01	; 1
    474e:	61 e0       	ldi	r22, 0x01	; 1
    4750:	41 e0       	ldi	r20, 0x01	; 1
    4752:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN2, MDIO_PORTB, PIN_HIGH);
    4756:	82 e0       	ldi	r24, 0x02	; 2
    4758:	61 e0       	ldi	r22, 0x01	; 1
    475a:	41 e0       	ldi	r20, 0x01	; 1
    475c:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN3, MDIO_PORTB, PIN_HIGH);
    4760:	83 e0       	ldi	r24, 0x03	; 3
    4762:	61 e0       	ldi	r22, 0x01	; 1
    4764:	41 e0       	ldi	r20, 0x01	; 1
    4766:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN4, MDIO_PORTB, PIN_LOW);
    476a:	84 e0       	ldi	r24, 0x04	; 4
    476c:	61 e0       	ldi	r22, 0x01	; 1
    476e:	40 e0       	ldi	r20, 0x00	; 0
    4770:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN5, MDIO_PORTB, PIN_LOW);
    4774:	85 e0       	ldi	r24, 0x05	; 5
    4776:	61 e0       	ldi	r22, 0x01	; 1
    4778:	40 e0       	ldi	r20, 0x00	; 0
    477a:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN6, MDIO_PORTB, PIN_LOW);
    477e:	86 e0       	ldi	r24, 0x06	; 6
    4780:	61 e0       	ldi	r22, 0x01	; 1
    4782:	40 e0       	ldi	r20, 0x00	; 0
    4784:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN7, MDIO_PORTB, PIN_LOW);
    4788:	87 e0       	ldi	r24, 0x07	; 7
    478a:	61 e0       	ldi	r22, 0x01	; 1
    478c:	40 e0       	ldi	r20, 0x00	; 0
    478e:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
    4792:	8c c0       	rjmp	.+280    	; 0x48ac <main+0x56e>
		} else if ((Local_u8ADCLDR > 140) && (Local_u8ADCLDR <= 168)) {
    4794:	8e a5       	ldd	r24, Y+46	; 0x2e
    4796:	8d 38       	cpi	r24, 0x8D	; 141
    4798:	60 f1       	brcs	.+88     	; 0x47f2 <main+0x4b4>
    479a:	8e a5       	ldd	r24, Y+46	; 0x2e
    479c:	89 3a       	cpi	r24, 0xA9	; 169
    479e:	48 f5       	brcc	.+82     	; 0x47f2 <main+0x4b4>
			MDIO_Error_State_SetPinValue(PIN0, MDIO_PORTB, PIN_HIGH);
    47a0:	80 e0       	ldi	r24, 0x00	; 0
    47a2:	61 e0       	ldi	r22, 0x01	; 1
    47a4:	41 e0       	ldi	r20, 0x01	; 1
    47a6:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN1, MDIO_PORTB, PIN_HIGH);
    47aa:	81 e0       	ldi	r24, 0x01	; 1
    47ac:	61 e0       	ldi	r22, 0x01	; 1
    47ae:	41 e0       	ldi	r20, 0x01	; 1
    47b0:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN2, MDIO_PORTB, PIN_HIGH);
    47b4:	82 e0       	ldi	r24, 0x02	; 2
    47b6:	61 e0       	ldi	r22, 0x01	; 1
    47b8:	41 e0       	ldi	r20, 0x01	; 1
    47ba:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN3, MDIO_PORTB, PIN_LOW);
    47be:	83 e0       	ldi	r24, 0x03	; 3
    47c0:	61 e0       	ldi	r22, 0x01	; 1
    47c2:	40 e0       	ldi	r20, 0x00	; 0
    47c4:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN4, MDIO_PORTB, PIN_LOW);
    47c8:	84 e0       	ldi	r24, 0x04	; 4
    47ca:	61 e0       	ldi	r22, 0x01	; 1
    47cc:	40 e0       	ldi	r20, 0x00	; 0
    47ce:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN5, MDIO_PORTB, PIN_LOW);
    47d2:	85 e0       	ldi	r24, 0x05	; 5
    47d4:	61 e0       	ldi	r22, 0x01	; 1
    47d6:	40 e0       	ldi	r20, 0x00	; 0
    47d8:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN6, MDIO_PORTB, PIN_LOW);
    47dc:	86 e0       	ldi	r24, 0x06	; 6
    47de:	61 e0       	ldi	r22, 0x01	; 1
    47e0:	40 e0       	ldi	r20, 0x00	; 0
    47e2:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN7, MDIO_PORTB, PIN_LOW);
    47e6:	87 e0       	ldi	r24, 0x07	; 7
    47e8:	61 e0       	ldi	r22, 0x01	; 1
    47ea:	40 e0       	ldi	r20, 0x00	; 0
    47ec:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
    47f0:	5d c0       	rjmp	.+186    	; 0x48ac <main+0x56e>
		} else if ((Local_u8ADCLDR > 168) && (Local_u8ADCLDR <= 196)) {
    47f2:	8e a5       	ldd	r24, Y+46	; 0x2e
    47f4:	89 3a       	cpi	r24, 0xA9	; 169
    47f6:	60 f1       	brcs	.+88     	; 0x4850 <main+0x512>
    47f8:	8e a5       	ldd	r24, Y+46	; 0x2e
    47fa:	85 3c       	cpi	r24, 0xC5	; 197
    47fc:	48 f5       	brcc	.+82     	; 0x4850 <main+0x512>
			MDIO_Error_State_SetPinValue(PIN0, MDIO_PORTB, PIN_HIGH);
    47fe:	80 e0       	ldi	r24, 0x00	; 0
    4800:	61 e0       	ldi	r22, 0x01	; 1
    4802:	41 e0       	ldi	r20, 0x01	; 1
    4804:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN1, MDIO_PORTB, PIN_HIGH);
    4808:	81 e0       	ldi	r24, 0x01	; 1
    480a:	61 e0       	ldi	r22, 0x01	; 1
    480c:	41 e0       	ldi	r20, 0x01	; 1
    480e:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN2, MDIO_PORTB, PIN_LOW);
    4812:	82 e0       	ldi	r24, 0x02	; 2
    4814:	61 e0       	ldi	r22, 0x01	; 1
    4816:	40 e0       	ldi	r20, 0x00	; 0
    4818:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN3, MDIO_PORTB, PIN_LOW);
    481c:	83 e0       	ldi	r24, 0x03	; 3
    481e:	61 e0       	ldi	r22, 0x01	; 1
    4820:	40 e0       	ldi	r20, 0x00	; 0
    4822:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN4, MDIO_PORTB, PIN_LOW);
    4826:	84 e0       	ldi	r24, 0x04	; 4
    4828:	61 e0       	ldi	r22, 0x01	; 1
    482a:	40 e0       	ldi	r20, 0x00	; 0
    482c:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN5, MDIO_PORTB, PIN_LOW);
    4830:	85 e0       	ldi	r24, 0x05	; 5
    4832:	61 e0       	ldi	r22, 0x01	; 1
    4834:	40 e0       	ldi	r20, 0x00	; 0
    4836:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN6, MDIO_PORTB, PIN_LOW);
    483a:	86 e0       	ldi	r24, 0x06	; 6
    483c:	61 e0       	ldi	r22, 0x01	; 1
    483e:	40 e0       	ldi	r20, 0x00	; 0
    4840:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN7, MDIO_PORTB, PIN_LOW);
    4844:	87 e0       	ldi	r24, 0x07	; 7
    4846:	61 e0       	ldi	r22, 0x01	; 1
    4848:	40 e0       	ldi	r20, 0x00	; 0
    484a:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
    484e:	2e c0       	rjmp	.+92     	; 0x48ac <main+0x56e>
		} else if ((Local_u8ADCLDR > 196) && (Local_u8ADCLDR <= 224)) {
    4850:	8e a5       	ldd	r24, Y+46	; 0x2e
    4852:	85 3c       	cpi	r24, 0xC5	; 197
    4854:	58 f1       	brcs	.+86     	; 0x48ac <main+0x56e>
    4856:	8e a5       	ldd	r24, Y+46	; 0x2e
    4858:	81 3e       	cpi	r24, 0xE1	; 225
    485a:	40 f5       	brcc	.+80     	; 0x48ac <main+0x56e>
			MDIO_Error_State_SetPinValue(PIN0, MDIO_PORTB, PIN_LOW);
    485c:	80 e0       	ldi	r24, 0x00	; 0
    485e:	61 e0       	ldi	r22, 0x01	; 1
    4860:	40 e0       	ldi	r20, 0x00	; 0
    4862:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN1, MDIO_PORTB, PIN_LOW);
    4866:	81 e0       	ldi	r24, 0x01	; 1
    4868:	61 e0       	ldi	r22, 0x01	; 1
    486a:	40 e0       	ldi	r20, 0x00	; 0
    486c:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN2, MDIO_PORTB, PIN_LOW);
    4870:	82 e0       	ldi	r24, 0x02	; 2
    4872:	61 e0       	ldi	r22, 0x01	; 1
    4874:	40 e0       	ldi	r20, 0x00	; 0
    4876:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN3, MDIO_PORTB, PIN_LOW);
    487a:	83 e0       	ldi	r24, 0x03	; 3
    487c:	61 e0       	ldi	r22, 0x01	; 1
    487e:	40 e0       	ldi	r20, 0x00	; 0
    4880:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN4, MDIO_PORTB, PIN_LOW);
    4884:	84 e0       	ldi	r24, 0x04	; 4
    4886:	61 e0       	ldi	r22, 0x01	; 1
    4888:	40 e0       	ldi	r20, 0x00	; 0
    488a:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN5, MDIO_PORTB, PIN_LOW);
    488e:	85 e0       	ldi	r24, 0x05	; 5
    4890:	61 e0       	ldi	r22, 0x01	; 1
    4892:	40 e0       	ldi	r20, 0x00	; 0
    4894:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN6, MDIO_PORTB, PIN_LOW);
    4898:	86 e0       	ldi	r24, 0x06	; 6
    489a:	61 e0       	ldi	r22, 0x01	; 1
    489c:	40 e0       	ldi	r20, 0x00	; 0
    489e:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN7, MDIO_PORTB, PIN_LOW);
    48a2:	87 e0       	ldi	r24, 0x07	; 7
    48a4:	61 e0       	ldi	r22, 0x01	; 1
    48a6:	40 e0       	ldi	r20, 0x00	; 0
    48a8:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
		}
		if (temp > 10)
    48ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    48ae:	8b 30       	cpi	r24, 0x0B	; 11
    48b0:	30 f0       	brcs	.+12     	; 0x48be <main+0x580>
		{
			MDIO_Error_State_SetPinValue(PIN7, MDIO_PORTD, PIN_HIGH);
    48b2:	87 e0       	ldi	r24, 0x07	; 7
    48b4:	63 e0       	ldi	r22, 0x03	; 3
    48b6:	41 e0       	ldi	r20, 0x01	; 1
    48b8:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
    48bc:	05 c0       	rjmp	.+10     	; 0x48c8 <main+0x58a>
		}
		else
		{
			MDIO_Error_State_SetPinValue(PIN7, MDIO_PORTD, PIN_LOW);
    48be:	87 e0       	ldi	r24, 0x07	; 7
    48c0:	63 e0       	ldi	r22, 0x03	; 3
    48c2:	40 e0       	ldi	r20, 0x00	; 0
    48c4:	0e 94 cc 08 	call	0x1198	; 0x1198 <MDIO_Error_State_SetPinValue>
		}
		HCLCD_Vid4Bits_SetPosition(1, 0);
    48c8:	81 e0       	ldi	r24, 0x01	; 1
    48ca:	60 e0       	ldi	r22, 0x00	; 0
    48cc:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <HCLCD_Vid4Bits_SetPosition>
		HCLCD_Vid4Bits_DisplayString((u8*) "TEMP =");
    48d0:	8b e6       	ldi	r24, 0x6B	; 107
    48d2:	90 e0       	ldi	r25, 0x00	; 0
    48d4:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <HCLCD_Vid4Bits_DisplayString>
		HCLCD_Vid4Bits_DisplayNumber(temp);
    48d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    48da:	88 2f       	mov	r24, r24
    48dc:	90 e0       	ldi	r25, 0x00	; 0
    48de:	a0 e0       	ldi	r26, 0x00	; 0
    48e0:	b0 e0       	ldi	r27, 0x00	; 0
    48e2:	bc 01       	movw	r22, r24
    48e4:	cd 01       	movw	r24, r26
    48e6:	0e 94 c0 1d 	call	0x3b80	; 0x3b80 <HCLCD_Vid4Bits_DisplayNumber>
		HCLCD_Vid4Bits_DisplayString((u8*) "C");
    48ea:	82 e7       	ldi	r24, 0x72	; 114
    48ec:	90 e0       	ldi	r25, 0x00	; 0
    48ee:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <HCLCD_Vid4Bits_DisplayString>
		HCLCD_Vid4Bits_SetPosition(2,0);
    48f2:	82 e0       	ldi	r24, 0x02	; 2
    48f4:	60 e0       	ldi	r22, 0x00	; 0
    48f6:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <HCLCD_Vid4Bits_SetPosition>
		HCLCD_Vid4Bits_DisplayString((u8*) "PRESS TO LOGIN");
    48fa:	84 e7       	ldi	r24, 0x74	; 116
    48fc:	90 e0       	ldi	r25, 0x00	; 0
    48fe:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <HCLCD_Vid4Bits_DisplayString>
    4902:	80 e0       	ldi	r24, 0x00	; 0
    4904:	90 e0       	ldi	r25, 0x00	; 0
    4906:	aa e7       	ldi	r26, 0x7A	; 122
    4908:	b4 e4       	ldi	r27, 0x44	; 68
    490a:	8b 87       	std	Y+11, r24	; 0x0b
    490c:	9c 87       	std	Y+12, r25	; 0x0c
    490e:	ad 87       	std	Y+13, r26	; 0x0d
    4910:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4912:	6b 85       	ldd	r22, Y+11	; 0x0b
    4914:	7c 85       	ldd	r23, Y+12	; 0x0c
    4916:	8d 85       	ldd	r24, Y+13	; 0x0d
    4918:	9e 85       	ldd	r25, Y+14	; 0x0e
    491a:	20 e0       	ldi	r18, 0x00	; 0
    491c:	30 e0       	ldi	r19, 0x00	; 0
    491e:	4a ef       	ldi	r20, 0xFA	; 250
    4920:	54 e4       	ldi	r21, 0x44	; 68
    4922:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4926:	dc 01       	movw	r26, r24
    4928:	cb 01       	movw	r24, r22
    492a:	8f 83       	std	Y+7, r24	; 0x07
    492c:	98 87       	std	Y+8, r25	; 0x08
    492e:	a9 87       	std	Y+9, r26	; 0x09
    4930:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4932:	6f 81       	ldd	r22, Y+7	; 0x07
    4934:	78 85       	ldd	r23, Y+8	; 0x08
    4936:	89 85       	ldd	r24, Y+9	; 0x09
    4938:	9a 85       	ldd	r25, Y+10	; 0x0a
    493a:	20 e0       	ldi	r18, 0x00	; 0
    493c:	30 e0       	ldi	r19, 0x00	; 0
    493e:	40 e8       	ldi	r20, 0x80	; 128
    4940:	5f e3       	ldi	r21, 0x3F	; 63
    4942:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4946:	88 23       	and	r24, r24
    4948:	2c f4       	brge	.+10     	; 0x4954 <main+0x616>
		__ticks = 1;
    494a:	81 e0       	ldi	r24, 0x01	; 1
    494c:	90 e0       	ldi	r25, 0x00	; 0
    494e:	9e 83       	std	Y+6, r25	; 0x06
    4950:	8d 83       	std	Y+5, r24	; 0x05
    4952:	3f c0       	rjmp	.+126    	; 0x49d2 <main+0x694>
	else if (__tmp > 65535)
    4954:	6f 81       	ldd	r22, Y+7	; 0x07
    4956:	78 85       	ldd	r23, Y+8	; 0x08
    4958:	89 85       	ldd	r24, Y+9	; 0x09
    495a:	9a 85       	ldd	r25, Y+10	; 0x0a
    495c:	20 e0       	ldi	r18, 0x00	; 0
    495e:	3f ef       	ldi	r19, 0xFF	; 255
    4960:	4f e7       	ldi	r20, 0x7F	; 127
    4962:	57 e4       	ldi	r21, 0x47	; 71
    4964:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4968:	18 16       	cp	r1, r24
    496a:	4c f5       	brge	.+82     	; 0x49be <main+0x680>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    496c:	6b 85       	ldd	r22, Y+11	; 0x0b
    496e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4970:	8d 85       	ldd	r24, Y+13	; 0x0d
    4972:	9e 85       	ldd	r25, Y+14	; 0x0e
    4974:	20 e0       	ldi	r18, 0x00	; 0
    4976:	30 e0       	ldi	r19, 0x00	; 0
    4978:	40 e2       	ldi	r20, 0x20	; 32
    497a:	51 e4       	ldi	r21, 0x41	; 65
    497c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4980:	dc 01       	movw	r26, r24
    4982:	cb 01       	movw	r24, r22
    4984:	bc 01       	movw	r22, r24
    4986:	cd 01       	movw	r24, r26
    4988:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    498c:	dc 01       	movw	r26, r24
    498e:	cb 01       	movw	r24, r22
    4990:	9e 83       	std	Y+6, r25	; 0x06
    4992:	8d 83       	std	Y+5, r24	; 0x05
    4994:	0f c0       	rjmp	.+30     	; 0x49b4 <main+0x676>
    4996:	88 ec       	ldi	r24, 0xC8	; 200
    4998:	90 e0       	ldi	r25, 0x00	; 0
    499a:	9c 83       	std	Y+4, r25	; 0x04
    499c:	8b 83       	std	Y+3, r24	; 0x03
    499e:	8b 81       	ldd	r24, Y+3	; 0x03
    49a0:	9c 81       	ldd	r25, Y+4	; 0x04
    49a2:	01 97       	sbiw	r24, 0x01	; 1
    49a4:	f1 f7       	brne	.-4      	; 0x49a2 <main+0x664>
    49a6:	9c 83       	std	Y+4, r25	; 0x04
    49a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49aa:	8d 81       	ldd	r24, Y+5	; 0x05
    49ac:	9e 81       	ldd	r25, Y+6	; 0x06
    49ae:	01 97       	sbiw	r24, 0x01	; 1
    49b0:	9e 83       	std	Y+6, r25	; 0x06
    49b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49b4:	8d 81       	ldd	r24, Y+5	; 0x05
    49b6:	9e 81       	ldd	r25, Y+6	; 0x06
    49b8:	00 97       	sbiw	r24, 0x00	; 0
    49ba:	69 f7       	brne	.-38     	; 0x4996 <main+0x658>
    49bc:	14 c0       	rjmp	.+40     	; 0x49e6 <main+0x6a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49be:	6f 81       	ldd	r22, Y+7	; 0x07
    49c0:	78 85       	ldd	r23, Y+8	; 0x08
    49c2:	89 85       	ldd	r24, Y+9	; 0x09
    49c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    49c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49ca:	dc 01       	movw	r26, r24
    49cc:	cb 01       	movw	r24, r22
    49ce:	9e 83       	std	Y+6, r25	; 0x06
    49d0:	8d 83       	std	Y+5, r24	; 0x05
    49d2:	8d 81       	ldd	r24, Y+5	; 0x05
    49d4:	9e 81       	ldd	r25, Y+6	; 0x06
    49d6:	9a 83       	std	Y+2, r25	; 0x02
    49d8:	89 83       	std	Y+1, r24	; 0x01
    49da:	89 81       	ldd	r24, Y+1	; 0x01
    49dc:	9a 81       	ldd	r25, Y+2	; 0x02
    49de:	01 97       	sbiw	r24, 0x01	; 1
    49e0:	f1 f7       	brne	.-4      	; 0x49de <main+0x6a0>
    49e2:	9a 83       	std	Y+2, r25	; 0x02
    49e4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		HCLCD_Vid4Bits_ClearScreen();
    49e6:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <HCLCD_Vid4Bits_ClearScreen>
    49ea:	c5 cd       	rjmp	.-1142   	; 0x4576 <main+0x238>

000049ec <ISR>:
	return 0;
}


void ISR(void)
{
    49ec:	df 93       	push	r29
    49ee:	cf 93       	push	r28
    49f0:	cd b7       	in	r28, 0x3d	; 61
    49f2:	de b7       	in	r29, 0x3e	; 62
    49f4:	aa 97       	sbiw	r28, 0x2a	; 42
    49f6:	0f b6       	in	r0, 0x3f	; 63
    49f8:	f8 94       	cli
    49fa:	de bf       	out	0x3e, r29	; 62
    49fc:	0f be       	out	0x3f, r0	; 63
    49fe:	cd bf       	out	0x3d, r28	; 61
	HCLCD_Vid4Bits_ClearScreen();
    4a00:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <HCLCD_Vid4Bits_ClearScreen>
    4a04:	80 e0       	ldi	r24, 0x00	; 0
    4a06:	90 e0       	ldi	r25, 0x00	; 0
    4a08:	aa e7       	ldi	r26, 0x7A	; 122
    4a0a:	b4 e4       	ldi	r27, 0x44	; 68
    4a0c:	8f a3       	std	Y+39, r24	; 0x27
    4a0e:	98 a7       	std	Y+40, r25	; 0x28
    4a10:	a9 a7       	std	Y+41, r26	; 0x29
    4a12:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a14:	6f a1       	ldd	r22, Y+39	; 0x27
    4a16:	78 a5       	ldd	r23, Y+40	; 0x28
    4a18:	89 a5       	ldd	r24, Y+41	; 0x29
    4a1a:	9a a5       	ldd	r25, Y+42	; 0x2a
    4a1c:	20 e0       	ldi	r18, 0x00	; 0
    4a1e:	30 e0       	ldi	r19, 0x00	; 0
    4a20:	4a ef       	ldi	r20, 0xFA	; 250
    4a22:	54 e4       	ldi	r21, 0x44	; 68
    4a24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a28:	dc 01       	movw	r26, r24
    4a2a:	cb 01       	movw	r24, r22
    4a2c:	8b a3       	std	Y+35, r24	; 0x23
    4a2e:	9c a3       	std	Y+36, r25	; 0x24
    4a30:	ad a3       	std	Y+37, r26	; 0x25
    4a32:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4a34:	6b a1       	ldd	r22, Y+35	; 0x23
    4a36:	7c a1       	ldd	r23, Y+36	; 0x24
    4a38:	8d a1       	ldd	r24, Y+37	; 0x25
    4a3a:	9e a1       	ldd	r25, Y+38	; 0x26
    4a3c:	20 e0       	ldi	r18, 0x00	; 0
    4a3e:	30 e0       	ldi	r19, 0x00	; 0
    4a40:	40 e8       	ldi	r20, 0x80	; 128
    4a42:	5f e3       	ldi	r21, 0x3F	; 63
    4a44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4a48:	88 23       	and	r24, r24
    4a4a:	2c f4       	brge	.+10     	; 0x4a56 <ISR+0x6a>
		__ticks = 1;
    4a4c:	81 e0       	ldi	r24, 0x01	; 1
    4a4e:	90 e0       	ldi	r25, 0x00	; 0
    4a50:	9a a3       	std	Y+34, r25	; 0x22
    4a52:	89 a3       	std	Y+33, r24	; 0x21
    4a54:	3f c0       	rjmp	.+126    	; 0x4ad4 <ISR+0xe8>
	else if (__tmp > 65535)
    4a56:	6b a1       	ldd	r22, Y+35	; 0x23
    4a58:	7c a1       	ldd	r23, Y+36	; 0x24
    4a5a:	8d a1       	ldd	r24, Y+37	; 0x25
    4a5c:	9e a1       	ldd	r25, Y+38	; 0x26
    4a5e:	20 e0       	ldi	r18, 0x00	; 0
    4a60:	3f ef       	ldi	r19, 0xFF	; 255
    4a62:	4f e7       	ldi	r20, 0x7F	; 127
    4a64:	57 e4       	ldi	r21, 0x47	; 71
    4a66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4a6a:	18 16       	cp	r1, r24
    4a6c:	4c f5       	brge	.+82     	; 0x4ac0 <ISR+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a6e:	6f a1       	ldd	r22, Y+39	; 0x27
    4a70:	78 a5       	ldd	r23, Y+40	; 0x28
    4a72:	89 a5       	ldd	r24, Y+41	; 0x29
    4a74:	9a a5       	ldd	r25, Y+42	; 0x2a
    4a76:	20 e0       	ldi	r18, 0x00	; 0
    4a78:	30 e0       	ldi	r19, 0x00	; 0
    4a7a:	40 e2       	ldi	r20, 0x20	; 32
    4a7c:	51 e4       	ldi	r21, 0x41	; 65
    4a7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a82:	dc 01       	movw	r26, r24
    4a84:	cb 01       	movw	r24, r22
    4a86:	bc 01       	movw	r22, r24
    4a88:	cd 01       	movw	r24, r26
    4a8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a8e:	dc 01       	movw	r26, r24
    4a90:	cb 01       	movw	r24, r22
    4a92:	9a a3       	std	Y+34, r25	; 0x22
    4a94:	89 a3       	std	Y+33, r24	; 0x21
    4a96:	0f c0       	rjmp	.+30     	; 0x4ab6 <ISR+0xca>
    4a98:	88 ec       	ldi	r24, 0xC8	; 200
    4a9a:	90 e0       	ldi	r25, 0x00	; 0
    4a9c:	98 a3       	std	Y+32, r25	; 0x20
    4a9e:	8f 8f       	std	Y+31, r24	; 0x1f
    4aa0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4aa2:	98 a1       	ldd	r25, Y+32	; 0x20
    4aa4:	01 97       	sbiw	r24, 0x01	; 1
    4aa6:	f1 f7       	brne	.-4      	; 0x4aa4 <ISR+0xb8>
    4aa8:	98 a3       	std	Y+32, r25	; 0x20
    4aaa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4aac:	89 a1       	ldd	r24, Y+33	; 0x21
    4aae:	9a a1       	ldd	r25, Y+34	; 0x22
    4ab0:	01 97       	sbiw	r24, 0x01	; 1
    4ab2:	9a a3       	std	Y+34, r25	; 0x22
    4ab4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ab6:	89 a1       	ldd	r24, Y+33	; 0x21
    4ab8:	9a a1       	ldd	r25, Y+34	; 0x22
    4aba:	00 97       	sbiw	r24, 0x00	; 0
    4abc:	69 f7       	brne	.-38     	; 0x4a98 <ISR+0xac>
    4abe:	14 c0       	rjmp	.+40     	; 0x4ae8 <ISR+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ac0:	6b a1       	ldd	r22, Y+35	; 0x23
    4ac2:	7c a1       	ldd	r23, Y+36	; 0x24
    4ac4:	8d a1       	ldd	r24, Y+37	; 0x25
    4ac6:	9e a1       	ldd	r25, Y+38	; 0x26
    4ac8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4acc:	dc 01       	movw	r26, r24
    4ace:	cb 01       	movw	r24, r22
    4ad0:	9a a3       	std	Y+34, r25	; 0x22
    4ad2:	89 a3       	std	Y+33, r24	; 0x21
    4ad4:	89 a1       	ldd	r24, Y+33	; 0x21
    4ad6:	9a a1       	ldd	r25, Y+34	; 0x22
    4ad8:	9e 8f       	std	Y+30, r25	; 0x1e
    4ada:	8d 8f       	std	Y+29, r24	; 0x1d
    4adc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4ade:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4ae0:	01 97       	sbiw	r24, 0x01	; 1
    4ae2:	f1 f7       	brne	.-4      	; 0x4ae0 <ISR+0xf4>
    4ae4:	9e 8f       	std	Y+30, r25	; 0x1e
    4ae6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	HCLCD_Vid4Bits_SetPosition(1, 0);
    4ae8:	81 e0       	ldi	r24, 0x01	; 1
    4aea:	60 e0       	ldi	r22, 0x00	; 0
    4aec:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <HCLCD_Vid4Bits_SetPosition>

		HCLCD_Vid4Bits_DisplayString((u8*) "Alaa mot5lfa");
    4af0:	83 e8       	ldi	r24, 0x83	; 131
    4af2:	90 e0       	ldi	r25, 0x00	; 0
    4af4:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <HCLCD_Vid4Bits_DisplayString>
    4af8:	80 e0       	ldi	r24, 0x00	; 0
    4afa:	90 e0       	ldi	r25, 0x00	; 0
    4afc:	aa e7       	ldi	r26, 0x7A	; 122
    4afe:	b4 e4       	ldi	r27, 0x44	; 68
    4b00:	89 8f       	std	Y+25, r24	; 0x19
    4b02:	9a 8f       	std	Y+26, r25	; 0x1a
    4b04:	ab 8f       	std	Y+27, r26	; 0x1b
    4b06:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b08:	69 8d       	ldd	r22, Y+25	; 0x19
    4b0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b10:	20 e0       	ldi	r18, 0x00	; 0
    4b12:	30 e0       	ldi	r19, 0x00	; 0
    4b14:	4a ef       	ldi	r20, 0xFA	; 250
    4b16:	54 e4       	ldi	r21, 0x44	; 68
    4b18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b1c:	dc 01       	movw	r26, r24
    4b1e:	cb 01       	movw	r24, r22
    4b20:	8d 8b       	std	Y+21, r24	; 0x15
    4b22:	9e 8b       	std	Y+22, r25	; 0x16
    4b24:	af 8b       	std	Y+23, r26	; 0x17
    4b26:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4b28:	6d 89       	ldd	r22, Y+21	; 0x15
    4b2a:	7e 89       	ldd	r23, Y+22	; 0x16
    4b2c:	8f 89       	ldd	r24, Y+23	; 0x17
    4b2e:	98 8d       	ldd	r25, Y+24	; 0x18
    4b30:	20 e0       	ldi	r18, 0x00	; 0
    4b32:	30 e0       	ldi	r19, 0x00	; 0
    4b34:	40 e8       	ldi	r20, 0x80	; 128
    4b36:	5f e3       	ldi	r21, 0x3F	; 63
    4b38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4b3c:	88 23       	and	r24, r24
    4b3e:	2c f4       	brge	.+10     	; 0x4b4a <ISR+0x15e>
		__ticks = 1;
    4b40:	81 e0       	ldi	r24, 0x01	; 1
    4b42:	90 e0       	ldi	r25, 0x00	; 0
    4b44:	9c 8b       	std	Y+20, r25	; 0x14
    4b46:	8b 8b       	std	Y+19, r24	; 0x13
    4b48:	3f c0       	rjmp	.+126    	; 0x4bc8 <ISR+0x1dc>
	else if (__tmp > 65535)
    4b4a:	6d 89       	ldd	r22, Y+21	; 0x15
    4b4c:	7e 89       	ldd	r23, Y+22	; 0x16
    4b4e:	8f 89       	ldd	r24, Y+23	; 0x17
    4b50:	98 8d       	ldd	r25, Y+24	; 0x18
    4b52:	20 e0       	ldi	r18, 0x00	; 0
    4b54:	3f ef       	ldi	r19, 0xFF	; 255
    4b56:	4f e7       	ldi	r20, 0x7F	; 127
    4b58:	57 e4       	ldi	r21, 0x47	; 71
    4b5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4b5e:	18 16       	cp	r1, r24
    4b60:	4c f5       	brge	.+82     	; 0x4bb4 <ISR+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b62:	69 8d       	ldd	r22, Y+25	; 0x19
    4b64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b6a:	20 e0       	ldi	r18, 0x00	; 0
    4b6c:	30 e0       	ldi	r19, 0x00	; 0
    4b6e:	40 e2       	ldi	r20, 0x20	; 32
    4b70:	51 e4       	ldi	r21, 0x41	; 65
    4b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b76:	dc 01       	movw	r26, r24
    4b78:	cb 01       	movw	r24, r22
    4b7a:	bc 01       	movw	r22, r24
    4b7c:	cd 01       	movw	r24, r26
    4b7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b82:	dc 01       	movw	r26, r24
    4b84:	cb 01       	movw	r24, r22
    4b86:	9c 8b       	std	Y+20, r25	; 0x14
    4b88:	8b 8b       	std	Y+19, r24	; 0x13
    4b8a:	0f c0       	rjmp	.+30     	; 0x4baa <ISR+0x1be>
    4b8c:	88 ec       	ldi	r24, 0xC8	; 200
    4b8e:	90 e0       	ldi	r25, 0x00	; 0
    4b90:	9a 8b       	std	Y+18, r25	; 0x12
    4b92:	89 8b       	std	Y+17, r24	; 0x11
    4b94:	89 89       	ldd	r24, Y+17	; 0x11
    4b96:	9a 89       	ldd	r25, Y+18	; 0x12
    4b98:	01 97       	sbiw	r24, 0x01	; 1
    4b9a:	f1 f7       	brne	.-4      	; 0x4b98 <ISR+0x1ac>
    4b9c:	9a 8b       	std	Y+18, r25	; 0x12
    4b9e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ba0:	8b 89       	ldd	r24, Y+19	; 0x13
    4ba2:	9c 89       	ldd	r25, Y+20	; 0x14
    4ba4:	01 97       	sbiw	r24, 0x01	; 1
    4ba6:	9c 8b       	std	Y+20, r25	; 0x14
    4ba8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4baa:	8b 89       	ldd	r24, Y+19	; 0x13
    4bac:	9c 89       	ldd	r25, Y+20	; 0x14
    4bae:	00 97       	sbiw	r24, 0x00	; 0
    4bb0:	69 f7       	brne	.-38     	; 0x4b8c <ISR+0x1a0>
    4bb2:	14 c0       	rjmp	.+40     	; 0x4bdc <ISR+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bb4:	6d 89       	ldd	r22, Y+21	; 0x15
    4bb6:	7e 89       	ldd	r23, Y+22	; 0x16
    4bb8:	8f 89       	ldd	r24, Y+23	; 0x17
    4bba:	98 8d       	ldd	r25, Y+24	; 0x18
    4bbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bc0:	dc 01       	movw	r26, r24
    4bc2:	cb 01       	movw	r24, r22
    4bc4:	9c 8b       	std	Y+20, r25	; 0x14
    4bc6:	8b 8b       	std	Y+19, r24	; 0x13
    4bc8:	8b 89       	ldd	r24, Y+19	; 0x13
    4bca:	9c 89       	ldd	r25, Y+20	; 0x14
    4bcc:	98 8b       	std	Y+16, r25	; 0x10
    4bce:	8f 87       	std	Y+15, r24	; 0x0f
    4bd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    4bd2:	98 89       	ldd	r25, Y+16	; 0x10
    4bd4:	01 97       	sbiw	r24, 0x01	; 1
    4bd6:	f1 f7       	brne	.-4      	; 0x4bd4 <ISR+0x1e8>
    4bd8:	98 8b       	std	Y+16, r25	; 0x10
    4bda:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
			HCLCD_Vid4Bits_ClearScreen();
    4bdc:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <HCLCD_Vid4Bits_ClearScreen>
    4be0:	80 e0       	ldi	r24, 0x00	; 0
    4be2:	90 e0       	ldi	r25, 0x00	; 0
    4be4:	aa e7       	ldi	r26, 0x7A	; 122
    4be6:	b4 e4       	ldi	r27, 0x44	; 68
    4be8:	8b 87       	std	Y+11, r24	; 0x0b
    4bea:	9c 87       	std	Y+12, r25	; 0x0c
    4bec:	ad 87       	std	Y+13, r26	; 0x0d
    4bee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bf0:	6b 85       	ldd	r22, Y+11	; 0x0b
    4bf2:	7c 85       	ldd	r23, Y+12	; 0x0c
    4bf4:	8d 85       	ldd	r24, Y+13	; 0x0d
    4bf6:	9e 85       	ldd	r25, Y+14	; 0x0e
    4bf8:	20 e0       	ldi	r18, 0x00	; 0
    4bfa:	30 e0       	ldi	r19, 0x00	; 0
    4bfc:	4a ef       	ldi	r20, 0xFA	; 250
    4bfe:	54 e4       	ldi	r21, 0x44	; 68
    4c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c04:	dc 01       	movw	r26, r24
    4c06:	cb 01       	movw	r24, r22
    4c08:	8f 83       	std	Y+7, r24	; 0x07
    4c0a:	98 87       	std	Y+8, r25	; 0x08
    4c0c:	a9 87       	std	Y+9, r26	; 0x09
    4c0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4c10:	6f 81       	ldd	r22, Y+7	; 0x07
    4c12:	78 85       	ldd	r23, Y+8	; 0x08
    4c14:	89 85       	ldd	r24, Y+9	; 0x09
    4c16:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c18:	20 e0       	ldi	r18, 0x00	; 0
    4c1a:	30 e0       	ldi	r19, 0x00	; 0
    4c1c:	40 e8       	ldi	r20, 0x80	; 128
    4c1e:	5f e3       	ldi	r21, 0x3F	; 63
    4c20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4c24:	88 23       	and	r24, r24
    4c26:	2c f4       	brge	.+10     	; 0x4c32 <ISR+0x246>
		__ticks = 1;
    4c28:	81 e0       	ldi	r24, 0x01	; 1
    4c2a:	90 e0       	ldi	r25, 0x00	; 0
    4c2c:	9e 83       	std	Y+6, r25	; 0x06
    4c2e:	8d 83       	std	Y+5, r24	; 0x05
    4c30:	3f c0       	rjmp	.+126    	; 0x4cb0 <ISR+0x2c4>
	else if (__tmp > 65535)
    4c32:	6f 81       	ldd	r22, Y+7	; 0x07
    4c34:	78 85       	ldd	r23, Y+8	; 0x08
    4c36:	89 85       	ldd	r24, Y+9	; 0x09
    4c38:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c3a:	20 e0       	ldi	r18, 0x00	; 0
    4c3c:	3f ef       	ldi	r19, 0xFF	; 255
    4c3e:	4f e7       	ldi	r20, 0x7F	; 127
    4c40:	57 e4       	ldi	r21, 0x47	; 71
    4c42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4c46:	18 16       	cp	r1, r24
    4c48:	4c f5       	brge	.+82     	; 0x4c9c <ISR+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c50:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c52:	20 e0       	ldi	r18, 0x00	; 0
    4c54:	30 e0       	ldi	r19, 0x00	; 0
    4c56:	40 e2       	ldi	r20, 0x20	; 32
    4c58:	51 e4       	ldi	r21, 0x41	; 65
    4c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c5e:	dc 01       	movw	r26, r24
    4c60:	cb 01       	movw	r24, r22
    4c62:	bc 01       	movw	r22, r24
    4c64:	cd 01       	movw	r24, r26
    4c66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c6a:	dc 01       	movw	r26, r24
    4c6c:	cb 01       	movw	r24, r22
    4c6e:	9e 83       	std	Y+6, r25	; 0x06
    4c70:	8d 83       	std	Y+5, r24	; 0x05
    4c72:	0f c0       	rjmp	.+30     	; 0x4c92 <ISR+0x2a6>
    4c74:	88 ec       	ldi	r24, 0xC8	; 200
    4c76:	90 e0       	ldi	r25, 0x00	; 0
    4c78:	9c 83       	std	Y+4, r25	; 0x04
    4c7a:	8b 83       	std	Y+3, r24	; 0x03
    4c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    4c7e:	9c 81       	ldd	r25, Y+4	; 0x04
    4c80:	01 97       	sbiw	r24, 0x01	; 1
    4c82:	f1 f7       	brne	.-4      	; 0x4c80 <ISR+0x294>
    4c84:	9c 83       	std	Y+4, r25	; 0x04
    4c86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c88:	8d 81       	ldd	r24, Y+5	; 0x05
    4c8a:	9e 81       	ldd	r25, Y+6	; 0x06
    4c8c:	01 97       	sbiw	r24, 0x01	; 1
    4c8e:	9e 83       	std	Y+6, r25	; 0x06
    4c90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c92:	8d 81       	ldd	r24, Y+5	; 0x05
    4c94:	9e 81       	ldd	r25, Y+6	; 0x06
    4c96:	00 97       	sbiw	r24, 0x00	; 0
    4c98:	69 f7       	brne	.-38     	; 0x4c74 <ISR+0x288>
    4c9a:	14 c0       	rjmp	.+40     	; 0x4cc4 <ISR+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c9c:	6f 81       	ldd	r22, Y+7	; 0x07
    4c9e:	78 85       	ldd	r23, Y+8	; 0x08
    4ca0:	89 85       	ldd	r24, Y+9	; 0x09
    4ca2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ca8:	dc 01       	movw	r26, r24
    4caa:	cb 01       	movw	r24, r22
    4cac:	9e 83       	std	Y+6, r25	; 0x06
    4cae:	8d 83       	std	Y+5, r24	; 0x05
    4cb0:	8d 81       	ldd	r24, Y+5	; 0x05
    4cb2:	9e 81       	ldd	r25, Y+6	; 0x06
    4cb4:	9a 83       	std	Y+2, r25	; 0x02
    4cb6:	89 83       	std	Y+1, r24	; 0x01
    4cb8:	89 81       	ldd	r24, Y+1	; 0x01
    4cba:	9a 81       	ldd	r25, Y+2	; 0x02
    4cbc:	01 97       	sbiw	r24, 0x01	; 1
    4cbe:	f1 f7       	brne	.-4      	; 0x4cbc <ISR+0x2d0>
    4cc0:	9a 83       	std	Y+2, r25	; 0x02
    4cc2:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);



}
    4cc4:	aa 96       	adiw	r28, 0x2a	; 42
    4cc6:	0f b6       	in	r0, 0x3f	; 63
    4cc8:	f8 94       	cli
    4cca:	de bf       	out	0x3e, r29	; 62
    4ccc:	0f be       	out	0x3f, r0	; 63
    4cce:	cd bf       	out	0x3d, r28	; 61
    4cd0:	cf 91       	pop	r28
    4cd2:	df 91       	pop	r29
    4cd4:	08 95       	ret

00004cd6 <__mulsi3>:
    4cd6:	62 9f       	mul	r22, r18
    4cd8:	d0 01       	movw	r26, r0
    4cda:	73 9f       	mul	r23, r19
    4cdc:	f0 01       	movw	r30, r0
    4cde:	82 9f       	mul	r24, r18
    4ce0:	e0 0d       	add	r30, r0
    4ce2:	f1 1d       	adc	r31, r1
    4ce4:	64 9f       	mul	r22, r20
    4ce6:	e0 0d       	add	r30, r0
    4ce8:	f1 1d       	adc	r31, r1
    4cea:	92 9f       	mul	r25, r18
    4cec:	f0 0d       	add	r31, r0
    4cee:	83 9f       	mul	r24, r19
    4cf0:	f0 0d       	add	r31, r0
    4cf2:	74 9f       	mul	r23, r20
    4cf4:	f0 0d       	add	r31, r0
    4cf6:	65 9f       	mul	r22, r21
    4cf8:	f0 0d       	add	r31, r0
    4cfa:	99 27       	eor	r25, r25
    4cfc:	72 9f       	mul	r23, r18
    4cfe:	b0 0d       	add	r27, r0
    4d00:	e1 1d       	adc	r30, r1
    4d02:	f9 1f       	adc	r31, r25
    4d04:	63 9f       	mul	r22, r19
    4d06:	b0 0d       	add	r27, r0
    4d08:	e1 1d       	adc	r30, r1
    4d0a:	f9 1f       	adc	r31, r25
    4d0c:	bd 01       	movw	r22, r26
    4d0e:	cf 01       	movw	r24, r30
    4d10:	11 24       	eor	r1, r1
    4d12:	08 95       	ret

00004d14 <__udivmodhi4>:
    4d14:	aa 1b       	sub	r26, r26
    4d16:	bb 1b       	sub	r27, r27
    4d18:	51 e1       	ldi	r21, 0x11	; 17
    4d1a:	07 c0       	rjmp	.+14     	; 0x4d2a <__udivmodhi4_ep>

00004d1c <__udivmodhi4_loop>:
    4d1c:	aa 1f       	adc	r26, r26
    4d1e:	bb 1f       	adc	r27, r27
    4d20:	a6 17       	cp	r26, r22
    4d22:	b7 07       	cpc	r27, r23
    4d24:	10 f0       	brcs	.+4      	; 0x4d2a <__udivmodhi4_ep>
    4d26:	a6 1b       	sub	r26, r22
    4d28:	b7 0b       	sbc	r27, r23

00004d2a <__udivmodhi4_ep>:
    4d2a:	88 1f       	adc	r24, r24
    4d2c:	99 1f       	adc	r25, r25
    4d2e:	5a 95       	dec	r21
    4d30:	a9 f7       	brne	.-22     	; 0x4d1c <__udivmodhi4_loop>
    4d32:	80 95       	com	r24
    4d34:	90 95       	com	r25
    4d36:	bc 01       	movw	r22, r24
    4d38:	cd 01       	movw	r24, r26
    4d3a:	08 95       	ret

00004d3c <__udivmodsi4>:
    4d3c:	a1 e2       	ldi	r26, 0x21	; 33
    4d3e:	1a 2e       	mov	r1, r26
    4d40:	aa 1b       	sub	r26, r26
    4d42:	bb 1b       	sub	r27, r27
    4d44:	fd 01       	movw	r30, r26
    4d46:	0d c0       	rjmp	.+26     	; 0x4d62 <__udivmodsi4_ep>

00004d48 <__udivmodsi4_loop>:
    4d48:	aa 1f       	adc	r26, r26
    4d4a:	bb 1f       	adc	r27, r27
    4d4c:	ee 1f       	adc	r30, r30
    4d4e:	ff 1f       	adc	r31, r31
    4d50:	a2 17       	cp	r26, r18
    4d52:	b3 07       	cpc	r27, r19
    4d54:	e4 07       	cpc	r30, r20
    4d56:	f5 07       	cpc	r31, r21
    4d58:	20 f0       	brcs	.+8      	; 0x4d62 <__udivmodsi4_ep>
    4d5a:	a2 1b       	sub	r26, r18
    4d5c:	b3 0b       	sbc	r27, r19
    4d5e:	e4 0b       	sbc	r30, r20
    4d60:	f5 0b       	sbc	r31, r21

00004d62 <__udivmodsi4_ep>:
    4d62:	66 1f       	adc	r22, r22
    4d64:	77 1f       	adc	r23, r23
    4d66:	88 1f       	adc	r24, r24
    4d68:	99 1f       	adc	r25, r25
    4d6a:	1a 94       	dec	r1
    4d6c:	69 f7       	brne	.-38     	; 0x4d48 <__udivmodsi4_loop>
    4d6e:	60 95       	com	r22
    4d70:	70 95       	com	r23
    4d72:	80 95       	com	r24
    4d74:	90 95       	com	r25
    4d76:	9b 01       	movw	r18, r22
    4d78:	ac 01       	movw	r20, r24
    4d7a:	bd 01       	movw	r22, r26
    4d7c:	cf 01       	movw	r24, r30
    4d7e:	08 95       	ret

00004d80 <__prologue_saves__>:
    4d80:	2f 92       	push	r2
    4d82:	3f 92       	push	r3
    4d84:	4f 92       	push	r4
    4d86:	5f 92       	push	r5
    4d88:	6f 92       	push	r6
    4d8a:	7f 92       	push	r7
    4d8c:	8f 92       	push	r8
    4d8e:	9f 92       	push	r9
    4d90:	af 92       	push	r10
    4d92:	bf 92       	push	r11
    4d94:	cf 92       	push	r12
    4d96:	df 92       	push	r13
    4d98:	ef 92       	push	r14
    4d9a:	ff 92       	push	r15
    4d9c:	0f 93       	push	r16
    4d9e:	1f 93       	push	r17
    4da0:	cf 93       	push	r28
    4da2:	df 93       	push	r29
    4da4:	cd b7       	in	r28, 0x3d	; 61
    4da6:	de b7       	in	r29, 0x3e	; 62
    4da8:	ca 1b       	sub	r28, r26
    4daa:	db 0b       	sbc	r29, r27
    4dac:	0f b6       	in	r0, 0x3f	; 63
    4dae:	f8 94       	cli
    4db0:	de bf       	out	0x3e, r29	; 62
    4db2:	0f be       	out	0x3f, r0	; 63
    4db4:	cd bf       	out	0x3d, r28	; 61
    4db6:	09 94       	ijmp

00004db8 <__epilogue_restores__>:
    4db8:	2a 88       	ldd	r2, Y+18	; 0x12
    4dba:	39 88       	ldd	r3, Y+17	; 0x11
    4dbc:	48 88       	ldd	r4, Y+16	; 0x10
    4dbe:	5f 84       	ldd	r5, Y+15	; 0x0f
    4dc0:	6e 84       	ldd	r6, Y+14	; 0x0e
    4dc2:	7d 84       	ldd	r7, Y+13	; 0x0d
    4dc4:	8c 84       	ldd	r8, Y+12	; 0x0c
    4dc6:	9b 84       	ldd	r9, Y+11	; 0x0b
    4dc8:	aa 84       	ldd	r10, Y+10	; 0x0a
    4dca:	b9 84       	ldd	r11, Y+9	; 0x09
    4dcc:	c8 84       	ldd	r12, Y+8	; 0x08
    4dce:	df 80       	ldd	r13, Y+7	; 0x07
    4dd0:	ee 80       	ldd	r14, Y+6	; 0x06
    4dd2:	fd 80       	ldd	r15, Y+5	; 0x05
    4dd4:	0c 81       	ldd	r16, Y+4	; 0x04
    4dd6:	1b 81       	ldd	r17, Y+3	; 0x03
    4dd8:	aa 81       	ldd	r26, Y+2	; 0x02
    4dda:	b9 81       	ldd	r27, Y+1	; 0x01
    4ddc:	ce 0f       	add	r28, r30
    4dde:	d1 1d       	adc	r29, r1
    4de0:	0f b6       	in	r0, 0x3f	; 63
    4de2:	f8 94       	cli
    4de4:	de bf       	out	0x3e, r29	; 62
    4de6:	0f be       	out	0x3f, r0	; 63
    4de8:	cd bf       	out	0x3d, r28	; 61
    4dea:	ed 01       	movw	r28, r26
    4dec:	08 95       	ret

00004dee <_exit>:
    4dee:	f8 94       	cli

00004df0 <__stop_program>:
    4df0:	ff cf       	rjmp	.-2      	; 0x4df0 <__stop_program>
