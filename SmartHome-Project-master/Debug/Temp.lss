
Temp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000535a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000062  00800060  0000535a  000053ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  008000c2  008000c2  00005450  2**0
                  ALLOC
  3 .stab         0000636c  00000000  00000000  00005450  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002544  00000000  00000000  0000b7bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000dd00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000de40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000dfb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000fbf9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00010ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00011894  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000119f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00011c81  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001244f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 24 10 	jmp	0x2048	; 0x2048 <__vector_1>
       8:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <__vector_2>
       c:	0c 94 8a 10 	jmp	0x2114	; 0x2114 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 f8 08 	jmp	0x11f0	; 0x11f0 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 cb 08 	jmp	0x1196	; 0x1196 <__vector_9>
      28:	0c 94 c1 07 	jmp	0xf82	; 0xf82 <__vector_10>
      2c:	0c 94 94 07 	jmp	0xf28	; 0xf28 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e5       	ldi	r30, 0x5A	; 90
      68:	f3 e5       	ldi	r31, 0x53	; 83
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3c       	cpi	r26, 0xC2	; 194
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 ec       	ldi	r26, 0xC2	; 194
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3c       	cpi	r26, 0xCF	; 207
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 91 23 	call	0x4722	; 0x4722 <main>
      8a:	0c 94 ab 29 	jmp	0x5356	; 0x5356 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 74 29 	jmp	0x52e8	; 0x52e8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 ea       	ldi	r26, 0xA1	; 161
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 90 29 	jmp	0x5320	; 0x5320 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 80 29 	jmp	0x5300	; 0x5300 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9c 29 	jmp	0x5338	; 0x5338 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 80 29 	jmp	0x5300	; 0x5300 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9c 29 	jmp	0x5338	; 0x5338 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 74 29 	jmp	0x52e8	; 0x52e8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 ea       	ldi	r24, 0xA1	; 161
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 90 29 	jmp	0x5320	; 0x5320 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 80 29 	jmp	0x5300	; 0x5300 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 9c 29 	jmp	0x5338	; 0x5338 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 80 29 	jmp	0x5300	; 0x5300 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 9c 29 	jmp	0x5338	; 0x5338 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 80 29 	jmp	0x5300	; 0x5300 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 9c 29 	jmp	0x5338	; 0x5338 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 84 29 	jmp	0x5308	; 0x5308 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a0 29 	jmp	0x5340	; 0x5340 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TWI_voidInitMaster>:
#include "TWI_private.h"
#include "TWI_register.h"

/*Set master address to 0 if master will not be addressed*/
void TWI_voidInitMaster(u8 Copy_u8Address)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	89 83       	std	Y+1, r24	; 0x01
	/*Enable Acknowledge bit*/
	SET_BIT(TWCR,TWCR_TWEA);
     b52:	a6 e5       	ldi	r26, 0x56	; 86
     b54:	b0 e0       	ldi	r27, 0x00	; 0
     b56:	e6 e5       	ldi	r30, 0x56	; 86
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	80 81       	ld	r24, Z
     b5c:	80 64       	ori	r24, 0x40	; 64
     b5e:	8c 93       	st	X, r24

	/*Set SCL frequency to 400kHz, with 8Mhz system frequency*/
	/*1- Set TWBR to 2*/
	TWBR = 2;
     b60:	e0 e2       	ldi	r30, 0x20	; 32
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	82 e0       	ldi	r24, 0x02	; 2
     b66:	80 83       	st	Z, r24
	/*2- Clear the prescaler bits (TWPS)*/
	CLR_BIT(TWSR,TWSR_TWPS0);
     b68:	a1 e2       	ldi	r26, 0x21	; 33
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	e1 e2       	ldi	r30, 0x21	; 33
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	80 81       	ld	r24, Z
     b72:	8e 7f       	andi	r24, 0xFE	; 254
     b74:	8c 93       	st	X, r24
	CLR_BIT(TWSR,TWSR_TWPS1);
     b76:	a1 e2       	ldi	r26, 0x21	; 33
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	e1 e2       	ldi	r30, 0x21	; 33
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	8d 7f       	andi	r24, 0xFD	; 253
     b82:	8c 93       	st	X, r24

	/*Check if the master node will be addressed*/
	if(Copy_u8Address != 0)
     b84:	89 81       	ldd	r24, Y+1	; 0x01
     b86:	88 23       	and	r24, r24
     b88:	29 f0       	breq	.+10     	; 0xb94 <TWI_voidInitMaster+0x4e>
	{
		/*Set the required address in the 7 MSB of TWAR*/
		TWAR = Copy_u8Address<<1;
     b8a:	e2 e2       	ldi	r30, 0x22	; 34
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	88 0f       	add	r24, r24
     b92:	80 83       	st	Z, r24
	{
		/*Do nothing*/
	}

	/*Enable TWI*/
	SET_BIT(TWCR,TWCR_TWEN);
     b94:	a6 e5       	ldi	r26, 0x56	; 86
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e5       	ldi	r30, 0x56	; 86
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	84 60       	ori	r24, 0x04	; 4
     ba0:	8c 93       	st	X, r24
}
     ba2:	0f 90       	pop	r0
     ba4:	cf 91       	pop	r28
     ba6:	df 91       	pop	r29
     ba8:	08 95       	ret

00000baa <TWI_voidInitSlave>:

void TWI_voidInitSlave(u8 Copy_u8Address)
{
     baa:	df 93       	push	r29
     bac:	cf 93       	push	r28
     bae:	0f 92       	push	r0
     bb0:	cd b7       	in	r28, 0x3d	; 61
     bb2:	de b7       	in	r29, 0x3e	; 62
     bb4:	89 83       	std	Y+1, r24	; 0x01
	/*Set the slave address*/
	TWAR = Copy_u8Address<<1;
     bb6:	e2 e2       	ldi	r30, 0x22	; 34
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	88 0f       	add	r24, r24
     bbe:	80 83       	st	Z, r24

	/*Enable Acknowledge bit*/
	SET_BIT(TWCR,TWCR_TWEA);
     bc0:	a6 e5       	ldi	r26, 0x56	; 86
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	e6 e5       	ldi	r30, 0x56	; 86
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	80 64       	ori	r24, 0x40	; 64
     bcc:	8c 93       	st	X, r24

	/*Enable TWI*/
	SET_BIT(TWCR,TWCR_TWEN);
     bce:	a6 e5       	ldi	r26, 0x56	; 86
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e6 e5       	ldi	r30, 0x56	; 86
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	84 60       	ori	r24, 0x04	; 4
     bda:	8c 93       	st	X, r24
}
     bdc:	0f 90       	pop	r0
     bde:	cf 91       	pop	r28
     be0:	df 91       	pop	r29
     be2:	08 95       	ret

00000be4 <TWI_SendStartCondition>:

TWI_ErrStatus TWI_SendStartCondition(void)
{
     be4:	df 93       	push	r29
     be6:	cf 93       	push	r28
     be8:	0f 92       	push	r0
     bea:	cd b7       	in	r28, 0x3d	; 61
     bec:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrStatus Local_Error= NoError;
     bee:	19 82       	std	Y+1, r1	; 0x01

	/*Send start condition*/
	SET_BIT(TWCR, TWCR_TWSTA);
     bf0:	a6 e5       	ldi	r26, 0x56	; 86
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	e6 e5       	ldi	r30, 0x56	; 86
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	80 62       	ori	r24, 0x20	; 32
     bfc:	8c 93       	st	X, r24

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
     bfe:	a6 e5       	ldi	r26, 0x56	; 86
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	e6 e5       	ldi	r30, 0x56	; 86
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	80 68       	ori	r24, 0x80	; 128
     c0a:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
     c0c:	e6 e5       	ldi	r30, 0x56	; 86
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	80 81       	ld	r24, Z
     c12:	88 23       	and	r24, r24
     c14:	dc f7       	brge	.-10     	; 0xc0c <TWI_SendStartCondition+0x28>

	/*Check the operation status*/
	if((TWSR & 0xF8) != START_ACK )
     c16:	e1 e2       	ldi	r30, 0x21	; 33
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	88 2f       	mov	r24, r24
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	88 7f       	andi	r24, 0xF8	; 248
     c22:	90 70       	andi	r25, 0x00	; 0
     c24:	88 30       	cpi	r24, 0x08	; 8
     c26:	91 05       	cpc	r25, r1
     c28:	11 f0       	breq	.+4      	; 0xc2e <TWI_SendStartCondition+0x4a>
	{
		Local_Error = StartConditionErr;
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
     c2e:	89 81       	ldd	r24, Y+1	; 0x01
}
     c30:	0f 90       	pop	r0
     c32:	cf 91       	pop	r28
     c34:	df 91       	pop	r29
     c36:	08 95       	ret

00000c38 <TWI_SendRepeatedStart>:

TWI_ErrStatus TWI_SendRepeatedStart(void)
{
     c38:	df 93       	push	r29
     c3a:	cf 93       	push	r28
     c3c:	0f 92       	push	r0
     c3e:	cd b7       	in	r28, 0x3d	; 61
     c40:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrStatus Local_Error= NoError;
     c42:	19 82       	std	Y+1, r1	; 0x01

	/*Send start condition*/
	SET_BIT(TWCR, TWCR_TWSTA);
     c44:	a6 e5       	ldi	r26, 0x56	; 86
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	e6 e5       	ldi	r30, 0x56	; 86
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	80 62       	ori	r24, 0x20	; 32
     c50:	8c 93       	st	X, r24

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
     c52:	a6 e5       	ldi	r26, 0x56	; 86
     c54:	b0 e0       	ldi	r27, 0x00	; 0
     c56:	e6 e5       	ldi	r30, 0x56	; 86
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	80 68       	ori	r24, 0x80	; 128
     c5e:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
     c60:	e6 e5       	ldi	r30, 0x56	; 86
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	80 81       	ld	r24, Z
     c66:	88 23       	and	r24, r24
     c68:	dc f7       	brge	.-10     	; 0xc60 <TWI_SendRepeatedStart+0x28>

	/*Check the operation status*/
	if((TWSR & 0xF8) != REP_START_ACK )
     c6a:	e1 e2       	ldi	r30, 0x21	; 33
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	88 2f       	mov	r24, r24
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	88 7f       	andi	r24, 0xF8	; 248
     c76:	90 70       	andi	r25, 0x00	; 0
     c78:	80 31       	cpi	r24, 0x10	; 16
     c7a:	91 05       	cpc	r25, r1
     c7c:	11 f0       	breq	.+4      	; 0xc82 <TWI_SendRepeatedStart+0x4a>
	{
		Local_Error = RepeatedStartError;
     c7e:	82 e0       	ldi	r24, 0x02	; 2
     c80:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
     c82:	89 81       	ldd	r24, Y+1	; 0x01
}
     c84:	0f 90       	pop	r0
     c86:	cf 91       	pop	r28
     c88:	df 91       	pop	r29
     c8a:	08 95       	ret

00000c8c <TWI_SendSlaveAddressWithWrite>:

TWI_ErrStatus TWI_SendSlaveAddressWithWrite(u8 Copy_u8SlaveAddress)
{
     c8c:	df 93       	push	r29
     c8e:	cf 93       	push	r28
     c90:	00 d0       	rcall	.+0      	; 0xc92 <TWI_SendSlaveAddressWithWrite+0x6>
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
     c98:	19 82       	std	Y+1, r1	; 0x01

	/*send the 7bit slave address to the bus*/
	TWDR = Copy_u8SlaveAddress <<1;
     c9a:	e3 e2       	ldi	r30, 0x23	; 35
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ca0:	88 0f       	add	r24, r24
     ca2:	80 83       	st	Z, r24
	/*set the write request in the LSB in the data register*/
	CLR_BIT(TWDR,0);
     ca4:	a3 e2       	ldi	r26, 0x23	; 35
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	e3 e2       	ldi	r30, 0x23	; 35
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	8e 7f       	andi	r24, 0xFE	; 254
     cb0:	8c 93       	st	X, r24

	/*Clear the start condition bit*/
	CLR_BIT(TWCR,TWCR_TWSTA);
     cb2:	a6 e5       	ldi	r26, 0x56	; 86
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	e6 e5       	ldi	r30, 0x56	; 86
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	8f 7d       	andi	r24, 0xDF	; 223
     cbe:	8c 93       	st	X, r24

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
     cc0:	a6 e5       	ldi	r26, 0x56	; 86
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	e6 e5       	ldi	r30, 0x56	; 86
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	80 68       	ori	r24, 0x80	; 128
     ccc:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
     cce:	e6 e5       	ldi	r30, 0x56	; 86
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	88 23       	and	r24, r24
     cd6:	dc f7       	brge	.-10     	; 0xcce <TWI_SendSlaveAddressWithWrite+0x42>

	/*Check the operation status*/
	if((TWSR & 0xF8) != SLAVE_ADD_AND_WR_ACK )
     cd8:	e1 e2       	ldi	r30, 0x21	; 33
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	88 2f       	mov	r24, r24
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	88 7f       	andi	r24, 0xF8	; 248
     ce4:	90 70       	andi	r25, 0x00	; 0
     ce6:	88 31       	cpi	r24, 0x18	; 24
     ce8:	91 05       	cpc	r25, r1
     cea:	11 f0       	breq	.+4      	; 0xcf0 <TWI_SendSlaveAddressWithWrite+0x64>
	{
		Local_Error = SlaveAddressWithWriteErr;
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
     cf0:	89 81       	ldd	r24, Y+1	; 0x01
}
     cf2:	0f 90       	pop	r0
     cf4:	0f 90       	pop	r0
     cf6:	cf 91       	pop	r28
     cf8:	df 91       	pop	r29
     cfa:	08 95       	ret

00000cfc <TWI_SendSlaveAddressWithRead>:

TWI_ErrStatus TWI_SendSlaveAddressWithRead(u8 Copy_u8SlaveAddress)
{
     cfc:	df 93       	push	r29
     cfe:	cf 93       	push	r28
     d00:	00 d0       	rcall	.+0      	; 0xd02 <TWI_SendSlaveAddressWithRead+0x6>
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
     d06:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
     d08:	19 82       	std	Y+1, r1	; 0x01

	/*send the 7bit slave address to the bus*/
	TWDR = Copy_u8SlaveAddress <<1;
     d0a:	e3 e2       	ldi	r30, 0x23	; 35
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	8a 81       	ldd	r24, Y+2	; 0x02
     d10:	88 0f       	add	r24, r24
     d12:	80 83       	st	Z, r24
	/*set the read request in the LSB in the data register*/
	SET_BIT(TWDR,0);
     d14:	a3 e2       	ldi	r26, 0x23	; 35
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	e3 e2       	ldi	r30, 0x23	; 35
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	81 60       	ori	r24, 0x01	; 1
     d20:	8c 93       	st	X, r24

	/*Clear the start condition bit*/
	CLR_BIT(TWCR,TWCR_TWSTA);
     d22:	a6 e5       	ldi	r26, 0x56	; 86
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e6 e5       	ldi	r30, 0x56	; 86
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	8f 7d       	andi	r24, 0xDF	; 223
     d2e:	8c 93       	st	X, r24

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
     d30:	a6 e5       	ldi	r26, 0x56	; 86
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	e6 e5       	ldi	r30, 0x56	; 86
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	80 68       	ori	r24, 0x80	; 128
     d3c:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
     d3e:	e6 e5       	ldi	r30, 0x56	; 86
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	88 23       	and	r24, r24
     d46:	dc f7       	brge	.-10     	; 0xd3e <TWI_SendSlaveAddressWithRead+0x42>

	/*Check the operation status*/
	if((TWSR & 0xF8) != SLAVE_ADD_AND_RD_ACK )
     d48:	e1 e2       	ldi	r30, 0x21	; 33
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	88 2f       	mov	r24, r24
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	88 7f       	andi	r24, 0xF8	; 248
     d54:	90 70       	andi	r25, 0x00	; 0
     d56:	80 34       	cpi	r24, 0x40	; 64
     d58:	91 05       	cpc	r25, r1
     d5a:	11 f0       	breq	.+4      	; 0xd60 <TWI_SendSlaveAddressWithRead+0x64>
	{
		Local_Error = SlaveAddressWithReadErr;
     d5c:	84 e0       	ldi	r24, 0x04	; 4
     d5e:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
     d60:	89 81       	ldd	r24, Y+1	; 0x01
}
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	cf 91       	pop	r28
     d68:	df 91       	pop	r29
     d6a:	08 95       	ret

00000d6c <TWI_MasterWriteDataByte>:

TWI_ErrStatus TWI_MasterWriteDataByte(u8 Copy_u8DataByte)
{
     d6c:	df 93       	push	r29
     d6e:	cf 93       	push	r28
     d70:	00 d0       	rcall	.+0      	; 0xd72 <TWI_MasterWriteDataByte+0x6>
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
     d76:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
     d78:	19 82       	std	Y+1, r1	; 0x01

	/*Write the data byte on the bus*/
	TWDR = Copy_u8DataByte;
     d7a:	e3 e2       	ldi	r30, 0x23	; 35
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	8a 81       	ldd	r24, Y+2	; 0x02
     d80:	80 83       	st	Z, r24

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
     d82:	a6 e5       	ldi	r26, 0x56	; 86
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	e6 e5       	ldi	r30, 0x56	; 86
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	80 68       	ori	r24, 0x80	; 128
     d8e:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
     d90:	e6 e5       	ldi	r30, 0x56	; 86
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	88 23       	and	r24, r24
     d98:	dc f7       	brge	.-10     	; 0xd90 <TWI_MasterWriteDataByte+0x24>

	/*Check the operation status*/
	if((TWSR & 0xF8) !=  MSTR_WR_BYTE_ACK)
     d9a:	e1 e2       	ldi	r30, 0x21	; 33
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	88 2f       	mov	r24, r24
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	88 7f       	andi	r24, 0xF8	; 248
     da6:	90 70       	andi	r25, 0x00	; 0
     da8:	88 32       	cpi	r24, 0x28	; 40
     daa:	91 05       	cpc	r25, r1
     dac:	11 f0       	breq	.+4      	; 0xdb2 <TWI_MasterWriteDataByte+0x46>
	{
		Local_Error = MasterWriteByteErr;
     dae:	85 e0       	ldi	r24, 0x05	; 5
     db0:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
     db2:	89 81       	ldd	r24, Y+1	; 0x01
}
     db4:	0f 90       	pop	r0
     db6:	0f 90       	pop	r0
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <TWI_MasterReadDataByte>:

TWI_ErrStatus TWI_MasterReadDataByte(u8* Copy_pu8DataByte)
{
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	00 d0       	rcall	.+0      	; 0xdc4 <TWI_MasterReadDataByte+0x6>
     dc4:	0f 92       	push	r0
     dc6:	cd b7       	in	r28, 0x3d	; 61
     dc8:	de b7       	in	r29, 0x3e	; 62
     dca:	9b 83       	std	Y+3, r25	; 0x03
     dcc:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
     dce:	19 82       	std	Y+1, r1	; 0x01

	/*Clear the interrupt flag to allow the slave send the data*/
	SET_BIT(TWCR,TWCR_TWINT);
     dd0:	a6 e5       	ldi	r26, 0x56	; 86
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	e6 e5       	ldi	r30, 0x56	; 86
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	80 68       	ori	r24, 0x80	; 128
     ddc:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
     dde:	e6 e5       	ldi	r30, 0x56	; 86
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	88 23       	and	r24, r24
     de6:	dc f7       	brge	.-10     	; 0xdde <TWI_MasterReadDataByte+0x20>

	/*Check the operation status*/
	if((TWSR & 0xF8) !=  MSTR_RD_BYTE_WITH_ACK)
     de8:	e1 e2       	ldi	r30, 0x21	; 33
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	88 2f       	mov	r24, r24
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	88 7f       	andi	r24, 0xF8	; 248
     df4:	90 70       	andi	r25, 0x00	; 0
     df6:	80 35       	cpi	r24, 0x50	; 80
     df8:	91 05       	cpc	r25, r1
     dfa:	19 f0       	breq	.+6      	; 0xe02 <TWI_MasterReadDataByte+0x44>
	{
		Local_Error = MasterReadByteErr;
     dfc:	86 e0       	ldi	r24, 0x06	; 6
     dfe:	89 83       	std	Y+1, r24	; 0x01
     e00:	06 c0       	rjmp	.+12     	; 0xe0e <TWI_MasterReadDataByte+0x50>
	}
	else
	{
		/*Read the received data*/
		*Copy_pu8DataByte = TWDR;
     e02:	e3 e2       	ldi	r30, 0x23	; 35
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	ea 81       	ldd	r30, Y+2	; 0x02
     e0a:	fb 81       	ldd	r31, Y+3	; 0x03
     e0c:	80 83       	st	Z, r24
	}

	return Local_Error;
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	cf 91       	pop	r28
     e18:	df 91       	pop	r29
     e1a:	08 95       	ret

00000e1c <TWI_SendStopCondition>:

void TWI_SendStopCondition(void)
{
     e1c:	df 93       	push	r29
     e1e:	cf 93       	push	r28
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
	/*Sent a stop condition on the bus*/
	SET_BIT(TWCR,TWCR_TWSTO);
     e24:	a6 e5       	ldi	r26, 0x56	; 86
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	e6 e5       	ldi	r30, 0x56	; 86
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	80 61       	ori	r24, 0x10	; 16
     e30:	8c 93       	st	X, r24

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
     e32:	a6 e5       	ldi	r26, 0x56	; 86
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	e6 e5       	ldi	r30, 0x56	; 86
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	80 68       	ori	r24, 0x80	; 128
     e3e:	8c 93       	st	X, r24

}
     e40:	cf 91       	pop	r28
     e42:	df 91       	pop	r29
     e44:	08 95       	ret

00000e46 <MTIMER0_VidInit>:
void (*TIMER1_CallBack)(void);

void (*TIMER1_ICF_CallBack)(void);
/*Timer0 Initialization*/
void MTIMER0_VidInit(void)
{
     e46:	df 93       	push	r29
     e48:	cf 93       	push	r28
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
	/*Select the suitable Prescaler*/
	TCCR0&=0xF8;  //Bit masking
     e4e:	a3 e5       	ldi	r26, 0x53	; 83
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e3 e5       	ldi	r30, 0x53	; 83
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	88 7f       	andi	r24, 0xF8	; 248
     e5a:	8c 93       	st	X, r24
	TCCR0|=TIMER_SET_PRESCALER;
     e5c:	a3 e5       	ldi	r26, 0x53	; 83
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	e3 e5       	ldi	r30, 0x53	; 83
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	83 60       	ori	r24, 0x03	; 3
     e68:	8c 93       	st	X, r24

#else
#error      "TIMER0 CTC Mode OC0 PIN is not valid ..."
#endif
#elif TIMER0_SET_MODE == TIMER0_PHASECORRECT_PWM_MODE
	SET_BIT(TCCR0,6);
     e6a:	a3 e5       	ldi	r26, 0x53	; 83
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	e3 e5       	ldi	r30, 0x53	; 83
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	80 64       	ori	r24, 0x40	; 64
     e76:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,3);
     e78:	a3 e5       	ldi	r26, 0x53	; 83
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e3 e5       	ldi	r30, 0x53	; 83
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	87 7f       	andi	r24, 0xF7	; 247
     e84:	8c 93       	st	X, r24
#if   TIMER0_SET_PWM_MODE == TIMER0_NON_INVERTING_PWM
	SET_BIT(TCCR0,5);
     e86:	a3 e5       	ldi	r26, 0x53	; 83
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	e3 e5       	ldi	r30, 0x53	; 83
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	80 62       	ori	r24, 0x20	; 32
     e92:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,4);
     e94:	a3 e5       	ldi	r26, 0x53	; 83
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	e3 e5       	ldi	r30, 0x53	; 83
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	8f 7e       	andi	r24, 0xEF	; 239
     ea0:	8c 93       	st	X, r24
#endif
#else
#error      "TIMER0 Mode is not valid ..."
#endif

}
     ea2:	cf 91       	pop	r28
     ea4:	df 91       	pop	r29
     ea6:	08 95       	ret

00000ea8 <MTIMER0_VidSetPreload>:

/*Set Preload Function*/
void MTIMER0_VidSetPreload(u8 Copy_u8Preload)
{
     ea8:	df 93       	push	r29
     eaa:	cf 93       	push	r28
     eac:	0f 92       	push	r0
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
     eb2:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload;
     eb4:	e2 e5       	ldi	r30, 0x52	; 82
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
     eba:	80 83       	st	Z, r24
}
     ebc:	0f 90       	pop	r0
     ebe:	cf 91       	pop	r28
     ec0:	df 91       	pop	r29
     ec2:	08 95       	ret

00000ec4 <MTIMER0_VidSetCTCValue>:
/*Set CTC Value Function*/
void MTIMER0_VidSetCTCValue(u8 Copy_u8CTCValue)
{
     ec4:	df 93       	push	r29
     ec6:	cf 93       	push	r28
     ec8:	0f 92       	push	r0
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62
     ece:	89 83       	std	Y+1, r24	; 0x01
	OCR0= Copy_u8CTCValue ;
     ed0:	ec e5       	ldi	r30, 0x5C	; 92
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	80 83       	st	Z, r24
}
     ed8:	0f 90       	pop	r0
     eda:	cf 91       	pop	r28
     edc:	df 91       	pop	r29
     ede:	08 95       	ret

00000ee0 <MTIMER0_VidOVF_SetCallBack>:

void MTIMER0_VidOVF_SetCallBack(void(*Copy_VidCallBack)(void))
{
     ee0:	df 93       	push	r29
     ee2:	cf 93       	push	r28
     ee4:	00 d0       	rcall	.+0      	; 0xee6 <MTIMER0_VidOVF_SetCallBack+0x6>
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
     eea:	9a 83       	std	Y+2, r25	; 0x02
     eec:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CallBack =Copy_VidCallBack;
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	9a 81       	ldd	r25, Y+2	; 0x02
     ef2:	90 93 ca 00 	sts	0x00CA, r25
     ef6:	80 93 c9 00 	sts	0x00C9, r24
}
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	08 95       	ret

00000f04 <MTIMER0_VidCTC_SetCallBack>:
void MTIMER0_VidCTC_SetCallBack(void(*Copy_VidCallBack)(void))
{
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	00 d0       	rcall	.+0      	; 0xf0a <MTIMER0_VidCTC_SetCallBack+0x6>
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
     f0e:	9a 83       	std	Y+2, r25	; 0x02
     f10:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CallBack =Copy_VidCallBack;
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	9a 81       	ldd	r25, Y+2	; 0x02
     f16:	90 93 ca 00 	sts	0x00CA, r25
     f1a:	80 93 c9 00 	sts	0x00C9, r24
}
     f1e:	0f 90       	pop	r0
     f20:	0f 90       	pop	r0
     f22:	cf 91       	pop	r28
     f24:	df 91       	pop	r29
     f26:	08 95       	ret

00000f28 <__vector_11>:
void __vector_11(void)     __attribute__((signal));
void __vector_11(void)
{
     f28:	1f 92       	push	r1
     f2a:	0f 92       	push	r0
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	0f 92       	push	r0
     f30:	11 24       	eor	r1, r1
     f32:	2f 93       	push	r18
     f34:	3f 93       	push	r19
     f36:	4f 93       	push	r20
     f38:	5f 93       	push	r21
     f3a:	6f 93       	push	r22
     f3c:	7f 93       	push	r23
     f3e:	8f 93       	push	r24
     f40:	9f 93       	push	r25
     f42:	af 93       	push	r26
     f44:	bf 93       	push	r27
     f46:	ef 93       	push	r30
     f48:	ff 93       	push	r31
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CallBack();
     f52:	e0 91 c9 00 	lds	r30, 0x00C9
     f56:	f0 91 ca 00 	lds	r31, 0x00CA
     f5a:	09 95       	icall
}
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	ff 91       	pop	r31
     f62:	ef 91       	pop	r30
     f64:	bf 91       	pop	r27
     f66:	af 91       	pop	r26
     f68:	9f 91       	pop	r25
     f6a:	8f 91       	pop	r24
     f6c:	7f 91       	pop	r23
     f6e:	6f 91       	pop	r22
     f70:	5f 91       	pop	r21
     f72:	4f 91       	pop	r20
     f74:	3f 91       	pop	r19
     f76:	2f 91       	pop	r18
     f78:	0f 90       	pop	r0
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	0f 90       	pop	r0
     f7e:	1f 90       	pop	r1
     f80:	18 95       	reti

00000f82 <__vector_10>:

void __vector_10(void)     __attribute__((signal));
void __vector_10(void)
{
     f82:	1f 92       	push	r1
     f84:	0f 92       	push	r0
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	0f 92       	push	r0
     f8a:	11 24       	eor	r1, r1
     f8c:	2f 93       	push	r18
     f8e:	3f 93       	push	r19
     f90:	4f 93       	push	r20
     f92:	5f 93       	push	r21
     f94:	6f 93       	push	r22
     f96:	7f 93       	push	r23
     f98:	8f 93       	push	r24
     f9a:	9f 93       	push	r25
     f9c:	af 93       	push	r26
     f9e:	bf 93       	push	r27
     fa0:	ef 93       	push	r30
     fa2:	ff 93       	push	r31
     fa4:	df 93       	push	r29
     fa6:	cf 93       	push	r28
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CallBack();
     fac:	e0 91 c9 00 	lds	r30, 0x00C9
     fb0:	f0 91 ca 00 	lds	r31, 0x00CA
     fb4:	09 95       	icall
}
     fb6:	cf 91       	pop	r28
     fb8:	df 91       	pop	r29
     fba:	ff 91       	pop	r31
     fbc:	ef 91       	pop	r30
     fbe:	bf 91       	pop	r27
     fc0:	af 91       	pop	r26
     fc2:	9f 91       	pop	r25
     fc4:	8f 91       	pop	r24
     fc6:	7f 91       	pop	r23
     fc8:	6f 91       	pop	r22
     fca:	5f 91       	pop	r21
     fcc:	4f 91       	pop	r20
     fce:	3f 91       	pop	r19
     fd0:	2f 91       	pop	r18
     fd2:	0f 90       	pop	r0
     fd4:	0f be       	out	0x3f, r0	; 63
     fd6:	0f 90       	pop	r0
     fd8:	1f 90       	pop	r1
     fda:	18 95       	reti

00000fdc <MTIMER1_VidInit>:

/***************************************************************TIMER1*******************************************************************************/
/*Timer1 Initialization*/
void MTIMER1_VidInit(void)
{
     fdc:	df 93       	push	r29
     fde:	cf 93       	push	r28
     fe0:	cd b7       	in	r28, 0x3d	; 61
     fe2:	de b7       	in	r29, 0x3e	; 62
	/*Select the suitable Prescaler*/
	TCCR1B&=0xF8;  //Bit masking
     fe4:	ae e4       	ldi	r26, 0x4E	; 78
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	ee e4       	ldi	r30, 0x4E	; 78
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	88 7f       	andi	r24, 0xF8	; 248
     ff0:	8c 93       	st	X, r24
	TCCR1B|=TIMER1_SET_PRESCALER;
     ff2:	ae e4       	ldi	r26, 0x4E	; 78
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	ee e4       	ldi	r30, 0x4E	; 78
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	81 60       	ori	r24, 0x01	; 1
     ffe:	8c 93       	st	X, r24
//	/*TIMER OVERFLOW INTERRUPT ENABLLED*/
//	SET_BIT(TIMSK,2);

	/*Select Mode of ICR top Val, Fast Pwm mode*/

	CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1000:	af e4       	ldi	r26, 0x4F	; 79
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	ef e4       	ldi	r30, 0x4F	; 79
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	8e 7f       	andi	r24, 0xFE	; 254
    100c:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
    100e:	af e4       	ldi	r26, 0x4F	; 79
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	ef e4       	ldi	r30, 0x4F	; 79
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	82 60       	ori	r24, 0x02	; 2
    101a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
    101c:	ae e4       	ldi	r26, 0x4E	; 78
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	ee e4       	ldi	r30, 0x4E	; 78
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	88 60       	ori	r24, 0x08	; 8
    1028:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM13);
    102a:	ae e4       	ldi	r26, 0x4E	; 78
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	ee e4       	ldi	r30, 0x4E	; 78
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	80 61       	ori	r24, 0x10	; 16
    1036:	8c 93       	st	X, r24

	/* Set Time to 20msec */
	ICR1 = 20000;
    1038:	e6 e4       	ldi	r30, 0x46	; 70
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 e2       	ldi	r24, 0x20	; 32
    103e:	9e e4       	ldi	r25, 0x4E	; 78
    1040:	91 83       	std	Z+1, r25	; 0x01
    1042:	80 83       	st	Z, r24

	/*Compare Match Value */
	OCR1A = 750;
    1044:	ea e4       	ldi	r30, 0x4A	; 74
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	8e ee       	ldi	r24, 0xEE	; 238
    104a:	92 e0       	ldi	r25, 0x02	; 2
    104c:	91 83       	std	Z+1, r25	; 0x01
    104e:	80 83       	st	Z, r24

	/* Non-INverting Mode For Channel A*/
	SET_BIT(TCCR1A,TCCR1A_COM1A1);
    1050:	af e4       	ldi	r26, 0x4F	; 79
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	ef e4       	ldi	r30, 0x4F	; 79
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	80 68       	ori	r24, 0x80	; 128
    105c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    105e:	af e4       	ldi	r26, 0x4F	; 79
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	ef e4       	ldi	r30, 0x4F	; 79
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	8f 7b       	andi	r24, 0xBF	; 191
    106a:	8c 93       	st	X, r24

	/* Start Timer By Setting the Prescalar Value to 8*/
	CLR_BIT(TCCR1B,TCCR1B_CS12);
    106c:	ae e4       	ldi	r26, 0x4E	; 78
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	ee e4       	ldi	r30, 0x4E	; 78
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	8b 7f       	andi	r24, 0xFB	; 251
    1078:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_CS11);
    107a:	ae e4       	ldi	r26, 0x4E	; 78
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	ee e4       	ldi	r30, 0x4E	; 78
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	82 60       	ori	r24, 0x02	; 2
    1086:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS10);
    1088:	ae e4       	ldi	r26, 0x4E	; 78
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	ee e4       	ldi	r30, 0x4E	; 78
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	8e 7f       	andi	r24, 0xFE	; 254
    1094:	8c 93       	st	X, r24
#endif

#else
#error      "TIMER1 Mode is not valid ..."
#endif
}
    1096:	cf 91       	pop	r28
    1098:	df 91       	pop	r29
    109a:	08 95       	ret

0000109c <MTIMER1_VidSetPreload>:

/*Set Preload Function*/
void MTIMER1_VidSetPreload(u16 Copy_u16Preload)
{
    109c:	df 93       	push	r29
    109e:	cf 93       	push	r28
    10a0:	00 d0       	rcall	.+0      	; 0x10a2 <MTIMER1_VidSetPreload+0x6>
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	9a 83       	std	Y+2, r25	; 0x02
    10a8:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Preload;
    10aa:	ec e4       	ldi	r30, 0x4C	; 76
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	9a 81       	ldd	r25, Y+2	; 0x02
    10b2:	91 83       	std	Z+1, r25	; 0x01
    10b4:	80 83       	st	Z, r24
}
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	cf 91       	pop	r28
    10bc:	df 91       	pop	r29
    10be:	08 95       	ret

000010c0 <MTIMER1_u16GetTCNT1Value>:

/*Get Counter Value In Timer1*/
u16 MTIMER1_u16GetTCNT1Value(void)
{
    10c0:	df 93       	push	r29
    10c2:	cf 93       	push	r28
    10c4:	cd b7       	in	r28, 0x3d	; 61
    10c6:	de b7       	in	r29, 0x3e	; 62
	return TCNT1 ;
    10c8:	ec e4       	ldi	r30, 0x4C	; 76
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	91 81       	ldd	r25, Z+1	; 0x01
}
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <MTIMER1_u16GetICR1Value>:

/*Get Counter Value In ICR1  */
u16 MTIMER1_u16GetICR1Value(void)
{
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
	return 	ICR1 ;
    10de:	e6 e4       	ldi	r30, 0x46	; 70
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	91 81       	ldd	r25, Z+1	; 0x01
}
    10e6:	cf 91       	pop	r28
    10e8:	df 91       	pop	r29
    10ea:	08 95       	ret

000010ec <MTIMER1_VidSenseControl>:


/*select sense control Function*/
void MTIMER1_VidSenseControl(u8 Copy_u8SenseControl)
{
    10ec:	df 93       	push	r29
    10ee:	cf 93       	push	r28
    10f0:	0f 92       	push	r0
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62
    10f6:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8SenseControl==MTIMER1_ICU_FALLING_EDGE)
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	88 23       	and	r24, r24
    10fc:	41 f4       	brne	.+16     	; 0x110e <MTIMER1_VidSenseControl+0x22>
	{
		/*ICU Sense with Falling*/

		CLR_BIT(TCCR1B,6);
    10fe:	ae e4       	ldi	r26, 0x4E	; 78
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	ee e4       	ldi	r30, 0x4E	; 78
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	8f 7b       	andi	r24, 0xBF	; 191
    110a:	8c 93       	st	X, r24
    110c:	0a c0       	rjmp	.+20     	; 0x1122 <MTIMER1_VidSenseControl+0x36>
	}
	else if(Copy_u8SenseControl==MTIMER1_ICU_RISING_EDGE)
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	81 30       	cpi	r24, 0x01	; 1
    1112:	39 f4       	brne	.+14     	; 0x1122 <MTIMER1_VidSenseControl+0x36>
	{
		/*ICU Sense with Rising*/
		SET_BIT(TCCR1B,6);
    1114:	ae e4       	ldi	r26, 0x4E	; 78
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	ee e4       	ldi	r30, 0x4E	; 78
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	80 64       	ori	r24, 0x40	; 64
    1120:	8c 93       	st	X, r24
	}
	else
	{
		/*Do Nothing*/
	}
}
    1122:	0f 90       	pop	r0
    1124:	cf 91       	pop	r28
    1126:	df 91       	pop	r29
    1128:	08 95       	ret

0000112a <TMR_voidTimer1SetCompareMatchValueChannelA>:

void TMR_voidTimer1SetCompareMatchValueChannelA	(u16 Copy_u16OCR1AValue)
{
    112a:	df 93       	push	r29
    112c:	cf 93       	push	r28
    112e:	00 d0       	rcall	.+0      	; 0x1130 <TMR_voidTimer1SetCompareMatchValueChannelA+0x6>
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
    1134:	9a 83       	std	Y+2, r25	; 0x02
    1136:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16OCR1AValue;
    1138:	ea e4       	ldi	r30, 0x4A	; 74
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	89 81       	ldd	r24, Y+1	; 0x01
    113e:	9a 81       	ldd	r25, Y+2	; 0x02
    1140:	91 83       	std	Z+1, r25	; 0x01
    1142:	80 83       	st	Z, r24
}
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	08 95       	ret

0000114e <MTIMER1_VidOVF_SetCallBack>:

void MTIMER1_VidOVF_SetCallBack(void(*Copy_VidCallBack)(void))
{
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	00 d0       	rcall	.+0      	; 0x1154 <MTIMER1_VidOVF_SetCallBack+0x6>
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
    1158:	9a 83       	std	Y+2, r25	; 0x02
    115a:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_CallBack =Copy_VidCallBack;
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	9a 81       	ldd	r25, Y+2	; 0x02
    1160:	90 93 cc 00 	sts	0x00CC, r25
    1164:	80 93 cb 00 	sts	0x00CB, r24
}
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	cf 91       	pop	r28
    116e:	df 91       	pop	r29
    1170:	08 95       	ret

00001172 <MTIMER1_VidICF_SetCallBack>:

void MTIMER1_VidICF_SetCallBack(void(*Copy_VidCallBack)(void))
{
    1172:	df 93       	push	r29
    1174:	cf 93       	push	r28
    1176:	00 d0       	rcall	.+0      	; 0x1178 <MTIMER1_VidICF_SetCallBack+0x6>
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
    117c:	9a 83       	std	Y+2, r25	; 0x02
    117e:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_ICF_CallBack =Copy_VidCallBack;
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	9a 81       	ldd	r25, Y+2	; 0x02
    1184:	90 93 ce 00 	sts	0x00CE, r25
    1188:	80 93 cd 00 	sts	0x00CD, r24
}
    118c:	0f 90       	pop	r0
    118e:	0f 90       	pop	r0
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	08 95       	ret

00001196 <__vector_9>:
/*TIMER1 OFV  ISR*/
void __vector_9(void)      __attribute__((signal));
void __vector_9(void)
{
    1196:	1f 92       	push	r1
    1198:	0f 92       	push	r0
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	0f 92       	push	r0
    119e:	11 24       	eor	r1, r1
    11a0:	2f 93       	push	r18
    11a2:	3f 93       	push	r19
    11a4:	4f 93       	push	r20
    11a6:	5f 93       	push	r21
    11a8:	6f 93       	push	r22
    11aa:	7f 93       	push	r23
    11ac:	8f 93       	push	r24
    11ae:	9f 93       	push	r25
    11b0:	af 93       	push	r26
    11b2:	bf 93       	push	r27
    11b4:	ef 93       	push	r30
    11b6:	ff 93       	push	r31
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
	TIMER1_CallBack();
    11c0:	e0 91 cb 00 	lds	r30, 0x00CB
    11c4:	f0 91 cc 00 	lds	r31, 0x00CC
    11c8:	09 95       	icall
}
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	ff 91       	pop	r31
    11d0:	ef 91       	pop	r30
    11d2:	bf 91       	pop	r27
    11d4:	af 91       	pop	r26
    11d6:	9f 91       	pop	r25
    11d8:	8f 91       	pop	r24
    11da:	7f 91       	pop	r23
    11dc:	6f 91       	pop	r22
    11de:	5f 91       	pop	r21
    11e0:	4f 91       	pop	r20
    11e2:	3f 91       	pop	r19
    11e4:	2f 91       	pop	r18
    11e6:	0f 90       	pop	r0
    11e8:	0f be       	out	0x3f, r0	; 63
    11ea:	0f 90       	pop	r0
    11ec:	1f 90       	pop	r1
    11ee:	18 95       	reti

000011f0 <__vector_6>:

/*TIMER1 Capture Event ISR*/
void __vector_6(void)      __attribute__((signal));
void __vector_6(void)
{
    11f0:	1f 92       	push	r1
    11f2:	0f 92       	push	r0
    11f4:	0f b6       	in	r0, 0x3f	; 63
    11f6:	0f 92       	push	r0
    11f8:	11 24       	eor	r1, r1
    11fa:	2f 93       	push	r18
    11fc:	3f 93       	push	r19
    11fe:	4f 93       	push	r20
    1200:	5f 93       	push	r21
    1202:	6f 93       	push	r22
    1204:	7f 93       	push	r23
    1206:	8f 93       	push	r24
    1208:	9f 93       	push	r25
    120a:	af 93       	push	r26
    120c:	bf 93       	push	r27
    120e:	ef 93       	push	r30
    1210:	ff 93       	push	r31
    1212:	df 93       	push	r29
    1214:	cf 93       	push	r28
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
	TIMER1_ICF_CallBack();
    121a:	e0 91 cd 00 	lds	r30, 0x00CD
    121e:	f0 91 ce 00 	lds	r31, 0x00CE
    1222:	09 95       	icall
}
    1224:	cf 91       	pop	r28
    1226:	df 91       	pop	r29
    1228:	ff 91       	pop	r31
    122a:	ef 91       	pop	r30
    122c:	bf 91       	pop	r27
    122e:	af 91       	pop	r26
    1230:	9f 91       	pop	r25
    1232:	8f 91       	pop	r24
    1234:	7f 91       	pop	r23
    1236:	6f 91       	pop	r22
    1238:	5f 91       	pop	r21
    123a:	4f 91       	pop	r20
    123c:	3f 91       	pop	r19
    123e:	2f 91       	pop	r18
    1240:	0f 90       	pop	r0
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	0f 90       	pop	r0
    1246:	1f 90       	pop	r1
    1248:	18 95       	reti

0000124a <DIO_voidInit>:
#include"MDIO_Interface.h"
#include "MDIO_Config.h"
#include"MDIO_Private.h"

void DIO_voidInit		 (void)
{
    124a:	df 93       	push	r29
    124c:	cf 93       	push	r28
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62

	/*Set Init Direction For Ports*/
		DDRA = Conc(DIO_u8_PA7_DIRECTION,DIO_u8_PA6_DIRECTION,DIO_u8_PA5_DIRECTION,DIO_u8_PA4_DIRECTION,
    1252:	ea e3       	ldi	r30, 0x3A	; 58
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 ef       	ldi	r24, 0xF0	; 240
    1258:	80 83       	st	Z, r24
							   DIO_u8_PA3_DIRECTION,DIO_u8_PA2_DIRECTION,DIO_u8_PA1_DIRECTION,DIO_u8_PA0_DIRECTION) ;

		DDRB = Conc(DIO_u8_PB7_DIRECTION,DIO_u8_PB6_DIRECTION,DIO_u8_PB5_DIRECTION,DIO_u8_PB4_DIRECTION,
    125a:	e7 e3       	ldi	r30, 0x37	; 55
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	8f ef       	ldi	r24, 0xFF	; 255
    1260:	80 83       	st	Z, r24
							   DIO_u8_PB3_DIRECTION,DIO_u8_PB2_DIRECTION,DIO_u8_PB1_DIRECTION,DIO_u8_PB0_DIRECTION) ;

		DDRC = Conc(DIO_u8_PC7_DIRECTION,DIO_u8_PC6_DIRECTION,DIO_u8_PC5_DIRECTION,DIO_u8_PC4_DIRECTION,
    1262:	e4 e3       	ldi	r30, 0x34	; 52
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	8f ef       	ldi	r24, 0xFF	; 255
    1268:	80 83       	st	Z, r24
							   DIO_u8_PC3_DIRECTION,DIO_u8_PC2_DIRECTION,DIO_u8_PC1_DIRECTION,DIO_u8_PC0_DIRECTION) ;

		DDRD = Conc(DIO_u8_PD7_DIRECTION,DIO_u8_PD6_DIRECTION,DIO_u8_PD5_DIRECTION,DIO_u8_PD4_DIRECTION,
    126a:	e1 e3       	ldi	r30, 0x31	; 49
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	8f ef       	ldi	r24, 0xFF	; 255
    1270:	80 83       	st	Z, r24
							   DIO_u8_PD3_DIRECTION,DIO_u8_PD2_DIRECTION,DIO_u8_PD1_DIRECTION,DIO_u8_PD0_DIRECTION) ;

	/*Set Initial Values For Ports*/

		PORTA = Conc(DIO_u8_PA7_INITIAL_VALUE,DIO_u8_PA6_INITIAL_VALUE,DIO_u8_PA5_INITIAL_VALUE,DIO_u8_PA4_INITIAL_VALUE,
    1272:	eb e3       	ldi	r30, 0x3B	; 59
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	8f ef       	ldi	r24, 0xFF	; 255
    1278:	80 83       	st	Z, r24
							    DIO_u8_PA3_INITIAL_VALUE,DIO_u8_PA2_INITIAL_VALUE,DIO_u8_PA1_INITIAL_VALUE,DIO_u8_PA0_INITIAL_VALUE) ;

		PORTB = Conc(DIO_u8_PB7_INITIAL_VALUE,DIO_u8_PB6_INITIAL_VALUE,DIO_u8_PB5_INITIAL_VALUE,DIO_u8_PB4_INITIAL_VALUE,
    127a:	e8 e3       	ldi	r30, 0x38	; 56
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	8f ef       	ldi	r24, 0xFF	; 255
    1280:	80 83       	st	Z, r24
							    DIO_u8_PB3_INITIAL_VALUE,DIO_u8_PB2_INITIAL_VALUE,DIO_u8_PB1_INITIAL_VALUE,DIO_u8_PB0_INITIAL_VALUE) ;

		PORTC = Conc(DIO_u8_PC7_INITIAL_VALUE,DIO_u8_PC6_INITIAL_VALUE,DIO_u8_PC5_INITIAL_VALUE,DIO_u8_PC4_INITIAL_VALUE,
    1282:	e5 e3       	ldi	r30, 0x35	; 53
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	8f ef       	ldi	r24, 0xFF	; 255
    1288:	80 83       	st	Z, r24
							    DIO_u8_PC3_INITIAL_VALUE,DIO_u8_PC2_INITIAL_VALUE,DIO_u8_PC1_INITIAL_VALUE,DIO_u8_PC0_INITIAL_VALUE) ;

		PORTD = Conc(DIO_u8_PD7_INITIAL_VALUE,DIO_u8_PD6_INITIAL_VALUE,DIO_u8_PD5_INITIAL_VALUE,DIO_u8_PD4_INITIAL_VALUE,
    128a:	e2 e3       	ldi	r30, 0x32	; 50
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	10 82       	st	Z, r1
							    DIO_u8_PD3_INITIAL_VALUE,DIO_u8_PD2_INITIAL_VALUE,DIO_u8_PD1_INITIAL_VALUE,DIO_u8_PD0_INITIAL_VALUE) ;

}
    1290:	cf 91       	pop	r28
    1292:	df 91       	pop	r29
    1294:	08 95       	ret

00001296 <MDIO_Error_State_SetPinDirection>:



/*Set Pin Direction Function */
Error_State  MDIO_Error_State_SetPinDirection(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8 Copy_u8PinDirection)
{
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	00 d0       	rcall	.+0      	; 0x129c <MDIO_Error_State_SetPinDirection+0x6>
    129c:	00 d0       	rcall	.+0      	; 0x129e <MDIO_Error_State_SetPinDirection+0x8>
    129e:	00 d0       	rcall	.+0      	; 0x12a0 <MDIO_Error_State_SetPinDirection+0xa>
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
    12a4:	8a 83       	std	Y+2, r24	; 0x02
    12a6:	6b 83       	std	Y+3, r22	; 0x03
    12a8:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	88 30       	cpi	r24, 0x08	; 8
    12b2:	08 f0       	brcs	.+2      	; 0x12b6 <MDIO_Error_State_SetPinDirection+0x20>
    12b4:	e8 c0       	rjmp	.+464    	; 0x1486 <MDIO_Error_State_SetPinDirection+0x1f0>
	{
		switch (Copy_u8PortNumber)
    12b6:	8b 81       	ldd	r24, Y+3	; 0x03
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	3e 83       	std	Y+6, r19	; 0x06
    12be:	2d 83       	std	Y+5, r18	; 0x05
    12c0:	8d 81       	ldd	r24, Y+5	; 0x05
    12c2:	9e 81       	ldd	r25, Y+6	; 0x06
    12c4:	81 30       	cpi	r24, 0x01	; 1
    12c6:	91 05       	cpc	r25, r1
    12c8:	09 f4       	brne	.+2      	; 0x12cc <MDIO_Error_State_SetPinDirection+0x36>
    12ca:	48 c0       	rjmp	.+144    	; 0x135c <MDIO_Error_State_SetPinDirection+0xc6>
    12cc:	2d 81       	ldd	r18, Y+5	; 0x05
    12ce:	3e 81       	ldd	r19, Y+6	; 0x06
    12d0:	22 30       	cpi	r18, 0x02	; 2
    12d2:	31 05       	cpc	r19, r1
    12d4:	2c f4       	brge	.+10     	; 0x12e0 <MDIO_Error_State_SetPinDirection+0x4a>
    12d6:	8d 81       	ldd	r24, Y+5	; 0x05
    12d8:	9e 81       	ldd	r25, Y+6	; 0x06
    12da:	00 97       	sbiw	r24, 0x00	; 0
    12dc:	71 f0       	breq	.+28     	; 0x12fa <MDIO_Error_State_SetPinDirection+0x64>
    12de:	d1 c0       	rjmp	.+418    	; 0x1482 <MDIO_Error_State_SetPinDirection+0x1ec>
    12e0:	2d 81       	ldd	r18, Y+5	; 0x05
    12e2:	3e 81       	ldd	r19, Y+6	; 0x06
    12e4:	22 30       	cpi	r18, 0x02	; 2
    12e6:	31 05       	cpc	r19, r1
    12e8:	09 f4       	brne	.+2      	; 0x12ec <MDIO_Error_State_SetPinDirection+0x56>
    12ea:	69 c0       	rjmp	.+210    	; 0x13be <MDIO_Error_State_SetPinDirection+0x128>
    12ec:	8d 81       	ldd	r24, Y+5	; 0x05
    12ee:	9e 81       	ldd	r25, Y+6	; 0x06
    12f0:	83 30       	cpi	r24, 0x03	; 3
    12f2:	91 05       	cpc	r25, r1
    12f4:	09 f4       	brne	.+2      	; 0x12f8 <MDIO_Error_State_SetPinDirection+0x62>
    12f6:	94 c0       	rjmp	.+296    	; 0x1420 <MDIO_Error_State_SetPinDirection+0x18a>
    12f8:	c4 c0       	rjmp	.+392    	; 0x1482 <MDIO_Error_State_SetPinDirection+0x1ec>
		{

		case  MDIO_PORTA:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    12fa:	8c 81       	ldd	r24, Y+4	; 0x04
    12fc:	81 30       	cpi	r24, 0x01	; 1
    12fe:	a1 f4       	brne	.+40     	; 0x1328 <MDIO_Error_State_SetPinDirection+0x92>
			{
				SET_BIT(DDRA,Copy_u8PinNumber);
    1300:	aa e3       	ldi	r26, 0x3A	; 58
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	ea e3       	ldi	r30, 0x3A	; 58
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	48 2f       	mov	r20, r24
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	28 2f       	mov	r18, r24
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	02 2e       	mov	r0, r18
    1318:	02 c0       	rjmp	.+4      	; 0x131e <MDIO_Error_State_SetPinDirection+0x88>
    131a:	88 0f       	add	r24, r24
    131c:	99 1f       	adc	r25, r25
    131e:	0a 94       	dec	r0
    1320:	e2 f7       	brpl	.-8      	; 0x131a <MDIO_Error_State_SetPinDirection+0x84>
    1322:	84 2b       	or	r24, r20
    1324:	8c 93       	st	X, r24
    1326:	b0 c0       	rjmp	.+352    	; 0x1488 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    1328:	8c 81       	ldd	r24, Y+4	; 0x04
    132a:	88 23       	and	r24, r24
    132c:	a9 f4       	brne	.+42     	; 0x1358 <MDIO_Error_State_SetPinDirection+0xc2>
			{
				CLR_BIT(DDRA,Copy_u8PinNumber);
    132e:	aa e3       	ldi	r26, 0x3A	; 58
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	ea e3       	ldi	r30, 0x3A	; 58
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	48 2f       	mov	r20, r24
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	02 2e       	mov	r0, r18
    1346:	02 c0       	rjmp	.+4      	; 0x134c <MDIO_Error_State_SetPinDirection+0xb6>
    1348:	88 0f       	add	r24, r24
    134a:	99 1f       	adc	r25, r25
    134c:	0a 94       	dec	r0
    134e:	e2 f7       	brpl	.-8      	; 0x1348 <MDIO_Error_State_SetPinDirection+0xb2>
    1350:	80 95       	com	r24
    1352:	84 23       	and	r24, r20
    1354:	8c 93       	st	X, r24
    1356:	98 c0       	rjmp	.+304    	; 0x1488 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    1358:	19 82       	std	Y+1, r1	; 0x01
    135a:	96 c0       	rjmp	.+300    	; 0x1488 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		case  MDIO_PORTB:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    135c:	8c 81       	ldd	r24, Y+4	; 0x04
    135e:	81 30       	cpi	r24, 0x01	; 1
    1360:	a1 f4       	brne	.+40     	; 0x138a <MDIO_Error_State_SetPinDirection+0xf4>
			{
				SET_BIT(DDRB,Copy_u8PinNumber);
    1362:	a7 e3       	ldi	r26, 0x37	; 55
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	e7 e3       	ldi	r30, 0x37	; 55
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	48 2f       	mov	r20, r24
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	02 2e       	mov	r0, r18
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <MDIO_Error_State_SetPinDirection+0xea>
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	0a 94       	dec	r0
    1382:	e2 f7       	brpl	.-8      	; 0x137c <MDIO_Error_State_SetPinDirection+0xe6>
    1384:	84 2b       	or	r24, r20
    1386:	8c 93       	st	X, r24
    1388:	7f c0       	rjmp	.+254    	; 0x1488 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    138a:	8c 81       	ldd	r24, Y+4	; 0x04
    138c:	88 23       	and	r24, r24
    138e:	a9 f4       	brne	.+42     	; 0x13ba <MDIO_Error_State_SetPinDirection+0x124>
			{
				CLR_BIT(DDRB,Copy_u8PinNumber);
    1390:	a7 e3       	ldi	r26, 0x37	; 55
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	e7 e3       	ldi	r30, 0x37	; 55
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	48 2f       	mov	r20, r24
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	02 2e       	mov	r0, r18
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <MDIO_Error_State_SetPinDirection+0x118>
    13aa:	88 0f       	add	r24, r24
    13ac:	99 1f       	adc	r25, r25
    13ae:	0a 94       	dec	r0
    13b0:	e2 f7       	brpl	.-8      	; 0x13aa <MDIO_Error_State_SetPinDirection+0x114>
    13b2:	80 95       	com	r24
    13b4:	84 23       	and	r24, r20
    13b6:	8c 93       	st	X, r24
    13b8:	67 c0       	rjmp	.+206    	; 0x1488 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    13ba:	19 82       	std	Y+1, r1	; 0x01
    13bc:	65 c0       	rjmp	.+202    	; 0x1488 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		case  MDIO_PORTC:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    13be:	8c 81       	ldd	r24, Y+4	; 0x04
    13c0:	81 30       	cpi	r24, 0x01	; 1
    13c2:	a1 f4       	brne	.+40     	; 0x13ec <MDIO_Error_State_SetPinDirection+0x156>
			{
				SET_BIT(DDRC,Copy_u8PinNumber);
    13c4:	a4 e3       	ldi	r26, 0x34	; 52
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e4 e3       	ldi	r30, 0x34	; 52
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	48 2f       	mov	r20, r24
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	02 2e       	mov	r0, r18
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <MDIO_Error_State_SetPinDirection+0x14c>
    13de:	88 0f       	add	r24, r24
    13e0:	99 1f       	adc	r25, r25
    13e2:	0a 94       	dec	r0
    13e4:	e2 f7       	brpl	.-8      	; 0x13de <MDIO_Error_State_SetPinDirection+0x148>
    13e6:	84 2b       	or	r24, r20
    13e8:	8c 93       	st	X, r24
    13ea:	4e c0       	rjmp	.+156    	; 0x1488 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    13ec:	8c 81       	ldd	r24, Y+4	; 0x04
    13ee:	88 23       	and	r24, r24
    13f0:	a9 f4       	brne	.+42     	; 0x141c <MDIO_Error_State_SetPinDirection+0x186>
			{
				CLR_BIT(DDRC,Copy_u8PinNumber);
    13f2:	a4 e3       	ldi	r26, 0x34	; 52
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	e4 e3       	ldi	r30, 0x34	; 52
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	48 2f       	mov	r20, r24
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	02 2e       	mov	r0, r18
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <MDIO_Error_State_SetPinDirection+0x17a>
    140c:	88 0f       	add	r24, r24
    140e:	99 1f       	adc	r25, r25
    1410:	0a 94       	dec	r0
    1412:	e2 f7       	brpl	.-8      	; 0x140c <MDIO_Error_State_SetPinDirection+0x176>
    1414:	80 95       	com	r24
    1416:	84 23       	and	r24, r20
    1418:	8c 93       	st	X, r24
    141a:	36 c0       	rjmp	.+108    	; 0x1488 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    141c:	19 82       	std	Y+1, r1	; 0x01
    141e:	34 c0       	rjmp	.+104    	; 0x1488 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;
		case  MDIO_PORTD:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    1420:	8c 81       	ldd	r24, Y+4	; 0x04
    1422:	81 30       	cpi	r24, 0x01	; 1
    1424:	a1 f4       	brne	.+40     	; 0x144e <MDIO_Error_State_SetPinDirection+0x1b8>
			{
				SET_BIT(DDRD,Copy_u8PinNumber);
    1426:	a1 e3       	ldi	r26, 0x31	; 49
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	e1 e3       	ldi	r30, 0x31	; 49
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	48 2f       	mov	r20, r24
    1432:	8a 81       	ldd	r24, Y+2	; 0x02
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	02 2e       	mov	r0, r18
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <MDIO_Error_State_SetPinDirection+0x1ae>
    1440:	88 0f       	add	r24, r24
    1442:	99 1f       	adc	r25, r25
    1444:	0a 94       	dec	r0
    1446:	e2 f7       	brpl	.-8      	; 0x1440 <MDIO_Error_State_SetPinDirection+0x1aa>
    1448:	84 2b       	or	r24, r20
    144a:	8c 93       	st	X, r24
    144c:	1d c0       	rjmp	.+58     	; 0x1488 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    144e:	8c 81       	ldd	r24, Y+4	; 0x04
    1450:	88 23       	and	r24, r24
    1452:	a9 f4       	brne	.+42     	; 0x147e <MDIO_Error_State_SetPinDirection+0x1e8>
			{
				CLR_BIT(DDRD,Copy_u8PinNumber);
    1454:	a1 e3       	ldi	r26, 0x31	; 49
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e1 e3       	ldi	r30, 0x31	; 49
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	48 2f       	mov	r20, r24
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	02 2e       	mov	r0, r18
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <MDIO_Error_State_SetPinDirection+0x1dc>
    146e:	88 0f       	add	r24, r24
    1470:	99 1f       	adc	r25, r25
    1472:	0a 94       	dec	r0
    1474:	e2 f7       	brpl	.-8      	; 0x146e <MDIO_Error_State_SetPinDirection+0x1d8>
    1476:	80 95       	com	r24
    1478:	84 23       	and	r24, r20
    147a:	8c 93       	st	X, r24
    147c:	05 c0       	rjmp	.+10     	; 0x1488 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    147e:	19 82       	std	Y+1, r1	; 0x01
    1480:	03 c0       	rjmp	.+6      	; 0x1488 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		default:
			LOC_Error_State_ReturnState = NOK;
    1482:	19 82       	std	Y+1, r1	; 0x01
    1484:	01 c0       	rjmp	.+2      	; 0x1488 <MDIO_Error_State_SetPinDirection+0x1f2>
			break ;
		}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
    1486:	19 82       	std	Y+1, r1	; 0x01
	}
	return  LOC_Error_State_ReturnState ;
    1488:	89 81       	ldd	r24, Y+1	; 0x01

}
    148a:	26 96       	adiw	r28, 0x06	; 6
    148c:	0f b6       	in	r0, 0x3f	; 63
    148e:	f8 94       	cli
    1490:	de bf       	out	0x3e, r29	; 62
    1492:	0f be       	out	0x3f, r0	; 63
    1494:	cd bf       	out	0x3d, r28	; 61
    1496:	cf 91       	pop	r28
    1498:	df 91       	pop	r29
    149a:	08 95       	ret

0000149c <MDIO_Error_State_SetPortDirection>:

/*Set Port Direction Function */
Error_State  MDIO_Error_State_SetPortDirection(u8 Copy_u8PortNumber,u8 Copy_u8PortDirection)
{
    149c:	df 93       	push	r29
    149e:	cf 93       	push	r28
    14a0:	00 d0       	rcall	.+0      	; 0x14a2 <MDIO_Error_State_SetPortDirection+0x6>
    14a2:	00 d0       	rcall	.+0      	; 0x14a4 <MDIO_Error_State_SetPortDirection+0x8>
    14a4:	0f 92       	push	r0
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
    14aa:	8a 83       	std	Y+2, r24	; 0x02
    14ac:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState = OK;
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8PortDirection==PORT_OUTPUT)||(Copy_u8PortDirection==PORT_INPUT))
    14b2:	8b 81       	ldd	r24, Y+3	; 0x03
    14b4:	8f 3f       	cpi	r24, 0xFF	; 255
    14b6:	19 f0       	breq	.+6      	; 0x14be <MDIO_Error_State_SetPortDirection+0x22>
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ba:	88 23       	and	r24, r24
    14bc:	a9 f5       	brne	.+106    	; 0x1528 <MDIO_Error_State_SetPortDirection+0x8c>
	{
		switch(Copy_u8PortNumber)
    14be:	8a 81       	ldd	r24, Y+2	; 0x02
    14c0:	28 2f       	mov	r18, r24
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	3d 83       	std	Y+5, r19	; 0x05
    14c6:	2c 83       	std	Y+4, r18	; 0x04
    14c8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ca:	9d 81       	ldd	r25, Y+5	; 0x05
    14cc:	81 30       	cpi	r24, 0x01	; 1
    14ce:	91 05       	cpc	r25, r1
    14d0:	d1 f0       	breq	.+52     	; 0x1506 <MDIO_Error_State_SetPortDirection+0x6a>
    14d2:	2c 81       	ldd	r18, Y+4	; 0x04
    14d4:	3d 81       	ldd	r19, Y+5	; 0x05
    14d6:	22 30       	cpi	r18, 0x02	; 2
    14d8:	31 05       	cpc	r19, r1
    14da:	2c f4       	brge	.+10     	; 0x14e6 <MDIO_Error_State_SetPortDirection+0x4a>
    14dc:	8c 81       	ldd	r24, Y+4	; 0x04
    14de:	9d 81       	ldd	r25, Y+5	; 0x05
    14e0:	00 97       	sbiw	r24, 0x00	; 0
    14e2:	61 f0       	breq	.+24     	; 0x14fc <MDIO_Error_State_SetPortDirection+0x60>
    14e4:	1f c0       	rjmp	.+62     	; 0x1524 <MDIO_Error_State_SetPortDirection+0x88>
    14e6:	2c 81       	ldd	r18, Y+4	; 0x04
    14e8:	3d 81       	ldd	r19, Y+5	; 0x05
    14ea:	22 30       	cpi	r18, 0x02	; 2
    14ec:	31 05       	cpc	r19, r1
    14ee:	81 f0       	breq	.+32     	; 0x1510 <MDIO_Error_State_SetPortDirection+0x74>
    14f0:	8c 81       	ldd	r24, Y+4	; 0x04
    14f2:	9d 81       	ldd	r25, Y+5	; 0x05
    14f4:	83 30       	cpi	r24, 0x03	; 3
    14f6:	91 05       	cpc	r25, r1
    14f8:	81 f0       	breq	.+32     	; 0x151a <MDIO_Error_State_SetPortDirection+0x7e>
    14fa:	14 c0       	rjmp	.+40     	; 0x1524 <MDIO_Error_State_SetPortDirection+0x88>
		{
		case MDIO_PORTA:
			DDRA = Copy_u8PortDirection;
    14fc:	ea e3       	ldi	r30, 0x3A	; 58
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	80 83       	st	Z, r24
    1504:	12 c0       	rjmp	.+36     	; 0x152a <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTB:
			DDRB = Copy_u8PortDirection;
    1506:	e7 e3       	ldi	r30, 0x37	; 55
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
    150c:	80 83       	st	Z, r24
    150e:	0d c0       	rjmp	.+26     	; 0x152a <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTC:
			DDRC = Copy_u8PortDirection;
    1510:	e4 e3       	ldi	r30, 0x34	; 52
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	80 83       	st	Z, r24
    1518:	08 c0       	rjmp	.+16     	; 0x152a <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTD:
			DDRD = Copy_u8PortDirection;
    151a:	e1 e3       	ldi	r30, 0x31	; 49
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	80 83       	st	Z, r24
    1522:	03 c0       	rjmp	.+6      	; 0x152a <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		default:
			LOC_Error_State_ReturnState = NOK;
    1524:	19 82       	std	Y+1, r1	; 0x01
    1526:	01 c0       	rjmp	.+2      	; 0x152a <MDIO_Error_State_SetPortDirection+0x8e>
			break ;
		}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
    1528:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState ;
    152a:	89 81       	ldd	r24, Y+1	; 0x01
}
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	cf 91       	pop	r28
    1538:	df 91       	pop	r29
    153a:	08 95       	ret

0000153c <MDIO_Error_State_SetPinValue>:

/*Set Pin Value Function */
Error_State  MDIO_Error_State_SetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8 Copy_u8PinValue)
{
    153c:	df 93       	push	r29
    153e:	cf 93       	push	r28
    1540:	00 d0       	rcall	.+0      	; 0x1542 <MDIO_Error_State_SetPinValue+0x6>
    1542:	00 d0       	rcall	.+0      	; 0x1544 <MDIO_Error_State_SetPinValue+0x8>
    1544:	00 d0       	rcall	.+0      	; 0x1546 <MDIO_Error_State_SetPinValue+0xa>
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
    154a:	8a 83       	std	Y+2, r24	; 0x02
    154c:	6b 83       	std	Y+3, r22	; 0x03
    154e:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	89 83       	std	Y+1, r24	; 0x01
		if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	88 30       	cpi	r24, 0x08	; 8
    1558:	08 f0       	brcs	.+2      	; 0x155c <MDIO_Error_State_SetPinValue+0x20>
    155a:	e8 c0       	rjmp	.+464    	; 0x172c <MDIO_Error_State_SetPinValue+0x1f0>
		{
			switch (Copy_u8PortNumber)
    155c:	8b 81       	ldd	r24, Y+3	; 0x03
    155e:	28 2f       	mov	r18, r24
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	3e 83       	std	Y+6, r19	; 0x06
    1564:	2d 83       	std	Y+5, r18	; 0x05
    1566:	8d 81       	ldd	r24, Y+5	; 0x05
    1568:	9e 81       	ldd	r25, Y+6	; 0x06
    156a:	81 30       	cpi	r24, 0x01	; 1
    156c:	91 05       	cpc	r25, r1
    156e:	09 f4       	brne	.+2      	; 0x1572 <MDIO_Error_State_SetPinValue+0x36>
    1570:	48 c0       	rjmp	.+144    	; 0x1602 <MDIO_Error_State_SetPinValue+0xc6>
    1572:	2d 81       	ldd	r18, Y+5	; 0x05
    1574:	3e 81       	ldd	r19, Y+6	; 0x06
    1576:	22 30       	cpi	r18, 0x02	; 2
    1578:	31 05       	cpc	r19, r1
    157a:	2c f4       	brge	.+10     	; 0x1586 <MDIO_Error_State_SetPinValue+0x4a>
    157c:	8d 81       	ldd	r24, Y+5	; 0x05
    157e:	9e 81       	ldd	r25, Y+6	; 0x06
    1580:	00 97       	sbiw	r24, 0x00	; 0
    1582:	71 f0       	breq	.+28     	; 0x15a0 <MDIO_Error_State_SetPinValue+0x64>
    1584:	d1 c0       	rjmp	.+418    	; 0x1728 <MDIO_Error_State_SetPinValue+0x1ec>
    1586:	2d 81       	ldd	r18, Y+5	; 0x05
    1588:	3e 81       	ldd	r19, Y+6	; 0x06
    158a:	22 30       	cpi	r18, 0x02	; 2
    158c:	31 05       	cpc	r19, r1
    158e:	09 f4       	brne	.+2      	; 0x1592 <MDIO_Error_State_SetPinValue+0x56>
    1590:	69 c0       	rjmp	.+210    	; 0x1664 <MDIO_Error_State_SetPinValue+0x128>
    1592:	8d 81       	ldd	r24, Y+5	; 0x05
    1594:	9e 81       	ldd	r25, Y+6	; 0x06
    1596:	83 30       	cpi	r24, 0x03	; 3
    1598:	91 05       	cpc	r25, r1
    159a:	09 f4       	brne	.+2      	; 0x159e <MDIO_Error_State_SetPinValue+0x62>
    159c:	94 c0       	rjmp	.+296    	; 0x16c6 <MDIO_Error_State_SetPinValue+0x18a>
    159e:	c4 c0       	rjmp	.+392    	; 0x1728 <MDIO_Error_State_SetPinValue+0x1ec>
			{

			case  MDIO_PORTA:
				if(Copy_u8PinValue==PIN_HIGH)
    15a0:	8c 81       	ldd	r24, Y+4	; 0x04
    15a2:	81 30       	cpi	r24, 0x01	; 1
    15a4:	a1 f4       	brne	.+40     	; 0x15ce <MDIO_Error_State_SetPinValue+0x92>
				{
					SET_BIT(PORTA,Copy_u8PinNumber);
    15a6:	ab e3       	ldi	r26, 0x3B	; 59
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	eb e3       	ldi	r30, 0x3B	; 59
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	48 2f       	mov	r20, r24
    15b2:	8a 81       	ldd	r24, Y+2	; 0x02
    15b4:	28 2f       	mov	r18, r24
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	02 2e       	mov	r0, r18
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <MDIO_Error_State_SetPinValue+0x88>
    15c0:	88 0f       	add	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	0a 94       	dec	r0
    15c6:	e2 f7       	brpl	.-8      	; 0x15c0 <MDIO_Error_State_SetPinValue+0x84>
    15c8:	84 2b       	or	r24, r20
    15ca:	8c 93       	st	X, r24
    15cc:	b0 c0       	rjmp	.+352    	; 0x172e <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    15ce:	8c 81       	ldd	r24, Y+4	; 0x04
    15d0:	88 23       	and	r24, r24
    15d2:	a9 f4       	brne	.+42     	; 0x15fe <MDIO_Error_State_SetPinValue+0xc2>
				{
					CLR_BIT(PORTA,Copy_u8PinNumber);
    15d4:	ab e3       	ldi	r26, 0x3B	; 59
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	eb e3       	ldi	r30, 0x3B	; 59
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	48 2f       	mov	r20, r24
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	02 2e       	mov	r0, r18
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <MDIO_Error_State_SetPinValue+0xb6>
    15ee:	88 0f       	add	r24, r24
    15f0:	99 1f       	adc	r25, r25
    15f2:	0a 94       	dec	r0
    15f4:	e2 f7       	brpl	.-8      	; 0x15ee <MDIO_Error_State_SetPinValue+0xb2>
    15f6:	80 95       	com	r24
    15f8:	84 23       	and	r24, r20
    15fa:	8c 93       	st	X, r24
    15fc:	98 c0       	rjmp	.+304    	; 0x172e <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    15fe:	19 82       	std	Y+1, r1	; 0x01
    1600:	96 c0       	rjmp	.+300    	; 0x172e <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			case  MDIO_PORTB:
				if(Copy_u8PinValue==PIN_HIGH)
    1602:	8c 81       	ldd	r24, Y+4	; 0x04
    1604:	81 30       	cpi	r24, 0x01	; 1
    1606:	a1 f4       	brne	.+40     	; 0x1630 <MDIO_Error_State_SetPinValue+0xf4>
				{
					SET_BIT(PORTB,Copy_u8PinNumber);
    1608:	a8 e3       	ldi	r26, 0x38	; 56
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	e8 e3       	ldi	r30, 0x38	; 56
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	48 2f       	mov	r20, r24
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	28 2f       	mov	r18, r24
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	02 2e       	mov	r0, r18
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <MDIO_Error_State_SetPinValue+0xea>
    1622:	88 0f       	add	r24, r24
    1624:	99 1f       	adc	r25, r25
    1626:	0a 94       	dec	r0
    1628:	e2 f7       	brpl	.-8      	; 0x1622 <MDIO_Error_State_SetPinValue+0xe6>
    162a:	84 2b       	or	r24, r20
    162c:	8c 93       	st	X, r24
    162e:	7f c0       	rjmp	.+254    	; 0x172e <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    1630:	8c 81       	ldd	r24, Y+4	; 0x04
    1632:	88 23       	and	r24, r24
    1634:	a9 f4       	brne	.+42     	; 0x1660 <MDIO_Error_State_SetPinValue+0x124>
				{
					CLR_BIT(PORTB,Copy_u8PinNumber);
    1636:	a8 e3       	ldi	r26, 0x38	; 56
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	e8 e3       	ldi	r30, 0x38	; 56
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	48 2f       	mov	r20, r24
    1642:	8a 81       	ldd	r24, Y+2	; 0x02
    1644:	28 2f       	mov	r18, r24
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	02 2e       	mov	r0, r18
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <MDIO_Error_State_SetPinValue+0x118>
    1650:	88 0f       	add	r24, r24
    1652:	99 1f       	adc	r25, r25
    1654:	0a 94       	dec	r0
    1656:	e2 f7       	brpl	.-8      	; 0x1650 <MDIO_Error_State_SetPinValue+0x114>
    1658:	80 95       	com	r24
    165a:	84 23       	and	r24, r20
    165c:	8c 93       	st	X, r24
    165e:	67 c0       	rjmp	.+206    	; 0x172e <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    1660:	19 82       	std	Y+1, r1	; 0x01
    1662:	65 c0       	rjmp	.+202    	; 0x172e <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			case  MDIO_PORTC:
				if(Copy_u8PinValue==PIN_HIGH)
    1664:	8c 81       	ldd	r24, Y+4	; 0x04
    1666:	81 30       	cpi	r24, 0x01	; 1
    1668:	a1 f4       	brne	.+40     	; 0x1692 <MDIO_Error_State_SetPinValue+0x156>
				{
					SET_BIT(PORTC,Copy_u8PinNumber);
    166a:	a5 e3       	ldi	r26, 0x35	; 53
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	e5 e3       	ldi	r30, 0x35	; 53
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	48 2f       	mov	r20, r24
    1676:	8a 81       	ldd	r24, Y+2	; 0x02
    1678:	28 2f       	mov	r18, r24
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	02 2e       	mov	r0, r18
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <MDIO_Error_State_SetPinValue+0x14c>
    1684:	88 0f       	add	r24, r24
    1686:	99 1f       	adc	r25, r25
    1688:	0a 94       	dec	r0
    168a:	e2 f7       	brpl	.-8      	; 0x1684 <MDIO_Error_State_SetPinValue+0x148>
    168c:	84 2b       	or	r24, r20
    168e:	8c 93       	st	X, r24
    1690:	4e c0       	rjmp	.+156    	; 0x172e <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    1692:	8c 81       	ldd	r24, Y+4	; 0x04
    1694:	88 23       	and	r24, r24
    1696:	a9 f4       	brne	.+42     	; 0x16c2 <MDIO_Error_State_SetPinValue+0x186>
				{
					CLR_BIT(PORTC,Copy_u8PinNumber);
    1698:	a5 e3       	ldi	r26, 0x35	; 53
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	e5 e3       	ldi	r30, 0x35	; 53
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	48 2f       	mov	r20, r24
    16a4:	8a 81       	ldd	r24, Y+2	; 0x02
    16a6:	28 2f       	mov	r18, r24
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	02 2e       	mov	r0, r18
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <MDIO_Error_State_SetPinValue+0x17a>
    16b2:	88 0f       	add	r24, r24
    16b4:	99 1f       	adc	r25, r25
    16b6:	0a 94       	dec	r0
    16b8:	e2 f7       	brpl	.-8      	; 0x16b2 <MDIO_Error_State_SetPinValue+0x176>
    16ba:	80 95       	com	r24
    16bc:	84 23       	and	r24, r20
    16be:	8c 93       	st	X, r24
    16c0:	36 c0       	rjmp	.+108    	; 0x172e <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    16c2:	19 82       	std	Y+1, r1	; 0x01
    16c4:	34 c0       	rjmp	.+104    	; 0x172e <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break;
			case  MDIO_PORTD:
				if(Copy_u8PinValue==PIN_HIGH)
    16c6:	8c 81       	ldd	r24, Y+4	; 0x04
    16c8:	81 30       	cpi	r24, 0x01	; 1
    16ca:	a1 f4       	brne	.+40     	; 0x16f4 <MDIO_Error_State_SetPinValue+0x1b8>
				{
					SET_BIT(PORTD,Copy_u8PinNumber);
    16cc:	a2 e3       	ldi	r26, 0x32	; 50
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	e2 e3       	ldi	r30, 0x32	; 50
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	48 2f       	mov	r20, r24
    16d8:	8a 81       	ldd	r24, Y+2	; 0x02
    16da:	28 2f       	mov	r18, r24
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	02 2e       	mov	r0, r18
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <MDIO_Error_State_SetPinValue+0x1ae>
    16e6:	88 0f       	add	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	0a 94       	dec	r0
    16ec:	e2 f7       	brpl	.-8      	; 0x16e6 <MDIO_Error_State_SetPinValue+0x1aa>
    16ee:	84 2b       	or	r24, r20
    16f0:	8c 93       	st	X, r24
    16f2:	1d c0       	rjmp	.+58     	; 0x172e <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    16f4:	8c 81       	ldd	r24, Y+4	; 0x04
    16f6:	88 23       	and	r24, r24
    16f8:	a9 f4       	brne	.+42     	; 0x1724 <MDIO_Error_State_SetPinValue+0x1e8>
				{
					CLR_BIT(PORTD,Copy_u8PinNumber);
    16fa:	a2 e3       	ldi	r26, 0x32	; 50
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	e2 e3       	ldi	r30, 0x32	; 50
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	48 2f       	mov	r20, r24
    1706:	8a 81       	ldd	r24, Y+2	; 0x02
    1708:	28 2f       	mov	r18, r24
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	02 2e       	mov	r0, r18
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <MDIO_Error_State_SetPinValue+0x1dc>
    1714:	88 0f       	add	r24, r24
    1716:	99 1f       	adc	r25, r25
    1718:	0a 94       	dec	r0
    171a:	e2 f7       	brpl	.-8      	; 0x1714 <MDIO_Error_State_SetPinValue+0x1d8>
    171c:	80 95       	com	r24
    171e:	84 23       	and	r24, r20
    1720:	8c 93       	st	X, r24
    1722:	05 c0       	rjmp	.+10     	; 0x172e <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    1724:	19 82       	std	Y+1, r1	; 0x01
    1726:	03 c0       	rjmp	.+6      	; 0x172e <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			default:
				LOC_Error_State_ReturnState = NOK;
    1728:	19 82       	std	Y+1, r1	; 0x01
    172a:	01 c0       	rjmp	.+2      	; 0x172e <MDIO_Error_State_SetPinValue+0x1f2>
				break ;
			}
		}
		else
		{
			LOC_Error_State_ReturnState = NOK;
    172c:	19 82       	std	Y+1, r1	; 0x01
		}
		return  LOC_Error_State_ReturnState ;
    172e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1730:	26 96       	adiw	r28, 0x06	; 6
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	f8 94       	cli
    1736:	de bf       	out	0x3e, r29	; 62
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	cd bf       	out	0x3d, r28	; 61
    173c:	cf 91       	pop	r28
    173e:	df 91       	pop	r29
    1740:	08 95       	ret

00001742 <MDIO_Error_State_SetPortValue>:
/*Set Port Value Function */
Error_State  MDIO_Error_State_SetPortValue(u8 Copy_u8PortNumber,u8 Copy_u8PortValue)
{
    1742:	df 93       	push	r29
    1744:	cf 93       	push	r28
    1746:	00 d0       	rcall	.+0      	; 0x1748 <MDIO_Error_State_SetPortValue+0x6>
    1748:	00 d0       	rcall	.+0      	; 0x174a <MDIO_Error_State_SetPortValue+0x8>
    174a:	0f 92       	push	r0
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62
    1750:	8a 83       	std	Y+2, r24	; 0x02
    1752:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState = OK;
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	89 83       	std	Y+1, r24	; 0x01

			switch(Copy_u8PortNumber)
    1758:	8a 81       	ldd	r24, Y+2	; 0x02
    175a:	28 2f       	mov	r18, r24
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	3d 83       	std	Y+5, r19	; 0x05
    1760:	2c 83       	std	Y+4, r18	; 0x04
    1762:	8c 81       	ldd	r24, Y+4	; 0x04
    1764:	9d 81       	ldd	r25, Y+5	; 0x05
    1766:	81 30       	cpi	r24, 0x01	; 1
    1768:	91 05       	cpc	r25, r1
    176a:	d1 f0       	breq	.+52     	; 0x17a0 <MDIO_Error_State_SetPortValue+0x5e>
    176c:	2c 81       	ldd	r18, Y+4	; 0x04
    176e:	3d 81       	ldd	r19, Y+5	; 0x05
    1770:	22 30       	cpi	r18, 0x02	; 2
    1772:	31 05       	cpc	r19, r1
    1774:	2c f4       	brge	.+10     	; 0x1780 <MDIO_Error_State_SetPortValue+0x3e>
    1776:	8c 81       	ldd	r24, Y+4	; 0x04
    1778:	9d 81       	ldd	r25, Y+5	; 0x05
    177a:	00 97       	sbiw	r24, 0x00	; 0
    177c:	61 f0       	breq	.+24     	; 0x1796 <MDIO_Error_State_SetPortValue+0x54>
    177e:	1f c0       	rjmp	.+62     	; 0x17be <MDIO_Error_State_SetPortValue+0x7c>
    1780:	2c 81       	ldd	r18, Y+4	; 0x04
    1782:	3d 81       	ldd	r19, Y+5	; 0x05
    1784:	22 30       	cpi	r18, 0x02	; 2
    1786:	31 05       	cpc	r19, r1
    1788:	81 f0       	breq	.+32     	; 0x17aa <MDIO_Error_State_SetPortValue+0x68>
    178a:	8c 81       	ldd	r24, Y+4	; 0x04
    178c:	9d 81       	ldd	r25, Y+5	; 0x05
    178e:	83 30       	cpi	r24, 0x03	; 3
    1790:	91 05       	cpc	r25, r1
    1792:	81 f0       	breq	.+32     	; 0x17b4 <MDIO_Error_State_SetPortValue+0x72>
    1794:	14 c0       	rjmp	.+40     	; 0x17be <MDIO_Error_State_SetPortValue+0x7c>
			{
			case MDIO_PORTA:
				PORTA = Copy_u8PortValue;
    1796:	eb e3       	ldi	r30, 0x3B	; 59
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	8b 81       	ldd	r24, Y+3	; 0x03
    179c:	80 83       	st	Z, r24
    179e:	10 c0       	rjmp	.+32     	; 0x17c0 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTB:
				PORTB = Copy_u8PortValue;
    17a0:	e8 e3       	ldi	r30, 0x38	; 56
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	8b 81       	ldd	r24, Y+3	; 0x03
    17a6:	80 83       	st	Z, r24
    17a8:	0b c0       	rjmp	.+22     	; 0x17c0 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTC:
				PORTC = Copy_u8PortValue;
    17aa:	e5 e3       	ldi	r30, 0x35	; 53
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	80 83       	st	Z, r24
    17b2:	06 c0       	rjmp	.+12     	; 0x17c0 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTD:
				PORTD = Copy_u8PortValue;
    17b4:	e2 e3       	ldi	r30, 0x32	; 50
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ba:	80 83       	st	Z, r24
    17bc:	01 c0       	rjmp	.+2      	; 0x17c0 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			default:
				LOC_Error_State_ReturnState = NOK;
    17be:	19 82       	std	Y+1, r1	; 0x01
				break ;
			}

		return LOC_Error_State_ReturnState ;
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    17c2:	0f 90       	pop	r0
    17c4:	0f 90       	pop	r0
    17c6:	0f 90       	pop	r0
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	cf 91       	pop	r28
    17ce:	df 91       	pop	r29
    17d0:	08 95       	ret

000017d2 <MDIO_Error_State_GetPinValue>:
/*Get Pin Value Function */
Error_State  MDIO_Error_State_GetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8* P_u8PinValue)
{
    17d2:	df 93       	push	r29
    17d4:	cf 93       	push	r28
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62
    17da:	27 97       	sbiw	r28, 0x07	; 7
    17dc:	0f b6       	in	r0, 0x3f	; 63
    17de:	f8 94       	cli
    17e0:	de bf       	out	0x3e, r29	; 62
    17e2:	0f be       	out	0x3f, r0	; 63
    17e4:	cd bf       	out	0x3d, r28	; 61
    17e6:	8a 83       	std	Y+2, r24	; 0x02
    17e8:	6b 83       	std	Y+3, r22	; 0x03
    17ea:	5d 83       	std	Y+5, r21	; 0x05
    17ec:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	89 83       	std	Y+1, r24	; 0x01

	if(((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))&&(P_u8PinValue !=(u8*)NULL_POINTER))
    17f2:	8a 81       	ldd	r24, Y+2	; 0x02
    17f4:	88 30       	cpi	r24, 0x08	; 8
    17f6:	08 f0       	brcs	.+2      	; 0x17fa <MDIO_Error_State_GetPinValue+0x28>
    17f8:	79 c0       	rjmp	.+242    	; 0x18ec <MDIO_Error_State_GetPinValue+0x11a>
    17fa:	8c 81       	ldd	r24, Y+4	; 0x04
    17fc:	9d 81       	ldd	r25, Y+5	; 0x05
    17fe:	81 30       	cpi	r24, 0x01	; 1
    1800:	91 05       	cpc	r25, r1
    1802:	09 f4       	brne	.+2      	; 0x1806 <MDIO_Error_State_GetPinValue+0x34>
    1804:	73 c0       	rjmp	.+230    	; 0x18ec <MDIO_Error_State_GetPinValue+0x11a>
	{
	switch(Copy_u8PortNumber)
    1806:	8b 81       	ldd	r24, Y+3	; 0x03
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	3f 83       	std	Y+7, r19	; 0x07
    180e:	2e 83       	std	Y+6, r18	; 0x06
    1810:	4e 81       	ldd	r20, Y+6	; 0x06
    1812:	5f 81       	ldd	r21, Y+7	; 0x07
    1814:	41 30       	cpi	r20, 0x01	; 1
    1816:	51 05       	cpc	r21, r1
    1818:	59 f1       	breq	.+86     	; 0x1870 <MDIO_Error_State_GetPinValue+0x9e>
    181a:	8e 81       	ldd	r24, Y+6	; 0x06
    181c:	9f 81       	ldd	r25, Y+7	; 0x07
    181e:	82 30       	cpi	r24, 0x02	; 2
    1820:	91 05       	cpc	r25, r1
    1822:	34 f4       	brge	.+12     	; 0x1830 <MDIO_Error_State_GetPinValue+0x5e>
    1824:	2e 81       	ldd	r18, Y+6	; 0x06
    1826:	3f 81       	ldd	r19, Y+7	; 0x07
    1828:	21 15       	cp	r18, r1
    182a:	31 05       	cpc	r19, r1
    182c:	69 f0       	breq	.+26     	; 0x1848 <MDIO_Error_State_GetPinValue+0x76>
    182e:	5c c0       	rjmp	.+184    	; 0x18e8 <MDIO_Error_State_GetPinValue+0x116>
    1830:	4e 81       	ldd	r20, Y+6	; 0x06
    1832:	5f 81       	ldd	r21, Y+7	; 0x07
    1834:	42 30       	cpi	r20, 0x02	; 2
    1836:	51 05       	cpc	r21, r1
    1838:	79 f1       	breq	.+94     	; 0x1898 <MDIO_Error_State_GetPinValue+0xc6>
    183a:	8e 81       	ldd	r24, Y+6	; 0x06
    183c:	9f 81       	ldd	r25, Y+7	; 0x07
    183e:	83 30       	cpi	r24, 0x03	; 3
    1840:	91 05       	cpc	r25, r1
    1842:	09 f4       	brne	.+2      	; 0x1846 <MDIO_Error_State_GetPinValue+0x74>
    1844:	3d c0       	rjmp	.+122    	; 0x18c0 <MDIO_Error_State_GetPinValue+0xee>
    1846:	50 c0       	rjmp	.+160    	; 0x18e8 <MDIO_Error_State_GetPinValue+0x116>
				{
				case MDIO_PORTA:
					*P_u8PinValue= GET_BIT(PINA,Copy_u8PinNumber);
    1848:	e9 e3       	ldi	r30, 0x39	; 57
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	28 2f       	mov	r18, r24
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	8a 81       	ldd	r24, Y+2	; 0x02
    1854:	88 2f       	mov	r24, r24
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	a9 01       	movw	r20, r18
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <MDIO_Error_State_GetPinValue+0x8e>
    185c:	55 95       	asr	r21
    185e:	47 95       	ror	r20
    1860:	8a 95       	dec	r24
    1862:	e2 f7       	brpl	.-8      	; 0x185c <MDIO_Error_State_GetPinValue+0x8a>
    1864:	ca 01       	movw	r24, r20
    1866:	81 70       	andi	r24, 0x01	; 1
    1868:	ec 81       	ldd	r30, Y+4	; 0x04
    186a:	fd 81       	ldd	r31, Y+5	; 0x05
    186c:	80 83       	st	Z, r24
    186e:	3f c0       	rjmp	.+126    	; 0x18ee <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTB:
					*P_u8PinValue= GET_BIT(PINB,Copy_u8PinNumber);
    1870:	e6 e3       	ldi	r30, 0x36	; 54
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	28 2f       	mov	r18, r24
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	88 2f       	mov	r24, r24
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	a9 01       	movw	r20, r18
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <MDIO_Error_State_GetPinValue+0xb6>
    1884:	55 95       	asr	r21
    1886:	47 95       	ror	r20
    1888:	8a 95       	dec	r24
    188a:	e2 f7       	brpl	.-8      	; 0x1884 <MDIO_Error_State_GetPinValue+0xb2>
    188c:	ca 01       	movw	r24, r20
    188e:	81 70       	andi	r24, 0x01	; 1
    1890:	ec 81       	ldd	r30, Y+4	; 0x04
    1892:	fd 81       	ldd	r31, Y+5	; 0x05
    1894:	80 83       	st	Z, r24
    1896:	2b c0       	rjmp	.+86     	; 0x18ee <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTC:
					*P_u8PinValue= GET_BIT(PINC,Copy_u8PinNumber);
    1898:	e3 e3       	ldi	r30, 0x33	; 51
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	28 2f       	mov	r18, r24
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	8a 81       	ldd	r24, Y+2	; 0x02
    18a4:	88 2f       	mov	r24, r24
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	a9 01       	movw	r20, r18
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <MDIO_Error_State_GetPinValue+0xde>
    18ac:	55 95       	asr	r21
    18ae:	47 95       	ror	r20
    18b0:	8a 95       	dec	r24
    18b2:	e2 f7       	brpl	.-8      	; 0x18ac <MDIO_Error_State_GetPinValue+0xda>
    18b4:	ca 01       	movw	r24, r20
    18b6:	81 70       	andi	r24, 0x01	; 1
    18b8:	ec 81       	ldd	r30, Y+4	; 0x04
    18ba:	fd 81       	ldd	r31, Y+5	; 0x05
    18bc:	80 83       	st	Z, r24
    18be:	17 c0       	rjmp	.+46     	; 0x18ee <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTD:
					*P_u8PinValue= GET_BIT(PIND,Copy_u8PinNumber);
    18c0:	e0 e3       	ldi	r30, 0x30	; 48
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	28 2f       	mov	r18, r24
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	88 2f       	mov	r24, r24
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	a9 01       	movw	r20, r18
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <MDIO_Error_State_GetPinValue+0x106>
    18d4:	55 95       	asr	r21
    18d6:	47 95       	ror	r20
    18d8:	8a 95       	dec	r24
    18da:	e2 f7       	brpl	.-8      	; 0x18d4 <MDIO_Error_State_GetPinValue+0x102>
    18dc:	ca 01       	movw	r24, r20
    18de:	81 70       	andi	r24, 0x01	; 1
    18e0:	ec 81       	ldd	r30, Y+4	; 0x04
    18e2:	fd 81       	ldd	r31, Y+5	; 0x05
    18e4:	80 83       	st	Z, r24
    18e6:	03 c0       	rjmp	.+6      	; 0x18ee <MDIO_Error_State_GetPinValue+0x11c>
					break;
				default:
					LOC_Error_State_ReturnState = NOK;
    18e8:	19 82       	std	Y+1, r1	; 0x01
    18ea:	01 c0       	rjmp	.+2      	; 0x18ee <MDIO_Error_State_GetPinValue+0x11c>
					break ;
				}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
    18ec:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_Error_State_ReturnState ;
    18ee:	89 81       	ldd	r24, Y+1	; 0x01

}
    18f0:	27 96       	adiw	r28, 0x07	; 7
    18f2:	0f b6       	in	r0, 0x3f	; 63
    18f4:	f8 94       	cli
    18f6:	de bf       	out	0x3e, r29	; 62
    18f8:	0f be       	out	0x3f, r0	; 63
    18fa:	cd bf       	out	0x3d, r28	; 61
    18fc:	cf 91       	pop	r28
    18fe:	df 91       	pop	r29
    1900:	08 95       	ret

00001902 <MDIO_Error_State_SetNippleValue>:

/*Set Nipple Direction Function */

/*Set Nipple Values Function */
Error_State MDIO_Error_State_SetNippleValue(u8 Copy_u8PinStart,u8 Copy_u8PortNumber,u8 Copy_u8Value)
{
    1902:	df 93       	push	r29
    1904:	cf 93       	push	r28
    1906:	00 d0       	rcall	.+0      	; 0x1908 <MDIO_Error_State_SetNippleValue+0x6>
    1908:	00 d0       	rcall	.+0      	; 0x190a <MDIO_Error_State_SetNippleValue+0x8>
    190a:	00 d0       	rcall	.+0      	; 0x190c <MDIO_Error_State_SetNippleValue+0xa>
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
    1910:	8a 83       	std	Y+2, r24	; 0x02
    1912:	6b 83       	std	Y+3, r22	; 0x03
    1914:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState=OK;
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinStart<=4)
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	85 30       	cpi	r24, 0x05	; 5
    191e:	08 f0       	brcs	.+2      	; 0x1922 <MDIO_Error_State_SetNippleValue+0x20>
    1920:	c9 c0       	rjmp	.+402    	; 0x1ab4 <MDIO_Error_State_SetNippleValue+0x1b2>
	{
		switch(Copy_u8PortNumber)
    1922:	8b 81       	ldd	r24, Y+3	; 0x03
    1924:	28 2f       	mov	r18, r24
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	3e 83       	std	Y+6, r19	; 0x06
    192a:	2d 83       	std	Y+5, r18	; 0x05
    192c:	6d 81       	ldd	r22, Y+5	; 0x05
    192e:	7e 81       	ldd	r23, Y+6	; 0x06
    1930:	61 30       	cpi	r22, 0x01	; 1
    1932:	71 05       	cpc	r23, r1
    1934:	09 f4       	brne	.+2      	; 0x1938 <MDIO_Error_State_SetNippleValue+0x36>
    1936:	41 c0       	rjmp	.+130    	; 0x19ba <MDIO_Error_State_SetNippleValue+0xb8>
    1938:	8d 81       	ldd	r24, Y+5	; 0x05
    193a:	9e 81       	ldd	r25, Y+6	; 0x06
    193c:	82 30       	cpi	r24, 0x02	; 2
    193e:	91 05       	cpc	r25, r1
    1940:	34 f4       	brge	.+12     	; 0x194e <MDIO_Error_State_SetNippleValue+0x4c>
    1942:	2d 81       	ldd	r18, Y+5	; 0x05
    1944:	3e 81       	ldd	r19, Y+6	; 0x06
    1946:	21 15       	cp	r18, r1
    1948:	31 05       	cpc	r19, r1
    194a:	71 f0       	breq	.+28     	; 0x1968 <MDIO_Error_State_SetNippleValue+0x66>
    194c:	b1 c0       	rjmp	.+354    	; 0x1ab0 <MDIO_Error_State_SetNippleValue+0x1ae>
    194e:	6d 81       	ldd	r22, Y+5	; 0x05
    1950:	7e 81       	ldd	r23, Y+6	; 0x06
    1952:	62 30       	cpi	r22, 0x02	; 2
    1954:	71 05       	cpc	r23, r1
    1956:	09 f4       	brne	.+2      	; 0x195a <MDIO_Error_State_SetNippleValue+0x58>
    1958:	59 c0       	rjmp	.+178    	; 0x1a0c <MDIO_Error_State_SetNippleValue+0x10a>
    195a:	8d 81       	ldd	r24, Y+5	; 0x05
    195c:	9e 81       	ldd	r25, Y+6	; 0x06
    195e:	83 30       	cpi	r24, 0x03	; 3
    1960:	91 05       	cpc	r25, r1
    1962:	09 f4       	brne	.+2      	; 0x1966 <MDIO_Error_State_SetNippleValue+0x64>
    1964:	7c c0       	rjmp	.+248    	; 0x1a5e <MDIO_Error_State_SetNippleValue+0x15c>
    1966:	a4 c0       	rjmp	.+328    	; 0x1ab0 <MDIO_Error_State_SetNippleValue+0x1ae>
		{
		case MDIO_PORTA:
			PORTA&=(~(0x0F<<Copy_u8PinStart));
    1968:	ab e3       	ldi	r26, 0x3B	; 59
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	eb e3       	ldi	r30, 0x3B	; 59
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	48 2f       	mov	r20, r24
    1974:	8a 81       	ldd	r24, Y+2	; 0x02
    1976:	28 2f       	mov	r18, r24
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	8f e0       	ldi	r24, 0x0F	; 15
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <MDIO_Error_State_SetNippleValue+0x82>
    1980:	88 0f       	add	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	2a 95       	dec	r18
    1986:	e2 f7       	brpl	.-8      	; 0x1980 <MDIO_Error_State_SetNippleValue+0x7e>
    1988:	80 95       	com	r24
    198a:	84 23       	and	r24, r20
    198c:	8c 93       	st	X, r24
			PORTA|=(Copy_u8Value<<Copy_u8PinStart);
    198e:	ab e3       	ldi	r26, 0x3B	; 59
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	eb e3       	ldi	r30, 0x3B	; 59
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	48 2f       	mov	r20, r24
    199a:	8c 81       	ldd	r24, Y+4	; 0x04
    199c:	28 2f       	mov	r18, r24
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	8a 81       	ldd	r24, Y+2	; 0x02
    19a2:	88 2f       	mov	r24, r24
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	b9 01       	movw	r22, r18
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <MDIO_Error_State_SetNippleValue+0xac>
    19aa:	66 0f       	add	r22, r22
    19ac:	77 1f       	adc	r23, r23
    19ae:	8a 95       	dec	r24
    19b0:	e2 f7       	brpl	.-8      	; 0x19aa <MDIO_Error_State_SetNippleValue+0xa8>
    19b2:	cb 01       	movw	r24, r22
    19b4:	84 2b       	or	r24, r20
    19b6:	8c 93       	st	X, r24
    19b8:	7e c0       	rjmp	.+252    	; 0x1ab6 <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTB:
			PORTB&=(~(0x0F<<Copy_u8PinStart));
    19ba:	a8 e3       	ldi	r26, 0x38	; 56
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	e8 e3       	ldi	r30, 0x38	; 56
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	48 2f       	mov	r20, r24
    19c6:	8a 81       	ldd	r24, Y+2	; 0x02
    19c8:	28 2f       	mov	r18, r24
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	8f e0       	ldi	r24, 0x0F	; 15
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	02 c0       	rjmp	.+4      	; 0x19d6 <MDIO_Error_State_SetNippleValue+0xd4>
    19d2:	88 0f       	add	r24, r24
    19d4:	99 1f       	adc	r25, r25
    19d6:	2a 95       	dec	r18
    19d8:	e2 f7       	brpl	.-8      	; 0x19d2 <MDIO_Error_State_SetNippleValue+0xd0>
    19da:	80 95       	com	r24
    19dc:	84 23       	and	r24, r20
    19de:	8c 93       	st	X, r24
			PORTB|=(Copy_u8Value<<Copy_u8PinStart);
    19e0:	a8 e3       	ldi	r26, 0x38	; 56
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	e8 e3       	ldi	r30, 0x38	; 56
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	48 2f       	mov	r20, r24
    19ec:	8c 81       	ldd	r24, Y+4	; 0x04
    19ee:	28 2f       	mov	r18, r24
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	8a 81       	ldd	r24, Y+2	; 0x02
    19f4:	88 2f       	mov	r24, r24
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	b9 01       	movw	r22, r18
    19fa:	02 c0       	rjmp	.+4      	; 0x1a00 <MDIO_Error_State_SetNippleValue+0xfe>
    19fc:	66 0f       	add	r22, r22
    19fe:	77 1f       	adc	r23, r23
    1a00:	8a 95       	dec	r24
    1a02:	e2 f7       	brpl	.-8      	; 0x19fc <MDIO_Error_State_SetNippleValue+0xfa>
    1a04:	cb 01       	movw	r24, r22
    1a06:	84 2b       	or	r24, r20
    1a08:	8c 93       	st	X, r24
    1a0a:	55 c0       	rjmp	.+170    	; 0x1ab6 <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTC:
			PORTC&=(~(0x0F<<Copy_u8PinStart));
    1a0c:	a5 e3       	ldi	r26, 0x35	; 53
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	e5 e3       	ldi	r30, 0x35	; 53
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	48 2f       	mov	r20, r24
    1a18:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1a:	28 2f       	mov	r18, r24
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	8f e0       	ldi	r24, 0x0F	; 15
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	02 c0       	rjmp	.+4      	; 0x1a28 <MDIO_Error_State_SetNippleValue+0x126>
    1a24:	88 0f       	add	r24, r24
    1a26:	99 1f       	adc	r25, r25
    1a28:	2a 95       	dec	r18
    1a2a:	e2 f7       	brpl	.-8      	; 0x1a24 <MDIO_Error_State_SetNippleValue+0x122>
    1a2c:	80 95       	com	r24
    1a2e:	84 23       	and	r24, r20
    1a30:	8c 93       	st	X, r24
			PORTC|=(Copy_u8Value<<Copy_u8PinStart);
    1a32:	a5 e3       	ldi	r26, 0x35	; 53
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	e5 e3       	ldi	r30, 0x35	; 53
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	48 2f       	mov	r20, r24
    1a3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a40:	28 2f       	mov	r18, r24
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	8a 81       	ldd	r24, Y+2	; 0x02
    1a46:	88 2f       	mov	r24, r24
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	b9 01       	movw	r22, r18
    1a4c:	02 c0       	rjmp	.+4      	; 0x1a52 <MDIO_Error_State_SetNippleValue+0x150>
    1a4e:	66 0f       	add	r22, r22
    1a50:	77 1f       	adc	r23, r23
    1a52:	8a 95       	dec	r24
    1a54:	e2 f7       	brpl	.-8      	; 0x1a4e <MDIO_Error_State_SetNippleValue+0x14c>
    1a56:	cb 01       	movw	r24, r22
    1a58:	84 2b       	or	r24, r20
    1a5a:	8c 93       	st	X, r24
    1a5c:	2c c0       	rjmp	.+88     	; 0x1ab6 <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTD:

			PORTD&=(~(0x0F<<Copy_u8PinStart));
    1a5e:	a2 e3       	ldi	r26, 0x32	; 50
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	e2 e3       	ldi	r30, 0x32	; 50
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	48 2f       	mov	r20, r24
    1a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6c:	28 2f       	mov	r18, r24
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	8f e0       	ldi	r24, 0x0F	; 15
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	02 c0       	rjmp	.+4      	; 0x1a7a <MDIO_Error_State_SetNippleValue+0x178>
    1a76:	88 0f       	add	r24, r24
    1a78:	99 1f       	adc	r25, r25
    1a7a:	2a 95       	dec	r18
    1a7c:	e2 f7       	brpl	.-8      	; 0x1a76 <MDIO_Error_State_SetNippleValue+0x174>
    1a7e:	80 95       	com	r24
    1a80:	84 23       	and	r24, r20
    1a82:	8c 93       	st	X, r24
			PORTD|=(Copy_u8Value<<Copy_u8PinStart);
    1a84:	a2 e3       	ldi	r26, 0x32	; 50
    1a86:	b0 e0       	ldi	r27, 0x00	; 0
    1a88:	e2 e3       	ldi	r30, 0x32	; 50
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	48 2f       	mov	r20, r24
    1a90:	8c 81       	ldd	r24, Y+4	; 0x04
    1a92:	28 2f       	mov	r18, r24
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	8a 81       	ldd	r24, Y+2	; 0x02
    1a98:	88 2f       	mov	r24, r24
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	b9 01       	movw	r22, r18
    1a9e:	02 c0       	rjmp	.+4      	; 0x1aa4 <MDIO_Error_State_SetNippleValue+0x1a2>
    1aa0:	66 0f       	add	r22, r22
    1aa2:	77 1f       	adc	r23, r23
    1aa4:	8a 95       	dec	r24
    1aa6:	e2 f7       	brpl	.-8      	; 0x1aa0 <MDIO_Error_State_SetNippleValue+0x19e>
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	84 2b       	or	r24, r20
    1aac:	8c 93       	st	X, r24
    1aae:	03 c0       	rjmp	.+6      	; 0x1ab6 <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
    1ab0:	19 82       	std	Y+1, r1	; 0x01
    1ab2:	01 c0       	rjmp	.+2      	; 0x1ab6 <MDIO_Error_State_SetNippleValue+0x1b4>
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
    1ab4:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState;
    1ab6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ab8:	26 96       	adiw	r28, 0x06	; 6
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	f8 94       	cli
    1abe:	de bf       	out	0x3e, r29	; 62
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	cd bf       	out	0x3d, r28	; 61
    1ac4:	cf 91       	pop	r28
    1ac6:	df 91       	pop	r29
    1ac8:	08 95       	ret

00001aca <MDIO_VidActivePullUP>:

/*Active Pull Up Resistor Function */
void  MDIO_VidActivePullUP(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber)
{
    1aca:	df 93       	push	r29
    1acc:	cf 93       	push	r28
    1ace:	00 d0       	rcall	.+0      	; 0x1ad0 <MDIO_VidActivePullUP+0x6>
    1ad0:	cd b7       	in	r28, 0x3d	; 61
    1ad2:	de b7       	in	r29, 0x3e	; 62
    1ad4:	89 83       	std	Y+1, r24	; 0x01
    1ad6:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_Error_State_SetPinDirection(Copy_u8PinNumber,Copy_u8PortNumber,PIN_INPUT);
    1ad8:	89 81       	ldd	r24, Y+1	; 0x01
    1ada:	6a 81       	ldd	r22, Y+2	; 0x02
    1adc:	40 e0       	ldi	r20, 0x00	; 0
    1ade:	0e 94 4b 09 	call	0x1296	; 0x1296 <MDIO_Error_State_SetPinDirection>
    MDIO_Error_State_SetPinValue( Copy_u8PinNumber, Copy_u8PortNumber,PIN_HIGH);
    1ae2:	89 81       	ldd	r24, Y+1	; 0x01
    1ae4:	6a 81       	ldd	r22, Y+2	; 0x02
    1ae6:	41 e0       	ldi	r20, 0x01	; 1
    1ae8:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>

}
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	cf 91       	pop	r28
    1af2:	df 91       	pop	r29
    1af4:	08 95       	ret

00001af6 <MADC_VidInit>:
#include"MADC_Private.h"
#include"MADC_Interface.h"

/*ADC Initialization*/
void MADC_VidInit(void)
{
    1af6:	df 93       	push	r29
    1af8:	cf 93       	push	r28
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
	/*Select Reference Voltage*/
#if MADC_SET_REFERENCEVOLATGE == MADC_AVCC_REFERENCEVOLATGE
	SET_BIT(ADMUX,6);
    1afe:	a7 e2       	ldi	r26, 0x27	; 39
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	e7 e2       	ldi	r30, 0x27	; 39
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	80 64       	ori	r24, 0x40	; 64
    1b0a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,7);
    1b0c:	a7 e2       	ldi	r26, 0x27	; 39
    1b0e:	b0 e0       	ldi	r27, 0x00	; 0
    1b10:	e7 e2       	ldi	r30, 0x27	; 39
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	80 81       	ld	r24, Z
    1b16:	8f 77       	andi	r24, 0x7F	; 127
    1b18:	8c 93       	st	X, r24
	SET_BIT(ADMUX,7);
#else
#error"ADC Reference Voltage Option I s not valid.... "
#endif
/*Set Prescaler*/
ADCSRA&=MADC_BIT_MASKING_PRESCALER;
    1b1a:	a6 e2       	ldi	r26, 0x26	; 38
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	e6 e2       	ldi	r30, 0x26	; 38
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	88 7f       	andi	r24, 0xF8	; 248
    1b26:	8c 93       	st	X, r24
ADCSRA|=MADC_SET_PRESCALER;
    1b28:	a6 e2       	ldi	r26, 0x26	; 38
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	e6 e2       	ldi	r30, 0x26	; 38
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	81 60       	ori	r24, 0x01	; 1
    1b34:	8c 93       	st	X, r24

#if MADC_SET_ADJUST == MADC_LEFT_ADJUST
	SET_BIT(ADMUX,5);
#elif MADC_SET_ADJUST == MADC_RIGHT_ADJUST
	CLR_BIT(ADMUX,5);
    1b36:	a7 e2       	ldi	r26, 0x27	; 39
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	e7 e2       	ldi	r30, 0x27	; 39
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	8f 7d       	andi	r24, 0xDF	; 223
    1b42:	8c 93       	st	X, r24
#else
#error"ADC Left adjust option is not valid...."
#endif
/*Enable To ADC*/
SET_BIT(ADCSRA,7);
    1b44:	a6 e2       	ldi	r26, 0x26	; 38
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	e6 e2       	ldi	r30, 0x26	; 38
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	80 68       	ori	r24, 0x80	; 128
    1b50:	8c 93       	st	X, r24
}
    1b52:	cf 91       	pop	r28
    1b54:	df 91       	pop	r29
    1b56:	08 95       	ret

00001b58 <MADC_u16ADC_StartConversion>:
/*ADC Start Conversion-->Polling , Return ADC Value*/
u16 MADC_u16ADC_StartConversion(u8 Copy_u8Channel)
{
    1b58:	df 93       	push	r29
    1b5a:	cf 93       	push	r28
    1b5c:	0f 92       	push	r0
    1b5e:	cd b7       	in	r28, 0x3d	; 61
    1b60:	de b7       	in	r29, 0x3e	; 62
    1b62:	89 83       	std	Y+1, r24	; 0x01
	/*Select Channel*/
	Copy_u8Channel&=MADC_BIT_MASKING_CHANNEL;
    1b64:	89 81       	ldd	r24, Y+1	; 0x01
    1b66:	87 70       	andi	r24, 0x07	; 7
    1b68:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=MADC_BIT_MASKING_REG_CHANNEL;
    1b6a:	a7 e2       	ldi	r26, 0x27	; 39
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	e7 e2       	ldi	r30, 0x27	; 39
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	80 7e       	andi	r24, 0xE0	; 224
    1b76:	8c 93       	st	X, r24
	ADMUX|=Copy_u8Channel;
    1b78:	a7 e2       	ldi	r26, 0x27	; 39
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	e7 e2       	ldi	r30, 0x27	; 39
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	90 81       	ld	r25, Z
    1b82:	89 81       	ldd	r24, Y+1	; 0x01
    1b84:	89 2b       	or	r24, r25
    1b86:	8c 93       	st	X, r24
   /*send Start Conversion*/
	SET_BIT(ADCSRA,6);
    1b88:	a6 e2       	ldi	r26, 0x26	; 38
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	e6 e2       	ldi	r30, 0x26	; 38
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	80 64       	ori	r24, 0x40	; 64
    1b94:	8c 93       	st	X, r24
	/*Wait On ADC Conversion Completed Flag is set to one */
	while(GET_BIT(ADCSRA,4)==0);
    1b96:	e6 e2       	ldi	r30, 0x26	; 38
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	80 81       	ld	r24, Z
    1b9c:	82 95       	swap	r24
    1b9e:	8f 70       	andi	r24, 0x0F	; 15
    1ba0:	88 2f       	mov	r24, r24
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	81 70       	andi	r24, 0x01	; 1
    1ba6:	90 70       	andi	r25, 0x00	; 0
    1ba8:	00 97       	sbiw	r24, 0x00	; 0
    1baa:	a9 f3       	breq	.-22     	; 0x1b96 <MADC_u16ADC_StartConversion+0x3e>

	return ADC;
    1bac:	e4 e2       	ldi	r30, 0x24	; 36
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	91 81       	ldd	r25, Z+1	; 0x01
}
    1bb4:	0f 90       	pop	r0
    1bb6:	cf 91       	pop	r28
    1bb8:	df 91       	pop	r29
    1bba:	08 95       	ret

00001bbc <GIE_voidEnable>:

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void)
{
    1bbc:	df 93       	push	r29
    1bbe:	cf 93       	push	r28
    1bc0:	cd b7       	in	r28, 0x3d	; 61
    1bc2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    1bc4:	af e5       	ldi	r26, 0x5F	; 95
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	ef e5       	ldi	r30, 0x5F	; 95
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	80 68       	ori	r24, 0x80	; 128
    1bd0:	8c 93       	st	X, r24
}
    1bd2:	cf 91       	pop	r28
    1bd4:	df 91       	pop	r29
    1bd6:	08 95       	ret

00001bd8 <GIE_voidDisable>:

void GIE_voidDisable(void)
{
    1bd8:	df 93       	push	r29
    1bda:	cf 93       	push	r28
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    1be0:	af e5       	ldi	r26, 0x5F	; 95
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	ef e5       	ldi	r30, 0x5F	; 95
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	8f 77       	andi	r24, 0x7F	; 127
    1bec:	8c 93       	st	X, r24
}
    1bee:	cf 91       	pop	r28
    1bf0:	df 91       	pop	r29
    1bf2:	08 95       	ret

00001bf4 <EXTI_voidInt0SenseControl>:
void (*EXTI_pvInt0PtrFunc)(void) = NULL;
void (*EXTI_pvInt1PtrFunc)(void) = NULL;
void (*EXTI_pvInt2PtrFunc)(void) = NULL;

void EXTI_voidInt0SenseControl(void)
{
    1bf4:	df 93       	push	r29
    1bf6:	cf 93       	push	r28
    1bf8:	cd b7       	in	r28, 0x3d	; 61
    1bfa:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(MCUCR,MCUCR_ISC01);
	CLR_BIT(MCUCR,MCUCR_ISC00);

#elif INT0_SENSE_CONTROL == EXTI_RISING_EDGE

	SET_BIT(MCUCR,MCUCR_ISC01);
    1bfc:	a5 e5       	ldi	r26, 0x55	; 85
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	e5 e5       	ldi	r30, 0x55	; 85
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	82 60       	ori	r24, 0x02	; 2
    1c08:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC00);
    1c0a:	a5 e5       	ldi	r26, 0x55	; 85
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	e5 e5       	ldi	r30, 0x55	; 85
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	81 60       	ori	r24, 0x01	; 1
    1c16:	8c 93       	st	X, r24

#else
#error "Wrong INT0_SENSE_CONTROL Option"
#endif

}
    1c18:	cf 91       	pop	r28
    1c1a:	df 91       	pop	r29
    1c1c:	08 95       	ret

00001c1e <EXTI_voidInt1SenseControl>:

void EXTI_voidInt1SenseControl(void)
{
    1c1e:	df 93       	push	r29
    1c20:	cf 93       	push	r28
    1c22:	cd b7       	in	r28, 0x3d	; 61
    1c24:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,MCUCR_ISC11);
	SET_BIT(MCUCR,MCUCR_ISC10);

#elif INT1_SENSE_CONTROL == EXTI_FALLING_EDGE

	SET_BIT(MCUCR,MCUCR_ISC11);
    1c26:	a5 e5       	ldi	r26, 0x55	; 85
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	e5 e5       	ldi	r30, 0x55	; 85
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	88 60       	ori	r24, 0x08	; 8
    1c32:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC10);
    1c34:	a5 e5       	ldi	r26, 0x55	; 85
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	e5 e5       	ldi	r30, 0x55	; 85
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	8b 7f       	andi	r24, 0xFB	; 251
    1c40:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC10);

#else
#error "Wrong INT1_SENSE_CONTROL Option"
#endif
}
    1c42:	cf 91       	pop	r28
    1c44:	df 91       	pop	r29
    1c46:	08 95       	ret

00001c48 <EXTI_voidInt2SenseControl>:
void EXTI_voidInt2SenseControl(void)
{
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
#if INT2_SENSE_CONTROL == EXTI_FALLING_EDGE

	CLR_BIT(MCUCSR,MCUCSR_INT2);
    1c50:	a4 e5       	ldi	r26, 0x54	; 84
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	e4 e5       	ldi	r30, 0x54	; 84
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	8f 7b       	andi	r24, 0xBF	; 191
    1c5c:	8c 93       	st	X, r24
	SET_BIT(MCUCSR,MCUCSR_INT2);

#else
#error "Wrong INT2_SENSE_CONTROL Option"
#endif
}
    1c5e:	cf 91       	pop	r28
    1c60:	df 91       	pop	r29
    1c62:	08 95       	ret

00001c64 <EXTI_u8IntEnable>:
u8 EXTI_u8IntEnable(u8 Copy_u8IntNumber)
{
    1c64:	df 93       	push	r29
    1c66:	cf 93       	push	r28
    1c68:	00 d0       	rcall	.+0      	; 0x1c6a <EXTI_u8IntEnable+0x6>
    1c6a:	00 d0       	rcall	.+0      	; 0x1c6c <EXTI_u8IntEnable+0x8>
    1c6c:	cd b7       	in	r28, 0x3d	; 61
    1c6e:	de b7       	in	r29, 0x3e	; 62
    1c70:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	89 83       	std	Y+1, r24	; 0x01

	switch (Copy_u8IntNumber)
    1c76:	8a 81       	ldd	r24, Y+2	; 0x02
    1c78:	28 2f       	mov	r18, r24
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	3c 83       	std	Y+4, r19	; 0x04
    1c7e:	2b 83       	std	Y+3, r18	; 0x03
    1c80:	8b 81       	ldd	r24, Y+3	; 0x03
    1c82:	9c 81       	ldd	r25, Y+4	; 0x04
    1c84:	81 30       	cpi	r24, 0x01	; 1
    1c86:	91 05       	cpc	r25, r1
    1c88:	89 f0       	breq	.+34     	; 0x1cac <EXTI_u8IntEnable+0x48>
    1c8a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c8c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c8e:	22 30       	cpi	r18, 0x02	; 2
    1c90:	31 05       	cpc	r19, r1
    1c92:	a1 f0       	breq	.+40     	; 0x1cbc <EXTI_u8IntEnable+0x58>
    1c94:	8b 81       	ldd	r24, Y+3	; 0x03
    1c96:	9c 81       	ldd	r25, Y+4	; 0x04
    1c98:	00 97       	sbiw	r24, 0x00	; 0
    1c9a:	c1 f4       	brne	.+48     	; 0x1ccc <EXTI_u8IntEnable+0x68>
	{
	case EXTI_INT0: SET_BIT(GICR,GICR_INT0);
    1c9c:	ab e5       	ldi	r26, 0x5B	; 91
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	eb e5       	ldi	r30, 0x5B	; 91
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	80 64       	ori	r24, 0x40	; 64
    1ca8:	8c 93       	st	X, r24
    1caa:	11 c0       	rjmp	.+34     	; 0x1cce <EXTI_u8IntEnable+0x6a>
	break;
	case EXTI_INT1: SET_BIT(GICR,GICR_INT1);
    1cac:	ab e5       	ldi	r26, 0x5B	; 91
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	eb e5       	ldi	r30, 0x5B	; 91
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	80 68       	ori	r24, 0x80	; 128
    1cb8:	8c 93       	st	X, r24
    1cba:	09 c0       	rjmp	.+18     	; 0x1cce <EXTI_u8IntEnable+0x6a>
	break;
	case EXTI_INT2: SET_BIT(GICR,GICR_INT2);
    1cbc:	ab e5       	ldi	r26, 0x5B	; 91
    1cbe:	b0 e0       	ldi	r27, 0x00	; 0
    1cc0:	eb e5       	ldi	r30, 0x5B	; 91
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	80 62       	ori	r24, 0x20	; 32
    1cc8:	8c 93       	st	X, r24
    1cca:	01 c0       	rjmp	.+2      	; 0x1cce <EXTI_u8IntEnable+0x6a>
	break;
	default  : Local_u8ErrorState = NOK ;
    1ccc:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    1cce:	89 81       	ldd	r24, Y+1	; 0x01

}
    1cd0:	0f 90       	pop	r0
    1cd2:	0f 90       	pop	r0
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	cf 91       	pop	r28
    1cda:	df 91       	pop	r29
    1cdc:	08 95       	ret

00001cde <EXTI_u8IntDisable>:
u8 EXTI_u8IntDisable(u8 Copy_u8IntNumber)
{
    1cde:	df 93       	push	r29
    1ce0:	cf 93       	push	r28
    1ce2:	00 d0       	rcall	.+0      	; 0x1ce4 <EXTI_u8IntDisable+0x6>
    1ce4:	00 d0       	rcall	.+0      	; 0x1ce6 <EXTI_u8IntDisable+0x8>
    1ce6:	cd b7       	in	r28, 0x3d	; 61
    1ce8:	de b7       	in	r29, 0x3e	; 62
    1cea:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	89 83       	std	Y+1, r24	; 0x01

	switch (Copy_u8IntNumber)
    1cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf2:	28 2f       	mov	r18, r24
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	3c 83       	std	Y+4, r19	; 0x04
    1cf8:	2b 83       	std	Y+3, r18	; 0x03
    1cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfe:	81 30       	cpi	r24, 0x01	; 1
    1d00:	91 05       	cpc	r25, r1
    1d02:	89 f0       	breq	.+34     	; 0x1d26 <EXTI_u8IntDisable+0x48>
    1d04:	2b 81       	ldd	r18, Y+3	; 0x03
    1d06:	3c 81       	ldd	r19, Y+4	; 0x04
    1d08:	22 30       	cpi	r18, 0x02	; 2
    1d0a:	31 05       	cpc	r19, r1
    1d0c:	a1 f0       	breq	.+40     	; 0x1d36 <EXTI_u8IntDisable+0x58>
    1d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d10:	9c 81       	ldd	r25, Y+4	; 0x04
    1d12:	00 97       	sbiw	r24, 0x00	; 0
    1d14:	c1 f4       	brne	.+48     	; 0x1d46 <EXTI_u8IntDisable+0x68>
	{
	case EXTI_INT0: CLR_BIT(GICR,GICR_INT0);
    1d16:	ab e5       	ldi	r26, 0x5B	; 91
    1d18:	b0 e0       	ldi	r27, 0x00	; 0
    1d1a:	eb e5       	ldi	r30, 0x5B	; 91
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	8f 7b       	andi	r24, 0xBF	; 191
    1d22:	8c 93       	st	X, r24
    1d24:	11 c0       	rjmp	.+34     	; 0x1d48 <EXTI_u8IntDisable+0x6a>
	break;
	case EXTI_INT1: CLR_BIT(GICR,GICR_INT1);
    1d26:	ab e5       	ldi	r26, 0x5B	; 91
    1d28:	b0 e0       	ldi	r27, 0x00	; 0
    1d2a:	eb e5       	ldi	r30, 0x5B	; 91
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	8f 77       	andi	r24, 0x7F	; 127
    1d32:	8c 93       	st	X, r24
    1d34:	09 c0       	rjmp	.+18     	; 0x1d48 <EXTI_u8IntDisable+0x6a>
	break;
	case EXTI_INT2: CLR_BIT(GICR,GICR_INT2);
    1d36:	ab e5       	ldi	r26, 0x5B	; 91
    1d38:	b0 e0       	ldi	r27, 0x00	; 0
    1d3a:	eb e5       	ldi	r30, 0x5B	; 91
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	80 81       	ld	r24, Z
    1d40:	8f 7d       	andi	r24, 0xDF	; 223
    1d42:	8c 93       	st	X, r24
    1d44:	01 c0       	rjmp	.+2      	; 0x1d48 <EXTI_u8IntDisable+0x6a>
	break;
	default  : Local_u8ErrorState = NOK ;
    1d46:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    1d48:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d4a:	0f 90       	pop	r0
    1d4c:	0f 90       	pop	r0
    1d4e:	0f 90       	pop	r0
    1d50:	0f 90       	pop	r0
    1d52:	cf 91       	pop	r28
    1d54:	df 91       	pop	r29
    1d56:	08 95       	ret

00001d58 <EXTI_u8SetSenseControl>:
u8 EXTI_u8SetSenseControl(u8 Copy_u8IntNumber , u8 Copy_u8Sense)
{
    1d58:	df 93       	push	r29
    1d5a:	cf 93       	push	r28
    1d5c:	cd b7       	in	r28, 0x3d	; 61
    1d5e:	de b7       	in	r29, 0x3e	; 62
    1d60:	2d 97       	sbiw	r28, 0x0d	; 13
    1d62:	0f b6       	in	r0, 0x3f	; 63
    1d64:	f8 94       	cli
    1d66:	de bf       	out	0x3e, r29	; 62
    1d68:	0f be       	out	0x3f, r0	; 63
    1d6a:	cd bf       	out	0x3d, r28	; 61
    1d6c:	8a 83       	std	Y+2, r24	; 0x02
    1d6e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = OK;
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8Sense)
    1d74:	8b 81       	ldd	r24, Y+3	; 0x03
    1d76:	28 2f       	mov	r18, r24
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	3d 87       	std	Y+13, r19	; 0x0d
    1d7c:	2c 87       	std	Y+12, r18	; 0x0c
    1d7e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d80:	9d 85       	ldd	r25, Y+13	; 0x0d
    1d82:	82 30       	cpi	r24, 0x02	; 2
    1d84:	91 05       	cpc	r25, r1
    1d86:	09 f4       	brne	.+2      	; 0x1d8a <EXTI_u8SetSenseControl+0x32>
    1d88:	4e c0       	rjmp	.+156    	; 0x1e26 <EXTI_u8SetSenseControl+0xce>
    1d8a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d8c:	3d 85       	ldd	r19, Y+13	; 0x0d
    1d8e:	23 30       	cpi	r18, 0x03	; 3
    1d90:	31 05       	cpc	r19, r1
    1d92:	34 f4       	brge	.+12     	; 0x1da0 <EXTI_u8SetSenseControl+0x48>
    1d94:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d96:	9d 85       	ldd	r25, Y+13	; 0x0d
    1d98:	81 30       	cpi	r24, 0x01	; 1
    1d9a:	91 05       	cpc	r25, r1
    1d9c:	71 f0       	breq	.+28     	; 0x1dba <EXTI_u8SetSenseControl+0x62>
    1d9e:	ef c0       	rjmp	.+478    	; 0x1f7e <EXTI_u8SetSenseControl+0x226>
    1da0:	2c 85       	ldd	r18, Y+12	; 0x0c
    1da2:	3d 85       	ldd	r19, Y+13	; 0x0d
    1da4:	23 30       	cpi	r18, 0x03	; 3
    1da6:	31 05       	cpc	r19, r1
    1da8:	09 f4       	brne	.+2      	; 0x1dac <EXTI_u8SetSenseControl+0x54>
    1daa:	73 c0       	rjmp	.+230    	; 0x1e92 <EXTI_u8SetSenseControl+0x13a>
    1dac:	8c 85       	ldd	r24, Y+12	; 0x0c
    1dae:	9d 85       	ldd	r25, Y+13	; 0x0d
    1db0:	84 30       	cpi	r24, 0x04	; 4
    1db2:	91 05       	cpc	r25, r1
    1db4:	09 f4       	brne	.+2      	; 0x1db8 <EXTI_u8SetSenseControl+0x60>
    1db6:	a8 c0       	rjmp	.+336    	; 0x1f08 <EXTI_u8SetSenseControl+0x1b0>
    1db8:	e2 c0       	rjmp	.+452    	; 0x1f7e <EXTI_u8SetSenseControl+0x226>
	{
	case EXTI_LOW_LEVEL :
		switch (Copy_u8IntNumber)
    1dba:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbc:	28 2f       	mov	r18, r24
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	3b 87       	std	Y+11, r19	; 0x0b
    1dc2:	2a 87       	std	Y+10, r18	; 0x0a
    1dc4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dc6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1dc8:	81 30       	cpi	r24, 0x01	; 1
    1dca:	91 05       	cpc	r25, r1
    1dcc:	c1 f0       	breq	.+48     	; 0x1dfe <EXTI_u8SetSenseControl+0xa6>
    1dce:	2a 85       	ldd	r18, Y+10	; 0x0a
    1dd0:	3b 85       	ldd	r19, Y+11	; 0x0b
    1dd2:	22 30       	cpi	r18, 0x02	; 2
    1dd4:	31 05       	cpc	r19, r1
    1dd6:	11 f1       	breq	.+68     	; 0x1e1c <EXTI_u8SetSenseControl+0xc4>
    1dd8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dda:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ddc:	00 97       	sbiw	r24, 0x00	; 0
    1dde:	09 f5       	brne	.+66     	; 0x1e22 <EXTI_u8SetSenseControl+0xca>
            		{
            		case EXTI_INT0 :

            			CLR_BIT(MCUCR,MCUCR_ISC01);
    1de0:	a5 e5       	ldi	r26, 0x55	; 85
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	e5 e5       	ldi	r30, 0x55	; 85
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	8d 7f       	andi	r24, 0xFD	; 253
    1dec:	8c 93       	st	X, r24
            			CLR_BIT(MCUCR,MCUCR_ISC00);
    1dee:	a5 e5       	ldi	r26, 0x55	; 85
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	e5 e5       	ldi	r30, 0x55	; 85
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	8e 7f       	andi	r24, 0xFE	; 254
    1dfa:	8c 93       	st	X, r24
    1dfc:	c1 c0       	rjmp	.+386    	; 0x1f80 <EXTI_u8SetSenseControl+0x228>

            			break;
            		case EXTI_INT1 :

            			CLR_BIT(MCUCR,MCUCR_ISC11);
    1dfe:	a5 e5       	ldi	r26, 0x55	; 85
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	e5 e5       	ldi	r30, 0x55	; 85
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	80 81       	ld	r24, Z
    1e08:	87 7f       	andi	r24, 0xF7	; 247
    1e0a:	8c 93       	st	X, r24
            			CLR_BIT(MCUCR,MCUCR_ISC10);
    1e0c:	a5 e5       	ldi	r26, 0x55	; 85
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	e5 e5       	ldi	r30, 0x55	; 85
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	8b 7f       	andi	r24, 0xFB	; 251
    1e18:	8c 93       	st	X, r24
    1e1a:	b2 c0       	rjmp	.+356    	; 0x1f80 <EXTI_u8SetSenseControl+0x228>

            			break;
            		case EXTI_INT2 :

            			Local_u8ErrorState = 2 ;
    1e1c:	82 e0       	ldi	r24, 0x02	; 2
    1e1e:	89 83       	std	Y+1, r24	; 0x01
    1e20:	af c0       	rjmp	.+350    	; 0x1f80 <EXTI_u8SetSenseControl+0x228>

            			break;
            		default : Local_u8ErrorState = NOK ;
    1e22:	19 82       	std	Y+1, r1	; 0x01
    1e24:	ad c0       	rjmp	.+346    	; 0x1f80 <EXTI_u8SetSenseControl+0x228>
            		}
		break;
		case EXTI_ON_CHANGE :
			switch (Copy_u8IntNumber)
    1e26:	8a 81       	ldd	r24, Y+2	; 0x02
    1e28:	28 2f       	mov	r18, r24
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	39 87       	std	Y+9, r19	; 0x09
    1e2e:	28 87       	std	Y+8, r18	; 0x08
    1e30:	88 85       	ldd	r24, Y+8	; 0x08
    1e32:	99 85       	ldd	r25, Y+9	; 0x09
    1e34:	81 30       	cpi	r24, 0x01	; 1
    1e36:	91 05       	cpc	r25, r1
    1e38:	c1 f0       	breq	.+48     	; 0x1e6a <EXTI_u8SetSenseControl+0x112>
    1e3a:	28 85       	ldd	r18, Y+8	; 0x08
    1e3c:	39 85       	ldd	r19, Y+9	; 0x09
    1e3e:	22 30       	cpi	r18, 0x02	; 2
    1e40:	31 05       	cpc	r19, r1
    1e42:	11 f1       	breq	.+68     	; 0x1e88 <EXTI_u8SetSenseControl+0x130>
    1e44:	88 85       	ldd	r24, Y+8	; 0x08
    1e46:	99 85       	ldd	r25, Y+9	; 0x09
    1e48:	00 97       	sbiw	r24, 0x00	; 0
    1e4a:	09 f5       	brne	.+66     	; 0x1e8e <EXTI_u8SetSenseControl+0x136>
					{
					case EXTI_INT0 :

						CLR_BIT(MCUCR,MCUCR_ISC01);
    1e4c:	a5 e5       	ldi	r26, 0x55	; 85
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	e5 e5       	ldi	r30, 0x55	; 85
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	8d 7f       	andi	r24, 0xFD	; 253
    1e58:	8c 93       	st	X, r24
						SET_BIT(MCUCR,MCUCR_ISC00);
    1e5a:	a5 e5       	ldi	r26, 0x55	; 85
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	e5 e5       	ldi	r30, 0x55	; 85
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	81 60       	ori	r24, 0x01	; 1
    1e66:	8c 93       	st	X, r24
    1e68:	8b c0       	rjmp	.+278    	; 0x1f80 <EXTI_u8SetSenseControl+0x228>

						break;
					case EXTI_INT1 :

						CLR_BIT(MCUCR,MCUCR_ISC11);
    1e6a:	a5 e5       	ldi	r26, 0x55	; 85
    1e6c:	b0 e0       	ldi	r27, 0x00	; 0
    1e6e:	e5 e5       	ldi	r30, 0x55	; 85
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	80 81       	ld	r24, Z
    1e74:	87 7f       	andi	r24, 0xF7	; 247
    1e76:	8c 93       	st	X, r24
						SET_BIT(MCUCR,MCUCR_ISC10);
    1e78:	a5 e5       	ldi	r26, 0x55	; 85
    1e7a:	b0 e0       	ldi	r27, 0x00	; 0
    1e7c:	e5 e5       	ldi	r30, 0x55	; 85
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	80 81       	ld	r24, Z
    1e82:	84 60       	ori	r24, 0x04	; 4
    1e84:	8c 93       	st	X, r24
    1e86:	7c c0       	rjmp	.+248    	; 0x1f80 <EXTI_u8SetSenseControl+0x228>

						break;
					case EXTI_INT2 :

						Local_u8ErrorState = 2 ;
    1e88:	82 e0       	ldi	r24, 0x02	; 2
    1e8a:	89 83       	std	Y+1, r24	; 0x01
    1e8c:	79 c0       	rjmp	.+242    	; 0x1f80 <EXTI_u8SetSenseControl+0x228>

						break;
					default : Local_u8ErrorState = NOK ;
    1e8e:	19 82       	std	Y+1, r1	; 0x01
    1e90:	77 c0       	rjmp	.+238    	; 0x1f80 <EXTI_u8SetSenseControl+0x228>
					}
			break;
		case EXTI_FALLING_EDGE :
			switch (Copy_u8IntNumber)
    1e92:	8a 81       	ldd	r24, Y+2	; 0x02
    1e94:	28 2f       	mov	r18, r24
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	3f 83       	std	Y+7, r19	; 0x07
    1e9a:	2e 83       	std	Y+6, r18	; 0x06
    1e9c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e9e:	9f 81       	ldd	r25, Y+7	; 0x07
    1ea0:	81 30       	cpi	r24, 0x01	; 1
    1ea2:	91 05       	cpc	r25, r1
    1ea4:	c1 f0       	breq	.+48     	; 0x1ed6 <EXTI_u8SetSenseControl+0x17e>
    1ea6:	2e 81       	ldd	r18, Y+6	; 0x06
    1ea8:	3f 81       	ldd	r19, Y+7	; 0x07
    1eaa:	22 30       	cpi	r18, 0x02	; 2
    1eac:	31 05       	cpc	r19, r1
    1eae:	11 f1       	breq	.+68     	; 0x1ef4 <EXTI_u8SetSenseControl+0x19c>
    1eb0:	8e 81       	ldd	r24, Y+6	; 0x06
    1eb2:	9f 81       	ldd	r25, Y+7	; 0x07
    1eb4:	00 97       	sbiw	r24, 0x00	; 0
    1eb6:	31 f5       	brne	.+76     	; 0x1f04 <EXTI_u8SetSenseControl+0x1ac>
					{
					case EXTI_INT0 :

						SET_BIT(MCUCR,MCUCR_ISC01);
    1eb8:	a5 e5       	ldi	r26, 0x55	; 85
    1eba:	b0 e0       	ldi	r27, 0x00	; 0
    1ebc:	e5 e5       	ldi	r30, 0x55	; 85
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
    1ec2:	82 60       	ori	r24, 0x02	; 2
    1ec4:	8c 93       	st	X, r24
						CLR_BIT(MCUCR,MCUCR_ISC00);
    1ec6:	a5 e5       	ldi	r26, 0x55	; 85
    1ec8:	b0 e0       	ldi	r27, 0x00	; 0
    1eca:	e5 e5       	ldi	r30, 0x55	; 85
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	8e 7f       	andi	r24, 0xFE	; 254
    1ed2:	8c 93       	st	X, r24
    1ed4:	55 c0       	rjmp	.+170    	; 0x1f80 <EXTI_u8SetSenseControl+0x228>

						break;
					case EXTI_INT1 :

						SET_BIT(MCUCR,MCUCR_ISC11);
    1ed6:	a5 e5       	ldi	r26, 0x55	; 85
    1ed8:	b0 e0       	ldi	r27, 0x00	; 0
    1eda:	e5 e5       	ldi	r30, 0x55	; 85
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 81       	ld	r24, Z
    1ee0:	88 60       	ori	r24, 0x08	; 8
    1ee2:	8c 93       	st	X, r24
						CLR_BIT(MCUCR,MCUCR_ISC10);
    1ee4:	a5 e5       	ldi	r26, 0x55	; 85
    1ee6:	b0 e0       	ldi	r27, 0x00	; 0
    1ee8:	e5 e5       	ldi	r30, 0x55	; 85
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	80 81       	ld	r24, Z
    1eee:	8b 7f       	andi	r24, 0xFB	; 251
    1ef0:	8c 93       	st	X, r24
    1ef2:	46 c0       	rjmp	.+140    	; 0x1f80 <EXTI_u8SetSenseControl+0x228>

						break;
					case EXTI_INT2 :

						CLR_BIT(MCUCSR,MCUCSR_INT2);
    1ef4:	a4 e5       	ldi	r26, 0x54	; 84
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	e4 e5       	ldi	r30, 0x54	; 84
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	8f 7b       	andi	r24, 0xBF	; 191
    1f00:	8c 93       	st	X, r24
    1f02:	3e c0       	rjmp	.+124    	; 0x1f80 <EXTI_u8SetSenseControl+0x228>

						break;
					default : Local_u8ErrorState = NOK ;
    1f04:	19 82       	std	Y+1, r1	; 0x01
    1f06:	3c c0       	rjmp	.+120    	; 0x1f80 <EXTI_u8SetSenseControl+0x228>
					}
			break;
		case EXTI_RISING_EDGE :
		switch (Copy_u8IntNumber)
    1f08:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0a:	28 2f       	mov	r18, r24
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	3d 83       	std	Y+5, r19	; 0x05
    1f10:	2c 83       	std	Y+4, r18	; 0x04
    1f12:	8c 81       	ldd	r24, Y+4	; 0x04
    1f14:	9d 81       	ldd	r25, Y+5	; 0x05
    1f16:	81 30       	cpi	r24, 0x01	; 1
    1f18:	91 05       	cpc	r25, r1
    1f1a:	c1 f0       	breq	.+48     	; 0x1f4c <EXTI_u8SetSenseControl+0x1f4>
    1f1c:	2c 81       	ldd	r18, Y+4	; 0x04
    1f1e:	3d 81       	ldd	r19, Y+5	; 0x05
    1f20:	22 30       	cpi	r18, 0x02	; 2
    1f22:	31 05       	cpc	r19, r1
    1f24:	11 f1       	breq	.+68     	; 0x1f6a <EXTI_u8SetSenseControl+0x212>
    1f26:	8c 81       	ldd	r24, Y+4	; 0x04
    1f28:	9d 81       	ldd	r25, Y+5	; 0x05
    1f2a:	00 97       	sbiw	r24, 0x00	; 0
    1f2c:	31 f5       	brne	.+76     	; 0x1f7a <EXTI_u8SetSenseControl+0x222>
				{
				case EXTI_INT0 :

					SET_BIT(MCUCR,MCUCR_ISC01);
    1f2e:	a5 e5       	ldi	r26, 0x55	; 85
    1f30:	b0 e0       	ldi	r27, 0x00	; 0
    1f32:	e5 e5       	ldi	r30, 0x55	; 85
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	80 81       	ld	r24, Z
    1f38:	82 60       	ori	r24, 0x02	; 2
    1f3a:	8c 93       	st	X, r24
					SET_BIT(MCUCR,MCUCR_ISC00);
    1f3c:	a5 e5       	ldi	r26, 0x55	; 85
    1f3e:	b0 e0       	ldi	r27, 0x00	; 0
    1f40:	e5 e5       	ldi	r30, 0x55	; 85
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	80 81       	ld	r24, Z
    1f46:	81 60       	ori	r24, 0x01	; 1
    1f48:	8c 93       	st	X, r24
    1f4a:	1a c0       	rjmp	.+52     	; 0x1f80 <EXTI_u8SetSenseControl+0x228>

					break;
				case EXTI_INT1 :

					SET_BIT(MCUCR,MCUCR_ISC11);
    1f4c:	a5 e5       	ldi	r26, 0x55	; 85
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	e5 e5       	ldi	r30, 0x55	; 85
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	88 60       	ori	r24, 0x08	; 8
    1f58:	8c 93       	st	X, r24
					SET_BIT(MCUCR,MCUCR_ISC10);
    1f5a:	a5 e5       	ldi	r26, 0x55	; 85
    1f5c:	b0 e0       	ldi	r27, 0x00	; 0
    1f5e:	e5 e5       	ldi	r30, 0x55	; 85
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	80 81       	ld	r24, Z
    1f64:	84 60       	ori	r24, 0x04	; 4
    1f66:	8c 93       	st	X, r24
    1f68:	0b c0       	rjmp	.+22     	; 0x1f80 <EXTI_u8SetSenseControl+0x228>

					break;
				case EXTI_INT2 :

					SET_BIT(MCUCSR,MCUCSR_INT2);
    1f6a:	a4 e5       	ldi	r26, 0x54	; 84
    1f6c:	b0 e0       	ldi	r27, 0x00	; 0
    1f6e:	e4 e5       	ldi	r30, 0x54	; 84
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	80 81       	ld	r24, Z
    1f74:	80 64       	ori	r24, 0x40	; 64
    1f76:	8c 93       	st	X, r24
    1f78:	03 c0       	rjmp	.+6      	; 0x1f80 <EXTI_u8SetSenseControl+0x228>

					break;
				default : Local_u8ErrorState = NOK ;
    1f7a:	19 82       	std	Y+1, r1	; 0x01
    1f7c:	01 c0       	rjmp	.+2      	; 0x1f80 <EXTI_u8SetSenseControl+0x228>
				}
		    break;
		default : Local_u8ErrorState = NOK ;
    1f7e:	19 82       	std	Y+1, r1	; 0x01

	}

	return Local_u8ErrorState ;
    1f80:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f82:	2d 96       	adiw	r28, 0x0d	; 13
    1f84:	0f b6       	in	r0, 0x3f	; 63
    1f86:	f8 94       	cli
    1f88:	de bf       	out	0x3e, r29	; 62
    1f8a:	0f be       	out	0x3f, r0	; 63
    1f8c:	cd bf       	out	0x3d, r28	; 61
    1f8e:	cf 91       	pop	r28
    1f90:	df 91       	pop	r29
    1f92:	08 95       	ret

00001f94 <EXTI_u8Int0SetCallBack>:

u8 EXTI_u8Int0SetCallBack(void (*Copy_pvInt0Func)(void))
{
    1f94:	df 93       	push	r29
    1f96:	cf 93       	push	r28
    1f98:	00 d0       	rcall	.+0      	; 0x1f9a <EXTI_u8Int0SetCallBack+0x6>
    1f9a:	0f 92       	push	r0
    1f9c:	cd b7       	in	r28, 0x3d	; 61
    1f9e:	de b7       	in	r29, 0x3e	; 62
    1fa0:	9b 83       	std	Y+3, r25	; 0x03
    1fa2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_pvInt0Func != NULL)
    1fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1faa:	9b 81       	ldd	r25, Y+3	; 0x03
    1fac:	00 97       	sbiw	r24, 0x00	; 0
    1fae:	39 f0       	breq	.+14     	; 0x1fbe <EXTI_u8Int0SetCallBack+0x2a>
	{
		EXTI_pvInt0PtrFunc = Copy_pvInt0Func;
    1fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb2:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb4:	90 93 c3 00 	sts	0x00C3, r25
    1fb8:	80 93 c2 00 	sts	0x00C2, r24
    1fbc:	02 c0       	rjmp	.+4      	; 0x1fc2 <EXTI_u8Int0SetCallBack+0x2e>
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER;
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1fc2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	cf 91       	pop	r28
    1fcc:	df 91       	pop	r29
    1fce:	08 95       	ret

00001fd0 <EXTI_u8Int1SetCallBack>:
u8 EXTI_u8Int1SetCallBack(void (*Copy_pvInt1Func)(void))
{
    1fd0:	df 93       	push	r29
    1fd2:	cf 93       	push	r28
    1fd4:	00 d0       	rcall	.+0      	; 0x1fd6 <EXTI_u8Int1SetCallBack+0x6>
    1fd6:	0f 92       	push	r0
    1fd8:	cd b7       	in	r28, 0x3d	; 61
    1fda:	de b7       	in	r29, 0x3e	; 62
    1fdc:	9b 83       	std	Y+3, r25	; 0x03
    1fde:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	89 83       	std	Y+1, r24	; 0x01

		if(Copy_pvInt1Func != NULL)
    1fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fe8:	00 97       	sbiw	r24, 0x00	; 0
    1fea:	39 f0       	breq	.+14     	; 0x1ffa <EXTI_u8Int1SetCallBack+0x2a>
		{
			EXTI_pvInt0PtrFunc = Copy_pvInt1Func;
    1fec:	8a 81       	ldd	r24, Y+2	; 0x02
    1fee:	9b 81       	ldd	r25, Y+3	; 0x03
    1ff0:	90 93 c3 00 	sts	0x00C3, r25
    1ff4:	80 93 c2 00 	sts	0x00C2, r24
    1ff8:	02 c0       	rjmp	.+4      	; 0x1ffe <EXTI_u8Int1SetCallBack+0x2e>
		}
		else
		{
			Local_u8ErrorState = NULL_POINTER;
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_u8ErrorState;
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2000:	0f 90       	pop	r0
    2002:	0f 90       	pop	r0
    2004:	0f 90       	pop	r0
    2006:	cf 91       	pop	r28
    2008:	df 91       	pop	r29
    200a:	08 95       	ret

0000200c <EXTI_u8Int2SetCallBack>:
u8 EXTI_u8Int2SetCallBack(void (*Copy_pvInt2Func)(void))
{
    200c:	df 93       	push	r29
    200e:	cf 93       	push	r28
    2010:	00 d0       	rcall	.+0      	; 0x2012 <EXTI_u8Int2SetCallBack+0x6>
    2012:	0f 92       	push	r0
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
    2018:	9b 83       	std	Y+3, r25	; 0x03
    201a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	89 83       	std	Y+1, r24	; 0x01

		if(Copy_pvInt2Func != NULL)
    2020:	8a 81       	ldd	r24, Y+2	; 0x02
    2022:	9b 81       	ldd	r25, Y+3	; 0x03
    2024:	00 97       	sbiw	r24, 0x00	; 0
    2026:	39 f0       	breq	.+14     	; 0x2036 <EXTI_u8Int2SetCallBack+0x2a>
		{
			EXTI_pvInt0PtrFunc = Copy_pvInt2Func;
    2028:	8a 81       	ldd	r24, Y+2	; 0x02
    202a:	9b 81       	ldd	r25, Y+3	; 0x03
    202c:	90 93 c3 00 	sts	0x00C3, r25
    2030:	80 93 c2 00 	sts	0x00C2, r24
    2034:	02 c0       	rjmp	.+4      	; 0x203a <EXTI_u8Int2SetCallBack+0x2e>
		}
		else
		{
			Local_u8ErrorState = NULL_POINTER;
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_u8ErrorState;
    203a:	89 81       	ldd	r24, Y+1	; 0x01
}
    203c:	0f 90       	pop	r0
    203e:	0f 90       	pop	r0
    2040:	0f 90       	pop	r0
    2042:	cf 91       	pop	r28
    2044:	df 91       	pop	r29
    2046:	08 95       	ret

00002048 <__vector_1>:

void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
    2048:	1f 92       	push	r1
    204a:	0f 92       	push	r0
    204c:	0f b6       	in	r0, 0x3f	; 63
    204e:	0f 92       	push	r0
    2050:	11 24       	eor	r1, r1
    2052:	2f 93       	push	r18
    2054:	3f 93       	push	r19
    2056:	4f 93       	push	r20
    2058:	5f 93       	push	r21
    205a:	6f 93       	push	r22
    205c:	7f 93       	push	r23
    205e:	8f 93       	push	r24
    2060:	9f 93       	push	r25
    2062:	af 93       	push	r26
    2064:	bf 93       	push	r27
    2066:	ef 93       	push	r30
    2068:	ff 93       	push	r31
    206a:	df 93       	push	r29
    206c:	cf 93       	push	r28
    206e:	cd b7       	in	r28, 0x3d	; 61
    2070:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_pvInt0PtrFunc != NULL)
    2072:	80 91 c2 00 	lds	r24, 0x00C2
    2076:	90 91 c3 00 	lds	r25, 0x00C3
    207a:	00 97       	sbiw	r24, 0x00	; 0
    207c:	29 f0       	breq	.+10     	; 0x2088 <__vector_1+0x40>
	{
		EXTI_pvInt0PtrFunc();
    207e:	e0 91 c2 00 	lds	r30, 0x00C2
    2082:	f0 91 c3 00 	lds	r31, 0x00C3
    2086:	09 95       	icall
	}
	else
	{

	}
}
    2088:	cf 91       	pop	r28
    208a:	df 91       	pop	r29
    208c:	ff 91       	pop	r31
    208e:	ef 91       	pop	r30
    2090:	bf 91       	pop	r27
    2092:	af 91       	pop	r26
    2094:	9f 91       	pop	r25
    2096:	8f 91       	pop	r24
    2098:	7f 91       	pop	r23
    209a:	6f 91       	pop	r22
    209c:	5f 91       	pop	r21
    209e:	4f 91       	pop	r20
    20a0:	3f 91       	pop	r19
    20a2:	2f 91       	pop	r18
    20a4:	0f 90       	pop	r0
    20a6:	0f be       	out	0x3f, r0	; 63
    20a8:	0f 90       	pop	r0
    20aa:	1f 90       	pop	r1
    20ac:	18 95       	reti

000020ae <__vector_2>:

void __vector_2 (void) __attribute__((signal));
void __vector_2 (void)
{
    20ae:	1f 92       	push	r1
    20b0:	0f 92       	push	r0
    20b2:	0f b6       	in	r0, 0x3f	; 63
    20b4:	0f 92       	push	r0
    20b6:	11 24       	eor	r1, r1
    20b8:	2f 93       	push	r18
    20ba:	3f 93       	push	r19
    20bc:	4f 93       	push	r20
    20be:	5f 93       	push	r21
    20c0:	6f 93       	push	r22
    20c2:	7f 93       	push	r23
    20c4:	8f 93       	push	r24
    20c6:	9f 93       	push	r25
    20c8:	af 93       	push	r26
    20ca:	bf 93       	push	r27
    20cc:	ef 93       	push	r30
    20ce:	ff 93       	push	r31
    20d0:	df 93       	push	r29
    20d2:	cf 93       	push	r28
    20d4:	cd b7       	in	r28, 0x3d	; 61
    20d6:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_pvInt1PtrFunc != NULL)
    20d8:	80 91 c4 00 	lds	r24, 0x00C4
    20dc:	90 91 c5 00 	lds	r25, 0x00C5
    20e0:	00 97       	sbiw	r24, 0x00	; 0
    20e2:	29 f0       	breq	.+10     	; 0x20ee <__vector_2+0x40>
	{
		EXTI_pvInt1PtrFunc();
    20e4:	e0 91 c4 00 	lds	r30, 0x00C4
    20e8:	f0 91 c5 00 	lds	r31, 0x00C5
    20ec:	09 95       	icall
	}
	else
	{

	}
}
    20ee:	cf 91       	pop	r28
    20f0:	df 91       	pop	r29
    20f2:	ff 91       	pop	r31
    20f4:	ef 91       	pop	r30
    20f6:	bf 91       	pop	r27
    20f8:	af 91       	pop	r26
    20fa:	9f 91       	pop	r25
    20fc:	8f 91       	pop	r24
    20fe:	7f 91       	pop	r23
    2100:	6f 91       	pop	r22
    2102:	5f 91       	pop	r21
    2104:	4f 91       	pop	r20
    2106:	3f 91       	pop	r19
    2108:	2f 91       	pop	r18
    210a:	0f 90       	pop	r0
    210c:	0f be       	out	0x3f, r0	; 63
    210e:	0f 90       	pop	r0
    2110:	1f 90       	pop	r1
    2112:	18 95       	reti

00002114 <__vector_3>:

void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
    2114:	1f 92       	push	r1
    2116:	0f 92       	push	r0
    2118:	0f b6       	in	r0, 0x3f	; 63
    211a:	0f 92       	push	r0
    211c:	11 24       	eor	r1, r1
    211e:	2f 93       	push	r18
    2120:	3f 93       	push	r19
    2122:	4f 93       	push	r20
    2124:	5f 93       	push	r21
    2126:	6f 93       	push	r22
    2128:	7f 93       	push	r23
    212a:	8f 93       	push	r24
    212c:	9f 93       	push	r25
    212e:	af 93       	push	r26
    2130:	bf 93       	push	r27
    2132:	ef 93       	push	r30
    2134:	ff 93       	push	r31
    2136:	df 93       	push	r29
    2138:	cf 93       	push	r28
    213a:	cd b7       	in	r28, 0x3d	; 61
    213c:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_pvInt2PtrFunc != NULL)
    213e:	80 91 c6 00 	lds	r24, 0x00C6
    2142:	90 91 c7 00 	lds	r25, 0x00C7
    2146:	00 97       	sbiw	r24, 0x00	; 0
    2148:	29 f0       	breq	.+10     	; 0x2154 <__vector_3+0x40>
	{
		EXTI_pvInt2PtrFunc();
    214a:	e0 91 c6 00 	lds	r30, 0x00C6
    214e:	f0 91 c7 00 	lds	r31, 0x00C7
    2152:	09 95       	icall
	}
	else
	{

	}
}
    2154:	cf 91       	pop	r28
    2156:	df 91       	pop	r29
    2158:	ff 91       	pop	r31
    215a:	ef 91       	pop	r30
    215c:	bf 91       	pop	r27
    215e:	af 91       	pop	r26
    2160:	9f 91       	pop	r25
    2162:	8f 91       	pop	r24
    2164:	7f 91       	pop	r23
    2166:	6f 91       	pop	r22
    2168:	5f 91       	pop	r21
    216a:	4f 91       	pop	r20
    216c:	3f 91       	pop	r19
    216e:	2f 91       	pop	r18
    2170:	0f 90       	pop	r0
    2172:	0f be       	out	0x3f, r0	; 63
    2174:	0f 90       	pop	r0
    2176:	1f 90       	pop	r1
    2178:	18 95       	reti

0000217a <KPD_u8GetSwitch>:
/*HAL LAYER*/



u8 KPD_u8GetSwitch		(u8 * Copy_pu8ReturnedSwitch)
{
    217a:	df 93       	push	r29
    217c:	cf 93       	push	r28
    217e:	cd b7       	in	r28, 0x3d	; 61
    2180:	de b7       	in	r29, 0x3e	; 62
    2182:	27 97       	sbiw	r28, 0x07	; 7
    2184:	0f b6       	in	r0, 0x3f	; 63
    2186:	f8 94       	cli
    2188:	de bf       	out	0x3e, r29	; 62
    218a:	0f be       	out	0x3f, r0	; 63
    218c:	cd bf       	out	0x3d, r28	; 61
    218e:	9f 83       	std	Y+7, r25	; 0x07
    2190:	8e 83       	std	Y+6, r24	; 0x06
	u8 Local_u8ReturnState = 1;
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8pinValue;
	u8 Local_u8Flag = 0;
    2196:	1b 82       	std	Y+3, r1	; 0x03
	static u8 Local_Au8RowsPinArr[KPD_u8_ROWS_NB]=KPD_ROWS_PINS;
	static u8 Local_Au8ColsPinArr[KPD_u8_COLS_NB]=KPD_COLS_PINS;
	static u8 Local_Au8KPDValues[KPD_u8_ROWS_NB][KPD_u8_COLS_NB] = KPD_KEYS;
	if(Copy_pu8ReturnedSwitch != 0)
    2198:	8e 81       	ldd	r24, Y+6	; 0x06
    219a:	9f 81       	ldd	r25, Y+7	; 0x07
    219c:	00 97       	sbiw	r24, 0x00	; 0
    219e:	09 f4       	brne	.+2      	; 0x21a2 <KPD_u8GetSwitch+0x28>
    21a0:	6a c0       	rjmp	.+212    	; 0x2276 <KPD_u8GetSwitch+0xfc>
	{
		*Copy_pu8ReturnedSwitch = 0xff;
    21a2:	ee 81       	ldd	r30, Y+6	; 0x06
    21a4:	ff 81       	ldd	r31, Y+7	; 0x07
    21a6:	8f ef       	ldi	r24, 0xFF	; 255
    21a8:	80 83       	st	Z, r24
		for(u8 Local_u8RowsCounter = 0;Local_u8RowsCounter < KPD_u8_ROWS_NB ;Local_u8RowsCounter++)
    21aa:	1a 82       	std	Y+2, r1	; 0x02
    21ac:	5f c0       	rjmp	.+190    	; 0x226c <KPD_u8GetSwitch+0xf2>
		{
			/*Activate Each Row*/
			MDIO_Error_State_SetPinValue(Local_Au8RowsPinArr[Local_u8RowsCounter],KPD_u8_ROWS_PORT,0);
    21ae:	8a 81       	ldd	r24, Y+2	; 0x02
    21b0:	88 2f       	mov	r24, r24
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	fc 01       	movw	r30, r24
    21b6:	e3 54       	subi	r30, 0x43	; 67
    21b8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ba:	80 81       	ld	r24, Z
    21bc:	63 e0       	ldi	r22, 0x03	; 3
    21be:	40 e0       	ldi	r20, 0x00	; 0
    21c0:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			/*Loop to check cols pins*/
			for(u8 Local_u8ColsCounter = 0; Local_u8ColsCounter < KPD_u8_COLS_NB  ; Local_u8ColsCounter ++)
    21c4:	19 82       	std	Y+1, r1	; 0x01
    21c6:	3d c0       	rjmp	.+122    	; 0x2242 <KPD_u8GetSwitch+0xc8>
			{
				/*check if col is in low state*/
				MDIO_Error_State_GetPinValue(Local_Au8ColsPinArr[Local_u8ColsCounter],KPD_u8_COLS_PORT,&Local_u8pinValue);
    21c8:	89 81       	ldd	r24, Y+1	; 0x01
    21ca:	88 2f       	mov	r24, r24
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	fc 01       	movw	r30, r24
    21d0:	e7 54       	subi	r30, 0x47	; 71
    21d2:	ff 4f       	sbci	r31, 0xFF	; 255
    21d4:	80 81       	ld	r24, Z
    21d6:	9e 01       	movw	r18, r28
    21d8:	2b 5f       	subi	r18, 0xFB	; 251
    21da:	3f 4f       	sbci	r19, 0xFF	; 255
    21dc:	63 e0       	ldi	r22, 0x03	; 3
    21de:	a9 01       	movw	r20, r18
    21e0:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <MDIO_Error_State_GetPinValue>
				if(Local_u8pinValue == 0)
    21e4:	8d 81       	ldd	r24, Y+5	; 0x05
    21e6:	88 23       	and	r24, r24
    21e8:	49 f5       	brne	.+82     	; 0x223c <KPD_u8GetSwitch+0xc2>
				{
					*Copy_pu8ReturnedSwitch = Local_Au8KPDValues[Local_u8RowsCounter][Local_u8ColsCounter];
    21ea:	8a 81       	ldd	r24, Y+2	; 0x02
    21ec:	48 2f       	mov	r20, r24
    21ee:	50 e0       	ldi	r21, 0x00	; 0
    21f0:	89 81       	ldd	r24, Y+1	; 0x01
    21f2:	28 2f       	mov	r18, r24
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	ca 01       	movw	r24, r20
    21f8:	88 0f       	add	r24, r24
    21fa:	99 1f       	adc	r25, r25
    21fc:	88 0f       	add	r24, r24
    21fe:	99 1f       	adc	r25, r25
    2200:	82 0f       	add	r24, r18
    2202:	93 1f       	adc	r25, r19
    2204:	fc 01       	movw	r30, r24
    2206:	e7 55       	subi	r30, 0x57	; 87
    2208:	ff 4f       	sbci	r31, 0xFF	; 255
    220a:	80 81       	ld	r24, Z
    220c:	ee 81       	ldd	r30, Y+6	; 0x06
    220e:	ff 81       	ldd	r31, Y+7	; 0x07
    2210:	80 83       	st	Z, r24
    2212:	0e c0       	rjmp	.+28     	; 0x2230 <KPD_u8GetSwitch+0xb6>
					while(Local_u8pinValue == 0)
					{
						MDIO_Error_State_GetPinValue(Local_Au8ColsPinArr[Local_u8ColsCounter],KPD_u8_COLS_PORT,&Local_u8pinValue);
    2214:	89 81       	ldd	r24, Y+1	; 0x01
    2216:	88 2f       	mov	r24, r24
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	fc 01       	movw	r30, r24
    221c:	e7 54       	subi	r30, 0x47	; 71
    221e:	ff 4f       	sbci	r31, 0xFF	; 255
    2220:	80 81       	ld	r24, Z
    2222:	9e 01       	movw	r18, r28
    2224:	2b 5f       	subi	r18, 0xFB	; 251
    2226:	3f 4f       	sbci	r19, 0xFF	; 255
    2228:	63 e0       	ldi	r22, 0x03	; 3
    222a:	a9 01       	movw	r20, r18
    222c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <MDIO_Error_State_GetPinValue>
				/*check if col is in low state*/
				MDIO_Error_State_GetPinValue(Local_Au8ColsPinArr[Local_u8ColsCounter],KPD_u8_COLS_PORT,&Local_u8pinValue);
				if(Local_u8pinValue == 0)
				{
					*Copy_pu8ReturnedSwitch = Local_Au8KPDValues[Local_u8RowsCounter][Local_u8ColsCounter];
					while(Local_u8pinValue == 0)
    2230:	8d 81       	ldd	r24, Y+5	; 0x05
    2232:	88 23       	and	r24, r24
    2234:	79 f3       	breq	.-34     	; 0x2214 <KPD_u8GetSwitch+0x9a>
					{
						MDIO_Error_State_GetPinValue(Local_Au8ColsPinArr[Local_u8ColsCounter],KPD_u8_COLS_PORT,&Local_u8pinValue);
					}
					Local_u8Flag = 1;
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	8b 83       	std	Y+3, r24	; 0x03
    223a:	07 c0       	rjmp	.+14     	; 0x224a <KPD_u8GetSwitch+0xd0>
		for(u8 Local_u8RowsCounter = 0;Local_u8RowsCounter < KPD_u8_ROWS_NB ;Local_u8RowsCounter++)
		{
			/*Activate Each Row*/
			MDIO_Error_State_SetPinValue(Local_Au8RowsPinArr[Local_u8RowsCounter],KPD_u8_ROWS_PORT,0);
			/*Loop to check cols pins*/
			for(u8 Local_u8ColsCounter = 0; Local_u8ColsCounter < KPD_u8_COLS_NB  ; Local_u8ColsCounter ++)
    223c:	89 81       	ldd	r24, Y+1	; 0x01
    223e:	8f 5f       	subi	r24, 0xFF	; 255
    2240:	89 83       	std	Y+1, r24	; 0x01
    2242:	89 81       	ldd	r24, Y+1	; 0x01
    2244:	84 30       	cpi	r24, 0x04	; 4
    2246:	08 f4       	brcc	.+2      	; 0x224a <KPD_u8GetSwitch+0xd0>
    2248:	bf cf       	rjmp	.-130    	; 0x21c8 <KPD_u8GetSwitch+0x4e>
					Local_u8Flag = 1;
					break;
				}
			}
			/*Deactivate the current Row*/
			MDIO_Error_State_SetPinValue(Local_Au8RowsPinArr[Local_u8RowsCounter],KPD_u8_ROWS_PORT,1);
    224a:	8a 81       	ldd	r24, Y+2	; 0x02
    224c:	88 2f       	mov	r24, r24
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	fc 01       	movw	r30, r24
    2252:	e3 54       	subi	r30, 0x43	; 67
    2254:	ff 4f       	sbci	r31, 0xFF	; 255
    2256:	80 81       	ld	r24, Z
    2258:	63 e0       	ldi	r22, 0x03	; 3
    225a:	41 e0       	ldi	r20, 0x01	; 1
    225c:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			if(Local_u8Flag == 1)
    2260:	8b 81       	ldd	r24, Y+3	; 0x03
    2262:	81 30       	cpi	r24, 0x01	; 1
    2264:	49 f0       	breq	.+18     	; 0x2278 <KPD_u8GetSwitch+0xfe>
	static u8 Local_Au8ColsPinArr[KPD_u8_COLS_NB]=KPD_COLS_PINS;
	static u8 Local_Au8KPDValues[KPD_u8_ROWS_NB][KPD_u8_COLS_NB] = KPD_KEYS;
	if(Copy_pu8ReturnedSwitch != 0)
	{
		*Copy_pu8ReturnedSwitch = 0xff;
		for(u8 Local_u8RowsCounter = 0;Local_u8RowsCounter < KPD_u8_ROWS_NB ;Local_u8RowsCounter++)
    2266:	8a 81       	ldd	r24, Y+2	; 0x02
    2268:	8f 5f       	subi	r24, 0xFF	; 255
    226a:	8a 83       	std	Y+2, r24	; 0x02
    226c:	8a 81       	ldd	r24, Y+2	; 0x02
    226e:	84 30       	cpi	r24, 0x04	; 4
    2270:	08 f4       	brcc	.+2      	; 0x2274 <KPD_u8GetSwitch+0xfa>
    2272:	9d cf       	rjmp	.-198    	; 0x21ae <KPD_u8GetSwitch+0x34>
    2274:	01 c0       	rjmp	.+2      	; 0x2278 <KPD_u8GetSwitch+0xfe>
			}
		}
	}
	else
	{
		Local_u8ReturnState = 0;
    2276:	1c 82       	std	Y+4, r1	; 0x04
	}
	
	
	return Local_u8ReturnState;
    2278:	8c 81       	ldd	r24, Y+4	; 0x04
	
}
    227a:	27 96       	adiw	r28, 0x07	; 7
    227c:	0f b6       	in	r0, 0x3f	; 63
    227e:	f8 94       	cli
    2280:	de bf       	out	0x3e, r29	; 62
    2282:	0f be       	out	0x3f, r0	; 63
    2284:	cd bf       	out	0x3d, r28	; 61
    2286:	cf 91       	pop	r28
    2288:	df 91       	pop	r29
    228a:	08 95       	ret

0000228c <HSWITCH_VidInit_PullUP>:
 */

#include"../../MCAL/MDIO/MDIO_Interface.h"
#include"HSWITCH_Interface.h"
void HSWITCH_VidInit_PullUP(SWITCH_t *Copy_SWITCH_tSwitch)
{
    228c:	df 93       	push	r29
    228e:	cf 93       	push	r28
    2290:	00 d0       	rcall	.+0      	; 0x2292 <HSWITCH_VidInit_PullUP+0x6>
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
    2296:	9a 83       	std	Y+2, r25	; 0x02
    2298:	89 83       	std	Y+1, r24	; 0x01
 /*Set pin direction*/
  /*Active Pull up resistor*/
  MDIO_VidActivePullUP(Copy_SWITCH_tSwitch->Copy_u8PinNumber, Copy_SWITCH_tSwitch->Copy_u8PortNumber);
    229a:	e9 81       	ldd	r30, Y+1	; 0x01
    229c:	fa 81       	ldd	r31, Y+2	; 0x02
    229e:	81 81       	ldd	r24, Z+1	; 0x01
    22a0:	e9 81       	ldd	r30, Y+1	; 0x01
    22a2:	fa 81       	ldd	r31, Y+2	; 0x02
    22a4:	90 81       	ld	r25, Z
    22a6:	69 2f       	mov	r22, r25
    22a8:	0e 94 65 0d 	call	0x1aca	; 0x1aca <MDIO_VidActivePullUP>
}
    22ac:	0f 90       	pop	r0
    22ae:	0f 90       	pop	r0
    22b0:	cf 91       	pop	r28
    22b2:	df 91       	pop	r29
    22b4:	08 95       	ret

000022b6 <HSWITCH_u8SwitchState>:

/*get Switch Value*/
u8 HSWITCH_u8SwitchState(SWITCH_t *Copy_SWITCH_tSwitch)
{
    22b6:	df 93       	push	r29
    22b8:	cf 93       	push	r28
    22ba:	00 d0       	rcall	.+0      	; 0x22bc <HSWITCH_u8SwitchState+0x6>
    22bc:	0f 92       	push	r0
    22be:	cd b7       	in	r28, 0x3d	; 61
    22c0:	de b7       	in	r29, 0x3e	; 62
    22c2:	9b 83       	std	Y+3, r25	; 0x03
    22c4:	8a 83       	std	Y+2, r24	; 0x02
       /*Default state for Switch NOT_PRESSED = 1 IN PULL UP RESISTANCE*/
     u8 Copy_u8Pinvalue = 1 ;
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	89 83       	std	Y+1, r24	; 0x01

	MDIO_Error_State_GetPinValue(Copy_SWITCH_tSwitch->Copy_u8PinNumber, Copy_SWITCH_tSwitch->Copy_u8PortNumber,&Copy_u8Pinvalue);
    22ca:	ea 81       	ldd	r30, Y+2	; 0x02
    22cc:	fb 81       	ldd	r31, Y+3	; 0x03
    22ce:	81 81       	ldd	r24, Z+1	; 0x01
    22d0:	ea 81       	ldd	r30, Y+2	; 0x02
    22d2:	fb 81       	ldd	r31, Y+3	; 0x03
    22d4:	90 81       	ld	r25, Z
    22d6:	69 2f       	mov	r22, r25
    22d8:	9e 01       	movw	r18, r28
    22da:	2f 5f       	subi	r18, 0xFF	; 255
    22dc:	3f 4f       	sbci	r19, 0xFF	; 255
    22de:	a9 01       	movw	r20, r18
    22e0:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <MDIO_Error_State_GetPinValue>


return Copy_u8Pinvalue ;
    22e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    22e6:	0f 90       	pop	r0
    22e8:	0f 90       	pop	r0
    22ea:	0f 90       	pop	r0
    22ec:	cf 91       	pop	r28
    22ee:	df 91       	pop	r29
    22f0:	08 95       	ret

000022f2 <HSEVEN_SEGMENT_VidInit>:



/*Seven Segment initialization*/
void HSEVEN_SEGMENT_VidInit(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG)
{
    22f2:	df 93       	push	r29
    22f4:	cf 93       	push	r28
    22f6:	00 d0       	rcall	.+0      	; 0x22f8 <HSEVEN_SEGMENT_VidInit+0x6>
    22f8:	cd b7       	in	r28, 0x3d	; 61
    22fa:	de b7       	in	r29, 0x3e	; 62
    22fc:	9a 83       	std	Y+2, r25	; 0x02
    22fe:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPortDirection(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,PORT_OUTPUT);
    2300:	e9 81       	ldd	r30, Y+1	; 0x01
    2302:	fa 81       	ldd	r31, Y+2	; 0x02
    2304:	80 81       	ld	r24, Z
    2306:	6f ef       	ldi	r22, 0xFF	; 255
    2308:	0e 94 4e 0a 	call	0x149c	; 0x149c <MDIO_Error_State_SetPortDirection>
}
    230c:	0f 90       	pop	r0
    230e:	0f 90       	pop	r0
    2310:	cf 91       	pop	r28
    2312:	df 91       	pop	r29
    2314:	08 95       	ret

00002316 <HSEVEN_SEGMENT_VidOff>:

/*Seven Segment OFF*/
void HSEVEN_SEGMENT_VidOff(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG,u8 Copy_u8Off)
{
    2316:	df 93       	push	r29
    2318:	cf 93       	push	r28
    231a:	00 d0       	rcall	.+0      	; 0x231c <HSEVEN_SEGMENT_VidOff+0x6>
    231c:	0f 92       	push	r0
    231e:	cd b7       	in	r28, 0x3d	; 61
    2320:	de b7       	in	r29, 0x3e	; 62
    2322:	9a 83       	std	Y+2, r25	; 0x02
    2324:	89 83       	std	Y+1, r24	; 0x01
    2326:	6b 83       	std	Y+3, r22	; 0x03
	if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_CATHODE)
    2328:	e9 81       	ldd	r30, Y+1	; 0x01
    232a:	fa 81       	ldd	r31, Y+2	; 0x02
    232c:	81 81       	ldd	r24, Z+1	; 0x01
    232e:	81 30       	cpi	r24, 0x01	; 1
    2330:	31 f4       	brne	.+12     	; 0x233e <HSEVEN_SEGMENT_VidOff+0x28>
	{
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,Copy_u8Off);
    2332:	e9 81       	ldd	r30, Y+1	; 0x01
    2334:	fa 81       	ldd	r31, Y+2	; 0x02
    2336:	80 81       	ld	r24, Z
    2338:	6b 81       	ldd	r22, Y+3	; 0x03
    233a:	0e 94 a1 0b 	call	0x1742	; 0x1742 <MDIO_Error_State_SetPortValue>
	}
	if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_ANODE)
    233e:	e9 81       	ldd	r30, Y+1	; 0x01
    2340:	fa 81       	ldd	r31, Y+2	; 0x02
    2342:	81 81       	ldd	r24, Z+1	; 0x01
    2344:	88 23       	and	r24, r24
    2346:	51 f4       	brne	.+20     	; 0x235c <HSEVEN_SEGMENT_VidOff+0x46>
	{
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~Copy_u8Off);
    2348:	e9 81       	ldd	r30, Y+1	; 0x01
    234a:	fa 81       	ldd	r31, Y+2	; 0x02
    234c:	20 81       	ld	r18, Z
    234e:	8b 81       	ldd	r24, Y+3	; 0x03
    2350:	98 2f       	mov	r25, r24
    2352:	90 95       	com	r25
    2354:	82 2f       	mov	r24, r18
    2356:	69 2f       	mov	r22, r25
    2358:	0e 94 a1 0b 	call	0x1742	; 0x1742 <MDIO_Error_State_SetPortValue>
	}
}
    235c:	0f 90       	pop	r0
    235e:	0f 90       	pop	r0
    2360:	0f 90       	pop	r0
    2362:	cf 91       	pop	r28
    2364:	df 91       	pop	r29
    2366:	08 95       	ret

00002368 <HSEVEN_SEGMENT_VidDisplayNumber>:



/*Display a Number */
void HSEVEN_SEGMENT_VidDisplayNumber(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG,u8 Copy_u8Number)
{
    2368:	df 93       	push	r29
    236a:	cf 93       	push	r28
    236c:	cd b7       	in	r28, 0x3d	; 61
    236e:	de b7       	in	r29, 0x3e	; 62
    2370:	27 97       	sbiw	r28, 0x07	; 7
    2372:	0f b6       	in	r0, 0x3f	; 63
    2374:	f8 94       	cli
    2376:	de bf       	out	0x3e, r29	; 62
    2378:	0f be       	out	0x3f, r0	; 63
    237a:	cd bf       	out	0x3d, r28	; 61
    237c:	9a 83       	std	Y+2, r25	; 0x02
    237e:	89 83       	std	Y+1, r24	; 0x01
    2380:	6b 83       	std	Y+3, r22	; 0x03
if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_CATHODE)
    2382:	e9 81       	ldd	r30, Y+1	; 0x01
    2384:	fa 81       	ldd	r31, Y+2	; 0x02
    2386:	81 81       	ldd	r24, Z+1	; 0x01
    2388:	81 30       	cpi	r24, 0x01	; 1
    238a:	09 f0       	breq	.+2      	; 0x238e <HSEVEN_SEGMENT_VidDisplayNumber+0x26>
    238c:	9b c0       	rjmp	.+310    	; 0x24c4 <HSEVEN_SEGMENT_VidDisplayNumber+0x15c>
{
	switch(Copy_u8Number)
    238e:	8b 81       	ldd	r24, Y+3	; 0x03
    2390:	28 2f       	mov	r18, r24
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	3f 83       	std	Y+7, r19	; 0x07
    2396:	2e 83       	std	Y+6, r18	; 0x06
    2398:	8e 81       	ldd	r24, Y+6	; 0x06
    239a:	9f 81       	ldd	r25, Y+7	; 0x07
    239c:	84 30       	cpi	r24, 0x04	; 4
    239e:	91 05       	cpc	r25, r1
    23a0:	09 f4       	brne	.+2      	; 0x23a4 <HSEVEN_SEGMENT_VidDisplayNumber+0x3c>
    23a2:	5f c0       	rjmp	.+190    	; 0x2462 <HSEVEN_SEGMENT_VidDisplayNumber+0xfa>
    23a4:	2e 81       	ldd	r18, Y+6	; 0x06
    23a6:	3f 81       	ldd	r19, Y+7	; 0x07
    23a8:	25 30       	cpi	r18, 0x05	; 5
    23aa:	31 05       	cpc	r19, r1
    23ac:	dc f4       	brge	.+54     	; 0x23e4 <HSEVEN_SEGMENT_VidDisplayNumber+0x7c>
    23ae:	8e 81       	ldd	r24, Y+6	; 0x06
    23b0:	9f 81       	ldd	r25, Y+7	; 0x07
    23b2:	81 30       	cpi	r24, 0x01	; 1
    23b4:	91 05       	cpc	r25, r1
    23b6:	09 f4       	brne	.+2      	; 0x23ba <HSEVEN_SEGMENT_VidDisplayNumber+0x52>
    23b8:	3f c0       	rjmp	.+126    	; 0x2438 <HSEVEN_SEGMENT_VidDisplayNumber+0xd0>
    23ba:	2e 81       	ldd	r18, Y+6	; 0x06
    23bc:	3f 81       	ldd	r19, Y+7	; 0x07
    23be:	22 30       	cpi	r18, 0x02	; 2
    23c0:	31 05       	cpc	r19, r1
    23c2:	2c f4       	brge	.+10     	; 0x23ce <HSEVEN_SEGMENT_VidDisplayNumber+0x66>
    23c4:	8e 81       	ldd	r24, Y+6	; 0x06
    23c6:	9f 81       	ldd	r25, Y+7	; 0x07
    23c8:	00 97       	sbiw	r24, 0x00	; 0
    23ca:	79 f1       	breq	.+94     	; 0x242a <HSEVEN_SEGMENT_VidDisplayNumber+0xc2>
    23cc:	74 c0       	rjmp	.+232    	; 0x24b6 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    23ce:	2e 81       	ldd	r18, Y+6	; 0x06
    23d0:	3f 81       	ldd	r19, Y+7	; 0x07
    23d2:	22 30       	cpi	r18, 0x02	; 2
    23d4:	31 05       	cpc	r19, r1
    23d6:	b9 f1       	breq	.+110    	; 0x2446 <HSEVEN_SEGMENT_VidDisplayNumber+0xde>
    23d8:	8e 81       	ldd	r24, Y+6	; 0x06
    23da:	9f 81       	ldd	r25, Y+7	; 0x07
    23dc:	83 30       	cpi	r24, 0x03	; 3
    23de:	91 05       	cpc	r25, r1
    23e0:	c9 f1       	breq	.+114    	; 0x2454 <HSEVEN_SEGMENT_VidDisplayNumber+0xec>
    23e2:	69 c0       	rjmp	.+210    	; 0x24b6 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    23e4:	2e 81       	ldd	r18, Y+6	; 0x06
    23e6:	3f 81       	ldd	r19, Y+7	; 0x07
    23e8:	27 30       	cpi	r18, 0x07	; 7
    23ea:	31 05       	cpc	r19, r1
    23ec:	09 f4       	brne	.+2      	; 0x23f0 <HSEVEN_SEGMENT_VidDisplayNumber+0x88>
    23ee:	4e c0       	rjmp	.+156    	; 0x248c <HSEVEN_SEGMENT_VidDisplayNumber+0x124>
    23f0:	8e 81       	ldd	r24, Y+6	; 0x06
    23f2:	9f 81       	ldd	r25, Y+7	; 0x07
    23f4:	88 30       	cpi	r24, 0x08	; 8
    23f6:	91 05       	cpc	r25, r1
    23f8:	5c f4       	brge	.+22     	; 0x2410 <HSEVEN_SEGMENT_VidDisplayNumber+0xa8>
    23fa:	2e 81       	ldd	r18, Y+6	; 0x06
    23fc:	3f 81       	ldd	r19, Y+7	; 0x07
    23fe:	25 30       	cpi	r18, 0x05	; 5
    2400:	31 05       	cpc	r19, r1
    2402:	b1 f1       	breq	.+108    	; 0x2470 <HSEVEN_SEGMENT_VidDisplayNumber+0x108>
    2404:	8e 81       	ldd	r24, Y+6	; 0x06
    2406:	9f 81       	ldd	r25, Y+7	; 0x07
    2408:	86 30       	cpi	r24, 0x06	; 6
    240a:	91 05       	cpc	r25, r1
    240c:	c1 f1       	breq	.+112    	; 0x247e <HSEVEN_SEGMENT_VidDisplayNumber+0x116>
    240e:	53 c0       	rjmp	.+166    	; 0x24b6 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    2410:	2e 81       	ldd	r18, Y+6	; 0x06
    2412:	3f 81       	ldd	r19, Y+7	; 0x07
    2414:	28 30       	cpi	r18, 0x08	; 8
    2416:	31 05       	cpc	r19, r1
    2418:	09 f4       	brne	.+2      	; 0x241c <HSEVEN_SEGMENT_VidDisplayNumber+0xb4>
    241a:	3f c0       	rjmp	.+126    	; 0x249a <HSEVEN_SEGMENT_VidDisplayNumber+0x132>
    241c:	8e 81       	ldd	r24, Y+6	; 0x06
    241e:	9f 81       	ldd	r25, Y+7	; 0x07
    2420:	89 30       	cpi	r24, 0x09	; 9
    2422:	91 05       	cpc	r25, r1
    2424:	09 f4       	brne	.+2      	; 0x2428 <HSEVEN_SEGMENT_VidDisplayNumber+0xc0>
    2426:	40 c0       	rjmp	.+128    	; 0x24a8 <HSEVEN_SEGMENT_VidDisplayNumber+0x140>
    2428:	46 c0       	rjmp	.+140    	; 0x24b6 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
	{
	case 0:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ZERO);
    242a:	e9 81       	ldd	r30, Y+1	; 0x01
    242c:	fa 81       	ldd	r31, Y+2	; 0x02
    242e:	80 81       	ld	r24, Z
    2430:	6f e3       	ldi	r22, 0x3F	; 63
    2432:	0e 94 a1 0b 	call	0x1742	; 0x1742 <MDIO_Error_State_SetPortValue>
    2436:	e6 c0       	rjmp	.+460    	; 0x2604 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 1:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ONE);
    2438:	e9 81       	ldd	r30, Y+1	; 0x01
    243a:	fa 81       	ldd	r31, Y+2	; 0x02
    243c:	80 81       	ld	r24, Z
    243e:	66 e0       	ldi	r22, 0x06	; 6
    2440:	0e 94 a1 0b 	call	0x1742	; 0x1742 <MDIO_Error_State_SetPortValue>
    2444:	df c0       	rjmp	.+446    	; 0x2604 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 2:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,TWO);
    2446:	e9 81       	ldd	r30, Y+1	; 0x01
    2448:	fa 81       	ldd	r31, Y+2	; 0x02
    244a:	80 81       	ld	r24, Z
    244c:	6b e5       	ldi	r22, 0x5B	; 91
    244e:	0e 94 a1 0b 	call	0x1742	; 0x1742 <MDIO_Error_State_SetPortValue>
    2452:	d8 c0       	rjmp	.+432    	; 0x2604 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 3:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,THREE);
    2454:	e9 81       	ldd	r30, Y+1	; 0x01
    2456:	fa 81       	ldd	r31, Y+2	; 0x02
    2458:	80 81       	ld	r24, Z
    245a:	6f e4       	ldi	r22, 0x4F	; 79
    245c:	0e 94 a1 0b 	call	0x1742	; 0x1742 <MDIO_Error_State_SetPortValue>
    2460:	d1 c0       	rjmp	.+418    	; 0x2604 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 4:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,FOUR);
    2462:	e9 81       	ldd	r30, Y+1	; 0x01
    2464:	fa 81       	ldd	r31, Y+2	; 0x02
    2466:	80 81       	ld	r24, Z
    2468:	66 e6       	ldi	r22, 0x66	; 102
    246a:	0e 94 a1 0b 	call	0x1742	; 0x1742 <MDIO_Error_State_SetPortValue>
    246e:	ca c0       	rjmp	.+404    	; 0x2604 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 5:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,FIVE);
    2470:	e9 81       	ldd	r30, Y+1	; 0x01
    2472:	fa 81       	ldd	r31, Y+2	; 0x02
    2474:	80 81       	ld	r24, Z
    2476:	6d e6       	ldi	r22, 0x6D	; 109
    2478:	0e 94 a1 0b 	call	0x1742	; 0x1742 <MDIO_Error_State_SetPortValue>
    247c:	c3 c0       	rjmp	.+390    	; 0x2604 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 6:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,SIX);
    247e:	e9 81       	ldd	r30, Y+1	; 0x01
    2480:	fa 81       	ldd	r31, Y+2	; 0x02
    2482:	80 81       	ld	r24, Z
    2484:	6d e7       	ldi	r22, 0x7D	; 125
    2486:	0e 94 a1 0b 	call	0x1742	; 0x1742 <MDIO_Error_State_SetPortValue>
    248a:	bc c0       	rjmp	.+376    	; 0x2604 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 7:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,SEVEN);
    248c:	e9 81       	ldd	r30, Y+1	; 0x01
    248e:	fa 81       	ldd	r31, Y+2	; 0x02
    2490:	80 81       	ld	r24, Z
    2492:	67 e0       	ldi	r22, 0x07	; 7
    2494:	0e 94 a1 0b 	call	0x1742	; 0x1742 <MDIO_Error_State_SetPortValue>
    2498:	b5 c0       	rjmp	.+362    	; 0x2604 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 8:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,EIGHT);
    249a:	e9 81       	ldd	r30, Y+1	; 0x01
    249c:	fa 81       	ldd	r31, Y+2	; 0x02
    249e:	80 81       	ld	r24, Z
    24a0:	6f e7       	ldi	r22, 0x7F	; 127
    24a2:	0e 94 a1 0b 	call	0x1742	; 0x1742 <MDIO_Error_State_SetPortValue>
    24a6:	ae c0       	rjmp	.+348    	; 0x2604 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 9:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,NINE);
    24a8:	e9 81       	ldd	r30, Y+1	; 0x01
    24aa:	fa 81       	ldd	r31, Y+2	; 0x02
    24ac:	80 81       	ld	r24, Z
    24ae:	6f e6       	ldi	r22, 0x6F	; 111
    24b0:	0e 94 a1 0b 	call	0x1742	; 0x1742 <MDIO_Error_State_SetPortValue>
    24b4:	a7 c0       	rjmp	.+334    	; 0x2604 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	default:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ERROR);
    24b6:	e9 81       	ldd	r30, Y+1	; 0x01
    24b8:	fa 81       	ldd	r31, Y+2	; 0x02
    24ba:	80 81       	ld	r24, Z
    24bc:	69 e7       	ldi	r22, 0x79	; 121
    24be:	0e 94 a1 0b 	call	0x1742	; 0x1742 <MDIO_Error_State_SetPortValue>
    24c2:	a0 c0       	rjmp	.+320    	; 0x2604 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
	}
}
else if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration==COMMON_ANODE)
    24c4:	e9 81       	ldd	r30, Y+1	; 0x01
    24c6:	fa 81       	ldd	r31, Y+2	; 0x02
    24c8:	81 81       	ldd	r24, Z+1	; 0x01
    24ca:	88 23       	and	r24, r24
    24cc:	09 f0       	breq	.+2      	; 0x24d0 <HSEVEN_SEGMENT_VidDisplayNumber+0x168>
    24ce:	9a c0       	rjmp	.+308    	; 0x2604 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
{
	switch(Copy_u8Number)
    24d0:	8b 81       	ldd	r24, Y+3	; 0x03
    24d2:	28 2f       	mov	r18, r24
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	3d 83       	std	Y+5, r19	; 0x05
    24d8:	2c 83       	std	Y+4, r18	; 0x04
    24da:	8c 81       	ldd	r24, Y+4	; 0x04
    24dc:	9d 81       	ldd	r25, Y+5	; 0x05
    24de:	84 30       	cpi	r24, 0x04	; 4
    24e0:	91 05       	cpc	r25, r1
    24e2:	09 f4       	brne	.+2      	; 0x24e6 <HSEVEN_SEGMENT_VidDisplayNumber+0x17e>
    24e4:	5f c0       	rjmp	.+190    	; 0x25a4 <HSEVEN_SEGMENT_VidDisplayNumber+0x23c>
    24e6:	2c 81       	ldd	r18, Y+4	; 0x04
    24e8:	3d 81       	ldd	r19, Y+5	; 0x05
    24ea:	25 30       	cpi	r18, 0x05	; 5
    24ec:	31 05       	cpc	r19, r1
    24ee:	dc f4       	brge	.+54     	; 0x2526 <HSEVEN_SEGMENT_VidDisplayNumber+0x1be>
    24f0:	8c 81       	ldd	r24, Y+4	; 0x04
    24f2:	9d 81       	ldd	r25, Y+5	; 0x05
    24f4:	81 30       	cpi	r24, 0x01	; 1
    24f6:	91 05       	cpc	r25, r1
    24f8:	09 f4       	brne	.+2      	; 0x24fc <HSEVEN_SEGMENT_VidDisplayNumber+0x194>
    24fa:	3f c0       	rjmp	.+126    	; 0x257a <HSEVEN_SEGMENT_VidDisplayNumber+0x212>
    24fc:	2c 81       	ldd	r18, Y+4	; 0x04
    24fe:	3d 81       	ldd	r19, Y+5	; 0x05
    2500:	22 30       	cpi	r18, 0x02	; 2
    2502:	31 05       	cpc	r19, r1
    2504:	2c f4       	brge	.+10     	; 0x2510 <HSEVEN_SEGMENT_VidDisplayNumber+0x1a8>
    2506:	8c 81       	ldd	r24, Y+4	; 0x04
    2508:	9d 81       	ldd	r25, Y+5	; 0x05
    250a:	00 97       	sbiw	r24, 0x00	; 0
    250c:	79 f1       	breq	.+94     	; 0x256c <HSEVEN_SEGMENT_VidDisplayNumber+0x204>
    250e:	74 c0       	rjmp	.+232    	; 0x25f8 <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    2510:	2c 81       	ldd	r18, Y+4	; 0x04
    2512:	3d 81       	ldd	r19, Y+5	; 0x05
    2514:	22 30       	cpi	r18, 0x02	; 2
    2516:	31 05       	cpc	r19, r1
    2518:	b9 f1       	breq	.+110    	; 0x2588 <HSEVEN_SEGMENT_VidDisplayNumber+0x220>
    251a:	8c 81       	ldd	r24, Y+4	; 0x04
    251c:	9d 81       	ldd	r25, Y+5	; 0x05
    251e:	83 30       	cpi	r24, 0x03	; 3
    2520:	91 05       	cpc	r25, r1
    2522:	c9 f1       	breq	.+114    	; 0x2596 <HSEVEN_SEGMENT_VidDisplayNumber+0x22e>
    2524:	69 c0       	rjmp	.+210    	; 0x25f8 <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    2526:	2c 81       	ldd	r18, Y+4	; 0x04
    2528:	3d 81       	ldd	r19, Y+5	; 0x05
    252a:	27 30       	cpi	r18, 0x07	; 7
    252c:	31 05       	cpc	r19, r1
    252e:	09 f4       	brne	.+2      	; 0x2532 <HSEVEN_SEGMENT_VidDisplayNumber+0x1ca>
    2530:	4e c0       	rjmp	.+156    	; 0x25ce <HSEVEN_SEGMENT_VidDisplayNumber+0x266>
    2532:	8c 81       	ldd	r24, Y+4	; 0x04
    2534:	9d 81       	ldd	r25, Y+5	; 0x05
    2536:	88 30       	cpi	r24, 0x08	; 8
    2538:	91 05       	cpc	r25, r1
    253a:	5c f4       	brge	.+22     	; 0x2552 <HSEVEN_SEGMENT_VidDisplayNumber+0x1ea>
    253c:	2c 81       	ldd	r18, Y+4	; 0x04
    253e:	3d 81       	ldd	r19, Y+5	; 0x05
    2540:	25 30       	cpi	r18, 0x05	; 5
    2542:	31 05       	cpc	r19, r1
    2544:	b1 f1       	breq	.+108    	; 0x25b2 <HSEVEN_SEGMENT_VidDisplayNumber+0x24a>
    2546:	8c 81       	ldd	r24, Y+4	; 0x04
    2548:	9d 81       	ldd	r25, Y+5	; 0x05
    254a:	86 30       	cpi	r24, 0x06	; 6
    254c:	91 05       	cpc	r25, r1
    254e:	c1 f1       	breq	.+112    	; 0x25c0 <HSEVEN_SEGMENT_VidDisplayNumber+0x258>
    2550:	53 c0       	rjmp	.+166    	; 0x25f8 <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    2552:	2c 81       	ldd	r18, Y+4	; 0x04
    2554:	3d 81       	ldd	r19, Y+5	; 0x05
    2556:	28 30       	cpi	r18, 0x08	; 8
    2558:	31 05       	cpc	r19, r1
    255a:	09 f4       	brne	.+2      	; 0x255e <HSEVEN_SEGMENT_VidDisplayNumber+0x1f6>
    255c:	3f c0       	rjmp	.+126    	; 0x25dc <HSEVEN_SEGMENT_VidDisplayNumber+0x274>
    255e:	8c 81       	ldd	r24, Y+4	; 0x04
    2560:	9d 81       	ldd	r25, Y+5	; 0x05
    2562:	89 30       	cpi	r24, 0x09	; 9
    2564:	91 05       	cpc	r25, r1
    2566:	09 f4       	brne	.+2      	; 0x256a <HSEVEN_SEGMENT_VidDisplayNumber+0x202>
    2568:	40 c0       	rjmp	.+128    	; 0x25ea <HSEVEN_SEGMENT_VidDisplayNumber+0x282>
    256a:	46 c0       	rjmp	.+140    	; 0x25f8 <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
	{
	case 0:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ZERO);
    256c:	e9 81       	ldd	r30, Y+1	; 0x01
    256e:	fa 81       	ldd	r31, Y+2	; 0x02
    2570:	80 81       	ld	r24, Z
    2572:	60 ec       	ldi	r22, 0xC0	; 192
    2574:	0e 94 a1 0b 	call	0x1742	; 0x1742 <MDIO_Error_State_SetPortValue>
    2578:	45 c0       	rjmp	.+138    	; 0x2604 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 1:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ONE);
    257a:	e9 81       	ldd	r30, Y+1	; 0x01
    257c:	fa 81       	ldd	r31, Y+2	; 0x02
    257e:	80 81       	ld	r24, Z
    2580:	69 ef       	ldi	r22, 0xF9	; 249
    2582:	0e 94 a1 0b 	call	0x1742	; 0x1742 <MDIO_Error_State_SetPortValue>
    2586:	3e c0       	rjmp	.+124    	; 0x2604 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 2:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~TWO);
    2588:	e9 81       	ldd	r30, Y+1	; 0x01
    258a:	fa 81       	ldd	r31, Y+2	; 0x02
    258c:	80 81       	ld	r24, Z
    258e:	64 ea       	ldi	r22, 0xA4	; 164
    2590:	0e 94 a1 0b 	call	0x1742	; 0x1742 <MDIO_Error_State_SetPortValue>
    2594:	37 c0       	rjmp	.+110    	; 0x2604 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 3:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~THREE);
    2596:	e9 81       	ldd	r30, Y+1	; 0x01
    2598:	fa 81       	ldd	r31, Y+2	; 0x02
    259a:	80 81       	ld	r24, Z
    259c:	60 eb       	ldi	r22, 0xB0	; 176
    259e:	0e 94 a1 0b 	call	0x1742	; 0x1742 <MDIO_Error_State_SetPortValue>
    25a2:	30 c0       	rjmp	.+96     	; 0x2604 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 4:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~FOUR);
    25a4:	e9 81       	ldd	r30, Y+1	; 0x01
    25a6:	fa 81       	ldd	r31, Y+2	; 0x02
    25a8:	80 81       	ld	r24, Z
    25aa:	69 e9       	ldi	r22, 0x99	; 153
    25ac:	0e 94 a1 0b 	call	0x1742	; 0x1742 <MDIO_Error_State_SetPortValue>
    25b0:	29 c0       	rjmp	.+82     	; 0x2604 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 5:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~FIVE);
    25b2:	e9 81       	ldd	r30, Y+1	; 0x01
    25b4:	fa 81       	ldd	r31, Y+2	; 0x02
    25b6:	80 81       	ld	r24, Z
    25b8:	62 e9       	ldi	r22, 0x92	; 146
    25ba:	0e 94 a1 0b 	call	0x1742	; 0x1742 <MDIO_Error_State_SetPortValue>
    25be:	22 c0       	rjmp	.+68     	; 0x2604 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 6:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~SIX);
    25c0:	e9 81       	ldd	r30, Y+1	; 0x01
    25c2:	fa 81       	ldd	r31, Y+2	; 0x02
    25c4:	80 81       	ld	r24, Z
    25c6:	62 e8       	ldi	r22, 0x82	; 130
    25c8:	0e 94 a1 0b 	call	0x1742	; 0x1742 <MDIO_Error_State_SetPortValue>
    25cc:	1b c0       	rjmp	.+54     	; 0x2604 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 7:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~SEVEN);
    25ce:	e9 81       	ldd	r30, Y+1	; 0x01
    25d0:	fa 81       	ldd	r31, Y+2	; 0x02
    25d2:	80 81       	ld	r24, Z
    25d4:	68 ef       	ldi	r22, 0xF8	; 248
    25d6:	0e 94 a1 0b 	call	0x1742	; 0x1742 <MDIO_Error_State_SetPortValue>
    25da:	14 c0       	rjmp	.+40     	; 0x2604 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 8:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~EIGHT);
    25dc:	e9 81       	ldd	r30, Y+1	; 0x01
    25de:	fa 81       	ldd	r31, Y+2	; 0x02
    25e0:	80 81       	ld	r24, Z
    25e2:	60 e8       	ldi	r22, 0x80	; 128
    25e4:	0e 94 a1 0b 	call	0x1742	; 0x1742 <MDIO_Error_State_SetPortValue>
    25e8:	0d c0       	rjmp	.+26     	; 0x2604 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 9:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~NINE);
    25ea:	e9 81       	ldd	r30, Y+1	; 0x01
    25ec:	fa 81       	ldd	r31, Y+2	; 0x02
    25ee:	80 81       	ld	r24, Z
    25f0:	60 e9       	ldi	r22, 0x90	; 144
    25f2:	0e 94 a1 0b 	call	0x1742	; 0x1742 <MDIO_Error_State_SetPortValue>
    25f6:	06 c0       	rjmp	.+12     	; 0x2604 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	default:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ERROR);
    25f8:	e9 81       	ldd	r30, Y+1	; 0x01
    25fa:	fa 81       	ldd	r31, Y+2	; 0x02
    25fc:	80 81       	ld	r24, Z
    25fe:	66 e8       	ldi	r22, 0x86	; 134
    2600:	0e 94 a1 0b 	call	0x1742	; 0x1742 <MDIO_Error_State_SetPortValue>
	}
}
}
    2604:	27 96       	adiw	r28, 0x07	; 7
    2606:	0f b6       	in	r0, 0x3f	; 63
    2608:	f8 94       	cli
    260a:	de bf       	out	0x3e, r29	; 62
    260c:	0f be       	out	0x3f, r0	; 63
    260e:	cd bf       	out	0x3d, r28	; 61
    2610:	cf 91       	pop	r28
    2612:	df 91       	pop	r29
    2614:	08 95       	ret

00002616 <HLED_VidInit>:
       "/"*Fill This Function*"/"
}
 */
///by using struct
void HLED_VidInit(LED_t *Copy_Led)
{
    2616:	df 93       	push	r29
    2618:	cf 93       	push	r28
    261a:	00 d0       	rcall	.+0      	; 0x261c <HLED_VidInit+0x6>
    261c:	cd b7       	in	r28, 0x3d	; 61
    261e:	de b7       	in	r29, 0x3e	; 62
    2620:	9a 83       	std	Y+2, r25	; 0x02
    2622:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinDirection(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_OUTPUT);
    2624:	e9 81       	ldd	r30, Y+1	; 0x01
    2626:	fa 81       	ldd	r31, Y+2	; 0x02
    2628:	81 81       	ldd	r24, Z+1	; 0x01
    262a:	e9 81       	ldd	r30, Y+1	; 0x01
    262c:	fa 81       	ldd	r31, Y+2	; 0x02
    262e:	90 81       	ld	r25, Z
    2630:	69 2f       	mov	r22, r25
    2632:	41 e0       	ldi	r20, 0x01	; 1
    2634:	0e 94 4b 09 	call	0x1296	; 0x1296 <MDIO_Error_State_SetPinDirection>
}
    2638:	0f 90       	pop	r0
    263a:	0f 90       	pop	r0
    263c:	cf 91       	pop	r28
    263e:	df 91       	pop	r29
    2640:	08 95       	ret

00002642 <HLED_VidLed_On>:

void HLED_VidLed_On(LED_t *Copy_Led)
{
    2642:	df 93       	push	r29
    2644:	cf 93       	push	r28
    2646:	00 d0       	rcall	.+0      	; 0x2648 <HLED_VidLed_On+0x6>
    2648:	cd b7       	in	r28, 0x3d	; 61
    264a:	de b7       	in	r29, 0x3e	; 62
    264c:	9a 83       	std	Y+2, r25	; 0x02
    264e:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_HIGH);
    2650:	e9 81       	ldd	r30, Y+1	; 0x01
    2652:	fa 81       	ldd	r31, Y+2	; 0x02
    2654:	81 81       	ldd	r24, Z+1	; 0x01
    2656:	e9 81       	ldd	r30, Y+1	; 0x01
    2658:	fa 81       	ldd	r31, Y+2	; 0x02
    265a:	90 81       	ld	r25, Z
    265c:	69 2f       	mov	r22, r25
    265e:	41 e0       	ldi	r20, 0x01	; 1
    2660:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
}
    2664:	0f 90       	pop	r0
    2666:	0f 90       	pop	r0
    2668:	cf 91       	pop	r28
    266a:	df 91       	pop	r29
    266c:	08 95       	ret

0000266e <HLED_VidLed_Off>:

void HLED_VidLed_Off(LED_t *Copy_Led)
{
    266e:	df 93       	push	r29
    2670:	cf 93       	push	r28
    2672:	00 d0       	rcall	.+0      	; 0x2674 <HLED_VidLed_Off+0x6>
    2674:	cd b7       	in	r28, 0x3d	; 61
    2676:	de b7       	in	r29, 0x3e	; 62
    2678:	9a 83       	std	Y+2, r25	; 0x02
    267a:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_LOW);
    267c:	e9 81       	ldd	r30, Y+1	; 0x01
    267e:	fa 81       	ldd	r31, Y+2	; 0x02
    2680:	81 81       	ldd	r24, Z+1	; 0x01
    2682:	e9 81       	ldd	r30, Y+1	; 0x01
    2684:	fa 81       	ldd	r31, Y+2	; 0x02
    2686:	90 81       	ld	r25, Z
    2688:	69 2f       	mov	r22, r25
    268a:	40 e0       	ldi	r20, 0x00	; 0
    268c:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
}
    2690:	0f 90       	pop	r0
    2692:	0f 90       	pop	r0
    2694:	cf 91       	pop	r28
    2696:	df 91       	pop	r29
    2698:	08 95       	ret

0000269a <HLED_VidLed_Toggle>:
void HLED_VidLed_Toggle(LED_t *Copy_Led)
{
    269a:	df 93       	push	r29
    269c:	cf 93       	push	r28
    269e:	00 d0       	rcall	.+0      	; 0x26a0 <HLED_VidLed_Toggle+0x6>
    26a0:	cd b7       	in	r28, 0x3d	; 61
    26a2:	de b7       	in	r29, 0x3e	; 62
    26a4:	9a 83       	std	Y+2, r25	; 0x02
    26a6:	89 83       	std	Y+1, r24	; 0x01
	          /*Fill This Function*/
	/*Toggle Function*/
	static u8 Flag=0;
	if(Flag==0)
    26a8:	80 91 c8 00 	lds	r24, 0x00C8
    26ac:	88 23       	and	r24, r24
    26ae:	71 f4       	brne	.+28     	; 0x26cc <HLED_VidLed_Toggle+0x32>
	{
		MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_HIGH);
    26b0:	e9 81       	ldd	r30, Y+1	; 0x01
    26b2:	fa 81       	ldd	r31, Y+2	; 0x02
    26b4:	81 81       	ldd	r24, Z+1	; 0x01
    26b6:	e9 81       	ldd	r30, Y+1	; 0x01
    26b8:	fa 81       	ldd	r31, Y+2	; 0x02
    26ba:	90 81       	ld	r25, Z
    26bc:	69 2f       	mov	r22, r25
    26be:	41 e0       	ldi	r20, 0x01	; 1
    26c0:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
		Flag=1;
    26c4:	81 e0       	ldi	r24, 0x01	; 1
    26c6:	80 93 c8 00 	sts	0x00C8, r24
    26ca:	0c c0       	rjmp	.+24     	; 0x26e4 <HLED_VidLed_Toggle+0x4a>
	}
	else
	{
		MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_LOW);
    26cc:	e9 81       	ldd	r30, Y+1	; 0x01
    26ce:	fa 81       	ldd	r31, Y+2	; 0x02
    26d0:	81 81       	ldd	r24, Z+1	; 0x01
    26d2:	e9 81       	ldd	r30, Y+1	; 0x01
    26d4:	fa 81       	ldd	r31, Y+2	; 0x02
    26d6:	90 81       	ld	r25, Z
    26d8:	69 2f       	mov	r22, r25
    26da:	40 e0       	ldi	r20, 0x00	; 0
    26dc:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
		Flag=0;
    26e0:	10 92 c8 00 	sts	0x00C8, r1
	}
}
    26e4:	0f 90       	pop	r0
    26e6:	0f 90       	pop	r0
    26e8:	cf 91       	pop	r28
    26ea:	df 91       	pop	r29
    26ec:	08 95       	ret

000026ee <HCLCD_Vid8Bits_SendCommand>:


/*Send Command 8 Bits*/

void HCLCD_Vid8Bits_SendCommand(u8 Copy_u8Command)
{
    26ee:	df 93       	push	r29
    26f0:	cf 93       	push	r28
    26f2:	cd b7       	in	r28, 0x3d	; 61
    26f4:	de b7       	in	r29, 0x3e	; 62
    26f6:	6d 97       	sbiw	r28, 0x1d	; 29
    26f8:	0f b6       	in	r0, 0x3f	; 63
    26fa:	f8 94       	cli
    26fc:	de bf       	out	0x3e, r29	; 62
    26fe:	0f be       	out	0x3f, r0	; 63
    2700:	cd bf       	out	0x3d, r28	; 61
    2702:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Select command register-->Write zero on RS Pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_LOW);
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	62 e0       	ldi	r22, 0x02	; 2
    2708:	40 e0       	ldi	r20, 0x00	; 0
    270a:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
	/**select Write mode--> Write zero on RW Pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	62 e0       	ldi	r22, 0x02	; 2
    2712:	40 e0       	ldi	r20, 0x00	; 0
    2714:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
	/*Send Command ON port Data*/
	MDIO_Error_State_SetPortValue(DATA_PORT,Copy_u8Command);
    2718:	82 e0       	ldi	r24, 0x02	; 2
    271a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    271c:	0e 94 a1 0b 	call	0x1742	; 0x1742 <MDIO_Error_State_SetPortValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    2720:	82 e0       	ldi	r24, 0x02	; 2
    2722:	62 e0       	ldi	r22, 0x02	; 2
    2724:	41 e0       	ldi	r20, 0x01	; 1
    2726:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
    272a:	80 e0       	ldi	r24, 0x00	; 0
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	a0 e0       	ldi	r26, 0x00	; 0
    2730:	b0 e4       	ldi	r27, 0x40	; 64
    2732:	89 8f       	std	Y+25, r24	; 0x19
    2734:	9a 8f       	std	Y+26, r25	; 0x1a
    2736:	ab 8f       	std	Y+27, r26	; 0x1b
    2738:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    273a:	69 8d       	ldd	r22, Y+25	; 0x19
    273c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    273e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2740:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	4a ef       	ldi	r20, 0xFA	; 250
    2748:	54 e4       	ldi	r21, 0x44	; 68
    274a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    274e:	dc 01       	movw	r26, r24
    2750:	cb 01       	movw	r24, r22
    2752:	8d 8b       	std	Y+21, r24	; 0x15
    2754:	9e 8b       	std	Y+22, r25	; 0x16
    2756:	af 8b       	std	Y+23, r26	; 0x17
    2758:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    275a:	6d 89       	ldd	r22, Y+21	; 0x15
    275c:	7e 89       	ldd	r23, Y+22	; 0x16
    275e:	8f 89       	ldd	r24, Y+23	; 0x17
    2760:	98 8d       	ldd	r25, Y+24	; 0x18
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	40 e8       	ldi	r20, 0x80	; 128
    2768:	5f e3       	ldi	r21, 0x3F	; 63
    276a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    276e:	88 23       	and	r24, r24
    2770:	2c f4       	brge	.+10     	; 0x277c <HCLCD_Vid8Bits_SendCommand+0x8e>
		__ticks = 1;
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	9c 8b       	std	Y+20, r25	; 0x14
    2778:	8b 8b       	std	Y+19, r24	; 0x13
    277a:	3f c0       	rjmp	.+126    	; 0x27fa <HCLCD_Vid8Bits_SendCommand+0x10c>
	else if (__tmp > 65535)
    277c:	6d 89       	ldd	r22, Y+21	; 0x15
    277e:	7e 89       	ldd	r23, Y+22	; 0x16
    2780:	8f 89       	ldd	r24, Y+23	; 0x17
    2782:	98 8d       	ldd	r25, Y+24	; 0x18
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	3f ef       	ldi	r19, 0xFF	; 255
    2788:	4f e7       	ldi	r20, 0x7F	; 127
    278a:	57 e4       	ldi	r21, 0x47	; 71
    278c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2790:	18 16       	cp	r1, r24
    2792:	4c f5       	brge	.+82     	; 0x27e6 <HCLCD_Vid8Bits_SendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2794:	69 8d       	ldd	r22, Y+25	; 0x19
    2796:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2798:	8b 8d       	ldd	r24, Y+27	; 0x1b
    279a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	40 e2       	ldi	r20, 0x20	; 32
    27a2:	51 e4       	ldi	r21, 0x41	; 65
    27a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a8:	dc 01       	movw	r26, r24
    27aa:	cb 01       	movw	r24, r22
    27ac:	bc 01       	movw	r22, r24
    27ae:	cd 01       	movw	r24, r26
    27b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	9c 8b       	std	Y+20, r25	; 0x14
    27ba:	8b 8b       	std	Y+19, r24	; 0x13
    27bc:	0f c0       	rjmp	.+30     	; 0x27dc <HCLCD_Vid8Bits_SendCommand+0xee>
    27be:	88 ec       	ldi	r24, 0xC8	; 200
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	9a 8b       	std	Y+18, r25	; 0x12
    27c4:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27c6:	89 89       	ldd	r24, Y+17	; 0x11
    27c8:	9a 89       	ldd	r25, Y+18	; 0x12
    27ca:	01 97       	sbiw	r24, 0x01	; 1
    27cc:	f1 f7       	brne	.-4      	; 0x27ca <HCLCD_Vid8Bits_SendCommand+0xdc>
    27ce:	9a 8b       	std	Y+18, r25	; 0x12
    27d0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27d2:	8b 89       	ldd	r24, Y+19	; 0x13
    27d4:	9c 89       	ldd	r25, Y+20	; 0x14
    27d6:	01 97       	sbiw	r24, 0x01	; 1
    27d8:	9c 8b       	std	Y+20, r25	; 0x14
    27da:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27dc:	8b 89       	ldd	r24, Y+19	; 0x13
    27de:	9c 89       	ldd	r25, Y+20	; 0x14
    27e0:	00 97       	sbiw	r24, 0x00	; 0
    27e2:	69 f7       	brne	.-38     	; 0x27be <HCLCD_Vid8Bits_SendCommand+0xd0>
    27e4:	14 c0       	rjmp	.+40     	; 0x280e <HCLCD_Vid8Bits_SendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27e6:	6d 89       	ldd	r22, Y+21	; 0x15
    27e8:	7e 89       	ldd	r23, Y+22	; 0x16
    27ea:	8f 89       	ldd	r24, Y+23	; 0x17
    27ec:	98 8d       	ldd	r25, Y+24	; 0x18
    27ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	9c 8b       	std	Y+20, r25	; 0x14
    27f8:	8b 8b       	std	Y+19, r24	; 0x13
    27fa:	8b 89       	ldd	r24, Y+19	; 0x13
    27fc:	9c 89       	ldd	r25, Y+20	; 0x14
    27fe:	98 8b       	std	Y+16, r25	; 0x10
    2800:	8f 87       	std	Y+15, r24	; 0x0f
    2802:	8f 85       	ldd	r24, Y+15	; 0x0f
    2804:	98 89       	ldd	r25, Y+16	; 0x10
    2806:	01 97       	sbiw	r24, 0x01	; 1
    2808:	f1 f7       	brne	.-4      	; 0x2806 <HCLCD_Vid8Bits_SendCommand+0x118>
    280a:	98 8b       	std	Y+16, r25	; 0x10
    280c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    280e:	82 e0       	ldi	r24, 0x02	; 2
    2810:	62 e0       	ldi	r22, 0x02	; 2
    2812:	40 e0       	ldi	r20, 0x00	; 0
    2814:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
    2818:	80 e0       	ldi	r24, 0x00	; 0
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	a0 e0       	ldi	r26, 0x00	; 0
    281e:	b0 e4       	ldi	r27, 0x40	; 64
    2820:	8b 87       	std	Y+11, r24	; 0x0b
    2822:	9c 87       	std	Y+12, r25	; 0x0c
    2824:	ad 87       	std	Y+13, r26	; 0x0d
    2826:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2828:	6b 85       	ldd	r22, Y+11	; 0x0b
    282a:	7c 85       	ldd	r23, Y+12	; 0x0c
    282c:	8d 85       	ldd	r24, Y+13	; 0x0d
    282e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2830:	20 e0       	ldi	r18, 0x00	; 0
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	4a ef       	ldi	r20, 0xFA	; 250
    2836:	54 e4       	ldi	r21, 0x44	; 68
    2838:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    283c:	dc 01       	movw	r26, r24
    283e:	cb 01       	movw	r24, r22
    2840:	8f 83       	std	Y+7, r24	; 0x07
    2842:	98 87       	std	Y+8, r25	; 0x08
    2844:	a9 87       	std	Y+9, r26	; 0x09
    2846:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2848:	6f 81       	ldd	r22, Y+7	; 0x07
    284a:	78 85       	ldd	r23, Y+8	; 0x08
    284c:	89 85       	ldd	r24, Y+9	; 0x09
    284e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2850:	20 e0       	ldi	r18, 0x00	; 0
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	40 e8       	ldi	r20, 0x80	; 128
    2856:	5f e3       	ldi	r21, 0x3F	; 63
    2858:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    285c:	88 23       	and	r24, r24
    285e:	2c f4       	brge	.+10     	; 0x286a <HCLCD_Vid8Bits_SendCommand+0x17c>
		__ticks = 1;
    2860:	81 e0       	ldi	r24, 0x01	; 1
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	9e 83       	std	Y+6, r25	; 0x06
    2866:	8d 83       	std	Y+5, r24	; 0x05
    2868:	3f c0       	rjmp	.+126    	; 0x28e8 <HCLCD_Vid8Bits_SendCommand+0x1fa>
	else if (__tmp > 65535)
    286a:	6f 81       	ldd	r22, Y+7	; 0x07
    286c:	78 85       	ldd	r23, Y+8	; 0x08
    286e:	89 85       	ldd	r24, Y+9	; 0x09
    2870:	9a 85       	ldd	r25, Y+10	; 0x0a
    2872:	20 e0       	ldi	r18, 0x00	; 0
    2874:	3f ef       	ldi	r19, 0xFF	; 255
    2876:	4f e7       	ldi	r20, 0x7F	; 127
    2878:	57 e4       	ldi	r21, 0x47	; 71
    287a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    287e:	18 16       	cp	r1, r24
    2880:	4c f5       	brge	.+82     	; 0x28d4 <HCLCD_Vid8Bits_SendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2882:	6b 85       	ldd	r22, Y+11	; 0x0b
    2884:	7c 85       	ldd	r23, Y+12	; 0x0c
    2886:	8d 85       	ldd	r24, Y+13	; 0x0d
    2888:	9e 85       	ldd	r25, Y+14	; 0x0e
    288a:	20 e0       	ldi	r18, 0x00	; 0
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	40 e2       	ldi	r20, 0x20	; 32
    2890:	51 e4       	ldi	r21, 0x41	; 65
    2892:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2896:	dc 01       	movw	r26, r24
    2898:	cb 01       	movw	r24, r22
    289a:	bc 01       	movw	r22, r24
    289c:	cd 01       	movw	r24, r26
    289e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a2:	dc 01       	movw	r26, r24
    28a4:	cb 01       	movw	r24, r22
    28a6:	9e 83       	std	Y+6, r25	; 0x06
    28a8:	8d 83       	std	Y+5, r24	; 0x05
    28aa:	0f c0       	rjmp	.+30     	; 0x28ca <HCLCD_Vid8Bits_SendCommand+0x1dc>
    28ac:	88 ec       	ldi	r24, 0xC8	; 200
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	9c 83       	std	Y+4, r25	; 0x04
    28b2:	8b 83       	std	Y+3, r24	; 0x03
    28b4:	8b 81       	ldd	r24, Y+3	; 0x03
    28b6:	9c 81       	ldd	r25, Y+4	; 0x04
    28b8:	01 97       	sbiw	r24, 0x01	; 1
    28ba:	f1 f7       	brne	.-4      	; 0x28b8 <HCLCD_Vid8Bits_SendCommand+0x1ca>
    28bc:	9c 83       	std	Y+4, r25	; 0x04
    28be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28c0:	8d 81       	ldd	r24, Y+5	; 0x05
    28c2:	9e 81       	ldd	r25, Y+6	; 0x06
    28c4:	01 97       	sbiw	r24, 0x01	; 1
    28c6:	9e 83       	std	Y+6, r25	; 0x06
    28c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ca:	8d 81       	ldd	r24, Y+5	; 0x05
    28cc:	9e 81       	ldd	r25, Y+6	; 0x06
    28ce:	00 97       	sbiw	r24, 0x00	; 0
    28d0:	69 f7       	brne	.-38     	; 0x28ac <HCLCD_Vid8Bits_SendCommand+0x1be>
    28d2:	14 c0       	rjmp	.+40     	; 0x28fc <HCLCD_Vid8Bits_SendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d4:	6f 81       	ldd	r22, Y+7	; 0x07
    28d6:	78 85       	ldd	r23, Y+8	; 0x08
    28d8:	89 85       	ldd	r24, Y+9	; 0x09
    28da:	9a 85       	ldd	r25, Y+10	; 0x0a
    28dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e0:	dc 01       	movw	r26, r24
    28e2:	cb 01       	movw	r24, r22
    28e4:	9e 83       	std	Y+6, r25	; 0x06
    28e6:	8d 83       	std	Y+5, r24	; 0x05
    28e8:	8d 81       	ldd	r24, Y+5	; 0x05
    28ea:	9e 81       	ldd	r25, Y+6	; 0x06
    28ec:	9a 83       	std	Y+2, r25	; 0x02
    28ee:	89 83       	std	Y+1, r24	; 0x01
    28f0:	89 81       	ldd	r24, Y+1	; 0x01
    28f2:	9a 81       	ldd	r25, Y+2	; 0x02
    28f4:	01 97       	sbiw	r24, 0x01	; 1
    28f6:	f1 f7       	brne	.-4      	; 0x28f4 <HCLCD_Vid8Bits_SendCommand+0x206>
    28f8:	9a 83       	std	Y+2, r25	; 0x02
    28fa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    28fc:	82 e0       	ldi	r24, 0x02	; 2
    28fe:	62 e0       	ldi	r22, 0x02	; 2
    2900:	41 e0       	ldi	r20, 0x01	; 1
    2902:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
}
    2906:	6d 96       	adiw	r28, 0x1d	; 29
    2908:	0f b6       	in	r0, 0x3f	; 63
    290a:	f8 94       	cli
    290c:	de bf       	out	0x3e, r29	; 62
    290e:	0f be       	out	0x3f, r0	; 63
    2910:	cd bf       	out	0x3d, r28	; 61
    2912:	cf 91       	pop	r28
    2914:	df 91       	pop	r29
    2916:	08 95       	ret

00002918 <HCLCD_Vid8Bits_Init>:

/*LCD 8 Bits Initialization*/
void HCLCD_Vid8Bits_Init(void)
{
    2918:	df 93       	push	r29
    291a:	cf 93       	push	r28
    291c:	cd b7       	in	r28, 0x3d	; 61
    291e:	de b7       	in	r29, 0x3e	; 62
    2920:	e8 97       	sbiw	r28, 0x38	; 56
    2922:	0f b6       	in	r0, 0x3f	; 63
    2924:	f8 94       	cli
    2926:	de bf       	out	0x3e, r29	; 62
    2928:	0f be       	out	0x3f, r0	; 63
    292a:	cd bf       	out	0x3d, r28	; 61
	/*LCD Data and Control Port Initialization*/
	MDIO_Error_State_SetPortDirection(DATA_PORT,PORT_OUTPUT);
    292c:	82 e0       	ldi	r24, 0x02	; 2
    292e:	6f ef       	ldi	r22, 0xFF	; 255
    2930:	0e 94 4e 0a 	call	0x149c	; 0x149c <MDIO_Error_State_SetPortDirection>
	MDIO_Error_State_SetPinDirection(RS,CONTROL_PORT,PIN_OUTPUT);
    2934:	80 e0       	ldi	r24, 0x00	; 0
    2936:	62 e0       	ldi	r22, 0x02	; 2
    2938:	41 e0       	ldi	r20, 0x01	; 1
    293a:	0e 94 4b 09 	call	0x1296	; 0x1296 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(RW,CONTROL_PORT,PIN_OUTPUT);
    293e:	81 e0       	ldi	r24, 0x01	; 1
    2940:	62 e0       	ldi	r22, 0x02	; 2
    2942:	41 e0       	ldi	r20, 0x01	; 1
    2944:	0e 94 4b 09 	call	0x1296	; 0x1296 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(E,CONTROL_PORT,PIN_OUTPUT);
    2948:	82 e0       	ldi	r24, 0x02	; 2
    294a:	62 e0       	ldi	r22, 0x02	; 2
    294c:	41 e0       	ldi	r20, 0x01	; 1
    294e:	0e 94 4b 09 	call	0x1296	; 0x1296 <MDIO_Error_State_SetPinDirection>
    2952:	80 e0       	ldi	r24, 0x00	; 0
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	a0 ef       	ldi	r26, 0xF0	; 240
    2958:	b1 e4       	ldi	r27, 0x41	; 65
    295a:	8d ab       	std	Y+53, r24	; 0x35
    295c:	9e ab       	std	Y+54, r25	; 0x36
    295e:	af ab       	std	Y+55, r26	; 0x37
    2960:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2962:	6d a9       	ldd	r22, Y+53	; 0x35
    2964:	7e a9       	ldd	r23, Y+54	; 0x36
    2966:	8f a9       	ldd	r24, Y+55	; 0x37
    2968:	98 ad       	ldd	r25, Y+56	; 0x38
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	4a ef       	ldi	r20, 0xFA	; 250
    2970:	54 e4       	ldi	r21, 0x44	; 68
    2972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2976:	dc 01       	movw	r26, r24
    2978:	cb 01       	movw	r24, r22
    297a:	89 ab       	std	Y+49, r24	; 0x31
    297c:	9a ab       	std	Y+50, r25	; 0x32
    297e:	ab ab       	std	Y+51, r26	; 0x33
    2980:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2982:	69 a9       	ldd	r22, Y+49	; 0x31
    2984:	7a a9       	ldd	r23, Y+50	; 0x32
    2986:	8b a9       	ldd	r24, Y+51	; 0x33
    2988:	9c a9       	ldd	r25, Y+52	; 0x34
    298a:	20 e0       	ldi	r18, 0x00	; 0
    298c:	30 e0       	ldi	r19, 0x00	; 0
    298e:	40 e8       	ldi	r20, 0x80	; 128
    2990:	5f e3       	ldi	r21, 0x3F	; 63
    2992:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2996:	88 23       	and	r24, r24
    2998:	2c f4       	brge	.+10     	; 0x29a4 <HCLCD_Vid8Bits_Init+0x8c>
		__ticks = 1;
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	98 ab       	std	Y+48, r25	; 0x30
    29a0:	8f a7       	std	Y+47, r24	; 0x2f
    29a2:	3f c0       	rjmp	.+126    	; 0x2a22 <HCLCD_Vid8Bits_Init+0x10a>
	else if (__tmp > 65535)
    29a4:	69 a9       	ldd	r22, Y+49	; 0x31
    29a6:	7a a9       	ldd	r23, Y+50	; 0x32
    29a8:	8b a9       	ldd	r24, Y+51	; 0x33
    29aa:	9c a9       	ldd	r25, Y+52	; 0x34
    29ac:	20 e0       	ldi	r18, 0x00	; 0
    29ae:	3f ef       	ldi	r19, 0xFF	; 255
    29b0:	4f e7       	ldi	r20, 0x7F	; 127
    29b2:	57 e4       	ldi	r21, 0x47	; 71
    29b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29b8:	18 16       	cp	r1, r24
    29ba:	4c f5       	brge	.+82     	; 0x2a0e <HCLCD_Vid8Bits_Init+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29bc:	6d a9       	ldd	r22, Y+53	; 0x35
    29be:	7e a9       	ldd	r23, Y+54	; 0x36
    29c0:	8f a9       	ldd	r24, Y+55	; 0x37
    29c2:	98 ad       	ldd	r25, Y+56	; 0x38
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	40 e2       	ldi	r20, 0x20	; 32
    29ca:	51 e4       	ldi	r21, 0x41	; 65
    29cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d0:	dc 01       	movw	r26, r24
    29d2:	cb 01       	movw	r24, r22
    29d4:	bc 01       	movw	r22, r24
    29d6:	cd 01       	movw	r24, r26
    29d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29dc:	dc 01       	movw	r26, r24
    29de:	cb 01       	movw	r24, r22
    29e0:	98 ab       	std	Y+48, r25	; 0x30
    29e2:	8f a7       	std	Y+47, r24	; 0x2f
    29e4:	0f c0       	rjmp	.+30     	; 0x2a04 <HCLCD_Vid8Bits_Init+0xec>
    29e6:	88 ec       	ldi	r24, 0xC8	; 200
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	9e a7       	std	Y+46, r25	; 0x2e
    29ec:	8d a7       	std	Y+45, r24	; 0x2d
    29ee:	8d a5       	ldd	r24, Y+45	; 0x2d
    29f0:	9e a5       	ldd	r25, Y+46	; 0x2e
    29f2:	01 97       	sbiw	r24, 0x01	; 1
    29f4:	f1 f7       	brne	.-4      	; 0x29f2 <HCLCD_Vid8Bits_Init+0xda>
    29f6:	9e a7       	std	Y+46, r25	; 0x2e
    29f8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    29fc:	98 a9       	ldd	r25, Y+48	; 0x30
    29fe:	01 97       	sbiw	r24, 0x01	; 1
    2a00:	98 ab       	std	Y+48, r25	; 0x30
    2a02:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a04:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a06:	98 a9       	ldd	r25, Y+48	; 0x30
    2a08:	00 97       	sbiw	r24, 0x00	; 0
    2a0a:	69 f7       	brne	.-38     	; 0x29e6 <HCLCD_Vid8Bits_Init+0xce>
    2a0c:	14 c0       	rjmp	.+40     	; 0x2a36 <HCLCD_Vid8Bits_Init+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a0e:	69 a9       	ldd	r22, Y+49	; 0x31
    2a10:	7a a9       	ldd	r23, Y+50	; 0x32
    2a12:	8b a9       	ldd	r24, Y+51	; 0x33
    2a14:	9c a9       	ldd	r25, Y+52	; 0x34
    2a16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	cb 01       	movw	r24, r22
    2a1e:	98 ab       	std	Y+48, r25	; 0x30
    2a20:	8f a7       	std	Y+47, r24	; 0x2f
    2a22:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a24:	98 a9       	ldd	r25, Y+48	; 0x30
    2a26:	9c a7       	std	Y+44, r25	; 0x2c
    2a28:	8b a7       	std	Y+43, r24	; 0x2b
    2a2a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a2c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a2e:	01 97       	sbiw	r24, 0x01	; 1
    2a30:	f1 f7       	brne	.-4      	; 0x2a2e <HCLCD_Vid8Bits_Init+0x116>
    2a32:	9c a7       	std	Y+44, r25	; 0x2c
    2a34:	8b a7       	std	Y+43, r24	; 0x2b
	/*wait to 30 ms*/
	_delay_ms(30);
	/*Send function Send Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_FUNCTION_SET);
    2a36:	88 e2       	ldi	r24, 0x28	; 40
    2a38:	0e 94 77 13 	call	0x26ee	; 0x26ee <HCLCD_Vid8Bits_SendCommand>
    2a3c:	80 e0       	ldi	r24, 0x00	; 0
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	a0 e8       	ldi	r26, 0x80	; 128
    2a42:	bf e3       	ldi	r27, 0x3F	; 63
    2a44:	8f a3       	std	Y+39, r24	; 0x27
    2a46:	98 a7       	std	Y+40, r25	; 0x28
    2a48:	a9 a7       	std	Y+41, r26	; 0x29
    2a4a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a4c:	6f a1       	ldd	r22, Y+39	; 0x27
    2a4e:	78 a5       	ldd	r23, Y+40	; 0x28
    2a50:	89 a5       	ldd	r24, Y+41	; 0x29
    2a52:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a54:	20 e0       	ldi	r18, 0x00	; 0
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	4a ef       	ldi	r20, 0xFA	; 250
    2a5a:	54 e4       	ldi	r21, 0x44	; 68
    2a5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a60:	dc 01       	movw	r26, r24
    2a62:	cb 01       	movw	r24, r22
    2a64:	8b a3       	std	Y+35, r24	; 0x23
    2a66:	9c a3       	std	Y+36, r25	; 0x24
    2a68:	ad a3       	std	Y+37, r26	; 0x25
    2a6a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a6c:	6b a1       	ldd	r22, Y+35	; 0x23
    2a6e:	7c a1       	ldd	r23, Y+36	; 0x24
    2a70:	8d a1       	ldd	r24, Y+37	; 0x25
    2a72:	9e a1       	ldd	r25, Y+38	; 0x26
    2a74:	20 e0       	ldi	r18, 0x00	; 0
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	40 e8       	ldi	r20, 0x80	; 128
    2a7a:	5f e3       	ldi	r21, 0x3F	; 63
    2a7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a80:	88 23       	and	r24, r24
    2a82:	2c f4       	brge	.+10     	; 0x2a8e <HCLCD_Vid8Bits_Init+0x176>
		__ticks = 1;
    2a84:	81 e0       	ldi	r24, 0x01	; 1
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	9a a3       	std	Y+34, r25	; 0x22
    2a8a:	89 a3       	std	Y+33, r24	; 0x21
    2a8c:	3f c0       	rjmp	.+126    	; 0x2b0c <HCLCD_Vid8Bits_Init+0x1f4>
	else if (__tmp > 65535)
    2a8e:	6b a1       	ldd	r22, Y+35	; 0x23
    2a90:	7c a1       	ldd	r23, Y+36	; 0x24
    2a92:	8d a1       	ldd	r24, Y+37	; 0x25
    2a94:	9e a1       	ldd	r25, Y+38	; 0x26
    2a96:	20 e0       	ldi	r18, 0x00	; 0
    2a98:	3f ef       	ldi	r19, 0xFF	; 255
    2a9a:	4f e7       	ldi	r20, 0x7F	; 127
    2a9c:	57 e4       	ldi	r21, 0x47	; 71
    2a9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2aa2:	18 16       	cp	r1, r24
    2aa4:	4c f5       	brge	.+82     	; 0x2af8 <HCLCD_Vid8Bits_Init+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aa6:	6f a1       	ldd	r22, Y+39	; 0x27
    2aa8:	78 a5       	ldd	r23, Y+40	; 0x28
    2aaa:	89 a5       	ldd	r24, Y+41	; 0x29
    2aac:	9a a5       	ldd	r25, Y+42	; 0x2a
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	40 e2       	ldi	r20, 0x20	; 32
    2ab4:	51 e4       	ldi	r21, 0x41	; 65
    2ab6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aba:	dc 01       	movw	r26, r24
    2abc:	cb 01       	movw	r24, r22
    2abe:	bc 01       	movw	r22, r24
    2ac0:	cd 01       	movw	r24, r26
    2ac2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac6:	dc 01       	movw	r26, r24
    2ac8:	cb 01       	movw	r24, r22
    2aca:	9a a3       	std	Y+34, r25	; 0x22
    2acc:	89 a3       	std	Y+33, r24	; 0x21
    2ace:	0f c0       	rjmp	.+30     	; 0x2aee <HCLCD_Vid8Bits_Init+0x1d6>
    2ad0:	88 ec       	ldi	r24, 0xC8	; 200
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	98 a3       	std	Y+32, r25	; 0x20
    2ad6:	8f 8f       	std	Y+31, r24	; 0x1f
    2ad8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ada:	98 a1       	ldd	r25, Y+32	; 0x20
    2adc:	01 97       	sbiw	r24, 0x01	; 1
    2ade:	f1 f7       	brne	.-4      	; 0x2adc <HCLCD_Vid8Bits_Init+0x1c4>
    2ae0:	98 a3       	std	Y+32, r25	; 0x20
    2ae2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ae4:	89 a1       	ldd	r24, Y+33	; 0x21
    2ae6:	9a a1       	ldd	r25, Y+34	; 0x22
    2ae8:	01 97       	sbiw	r24, 0x01	; 1
    2aea:	9a a3       	std	Y+34, r25	; 0x22
    2aec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aee:	89 a1       	ldd	r24, Y+33	; 0x21
    2af0:	9a a1       	ldd	r25, Y+34	; 0x22
    2af2:	00 97       	sbiw	r24, 0x00	; 0
    2af4:	69 f7       	brne	.-38     	; 0x2ad0 <HCLCD_Vid8Bits_Init+0x1b8>
    2af6:	14 c0       	rjmp	.+40     	; 0x2b20 <HCLCD_Vid8Bits_Init+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af8:	6b a1       	ldd	r22, Y+35	; 0x23
    2afa:	7c a1       	ldd	r23, Y+36	; 0x24
    2afc:	8d a1       	ldd	r24, Y+37	; 0x25
    2afe:	9e a1       	ldd	r25, Y+38	; 0x26
    2b00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b04:	dc 01       	movw	r26, r24
    2b06:	cb 01       	movw	r24, r22
    2b08:	9a a3       	std	Y+34, r25	; 0x22
    2b0a:	89 a3       	std	Y+33, r24	; 0x21
    2b0c:	89 a1       	ldd	r24, Y+33	; 0x21
    2b0e:	9a a1       	ldd	r25, Y+34	; 0x22
    2b10:	9e 8f       	std	Y+30, r25	; 0x1e
    2b12:	8d 8f       	std	Y+29, r24	; 0x1d
    2b14:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b16:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b18:	01 97       	sbiw	r24, 0x01	; 1
    2b1a:	f1 f7       	brne	.-4      	; 0x2b18 <HCLCD_Vid8Bits_Init+0x200>
    2b1c:	9e 8f       	std	Y+30, r25	; 0x1e
    2b1e:	8d 8f       	std	Y+29, r24	; 0x1d
	/*wait to 30 ms*/
	_delay_ms(1);
	/*Send  Display on/off Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_DISPLAY_ON_OFF);
    2b20:	8c e0       	ldi	r24, 0x0C	; 12
    2b22:	0e 94 77 13 	call	0x26ee	; 0x26ee <HCLCD_Vid8Bits_SendCommand>
    2b26:	80 e0       	ldi	r24, 0x00	; 0
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	a0 e8       	ldi	r26, 0x80	; 128
    2b2c:	bf e3       	ldi	r27, 0x3F	; 63
    2b2e:	89 8f       	std	Y+25, r24	; 0x19
    2b30:	9a 8f       	std	Y+26, r25	; 0x1a
    2b32:	ab 8f       	std	Y+27, r26	; 0x1b
    2b34:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b36:	69 8d       	ldd	r22, Y+25	; 0x19
    2b38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b3e:	20 e0       	ldi	r18, 0x00	; 0
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	4a ef       	ldi	r20, 0xFA	; 250
    2b44:	54 e4       	ldi	r21, 0x44	; 68
    2b46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b4a:	dc 01       	movw	r26, r24
    2b4c:	cb 01       	movw	r24, r22
    2b4e:	8d 8b       	std	Y+21, r24	; 0x15
    2b50:	9e 8b       	std	Y+22, r25	; 0x16
    2b52:	af 8b       	std	Y+23, r26	; 0x17
    2b54:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b56:	6d 89       	ldd	r22, Y+21	; 0x15
    2b58:	7e 89       	ldd	r23, Y+22	; 0x16
    2b5a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b5c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	40 e8       	ldi	r20, 0x80	; 128
    2b64:	5f e3       	ldi	r21, 0x3F	; 63
    2b66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b6a:	88 23       	and	r24, r24
    2b6c:	2c f4       	brge	.+10     	; 0x2b78 <HCLCD_Vid8Bits_Init+0x260>
		__ticks = 1;
    2b6e:	81 e0       	ldi	r24, 0x01	; 1
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	9c 8b       	std	Y+20, r25	; 0x14
    2b74:	8b 8b       	std	Y+19, r24	; 0x13
    2b76:	3f c0       	rjmp	.+126    	; 0x2bf6 <HCLCD_Vid8Bits_Init+0x2de>
	else if (__tmp > 65535)
    2b78:	6d 89       	ldd	r22, Y+21	; 0x15
    2b7a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b7c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b7e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	3f ef       	ldi	r19, 0xFF	; 255
    2b84:	4f e7       	ldi	r20, 0x7F	; 127
    2b86:	57 e4       	ldi	r21, 0x47	; 71
    2b88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b8c:	18 16       	cp	r1, r24
    2b8e:	4c f5       	brge	.+82     	; 0x2be2 <HCLCD_Vid8Bits_Init+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b90:	69 8d       	ldd	r22, Y+25	; 0x19
    2b92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b98:	20 e0       	ldi	r18, 0x00	; 0
    2b9a:	30 e0       	ldi	r19, 0x00	; 0
    2b9c:	40 e2       	ldi	r20, 0x20	; 32
    2b9e:	51 e4       	ldi	r21, 0x41	; 65
    2ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba4:	dc 01       	movw	r26, r24
    2ba6:	cb 01       	movw	r24, r22
    2ba8:	bc 01       	movw	r22, r24
    2baa:	cd 01       	movw	r24, r26
    2bac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	cb 01       	movw	r24, r22
    2bb4:	9c 8b       	std	Y+20, r25	; 0x14
    2bb6:	8b 8b       	std	Y+19, r24	; 0x13
    2bb8:	0f c0       	rjmp	.+30     	; 0x2bd8 <HCLCD_Vid8Bits_Init+0x2c0>
    2bba:	88 ec       	ldi	r24, 0xC8	; 200
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	9a 8b       	std	Y+18, r25	; 0x12
    2bc0:	89 8b       	std	Y+17, r24	; 0x11
    2bc2:	89 89       	ldd	r24, Y+17	; 0x11
    2bc4:	9a 89       	ldd	r25, Y+18	; 0x12
    2bc6:	01 97       	sbiw	r24, 0x01	; 1
    2bc8:	f1 f7       	brne	.-4      	; 0x2bc6 <HCLCD_Vid8Bits_Init+0x2ae>
    2bca:	9a 8b       	std	Y+18, r25	; 0x12
    2bcc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bce:	8b 89       	ldd	r24, Y+19	; 0x13
    2bd0:	9c 89       	ldd	r25, Y+20	; 0x14
    2bd2:	01 97       	sbiw	r24, 0x01	; 1
    2bd4:	9c 8b       	std	Y+20, r25	; 0x14
    2bd6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bd8:	8b 89       	ldd	r24, Y+19	; 0x13
    2bda:	9c 89       	ldd	r25, Y+20	; 0x14
    2bdc:	00 97       	sbiw	r24, 0x00	; 0
    2bde:	69 f7       	brne	.-38     	; 0x2bba <HCLCD_Vid8Bits_Init+0x2a2>
    2be0:	14 c0       	rjmp	.+40     	; 0x2c0a <HCLCD_Vid8Bits_Init+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2be2:	6d 89       	ldd	r22, Y+21	; 0x15
    2be4:	7e 89       	ldd	r23, Y+22	; 0x16
    2be6:	8f 89       	ldd	r24, Y+23	; 0x17
    2be8:	98 8d       	ldd	r25, Y+24	; 0x18
    2bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bee:	dc 01       	movw	r26, r24
    2bf0:	cb 01       	movw	r24, r22
    2bf2:	9c 8b       	std	Y+20, r25	; 0x14
    2bf4:	8b 8b       	std	Y+19, r24	; 0x13
    2bf6:	8b 89       	ldd	r24, Y+19	; 0x13
    2bf8:	9c 89       	ldd	r25, Y+20	; 0x14
    2bfa:	98 8b       	std	Y+16, r25	; 0x10
    2bfc:	8f 87       	std	Y+15, r24	; 0x0f
    2bfe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c00:	98 89       	ldd	r25, Y+16	; 0x10
    2c02:	01 97       	sbiw	r24, 0x01	; 1
    2c04:	f1 f7       	brne	.-4      	; 0x2c02 <HCLCD_Vid8Bits_Init+0x2ea>
    2c06:	98 8b       	std	Y+16, r25	; 0x10
    2c08:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*Send Display Clear Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_DISPLAY_CLEAR);
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	0e 94 77 13 	call	0x26ee	; 0x26ee <HCLCD_Vid8Bits_SendCommand>
    2c10:	80 e0       	ldi	r24, 0x00	; 0
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	a0 e0       	ldi	r26, 0x00	; 0
    2c16:	b0 e4       	ldi	r27, 0x40	; 64
    2c18:	8b 87       	std	Y+11, r24	; 0x0b
    2c1a:	9c 87       	std	Y+12, r25	; 0x0c
    2c1c:	ad 87       	std	Y+13, r26	; 0x0d
    2c1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c20:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c22:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c24:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c26:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c28:	20 e0       	ldi	r18, 0x00	; 0
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	4a ef       	ldi	r20, 0xFA	; 250
    2c2e:	54 e4       	ldi	r21, 0x44	; 68
    2c30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c34:	dc 01       	movw	r26, r24
    2c36:	cb 01       	movw	r24, r22
    2c38:	8f 83       	std	Y+7, r24	; 0x07
    2c3a:	98 87       	std	Y+8, r25	; 0x08
    2c3c:	a9 87       	std	Y+9, r26	; 0x09
    2c3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c40:	6f 81       	ldd	r22, Y+7	; 0x07
    2c42:	78 85       	ldd	r23, Y+8	; 0x08
    2c44:	89 85       	ldd	r24, Y+9	; 0x09
    2c46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c48:	20 e0       	ldi	r18, 0x00	; 0
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	40 e8       	ldi	r20, 0x80	; 128
    2c4e:	5f e3       	ldi	r21, 0x3F	; 63
    2c50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c54:	88 23       	and	r24, r24
    2c56:	2c f4       	brge	.+10     	; 0x2c62 <HCLCD_Vid8Bits_Init+0x34a>
		__ticks = 1;
    2c58:	81 e0       	ldi	r24, 0x01	; 1
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	9e 83       	std	Y+6, r25	; 0x06
    2c5e:	8d 83       	std	Y+5, r24	; 0x05
    2c60:	3f c0       	rjmp	.+126    	; 0x2ce0 <HCLCD_Vid8Bits_Init+0x3c8>
	else if (__tmp > 65535)
    2c62:	6f 81       	ldd	r22, Y+7	; 0x07
    2c64:	78 85       	ldd	r23, Y+8	; 0x08
    2c66:	89 85       	ldd	r24, Y+9	; 0x09
    2c68:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c6a:	20 e0       	ldi	r18, 0x00	; 0
    2c6c:	3f ef       	ldi	r19, 0xFF	; 255
    2c6e:	4f e7       	ldi	r20, 0x7F	; 127
    2c70:	57 e4       	ldi	r21, 0x47	; 71
    2c72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c76:	18 16       	cp	r1, r24
    2c78:	4c f5       	brge	.+82     	; 0x2ccc <HCLCD_Vid8Bits_Init+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c80:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	40 e2       	ldi	r20, 0x20	; 32
    2c88:	51 e4       	ldi	r21, 0x41	; 65
    2c8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c8e:	dc 01       	movw	r26, r24
    2c90:	cb 01       	movw	r24, r22
    2c92:	bc 01       	movw	r22, r24
    2c94:	cd 01       	movw	r24, r26
    2c96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c9a:	dc 01       	movw	r26, r24
    2c9c:	cb 01       	movw	r24, r22
    2c9e:	9e 83       	std	Y+6, r25	; 0x06
    2ca0:	8d 83       	std	Y+5, r24	; 0x05
    2ca2:	0f c0       	rjmp	.+30     	; 0x2cc2 <HCLCD_Vid8Bits_Init+0x3aa>
    2ca4:	88 ec       	ldi	r24, 0xC8	; 200
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	9c 83       	std	Y+4, r25	; 0x04
    2caa:	8b 83       	std	Y+3, r24	; 0x03
    2cac:	8b 81       	ldd	r24, Y+3	; 0x03
    2cae:	9c 81       	ldd	r25, Y+4	; 0x04
    2cb0:	01 97       	sbiw	r24, 0x01	; 1
    2cb2:	f1 f7       	brne	.-4      	; 0x2cb0 <HCLCD_Vid8Bits_Init+0x398>
    2cb4:	9c 83       	std	Y+4, r25	; 0x04
    2cb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cb8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cba:	9e 81       	ldd	r25, Y+6	; 0x06
    2cbc:	01 97       	sbiw	r24, 0x01	; 1
    2cbe:	9e 83       	std	Y+6, r25	; 0x06
    2cc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc4:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc6:	00 97       	sbiw	r24, 0x00	; 0
    2cc8:	69 f7       	brne	.-38     	; 0x2ca4 <HCLCD_Vid8Bits_Init+0x38c>
    2cca:	14 c0       	rjmp	.+40     	; 0x2cf4 <HCLCD_Vid8Bits_Init+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ccc:	6f 81       	ldd	r22, Y+7	; 0x07
    2cce:	78 85       	ldd	r23, Y+8	; 0x08
    2cd0:	89 85       	ldd	r24, Y+9	; 0x09
    2cd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd8:	dc 01       	movw	r26, r24
    2cda:	cb 01       	movw	r24, r22
    2cdc:	9e 83       	std	Y+6, r25	; 0x06
    2cde:	8d 83       	std	Y+5, r24	; 0x05
    2ce0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce4:	9a 83       	std	Y+2, r25	; 0x02
    2ce6:	89 83       	std	Y+1, r24	; 0x01
    2ce8:	89 81       	ldd	r24, Y+1	; 0x01
    2cea:	9a 81       	ldd	r25, Y+2	; 0x02
    2cec:	01 97       	sbiw	r24, 0x01	; 1
    2cee:	f1 f7       	brne	.-4      	; 0x2cec <HCLCD_Vid8Bits_Init+0x3d4>
    2cf0:	9a 83       	std	Y+2, r25	; 0x02
    2cf2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*Send Entry Mode Set Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_ENTRY_MODE_SET);
    2cf4:	86 e0       	ldi	r24, 0x06	; 6
    2cf6:	0e 94 77 13 	call	0x26ee	; 0x26ee <HCLCD_Vid8Bits_SendCommand>
}
    2cfa:	e8 96       	adiw	r28, 0x38	; 56
    2cfc:	0f b6       	in	r0, 0x3f	; 63
    2cfe:	f8 94       	cli
    2d00:	de bf       	out	0x3e, r29	; 62
    2d02:	0f be       	out	0x3f, r0	; 63
    2d04:	cd bf       	out	0x3d, r28	; 61
    2d06:	cf 91       	pop	r28
    2d08:	df 91       	pop	r29
    2d0a:	08 95       	ret

00002d0c <HCLCD_Vid8Bits_DispalyCharacter>:

/*Display Character 8 Bits*/

void HCLCD_Vid8Bits_DispalyCharacter(u8 Copy_u8Data)
{
    2d0c:	df 93       	push	r29
    2d0e:	cf 93       	push	r28
    2d10:	cd b7       	in	r28, 0x3d	; 61
    2d12:	de b7       	in	r29, 0x3e	; 62
    2d14:	6d 97       	sbiw	r28, 0x1d	; 29
    2d16:	0f b6       	in	r0, 0x3f	; 63
    2d18:	f8 94       	cli
    2d1a:	de bf       	out	0x3e, r29	; 62
    2d1c:	0f be       	out	0x3f, r0	; 63
    2d1e:	cd bf       	out	0x3d, r28	; 61
    2d20:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Select Data register-->Write one on RS PIN*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_HIGH);
    2d22:	80 e0       	ldi	r24, 0x00	; 0
    2d24:	62 e0       	ldi	r22, 0x02	; 2
    2d26:	41 e0       	ldi	r20, 0x01	; 1
    2d28:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
	/**select Write mode--> Write zero on RW Pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    2d2c:	81 e0       	ldi	r24, 0x01	; 1
    2d2e:	62 e0       	ldi	r22, 0x02	; 2
    2d30:	40 e0       	ldi	r20, 0x00	; 0
    2d32:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
	/*Send Command ON port Data*/
	MDIO_Error_State_SetPortValue(DATA_PORT,Copy_u8Data);
    2d36:	82 e0       	ldi	r24, 0x02	; 2
    2d38:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2d3a:	0e 94 a1 0b 	call	0x1742	; 0x1742 <MDIO_Error_State_SetPortValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    2d3e:	82 e0       	ldi	r24, 0x02	; 2
    2d40:	62 e0       	ldi	r22, 0x02	; 2
    2d42:	41 e0       	ldi	r20, 0x01	; 1
    2d44:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
    2d48:	80 e0       	ldi	r24, 0x00	; 0
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	a0 e0       	ldi	r26, 0x00	; 0
    2d4e:	b0 e4       	ldi	r27, 0x40	; 64
    2d50:	89 8f       	std	Y+25, r24	; 0x19
    2d52:	9a 8f       	std	Y+26, r25	; 0x1a
    2d54:	ab 8f       	std	Y+27, r26	; 0x1b
    2d56:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d58:	69 8d       	ldd	r22, Y+25	; 0x19
    2d5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d60:	20 e0       	ldi	r18, 0x00	; 0
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	4a ef       	ldi	r20, 0xFA	; 250
    2d66:	54 e4       	ldi	r21, 0x44	; 68
    2d68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d6c:	dc 01       	movw	r26, r24
    2d6e:	cb 01       	movw	r24, r22
    2d70:	8d 8b       	std	Y+21, r24	; 0x15
    2d72:	9e 8b       	std	Y+22, r25	; 0x16
    2d74:	af 8b       	std	Y+23, r26	; 0x17
    2d76:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d78:	6d 89       	ldd	r22, Y+21	; 0x15
    2d7a:	7e 89       	ldd	r23, Y+22	; 0x16
    2d7c:	8f 89       	ldd	r24, Y+23	; 0x17
    2d7e:	98 8d       	ldd	r25, Y+24	; 0x18
    2d80:	20 e0       	ldi	r18, 0x00	; 0
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	40 e8       	ldi	r20, 0x80	; 128
    2d86:	5f e3       	ldi	r21, 0x3F	; 63
    2d88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d8c:	88 23       	and	r24, r24
    2d8e:	2c f4       	brge	.+10     	; 0x2d9a <HCLCD_Vid8Bits_DispalyCharacter+0x8e>
		__ticks = 1;
    2d90:	81 e0       	ldi	r24, 0x01	; 1
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	9c 8b       	std	Y+20, r25	; 0x14
    2d96:	8b 8b       	std	Y+19, r24	; 0x13
    2d98:	3f c0       	rjmp	.+126    	; 0x2e18 <HCLCD_Vid8Bits_DispalyCharacter+0x10c>
	else if (__tmp > 65535)
    2d9a:	6d 89       	ldd	r22, Y+21	; 0x15
    2d9c:	7e 89       	ldd	r23, Y+22	; 0x16
    2d9e:	8f 89       	ldd	r24, Y+23	; 0x17
    2da0:	98 8d       	ldd	r25, Y+24	; 0x18
    2da2:	20 e0       	ldi	r18, 0x00	; 0
    2da4:	3f ef       	ldi	r19, 0xFF	; 255
    2da6:	4f e7       	ldi	r20, 0x7F	; 127
    2da8:	57 e4       	ldi	r21, 0x47	; 71
    2daa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dae:	18 16       	cp	r1, r24
    2db0:	4c f5       	brge	.+82     	; 0x2e04 <HCLCD_Vid8Bits_DispalyCharacter+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2db2:	69 8d       	ldd	r22, Y+25	; 0x19
    2db4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2db6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2db8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dba:	20 e0       	ldi	r18, 0x00	; 0
    2dbc:	30 e0       	ldi	r19, 0x00	; 0
    2dbe:	40 e2       	ldi	r20, 0x20	; 32
    2dc0:	51 e4       	ldi	r21, 0x41	; 65
    2dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc6:	dc 01       	movw	r26, r24
    2dc8:	cb 01       	movw	r24, r22
    2dca:	bc 01       	movw	r22, r24
    2dcc:	cd 01       	movw	r24, r26
    2dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	cb 01       	movw	r24, r22
    2dd6:	9c 8b       	std	Y+20, r25	; 0x14
    2dd8:	8b 8b       	std	Y+19, r24	; 0x13
    2dda:	0f c0       	rjmp	.+30     	; 0x2dfa <HCLCD_Vid8Bits_DispalyCharacter+0xee>
    2ddc:	88 ec       	ldi	r24, 0xC8	; 200
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	9a 8b       	std	Y+18, r25	; 0x12
    2de2:	89 8b       	std	Y+17, r24	; 0x11
    2de4:	89 89       	ldd	r24, Y+17	; 0x11
    2de6:	9a 89       	ldd	r25, Y+18	; 0x12
    2de8:	01 97       	sbiw	r24, 0x01	; 1
    2dea:	f1 f7       	brne	.-4      	; 0x2de8 <HCLCD_Vid8Bits_DispalyCharacter+0xdc>
    2dec:	9a 8b       	std	Y+18, r25	; 0x12
    2dee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2df0:	8b 89       	ldd	r24, Y+19	; 0x13
    2df2:	9c 89       	ldd	r25, Y+20	; 0x14
    2df4:	01 97       	sbiw	r24, 0x01	; 1
    2df6:	9c 8b       	std	Y+20, r25	; 0x14
    2df8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dfa:	8b 89       	ldd	r24, Y+19	; 0x13
    2dfc:	9c 89       	ldd	r25, Y+20	; 0x14
    2dfe:	00 97       	sbiw	r24, 0x00	; 0
    2e00:	69 f7       	brne	.-38     	; 0x2ddc <HCLCD_Vid8Bits_DispalyCharacter+0xd0>
    2e02:	14 c0       	rjmp	.+40     	; 0x2e2c <HCLCD_Vid8Bits_DispalyCharacter+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e04:	6d 89       	ldd	r22, Y+21	; 0x15
    2e06:	7e 89       	ldd	r23, Y+22	; 0x16
    2e08:	8f 89       	ldd	r24, Y+23	; 0x17
    2e0a:	98 8d       	ldd	r25, Y+24	; 0x18
    2e0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e10:	dc 01       	movw	r26, r24
    2e12:	cb 01       	movw	r24, r22
    2e14:	9c 8b       	std	Y+20, r25	; 0x14
    2e16:	8b 8b       	std	Y+19, r24	; 0x13
    2e18:	8b 89       	ldd	r24, Y+19	; 0x13
    2e1a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e1c:	98 8b       	std	Y+16, r25	; 0x10
    2e1e:	8f 87       	std	Y+15, r24	; 0x0f
    2e20:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e22:	98 89       	ldd	r25, Y+16	; 0x10
    2e24:	01 97       	sbiw	r24, 0x01	; 1
    2e26:	f1 f7       	brne	.-4      	; 0x2e24 <HCLCD_Vid8Bits_DispalyCharacter+0x118>
    2e28:	98 8b       	std	Y+16, r25	; 0x10
    2e2a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    2e2c:	82 e0       	ldi	r24, 0x02	; 2
    2e2e:	62 e0       	ldi	r22, 0x02	; 2
    2e30:	40 e0       	ldi	r20, 0x00	; 0
    2e32:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
    2e36:	80 e0       	ldi	r24, 0x00	; 0
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	a0 e0       	ldi	r26, 0x00	; 0
    2e3c:	b0 e4       	ldi	r27, 0x40	; 64
    2e3e:	8b 87       	std	Y+11, r24	; 0x0b
    2e40:	9c 87       	std	Y+12, r25	; 0x0c
    2e42:	ad 87       	std	Y+13, r26	; 0x0d
    2e44:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e46:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e48:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e4e:	20 e0       	ldi	r18, 0x00	; 0
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	4a ef       	ldi	r20, 0xFA	; 250
    2e54:	54 e4       	ldi	r21, 0x44	; 68
    2e56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	cb 01       	movw	r24, r22
    2e5e:	8f 83       	std	Y+7, r24	; 0x07
    2e60:	98 87       	std	Y+8, r25	; 0x08
    2e62:	a9 87       	std	Y+9, r26	; 0x09
    2e64:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e66:	6f 81       	ldd	r22, Y+7	; 0x07
    2e68:	78 85       	ldd	r23, Y+8	; 0x08
    2e6a:	89 85       	ldd	r24, Y+9	; 0x09
    2e6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e6e:	20 e0       	ldi	r18, 0x00	; 0
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	40 e8       	ldi	r20, 0x80	; 128
    2e74:	5f e3       	ldi	r21, 0x3F	; 63
    2e76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e7a:	88 23       	and	r24, r24
    2e7c:	2c f4       	brge	.+10     	; 0x2e88 <HCLCD_Vid8Bits_DispalyCharacter+0x17c>
		__ticks = 1;
    2e7e:	81 e0       	ldi	r24, 0x01	; 1
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	9e 83       	std	Y+6, r25	; 0x06
    2e84:	8d 83       	std	Y+5, r24	; 0x05
    2e86:	3f c0       	rjmp	.+126    	; 0x2f06 <HCLCD_Vid8Bits_DispalyCharacter+0x1fa>
	else if (__tmp > 65535)
    2e88:	6f 81       	ldd	r22, Y+7	; 0x07
    2e8a:	78 85       	ldd	r23, Y+8	; 0x08
    2e8c:	89 85       	ldd	r24, Y+9	; 0x09
    2e8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e90:	20 e0       	ldi	r18, 0x00	; 0
    2e92:	3f ef       	ldi	r19, 0xFF	; 255
    2e94:	4f e7       	ldi	r20, 0x7F	; 127
    2e96:	57 e4       	ldi	r21, 0x47	; 71
    2e98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e9c:	18 16       	cp	r1, r24
    2e9e:	4c f5       	brge	.+82     	; 0x2ef2 <HCLCD_Vid8Bits_DispalyCharacter+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ea0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ea2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ea4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ea6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ea8:	20 e0       	ldi	r18, 0x00	; 0
    2eaa:	30 e0       	ldi	r19, 0x00	; 0
    2eac:	40 e2       	ldi	r20, 0x20	; 32
    2eae:	51 e4       	ldi	r21, 0x41	; 65
    2eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb4:	dc 01       	movw	r26, r24
    2eb6:	cb 01       	movw	r24, r22
    2eb8:	bc 01       	movw	r22, r24
    2eba:	cd 01       	movw	r24, r26
    2ebc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec0:	dc 01       	movw	r26, r24
    2ec2:	cb 01       	movw	r24, r22
    2ec4:	9e 83       	std	Y+6, r25	; 0x06
    2ec6:	8d 83       	std	Y+5, r24	; 0x05
    2ec8:	0f c0       	rjmp	.+30     	; 0x2ee8 <HCLCD_Vid8Bits_DispalyCharacter+0x1dc>
    2eca:	88 ec       	ldi	r24, 0xC8	; 200
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	9c 83       	std	Y+4, r25	; 0x04
    2ed0:	8b 83       	std	Y+3, r24	; 0x03
    2ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed6:	01 97       	sbiw	r24, 0x01	; 1
    2ed8:	f1 f7       	brne	.-4      	; 0x2ed6 <HCLCD_Vid8Bits_DispalyCharacter+0x1ca>
    2eda:	9c 83       	std	Y+4, r25	; 0x04
    2edc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ede:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee2:	01 97       	sbiw	r24, 0x01	; 1
    2ee4:	9e 83       	std	Y+6, r25	; 0x06
    2ee6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ee8:	8d 81       	ldd	r24, Y+5	; 0x05
    2eea:	9e 81       	ldd	r25, Y+6	; 0x06
    2eec:	00 97       	sbiw	r24, 0x00	; 0
    2eee:	69 f7       	brne	.-38     	; 0x2eca <HCLCD_Vid8Bits_DispalyCharacter+0x1be>
    2ef0:	14 c0       	rjmp	.+40     	; 0x2f1a <HCLCD_Vid8Bits_DispalyCharacter+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ef2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ef4:	78 85       	ldd	r23, Y+8	; 0x08
    2ef6:	89 85       	ldd	r24, Y+9	; 0x09
    2ef8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2efa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2efe:	dc 01       	movw	r26, r24
    2f00:	cb 01       	movw	r24, r22
    2f02:	9e 83       	std	Y+6, r25	; 0x06
    2f04:	8d 83       	std	Y+5, r24	; 0x05
    2f06:	8d 81       	ldd	r24, Y+5	; 0x05
    2f08:	9e 81       	ldd	r25, Y+6	; 0x06
    2f0a:	9a 83       	std	Y+2, r25	; 0x02
    2f0c:	89 83       	std	Y+1, r24	; 0x01
    2f0e:	89 81       	ldd	r24, Y+1	; 0x01
    2f10:	9a 81       	ldd	r25, Y+2	; 0x02
    2f12:	01 97       	sbiw	r24, 0x01	; 1
    2f14:	f1 f7       	brne	.-4      	; 0x2f12 <HCLCD_Vid8Bits_DispalyCharacter+0x206>
    2f16:	9a 83       	std	Y+2, r25	; 0x02
    2f18:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    2f1a:	82 e0       	ldi	r24, 0x02	; 2
    2f1c:	62 e0       	ldi	r22, 0x02	; 2
    2f1e:	41 e0       	ldi	r20, 0x01	; 1
    2f20:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
}
    2f24:	6d 96       	adiw	r28, 0x1d	; 29
    2f26:	0f b6       	in	r0, 0x3f	; 63
    2f28:	f8 94       	cli
    2f2a:	de bf       	out	0x3e, r29	; 62
    2f2c:	0f be       	out	0x3f, r0	; 63
    2f2e:	cd bf       	out	0x3d, r28	; 61
    2f30:	cf 91       	pop	r28
    2f32:	df 91       	pop	r29
    2f34:	08 95       	ret

00002f36 <HCLCD_Vid8Bits_DisplayString>:

/*Display String 8 Bits*/

void HCLCD_Vid8Bits_DisplayString(u8* PCopy_u8String)
{
    2f36:	df 93       	push	r29
    2f38:	cf 93       	push	r28
    2f3a:	00 d0       	rcall	.+0      	; 0x2f3c <HCLCD_Vid8Bits_DisplayString+0x6>
    2f3c:	0f 92       	push	r0
    2f3e:	cd b7       	in	r28, 0x3d	; 61
    2f40:	de b7       	in	r29, 0x3e	; 62
    2f42:	9b 83       	std	Y+3, r25	; 0x03
    2f44:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Count=0;
    2f46:	19 82       	std	Y+1, r1	; 0x01
    2f48:	0e c0       	rjmp	.+28     	; 0x2f66 <HCLCD_Vid8Bits_DisplayString+0x30>
	while(PCopy_u8String[Loc_u8Count]!=NULL)
	{
		HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8String[Loc_u8Count]);
    2f4a:	89 81       	ldd	r24, Y+1	; 0x01
    2f4c:	28 2f       	mov	r18, r24
    2f4e:	30 e0       	ldi	r19, 0x00	; 0
    2f50:	8a 81       	ldd	r24, Y+2	; 0x02
    2f52:	9b 81       	ldd	r25, Y+3	; 0x03
    2f54:	fc 01       	movw	r30, r24
    2f56:	e2 0f       	add	r30, r18
    2f58:	f3 1f       	adc	r31, r19
    2f5a:	80 81       	ld	r24, Z
    2f5c:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <HCLCD_Vid8Bits_DispalyCharacter>
		Loc_u8Count++;
    2f60:	89 81       	ldd	r24, Y+1	; 0x01
    2f62:	8f 5f       	subi	r24, 0xFF	; 255
    2f64:	89 83       	std	Y+1, r24	; 0x01
/*Display String 8 Bits*/

void HCLCD_Vid8Bits_DisplayString(u8* PCopy_u8String)
{
	u8 Loc_u8Count=0;
	while(PCopy_u8String[Loc_u8Count]!=NULL)
    2f66:	89 81       	ldd	r24, Y+1	; 0x01
    2f68:	28 2f       	mov	r18, r24
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f70:	fc 01       	movw	r30, r24
    2f72:	e2 0f       	add	r30, r18
    2f74:	f3 1f       	adc	r31, r19
    2f76:	80 81       	ld	r24, Z
    2f78:	88 23       	and	r24, r24
    2f7a:	39 f7       	brne	.-50     	; 0x2f4a <HCLCD_Vid8Bits_DisplayString+0x14>
	{
		HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8String[Loc_u8Count]);
		Loc_u8Count++;
	}
}
    2f7c:	0f 90       	pop	r0
    2f7e:	0f 90       	pop	r0
    2f80:	0f 90       	pop	r0
    2f82:	cf 91       	pop	r28
    2f84:	df 91       	pop	r29
    2f86:	08 95       	ret

00002f88 <HCLCD_Vid8Bits_DisplayNumber>:

void HCLCD_Vid8Bits_DisplayNumber(u32 Copy_u8Number)
{
    2f88:	0f 93       	push	r16
    2f8a:	1f 93       	push	r17
    2f8c:	df 93       	push	r29
    2f8e:	cf 93       	push	r28
    2f90:	cd b7       	in	r28, 0x3d	; 61
    2f92:	de b7       	in	r29, 0x3e	; 62
    2f94:	60 97       	sbiw	r28, 0x10	; 16
    2f96:	0f b6       	in	r0, 0x3f	; 63
    2f98:	f8 94       	cli
    2f9a:	de bf       	out	0x3e, r29	; 62
    2f9c:	0f be       	out	0x3f, r0	; 63
    2f9e:	cd bf       	out	0x3d, r28	; 61
    2fa0:	6d 87       	std	Y+13, r22	; 0x0d
    2fa2:	7e 87       	std	Y+14, r23	; 0x0e
    2fa4:	8f 87       	std	Y+15, r24	; 0x0f
    2fa6:	98 8b       	std	Y+16, r25	; 0x10
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
    2fa8:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u8Number>0)
    2faa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fac:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fae:	af 85       	ldd	r26, Y+15	; 0x0f
    2fb0:	b8 89       	ldd	r27, Y+16	; 0x10
    2fb2:	00 97       	sbiw	r24, 0x00	; 0
    2fb4:	a1 05       	cpc	r26, r1
    2fb6:	b1 05       	cpc	r27, r1
    2fb8:	09 f4       	brne	.+2      	; 0x2fbc <HCLCD_Vid8Bits_DisplayNumber+0x34>
    2fba:	4f c0       	rjmp	.+158    	; 0x305a <HCLCD_Vid8Bits_DisplayNumber+0xd2>
    2fbc:	2d c0       	rjmp	.+90     	; 0x3018 <HCLCD_Vid8Bits_DisplayNumber+0x90>
	{
		while(Copy_u8Number!=0)
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
    2fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc0:	08 2f       	mov	r16, r24
    2fc2:	10 e0       	ldi	r17, 0x00	; 0
    2fc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fc8:	af 85       	ldd	r26, Y+15	; 0x0f
    2fca:	b8 89       	ldd	r27, Y+16	; 0x10
    2fcc:	2a e0       	ldi	r18, 0x0A	; 10
    2fce:	30 e0       	ldi	r19, 0x00	; 0
    2fd0:	40 e0       	ldi	r20, 0x00	; 0
    2fd2:	50 e0       	ldi	r21, 0x00	; 0
    2fd4:	bc 01       	movw	r22, r24
    2fd6:	cd 01       	movw	r24, r26
    2fd8:	0e 94 52 29 	call	0x52a4	; 0x52a4 <__udivmodsi4>
    2fdc:	dc 01       	movw	r26, r24
    2fde:	cb 01       	movw	r24, r22
    2fe0:	28 2f       	mov	r18, r24
    2fe2:	ce 01       	movw	r24, r28
    2fe4:	03 96       	adiw	r24, 0x03	; 3
    2fe6:	fc 01       	movw	r30, r24
    2fe8:	e0 0f       	add	r30, r16
    2fea:	f1 1f       	adc	r31, r17
    2fec:	20 83       	st	Z, r18
			Copy_u8Number/=10;
    2fee:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ff0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ff2:	af 85       	ldd	r26, Y+15	; 0x0f
    2ff4:	b8 89       	ldd	r27, Y+16	; 0x10
    2ff6:	2a e0       	ldi	r18, 0x0A	; 10
    2ff8:	30 e0       	ldi	r19, 0x00	; 0
    2ffa:	40 e0       	ldi	r20, 0x00	; 0
    2ffc:	50 e0       	ldi	r21, 0x00	; 0
    2ffe:	bc 01       	movw	r22, r24
    3000:	cd 01       	movw	r24, r26
    3002:	0e 94 52 29 	call	0x52a4	; 0x52a4 <__udivmodsi4>
    3006:	da 01       	movw	r26, r20
    3008:	c9 01       	movw	r24, r18
    300a:	8d 87       	std	Y+13, r24	; 0x0d
    300c:	9e 87       	std	Y+14, r25	; 0x0e
    300e:	af 87       	std	Y+15, r26	; 0x0f
    3010:	b8 8b       	std	Y+16, r27	; 0x10
			LOC_Count++;
    3012:	8a 81       	ldd	r24, Y+2	; 0x02
    3014:	8f 5f       	subi	r24, 0xFF	; 255
    3016:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
	if(Copy_u8Number>0)
	{
		while(Copy_u8Number!=0)
    3018:	8d 85       	ldd	r24, Y+13	; 0x0d
    301a:	9e 85       	ldd	r25, Y+14	; 0x0e
    301c:	af 85       	ldd	r26, Y+15	; 0x0f
    301e:	b8 89       	ldd	r27, Y+16	; 0x10
    3020:	00 97       	sbiw	r24, 0x00	; 0
    3022:	a1 05       	cpc	r26, r1
    3024:	b1 05       	cpc	r27, r1
    3026:	59 f6       	brne	.-106    	; 0x2fbe <HCLCD_Vid8Bits_DisplayNumber+0x36>
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    3028:	8a 81       	ldd	r24, Y+2	; 0x02
    302a:	81 50       	subi	r24, 0x01	; 1
    302c:	89 83       	std	Y+1, r24	; 0x01
    302e:	11 c0       	rjmp	.+34     	; 0x3052 <HCLCD_Vid8Bits_DisplayNumber+0xca>
		{
			HCLCD_Vid8Bits_DispalyCharacter(ARR_Digits[i]+'0');  //ASCII of '0'--->48
    3030:	89 81       	ldd	r24, Y+1	; 0x01
    3032:	28 2f       	mov	r18, r24
    3034:	33 27       	eor	r19, r19
    3036:	27 fd       	sbrc	r18, 7
    3038:	30 95       	com	r19
    303a:	ce 01       	movw	r24, r28
    303c:	03 96       	adiw	r24, 0x03	; 3
    303e:	fc 01       	movw	r30, r24
    3040:	e2 0f       	add	r30, r18
    3042:	f3 1f       	adc	r31, r19
    3044:	80 81       	ld	r24, Z
    3046:	80 5d       	subi	r24, 0xD0	; 208
    3048:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <HCLCD_Vid8Bits_DispalyCharacter>
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    304c:	89 81       	ldd	r24, Y+1	; 0x01
    304e:	81 50       	subi	r24, 0x01	; 1
    3050:	89 83       	std	Y+1, r24	; 0x01
    3052:	89 81       	ldd	r24, Y+1	; 0x01
    3054:	88 23       	and	r24, r24
    3056:	64 f7       	brge	.-40     	; 0x3030 <HCLCD_Vid8Bits_DisplayNumber+0xa8>
    3058:	03 c0       	rjmp	.+6      	; 0x3060 <HCLCD_Vid8Bits_DisplayNumber+0xd8>
			HCLCD_Vid8Bits_DispalyCharacter(ARR_Digits[i]+'0');  //ASCII of '0'--->48
		}
	}
	else
	{
		HCLCD_Vid8Bits_DispalyCharacter('0');
    305a:	80 e3       	ldi	r24, 0x30	; 48
    305c:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <HCLCD_Vid8Bits_DispalyCharacter>
	}
}
    3060:	60 96       	adiw	r28, 0x10	; 16
    3062:	0f b6       	in	r0, 0x3f	; 63
    3064:	f8 94       	cli
    3066:	de bf       	out	0x3e, r29	; 62
    3068:	0f be       	out	0x3f, r0	; 63
    306a:	cd bf       	out	0x3d, r28	; 61
    306c:	cf 91       	pop	r28
    306e:	df 91       	pop	r29
    3070:	1f 91       	pop	r17
    3072:	0f 91       	pop	r16
    3074:	08 95       	ret

00003076 <HCLCD_Vid8Bits_SetPosition>:

void HCLCD_Vid8Bits_SetPosition(u8 Copy_u8LineNumber,u8 Copy_u8PositionNumber)
{
    3076:	df 93       	push	r29
    3078:	cf 93       	push	r28
    307a:	00 d0       	rcall	.+0      	; 0x307c <HCLCD_Vid8Bits_SetPosition+0x6>
    307c:	cd b7       	in	r28, 0x3d	; 61
    307e:	de b7       	in	r29, 0x3e	; 62
    3080:	89 83       	std	Y+1, r24	; 0x01
    3082:	6a 83       	std	Y+2, r22	; 0x02

	if((Copy_u8LineNumber==HCLCD_LINE1)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    3084:	89 81       	ldd	r24, Y+1	; 0x01
    3086:	81 30       	cpi	r24, 0x01	; 1
    3088:	41 f4       	brne	.+16     	; 0x309a <HCLCD_Vid8Bits_SetPosition+0x24>
    308a:	8a 81       	ldd	r24, Y+2	; 0x02
    308c:	80 31       	cpi	r24, 0x10	; 16
    308e:	28 f4       	brcc	.+10     	; 0x309a <HCLCD_Vid8Bits_SetPosition+0x24>
	{
		HCLCD_Vid8Bits_SendCommand((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber));
    3090:	8a 81       	ldd	r24, Y+2	; 0x02
    3092:	80 58       	subi	r24, 0x80	; 128
    3094:	0e 94 77 13 	call	0x26ee	; 0x26ee <HCLCD_Vid8Bits_SendCommand>
    3098:	0a c0       	rjmp	.+20     	; 0x30ae <HCLCD_Vid8Bits_SetPosition+0x38>
	}
	else if((Copy_u8LineNumber==HCLCD_LINE2)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    309a:	89 81       	ldd	r24, Y+1	; 0x01
    309c:	82 30       	cpi	r24, 0x02	; 2
    309e:	39 f4       	brne	.+14     	; 0x30ae <HCLCD_Vid8Bits_SetPosition+0x38>
    30a0:	8a 81       	ldd	r24, Y+2	; 0x02
    30a2:	80 31       	cpi	r24, 0x10	; 16
    30a4:	20 f4       	brcc	.+8      	; 0x30ae <HCLCD_Vid8Bits_SetPosition+0x38>
	{
		HCLCD_Vid8Bits_SendCommand((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber));
    30a6:	8a 81       	ldd	r24, Y+2	; 0x02
    30a8:	80 54       	subi	r24, 0x40	; 64
    30aa:	0e 94 77 13 	call	0x26ee	; 0x26ee <HCLCD_Vid8Bits_SendCommand>
	else
	{

	}

}
    30ae:	0f 90       	pop	r0
    30b0:	0f 90       	pop	r0
    30b2:	cf 91       	pop	r28
    30b4:	df 91       	pop	r29
    30b6:	08 95       	ret

000030b8 <HCLCD_Vid8Bits_CustomAlphChar>:
/*LCD Create SpecialCharacter 8 Bits*/
void HCLCD_Vid8Bits_CustomAlphChar(u8 Copy_u8PatternNumber, u8* PCopy_u8Pattern)
{
    30b8:	df 93       	push	r29
    30ba:	cf 93       	push	r28
    30bc:	00 d0       	rcall	.+0      	; 0x30be <HCLCD_Vid8Bits_CustomAlphChar+0x6>
    30be:	00 d0       	rcall	.+0      	; 0x30c0 <HCLCD_Vid8Bits_CustomAlphChar+0x8>
    30c0:	cd b7       	in	r28, 0x3d	; 61
    30c2:	de b7       	in	r29, 0x3e	; 62
    30c4:	8a 83       	std	Y+2, r24	; 0x02
    30c6:	7c 83       	std	Y+4, r23	; 0x04
    30c8:	6b 83       	std	Y+3, r22	; 0x03
	       /*you have only 8 patterns to be customized */
	      u8 i;
	      if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
    30ca:	8a 81       	ldd	r24, Y+2	; 0x02
    30cc:	88 30       	cpi	r24, 0x08	; 8
    30ce:	f8 f4       	brcc	.+62     	; 0x310e <HCLCD_Vid8Bits_CustomAlphChar+0x56>
	      {
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid8Bits_SendCommand(CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE));
    30d0:	8a 81       	ldd	r24, Y+2	; 0x02
    30d2:	88 2f       	mov	r24, r24
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	08 96       	adiw	r24, 0x08	; 8
    30d8:	88 0f       	add	r24, r24
    30da:	99 1f       	adc	r25, r25
    30dc:	88 0f       	add	r24, r24
    30de:	99 1f       	adc	r25, r25
    30e0:	88 0f       	add	r24, r24
    30e2:	99 1f       	adc	r25, r25
    30e4:	0e 94 77 13 	call	0x26ee	; 0x26ee <HCLCD_Vid8Bits_SendCommand>
	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    30e8:	19 82       	std	Y+1, r1	; 0x01
    30ea:	0e c0       	rjmp	.+28     	; 0x3108 <HCLCD_Vid8Bits_CustomAlphChar+0x50>
	          {
	        	  HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8Pattern[ i ]);
    30ec:	89 81       	ldd	r24, Y+1	; 0x01
    30ee:	28 2f       	mov	r18, r24
    30f0:	30 e0       	ldi	r19, 0x00	; 0
    30f2:	8b 81       	ldd	r24, Y+3	; 0x03
    30f4:	9c 81       	ldd	r25, Y+4	; 0x04
    30f6:	fc 01       	movw	r30, r24
    30f8:	e2 0f       	add	r30, r18
    30fa:	f3 1f       	adc	r31, r19
    30fc:	80 81       	ld	r24, Z
    30fe:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <HCLCD_Vid8Bits_DispalyCharacter>
	      if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
	      {
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid8Bits_SendCommand(CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE));
	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    3102:	89 81       	ldd	r24, Y+1	; 0x01
    3104:	8f 5f       	subi	r24, 0xFF	; 255
    3106:	89 83       	std	Y+1, r24	; 0x01
    3108:	89 81       	ldd	r24, Y+1	; 0x01
    310a:	88 30       	cpi	r24, 0x08	; 8
    310c:	78 f3       	brcs	.-34     	; 0x30ec <HCLCD_Vid8Bits_CustomAlphChar+0x34>
	          {
	        	  HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8Pattern[ i ]);
	          }
	      }
}
    310e:	0f 90       	pop	r0
    3110:	0f 90       	pop	r0
    3112:	0f 90       	pop	r0
    3114:	0f 90       	pop	r0
    3116:	cf 91       	pop	r28
    3118:	df 91       	pop	r29
    311a:	08 95       	ret

0000311c <HCLCD_Vid8Bits_ClearScreen>:
/**/
void HCLCD_Vid8Bits_ClearScreen(void)
{
    311c:	df 93       	push	r29
    311e:	cf 93       	push	r28
    3120:	cd b7       	in	r28, 0x3d	; 61
    3122:	de b7       	in	r29, 0x3e	; 62
    3124:	2e 97       	sbiw	r28, 0x0e	; 14
    3126:	0f b6       	in	r0, 0x3f	; 63
    3128:	f8 94       	cli
    312a:	de bf       	out	0x3e, r29	; 62
    312c:	0f be       	out	0x3f, r0	; 63
    312e:	cd bf       	out	0x3d, r28	; 61
  HCLCD_Vid8Bits_SendCommand(DISPLAY_CLEAR);
    3130:	81 e0       	ldi	r24, 0x01	; 1
    3132:	0e 94 77 13 	call	0x26ee	; 0x26ee <HCLCD_Vid8Bits_SendCommand>
    3136:	80 e0       	ldi	r24, 0x00	; 0
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	a0 e0       	ldi	r26, 0x00	; 0
    313c:	b0 e4       	ldi	r27, 0x40	; 64
    313e:	8b 87       	std	Y+11, r24	; 0x0b
    3140:	9c 87       	std	Y+12, r25	; 0x0c
    3142:	ad 87       	std	Y+13, r26	; 0x0d
    3144:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3146:	6b 85       	ldd	r22, Y+11	; 0x0b
    3148:	7c 85       	ldd	r23, Y+12	; 0x0c
    314a:	8d 85       	ldd	r24, Y+13	; 0x0d
    314c:	9e 85       	ldd	r25, Y+14	; 0x0e
    314e:	20 e0       	ldi	r18, 0x00	; 0
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	4a ef       	ldi	r20, 0xFA	; 250
    3154:	54 e4       	ldi	r21, 0x44	; 68
    3156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    315a:	dc 01       	movw	r26, r24
    315c:	cb 01       	movw	r24, r22
    315e:	8f 83       	std	Y+7, r24	; 0x07
    3160:	98 87       	std	Y+8, r25	; 0x08
    3162:	a9 87       	std	Y+9, r26	; 0x09
    3164:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3166:	6f 81       	ldd	r22, Y+7	; 0x07
    3168:	78 85       	ldd	r23, Y+8	; 0x08
    316a:	89 85       	ldd	r24, Y+9	; 0x09
    316c:	9a 85       	ldd	r25, Y+10	; 0x0a
    316e:	20 e0       	ldi	r18, 0x00	; 0
    3170:	30 e0       	ldi	r19, 0x00	; 0
    3172:	40 e8       	ldi	r20, 0x80	; 128
    3174:	5f e3       	ldi	r21, 0x3F	; 63
    3176:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    317a:	88 23       	and	r24, r24
    317c:	2c f4       	brge	.+10     	; 0x3188 <HCLCD_Vid8Bits_ClearScreen+0x6c>
		__ticks = 1;
    317e:	81 e0       	ldi	r24, 0x01	; 1
    3180:	90 e0       	ldi	r25, 0x00	; 0
    3182:	9e 83       	std	Y+6, r25	; 0x06
    3184:	8d 83       	std	Y+5, r24	; 0x05
    3186:	3f c0       	rjmp	.+126    	; 0x3206 <HCLCD_Vid8Bits_ClearScreen+0xea>
	else if (__tmp > 65535)
    3188:	6f 81       	ldd	r22, Y+7	; 0x07
    318a:	78 85       	ldd	r23, Y+8	; 0x08
    318c:	89 85       	ldd	r24, Y+9	; 0x09
    318e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3190:	20 e0       	ldi	r18, 0x00	; 0
    3192:	3f ef       	ldi	r19, 0xFF	; 255
    3194:	4f e7       	ldi	r20, 0x7F	; 127
    3196:	57 e4       	ldi	r21, 0x47	; 71
    3198:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    319c:	18 16       	cp	r1, r24
    319e:	4c f5       	brge	.+82     	; 0x31f2 <HCLCD_Vid8Bits_ClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    31a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    31a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    31a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    31a8:	20 e0       	ldi	r18, 0x00	; 0
    31aa:	30 e0       	ldi	r19, 0x00	; 0
    31ac:	40 e2       	ldi	r20, 0x20	; 32
    31ae:	51 e4       	ldi	r21, 0x41	; 65
    31b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31b4:	dc 01       	movw	r26, r24
    31b6:	cb 01       	movw	r24, r22
    31b8:	bc 01       	movw	r22, r24
    31ba:	cd 01       	movw	r24, r26
    31bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c0:	dc 01       	movw	r26, r24
    31c2:	cb 01       	movw	r24, r22
    31c4:	9e 83       	std	Y+6, r25	; 0x06
    31c6:	8d 83       	std	Y+5, r24	; 0x05
    31c8:	0f c0       	rjmp	.+30     	; 0x31e8 <HCLCD_Vid8Bits_ClearScreen+0xcc>
    31ca:	88 ec       	ldi	r24, 0xC8	; 200
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	9c 83       	std	Y+4, r25	; 0x04
    31d0:	8b 83       	std	Y+3, r24	; 0x03
    31d2:	8b 81       	ldd	r24, Y+3	; 0x03
    31d4:	9c 81       	ldd	r25, Y+4	; 0x04
    31d6:	01 97       	sbiw	r24, 0x01	; 1
    31d8:	f1 f7       	brne	.-4      	; 0x31d6 <HCLCD_Vid8Bits_ClearScreen+0xba>
    31da:	9c 83       	std	Y+4, r25	; 0x04
    31dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31de:	8d 81       	ldd	r24, Y+5	; 0x05
    31e0:	9e 81       	ldd	r25, Y+6	; 0x06
    31e2:	01 97       	sbiw	r24, 0x01	; 1
    31e4:	9e 83       	std	Y+6, r25	; 0x06
    31e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31e8:	8d 81       	ldd	r24, Y+5	; 0x05
    31ea:	9e 81       	ldd	r25, Y+6	; 0x06
    31ec:	00 97       	sbiw	r24, 0x00	; 0
    31ee:	69 f7       	brne	.-38     	; 0x31ca <HCLCD_Vid8Bits_ClearScreen+0xae>
    31f0:	14 c0       	rjmp	.+40     	; 0x321a <HCLCD_Vid8Bits_ClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31f2:	6f 81       	ldd	r22, Y+7	; 0x07
    31f4:	78 85       	ldd	r23, Y+8	; 0x08
    31f6:	89 85       	ldd	r24, Y+9	; 0x09
    31f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    31fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31fe:	dc 01       	movw	r26, r24
    3200:	cb 01       	movw	r24, r22
    3202:	9e 83       	std	Y+6, r25	; 0x06
    3204:	8d 83       	std	Y+5, r24	; 0x05
    3206:	8d 81       	ldd	r24, Y+5	; 0x05
    3208:	9e 81       	ldd	r25, Y+6	; 0x06
    320a:	9a 83       	std	Y+2, r25	; 0x02
    320c:	89 83       	std	Y+1, r24	; 0x01
    320e:	89 81       	ldd	r24, Y+1	; 0x01
    3210:	9a 81       	ldd	r25, Y+2	; 0x02
    3212:	01 97       	sbiw	r24, 0x01	; 1
    3214:	f1 f7       	brne	.-4      	; 0x3212 <HCLCD_Vid8Bits_ClearScreen+0xf6>
    3216:	9a 83       	std	Y+2, r25	; 0x02
    3218:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(2);
}
    321a:	2e 96       	adiw	r28, 0x0e	; 14
    321c:	0f b6       	in	r0, 0x3f	; 63
    321e:	f8 94       	cli
    3220:	de bf       	out	0x3e, r29	; 62
    3222:	0f be       	out	0x3f, r0	; 63
    3224:	cd bf       	out	0x3d, r28	; 61
    3226:	cf 91       	pop	r28
    3228:	df 91       	pop	r29
    322a:	08 95       	ret

0000322c <HCLCD_Vid8Bits_DisplayShiftLeft>:
/**/
 void HCLCD_Vid8Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
    322c:	df 93       	push	r29
    322e:	cf 93       	push	r28
    3230:	cd b7       	in	r28, 0x3d	; 61
    3232:	de b7       	in	r29, 0x3e	; 62
    3234:	60 97       	sbiw	r28, 0x10	; 16
    3236:	0f b6       	in	r0, 0x3f	; 63
    3238:	f8 94       	cli
    323a:	de bf       	out	0x3e, r29	; 62
    323c:	0f be       	out	0x3f, r0	; 63
    323e:	cd bf       	out	0x3d, r28	; 61
    3240:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    3242:	1f 86       	std	Y+15, r1	; 0x0f
    3244:	78 c0       	rjmp	.+240    	; 0x3336 <HCLCD_Vid8Bits_DisplayShiftLeft+0x10a>
 {
	 HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_LEFT);
    3246:	88 e1       	ldi	r24, 0x18	; 24
    3248:	0e 94 77 13 	call	0x26ee	; 0x26ee <HCLCD_Vid8Bits_SendCommand>
    324c:	80 e0       	ldi	r24, 0x00	; 0
    324e:	90 e0       	ldi	r25, 0x00	; 0
    3250:	a6 e9       	ldi	r26, 0x96	; 150
    3252:	b3 e4       	ldi	r27, 0x43	; 67
    3254:	8b 87       	std	Y+11, r24	; 0x0b
    3256:	9c 87       	std	Y+12, r25	; 0x0c
    3258:	ad 87       	std	Y+13, r26	; 0x0d
    325a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    325c:	6b 85       	ldd	r22, Y+11	; 0x0b
    325e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3260:	8d 85       	ldd	r24, Y+13	; 0x0d
    3262:	9e 85       	ldd	r25, Y+14	; 0x0e
    3264:	20 e0       	ldi	r18, 0x00	; 0
    3266:	30 e0       	ldi	r19, 0x00	; 0
    3268:	4a ef       	ldi	r20, 0xFA	; 250
    326a:	54 e4       	ldi	r21, 0x44	; 68
    326c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3270:	dc 01       	movw	r26, r24
    3272:	cb 01       	movw	r24, r22
    3274:	8f 83       	std	Y+7, r24	; 0x07
    3276:	98 87       	std	Y+8, r25	; 0x08
    3278:	a9 87       	std	Y+9, r26	; 0x09
    327a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    327c:	6f 81       	ldd	r22, Y+7	; 0x07
    327e:	78 85       	ldd	r23, Y+8	; 0x08
    3280:	89 85       	ldd	r24, Y+9	; 0x09
    3282:	9a 85       	ldd	r25, Y+10	; 0x0a
    3284:	20 e0       	ldi	r18, 0x00	; 0
    3286:	30 e0       	ldi	r19, 0x00	; 0
    3288:	40 e8       	ldi	r20, 0x80	; 128
    328a:	5f e3       	ldi	r21, 0x3F	; 63
    328c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3290:	88 23       	and	r24, r24
    3292:	2c f4       	brge	.+10     	; 0x329e <HCLCD_Vid8Bits_DisplayShiftLeft+0x72>
		__ticks = 1;
    3294:	81 e0       	ldi	r24, 0x01	; 1
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	9e 83       	std	Y+6, r25	; 0x06
    329a:	8d 83       	std	Y+5, r24	; 0x05
    329c:	3f c0       	rjmp	.+126    	; 0x331c <HCLCD_Vid8Bits_DisplayShiftLeft+0xf0>
	else if (__tmp > 65535)
    329e:	6f 81       	ldd	r22, Y+7	; 0x07
    32a0:	78 85       	ldd	r23, Y+8	; 0x08
    32a2:	89 85       	ldd	r24, Y+9	; 0x09
    32a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    32a6:	20 e0       	ldi	r18, 0x00	; 0
    32a8:	3f ef       	ldi	r19, 0xFF	; 255
    32aa:	4f e7       	ldi	r20, 0x7F	; 127
    32ac:	57 e4       	ldi	r21, 0x47	; 71
    32ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32b2:	18 16       	cp	r1, r24
    32b4:	4c f5       	brge	.+82     	; 0x3308 <HCLCD_Vid8Bits_DisplayShiftLeft+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    32b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    32ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    32bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    32be:	20 e0       	ldi	r18, 0x00	; 0
    32c0:	30 e0       	ldi	r19, 0x00	; 0
    32c2:	40 e2       	ldi	r20, 0x20	; 32
    32c4:	51 e4       	ldi	r21, 0x41	; 65
    32c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ca:	dc 01       	movw	r26, r24
    32cc:	cb 01       	movw	r24, r22
    32ce:	bc 01       	movw	r22, r24
    32d0:	cd 01       	movw	r24, r26
    32d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32d6:	dc 01       	movw	r26, r24
    32d8:	cb 01       	movw	r24, r22
    32da:	9e 83       	std	Y+6, r25	; 0x06
    32dc:	8d 83       	std	Y+5, r24	; 0x05
    32de:	0f c0       	rjmp	.+30     	; 0x32fe <HCLCD_Vid8Bits_DisplayShiftLeft+0xd2>
    32e0:	88 ec       	ldi	r24, 0xC8	; 200
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	9c 83       	std	Y+4, r25	; 0x04
    32e6:	8b 83       	std	Y+3, r24	; 0x03
    32e8:	8b 81       	ldd	r24, Y+3	; 0x03
    32ea:	9c 81       	ldd	r25, Y+4	; 0x04
    32ec:	01 97       	sbiw	r24, 0x01	; 1
    32ee:	f1 f7       	brne	.-4      	; 0x32ec <HCLCD_Vid8Bits_DisplayShiftLeft+0xc0>
    32f0:	9c 83       	std	Y+4, r25	; 0x04
    32f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32f4:	8d 81       	ldd	r24, Y+5	; 0x05
    32f6:	9e 81       	ldd	r25, Y+6	; 0x06
    32f8:	01 97       	sbiw	r24, 0x01	; 1
    32fa:	9e 83       	std	Y+6, r25	; 0x06
    32fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3300:	9e 81       	ldd	r25, Y+6	; 0x06
    3302:	00 97       	sbiw	r24, 0x00	; 0
    3304:	69 f7       	brne	.-38     	; 0x32e0 <HCLCD_Vid8Bits_DisplayShiftLeft+0xb4>
    3306:	14 c0       	rjmp	.+40     	; 0x3330 <HCLCD_Vid8Bits_DisplayShiftLeft+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3308:	6f 81       	ldd	r22, Y+7	; 0x07
    330a:	78 85       	ldd	r23, Y+8	; 0x08
    330c:	89 85       	ldd	r24, Y+9	; 0x09
    330e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3310:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3314:	dc 01       	movw	r26, r24
    3316:	cb 01       	movw	r24, r22
    3318:	9e 83       	std	Y+6, r25	; 0x06
    331a:	8d 83       	std	Y+5, r24	; 0x05
    331c:	8d 81       	ldd	r24, Y+5	; 0x05
    331e:	9e 81       	ldd	r25, Y+6	; 0x06
    3320:	9a 83       	std	Y+2, r25	; 0x02
    3322:	89 83       	std	Y+1, r24	; 0x01
    3324:	89 81       	ldd	r24, Y+1	; 0x01
    3326:	9a 81       	ldd	r25, Y+2	; 0x02
    3328:	01 97       	sbiw	r24, 0x01	; 1
    332a:	f1 f7       	brne	.-4      	; 0x3328 <HCLCD_Vid8Bits_DisplayShiftLeft+0xfc>
    332c:	9a 83       	std	Y+2, r25	; 0x02
    332e:	89 83       	std	Y+1, r24	; 0x01
}
/**/
 void HCLCD_Vid8Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    3330:	8f 85       	ldd	r24, Y+15	; 0x0f
    3332:	8f 5f       	subi	r24, 0xFF	; 255
    3334:	8f 87       	std	Y+15, r24	; 0x0f
    3336:	9f 85       	ldd	r25, Y+15	; 0x0f
    3338:	88 89       	ldd	r24, Y+16	; 0x10
    333a:	98 17       	cp	r25, r24
    333c:	08 f4       	brcc	.+2      	; 0x3340 <HCLCD_Vid8Bits_DisplayShiftLeft+0x114>
    333e:	83 cf       	rjmp	.-250    	; 0x3246 <HCLCD_Vid8Bits_DisplayShiftLeft+0x1a>
 {
	 HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_LEFT);
  _delay_ms(300);
 }
}
    3340:	60 96       	adiw	r28, 0x10	; 16
    3342:	0f b6       	in	r0, 0x3f	; 63
    3344:	f8 94       	cli
    3346:	de bf       	out	0x3e, r29	; 62
    3348:	0f be       	out	0x3f, r0	; 63
    334a:	cd bf       	out	0x3d, r28	; 61
    334c:	cf 91       	pop	r28
    334e:	df 91       	pop	r29
    3350:	08 95       	ret

00003352 <HCLCD_Vid8Bits_DisplayShiftRight>:
/**/
 void HCLCD_Vid8Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
    3352:	df 93       	push	r29
    3354:	cf 93       	push	r28
    3356:	cd b7       	in	r28, 0x3d	; 61
    3358:	de b7       	in	r29, 0x3e	; 62
    335a:	60 97       	sbiw	r28, 0x10	; 16
    335c:	0f b6       	in	r0, 0x3f	; 63
    335e:	f8 94       	cli
    3360:	de bf       	out	0x3e, r29	; 62
    3362:	0f be       	out	0x3f, r0	; 63
    3364:	cd bf       	out	0x3d, r28	; 61
    3366:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    3368:	1f 86       	std	Y+15, r1	; 0x0f
    336a:	78 c0       	rjmp	.+240    	; 0x345c <HCLCD_Vid8Bits_DisplayShiftRight+0x10a>
	{
		HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_RIGHT);
    336c:	8c e1       	ldi	r24, 0x1C	; 28
    336e:	0e 94 77 13 	call	0x26ee	; 0x26ee <HCLCD_Vid8Bits_SendCommand>
    3372:	80 e0       	ldi	r24, 0x00	; 0
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	a6 e9       	ldi	r26, 0x96	; 150
    3378:	b3 e4       	ldi	r27, 0x43	; 67
    337a:	8b 87       	std	Y+11, r24	; 0x0b
    337c:	9c 87       	std	Y+12, r25	; 0x0c
    337e:	ad 87       	std	Y+13, r26	; 0x0d
    3380:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3382:	6b 85       	ldd	r22, Y+11	; 0x0b
    3384:	7c 85       	ldd	r23, Y+12	; 0x0c
    3386:	8d 85       	ldd	r24, Y+13	; 0x0d
    3388:	9e 85       	ldd	r25, Y+14	; 0x0e
    338a:	20 e0       	ldi	r18, 0x00	; 0
    338c:	30 e0       	ldi	r19, 0x00	; 0
    338e:	4a ef       	ldi	r20, 0xFA	; 250
    3390:	54 e4       	ldi	r21, 0x44	; 68
    3392:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3396:	dc 01       	movw	r26, r24
    3398:	cb 01       	movw	r24, r22
    339a:	8f 83       	std	Y+7, r24	; 0x07
    339c:	98 87       	std	Y+8, r25	; 0x08
    339e:	a9 87       	std	Y+9, r26	; 0x09
    33a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33a2:	6f 81       	ldd	r22, Y+7	; 0x07
    33a4:	78 85       	ldd	r23, Y+8	; 0x08
    33a6:	89 85       	ldd	r24, Y+9	; 0x09
    33a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    33aa:	20 e0       	ldi	r18, 0x00	; 0
    33ac:	30 e0       	ldi	r19, 0x00	; 0
    33ae:	40 e8       	ldi	r20, 0x80	; 128
    33b0:	5f e3       	ldi	r21, 0x3F	; 63
    33b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33b6:	88 23       	and	r24, r24
    33b8:	2c f4       	brge	.+10     	; 0x33c4 <HCLCD_Vid8Bits_DisplayShiftRight+0x72>
		__ticks = 1;
    33ba:	81 e0       	ldi	r24, 0x01	; 1
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	9e 83       	std	Y+6, r25	; 0x06
    33c0:	8d 83       	std	Y+5, r24	; 0x05
    33c2:	3f c0       	rjmp	.+126    	; 0x3442 <HCLCD_Vid8Bits_DisplayShiftRight+0xf0>
	else if (__tmp > 65535)
    33c4:	6f 81       	ldd	r22, Y+7	; 0x07
    33c6:	78 85       	ldd	r23, Y+8	; 0x08
    33c8:	89 85       	ldd	r24, Y+9	; 0x09
    33ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    33cc:	20 e0       	ldi	r18, 0x00	; 0
    33ce:	3f ef       	ldi	r19, 0xFF	; 255
    33d0:	4f e7       	ldi	r20, 0x7F	; 127
    33d2:	57 e4       	ldi	r21, 0x47	; 71
    33d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33d8:	18 16       	cp	r1, r24
    33da:	4c f5       	brge	.+82     	; 0x342e <HCLCD_Vid8Bits_DisplayShiftRight+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    33de:	7c 85       	ldd	r23, Y+12	; 0x0c
    33e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    33e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    33e4:	20 e0       	ldi	r18, 0x00	; 0
    33e6:	30 e0       	ldi	r19, 0x00	; 0
    33e8:	40 e2       	ldi	r20, 0x20	; 32
    33ea:	51 e4       	ldi	r21, 0x41	; 65
    33ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33f0:	dc 01       	movw	r26, r24
    33f2:	cb 01       	movw	r24, r22
    33f4:	bc 01       	movw	r22, r24
    33f6:	cd 01       	movw	r24, r26
    33f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33fc:	dc 01       	movw	r26, r24
    33fe:	cb 01       	movw	r24, r22
    3400:	9e 83       	std	Y+6, r25	; 0x06
    3402:	8d 83       	std	Y+5, r24	; 0x05
    3404:	0f c0       	rjmp	.+30     	; 0x3424 <HCLCD_Vid8Bits_DisplayShiftRight+0xd2>
    3406:	88 ec       	ldi	r24, 0xC8	; 200
    3408:	90 e0       	ldi	r25, 0x00	; 0
    340a:	9c 83       	std	Y+4, r25	; 0x04
    340c:	8b 83       	std	Y+3, r24	; 0x03
    340e:	8b 81       	ldd	r24, Y+3	; 0x03
    3410:	9c 81       	ldd	r25, Y+4	; 0x04
    3412:	01 97       	sbiw	r24, 0x01	; 1
    3414:	f1 f7       	brne	.-4      	; 0x3412 <HCLCD_Vid8Bits_DisplayShiftRight+0xc0>
    3416:	9c 83       	std	Y+4, r25	; 0x04
    3418:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    341a:	8d 81       	ldd	r24, Y+5	; 0x05
    341c:	9e 81       	ldd	r25, Y+6	; 0x06
    341e:	01 97       	sbiw	r24, 0x01	; 1
    3420:	9e 83       	std	Y+6, r25	; 0x06
    3422:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3424:	8d 81       	ldd	r24, Y+5	; 0x05
    3426:	9e 81       	ldd	r25, Y+6	; 0x06
    3428:	00 97       	sbiw	r24, 0x00	; 0
    342a:	69 f7       	brne	.-38     	; 0x3406 <HCLCD_Vid8Bits_DisplayShiftRight+0xb4>
    342c:	14 c0       	rjmp	.+40     	; 0x3456 <HCLCD_Vid8Bits_DisplayShiftRight+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    342e:	6f 81       	ldd	r22, Y+7	; 0x07
    3430:	78 85       	ldd	r23, Y+8	; 0x08
    3432:	89 85       	ldd	r24, Y+9	; 0x09
    3434:	9a 85       	ldd	r25, Y+10	; 0x0a
    3436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    343a:	dc 01       	movw	r26, r24
    343c:	cb 01       	movw	r24, r22
    343e:	9e 83       	std	Y+6, r25	; 0x06
    3440:	8d 83       	std	Y+5, r24	; 0x05
    3442:	8d 81       	ldd	r24, Y+5	; 0x05
    3444:	9e 81       	ldd	r25, Y+6	; 0x06
    3446:	9a 83       	std	Y+2, r25	; 0x02
    3448:	89 83       	std	Y+1, r24	; 0x01
    344a:	89 81       	ldd	r24, Y+1	; 0x01
    344c:	9a 81       	ldd	r25, Y+2	; 0x02
    344e:	01 97       	sbiw	r24, 0x01	; 1
    3450:	f1 f7       	brne	.-4      	; 0x344e <HCLCD_Vid8Bits_DisplayShiftRight+0xfc>
    3452:	9a 83       	std	Y+2, r25	; 0x02
    3454:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid8Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    3456:	8f 85       	ldd	r24, Y+15	; 0x0f
    3458:	8f 5f       	subi	r24, 0xFF	; 255
    345a:	8f 87       	std	Y+15, r24	; 0x0f
    345c:	9f 85       	ldd	r25, Y+15	; 0x0f
    345e:	88 89       	ldd	r24, Y+16	; 0x10
    3460:	98 17       	cp	r25, r24
    3462:	08 f4       	brcc	.+2      	; 0x3466 <HCLCD_Vid8Bits_DisplayShiftRight+0x114>
    3464:	83 cf       	rjmp	.-250    	; 0x336c <HCLCD_Vid8Bits_DisplayShiftRight+0x1a>
	{
		HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_RIGHT);
      _delay_ms(300);
	}
}
    3466:	60 96       	adiw	r28, 0x10	; 16
    3468:	0f b6       	in	r0, 0x3f	; 63
    346a:	f8 94       	cli
    346c:	de bf       	out	0x3e, r29	; 62
    346e:	0f be       	out	0x3f, r0	; 63
    3470:	cd bf       	out	0x3d, r28	; 61
    3472:	cf 91       	pop	r28
    3474:	df 91       	pop	r29
    3476:	08 95       	ret

00003478 <HCLCD_Vid8Bits_CursorShiftLeft>:
 /**/
 void HCLCD_Vid8Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
    3478:	df 93       	push	r29
    347a:	cf 93       	push	r28
    347c:	cd b7       	in	r28, 0x3d	; 61
    347e:	de b7       	in	r29, 0x3e	; 62
    3480:	60 97       	sbiw	r28, 0x10	; 16
    3482:	0f b6       	in	r0, 0x3f	; 63
    3484:	f8 94       	cli
    3486:	de bf       	out	0x3e, r29	; 62
    3488:	0f be       	out	0x3f, r0	; 63
    348a:	cd bf       	out	0x3d, r28	; 61
    348c:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    348e:	1f 86       	std	Y+15, r1	; 0x0f
    3490:	78 c0       	rjmp	.+240    	; 0x3582 <HCLCD_Vid8Bits_CursorShiftLeft+0x10a>
 {
	 HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_LEFT);
    3492:	80 e1       	ldi	r24, 0x10	; 16
    3494:	0e 94 77 13 	call	0x26ee	; 0x26ee <HCLCD_Vid8Bits_SendCommand>
    3498:	80 e0       	ldi	r24, 0x00	; 0
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	a6 e9       	ldi	r26, 0x96	; 150
    349e:	b3 e4       	ldi	r27, 0x43	; 67
    34a0:	8b 87       	std	Y+11, r24	; 0x0b
    34a2:	9c 87       	std	Y+12, r25	; 0x0c
    34a4:	ad 87       	std	Y+13, r26	; 0x0d
    34a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    34aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    34ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    34ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    34b0:	20 e0       	ldi	r18, 0x00	; 0
    34b2:	30 e0       	ldi	r19, 0x00	; 0
    34b4:	4a ef       	ldi	r20, 0xFA	; 250
    34b6:	54 e4       	ldi	r21, 0x44	; 68
    34b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34bc:	dc 01       	movw	r26, r24
    34be:	cb 01       	movw	r24, r22
    34c0:	8f 83       	std	Y+7, r24	; 0x07
    34c2:	98 87       	std	Y+8, r25	; 0x08
    34c4:	a9 87       	std	Y+9, r26	; 0x09
    34c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34c8:	6f 81       	ldd	r22, Y+7	; 0x07
    34ca:	78 85       	ldd	r23, Y+8	; 0x08
    34cc:	89 85       	ldd	r24, Y+9	; 0x09
    34ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    34d0:	20 e0       	ldi	r18, 0x00	; 0
    34d2:	30 e0       	ldi	r19, 0x00	; 0
    34d4:	40 e8       	ldi	r20, 0x80	; 128
    34d6:	5f e3       	ldi	r21, 0x3F	; 63
    34d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34dc:	88 23       	and	r24, r24
    34de:	2c f4       	brge	.+10     	; 0x34ea <HCLCD_Vid8Bits_CursorShiftLeft+0x72>
		__ticks = 1;
    34e0:	81 e0       	ldi	r24, 0x01	; 1
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	9e 83       	std	Y+6, r25	; 0x06
    34e6:	8d 83       	std	Y+5, r24	; 0x05
    34e8:	3f c0       	rjmp	.+126    	; 0x3568 <HCLCD_Vid8Bits_CursorShiftLeft+0xf0>
	else if (__tmp > 65535)
    34ea:	6f 81       	ldd	r22, Y+7	; 0x07
    34ec:	78 85       	ldd	r23, Y+8	; 0x08
    34ee:	89 85       	ldd	r24, Y+9	; 0x09
    34f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    34f2:	20 e0       	ldi	r18, 0x00	; 0
    34f4:	3f ef       	ldi	r19, 0xFF	; 255
    34f6:	4f e7       	ldi	r20, 0x7F	; 127
    34f8:	57 e4       	ldi	r21, 0x47	; 71
    34fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34fe:	18 16       	cp	r1, r24
    3500:	4c f5       	brge	.+82     	; 0x3554 <HCLCD_Vid8Bits_CursorShiftLeft+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3502:	6b 85       	ldd	r22, Y+11	; 0x0b
    3504:	7c 85       	ldd	r23, Y+12	; 0x0c
    3506:	8d 85       	ldd	r24, Y+13	; 0x0d
    3508:	9e 85       	ldd	r25, Y+14	; 0x0e
    350a:	20 e0       	ldi	r18, 0x00	; 0
    350c:	30 e0       	ldi	r19, 0x00	; 0
    350e:	40 e2       	ldi	r20, 0x20	; 32
    3510:	51 e4       	ldi	r21, 0x41	; 65
    3512:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3516:	dc 01       	movw	r26, r24
    3518:	cb 01       	movw	r24, r22
    351a:	bc 01       	movw	r22, r24
    351c:	cd 01       	movw	r24, r26
    351e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3522:	dc 01       	movw	r26, r24
    3524:	cb 01       	movw	r24, r22
    3526:	9e 83       	std	Y+6, r25	; 0x06
    3528:	8d 83       	std	Y+5, r24	; 0x05
    352a:	0f c0       	rjmp	.+30     	; 0x354a <HCLCD_Vid8Bits_CursorShiftLeft+0xd2>
    352c:	88 ec       	ldi	r24, 0xC8	; 200
    352e:	90 e0       	ldi	r25, 0x00	; 0
    3530:	9c 83       	std	Y+4, r25	; 0x04
    3532:	8b 83       	std	Y+3, r24	; 0x03
    3534:	8b 81       	ldd	r24, Y+3	; 0x03
    3536:	9c 81       	ldd	r25, Y+4	; 0x04
    3538:	01 97       	sbiw	r24, 0x01	; 1
    353a:	f1 f7       	brne	.-4      	; 0x3538 <HCLCD_Vid8Bits_CursorShiftLeft+0xc0>
    353c:	9c 83       	std	Y+4, r25	; 0x04
    353e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3540:	8d 81       	ldd	r24, Y+5	; 0x05
    3542:	9e 81       	ldd	r25, Y+6	; 0x06
    3544:	01 97       	sbiw	r24, 0x01	; 1
    3546:	9e 83       	std	Y+6, r25	; 0x06
    3548:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    354a:	8d 81       	ldd	r24, Y+5	; 0x05
    354c:	9e 81       	ldd	r25, Y+6	; 0x06
    354e:	00 97       	sbiw	r24, 0x00	; 0
    3550:	69 f7       	brne	.-38     	; 0x352c <HCLCD_Vid8Bits_CursorShiftLeft+0xb4>
    3552:	14 c0       	rjmp	.+40     	; 0x357c <HCLCD_Vid8Bits_CursorShiftLeft+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3554:	6f 81       	ldd	r22, Y+7	; 0x07
    3556:	78 85       	ldd	r23, Y+8	; 0x08
    3558:	89 85       	ldd	r24, Y+9	; 0x09
    355a:	9a 85       	ldd	r25, Y+10	; 0x0a
    355c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3560:	dc 01       	movw	r26, r24
    3562:	cb 01       	movw	r24, r22
    3564:	9e 83       	std	Y+6, r25	; 0x06
    3566:	8d 83       	std	Y+5, r24	; 0x05
    3568:	8d 81       	ldd	r24, Y+5	; 0x05
    356a:	9e 81       	ldd	r25, Y+6	; 0x06
    356c:	9a 83       	std	Y+2, r25	; 0x02
    356e:	89 83       	std	Y+1, r24	; 0x01
    3570:	89 81       	ldd	r24, Y+1	; 0x01
    3572:	9a 81       	ldd	r25, Y+2	; 0x02
    3574:	01 97       	sbiw	r24, 0x01	; 1
    3576:	f1 f7       	brne	.-4      	; 0x3574 <HCLCD_Vid8Bits_CursorShiftLeft+0xfc>
    3578:	9a 83       	std	Y+2, r25	; 0x02
    357a:	89 83       	std	Y+1, r24	; 0x01
}
 /**/
 void HCLCD_Vid8Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    357c:	8f 85       	ldd	r24, Y+15	; 0x0f
    357e:	8f 5f       	subi	r24, 0xFF	; 255
    3580:	8f 87       	std	Y+15, r24	; 0x0f
    3582:	9f 85       	ldd	r25, Y+15	; 0x0f
    3584:	88 89       	ldd	r24, Y+16	; 0x10
    3586:	98 17       	cp	r25, r24
    3588:	08 f4       	brcc	.+2      	; 0x358c <HCLCD_Vid8Bits_CursorShiftLeft+0x114>
    358a:	83 cf       	rjmp	.-250    	; 0x3492 <HCLCD_Vid8Bits_CursorShiftLeft+0x1a>
 {
	 HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_LEFT);
  _delay_ms(300);
 }
}
    358c:	60 96       	adiw	r28, 0x10	; 16
    358e:	0f b6       	in	r0, 0x3f	; 63
    3590:	f8 94       	cli
    3592:	de bf       	out	0x3e, r29	; 62
    3594:	0f be       	out	0x3f, r0	; 63
    3596:	cd bf       	out	0x3d, r28	; 61
    3598:	cf 91       	pop	r28
    359a:	df 91       	pop	r29
    359c:	08 95       	ret

0000359e <HCLCD_Vid8Bits_CursorShiftRight>:
/**/
 void HCLCD_Vid8Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
    359e:	df 93       	push	r29
    35a0:	cf 93       	push	r28
    35a2:	cd b7       	in	r28, 0x3d	; 61
    35a4:	de b7       	in	r29, 0x3e	; 62
    35a6:	60 97       	sbiw	r28, 0x10	; 16
    35a8:	0f b6       	in	r0, 0x3f	; 63
    35aa:	f8 94       	cli
    35ac:	de bf       	out	0x3e, r29	; 62
    35ae:	0f be       	out	0x3f, r0	; 63
    35b0:	cd bf       	out	0x3d, r28	; 61
    35b2:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    35b4:	1f 86       	std	Y+15, r1	; 0x0f
    35b6:	78 c0       	rjmp	.+240    	; 0x36a8 <HCLCD_Vid8Bits_CursorShiftRight+0x10a>
	{
		HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_RIGHT);
    35b8:	84 e1       	ldi	r24, 0x14	; 20
    35ba:	0e 94 77 13 	call	0x26ee	; 0x26ee <HCLCD_Vid8Bits_SendCommand>
    35be:	80 e0       	ldi	r24, 0x00	; 0
    35c0:	90 e0       	ldi	r25, 0x00	; 0
    35c2:	a6 e9       	ldi	r26, 0x96	; 150
    35c4:	b3 e4       	ldi	r27, 0x43	; 67
    35c6:	8b 87       	std	Y+11, r24	; 0x0b
    35c8:	9c 87       	std	Y+12, r25	; 0x0c
    35ca:	ad 87       	std	Y+13, r26	; 0x0d
    35cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    35d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    35d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    35d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    35d6:	20 e0       	ldi	r18, 0x00	; 0
    35d8:	30 e0       	ldi	r19, 0x00	; 0
    35da:	4a ef       	ldi	r20, 0xFA	; 250
    35dc:	54 e4       	ldi	r21, 0x44	; 68
    35de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35e2:	dc 01       	movw	r26, r24
    35e4:	cb 01       	movw	r24, r22
    35e6:	8f 83       	std	Y+7, r24	; 0x07
    35e8:	98 87       	std	Y+8, r25	; 0x08
    35ea:	a9 87       	std	Y+9, r26	; 0x09
    35ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35ee:	6f 81       	ldd	r22, Y+7	; 0x07
    35f0:	78 85       	ldd	r23, Y+8	; 0x08
    35f2:	89 85       	ldd	r24, Y+9	; 0x09
    35f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    35f6:	20 e0       	ldi	r18, 0x00	; 0
    35f8:	30 e0       	ldi	r19, 0x00	; 0
    35fa:	40 e8       	ldi	r20, 0x80	; 128
    35fc:	5f e3       	ldi	r21, 0x3F	; 63
    35fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3602:	88 23       	and	r24, r24
    3604:	2c f4       	brge	.+10     	; 0x3610 <HCLCD_Vid8Bits_CursorShiftRight+0x72>
		__ticks = 1;
    3606:	81 e0       	ldi	r24, 0x01	; 1
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	9e 83       	std	Y+6, r25	; 0x06
    360c:	8d 83       	std	Y+5, r24	; 0x05
    360e:	3f c0       	rjmp	.+126    	; 0x368e <HCLCD_Vid8Bits_CursorShiftRight+0xf0>
	else if (__tmp > 65535)
    3610:	6f 81       	ldd	r22, Y+7	; 0x07
    3612:	78 85       	ldd	r23, Y+8	; 0x08
    3614:	89 85       	ldd	r24, Y+9	; 0x09
    3616:	9a 85       	ldd	r25, Y+10	; 0x0a
    3618:	20 e0       	ldi	r18, 0x00	; 0
    361a:	3f ef       	ldi	r19, 0xFF	; 255
    361c:	4f e7       	ldi	r20, 0x7F	; 127
    361e:	57 e4       	ldi	r21, 0x47	; 71
    3620:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3624:	18 16       	cp	r1, r24
    3626:	4c f5       	brge	.+82     	; 0x367a <HCLCD_Vid8Bits_CursorShiftRight+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3628:	6b 85       	ldd	r22, Y+11	; 0x0b
    362a:	7c 85       	ldd	r23, Y+12	; 0x0c
    362c:	8d 85       	ldd	r24, Y+13	; 0x0d
    362e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3630:	20 e0       	ldi	r18, 0x00	; 0
    3632:	30 e0       	ldi	r19, 0x00	; 0
    3634:	40 e2       	ldi	r20, 0x20	; 32
    3636:	51 e4       	ldi	r21, 0x41	; 65
    3638:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    363c:	dc 01       	movw	r26, r24
    363e:	cb 01       	movw	r24, r22
    3640:	bc 01       	movw	r22, r24
    3642:	cd 01       	movw	r24, r26
    3644:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3648:	dc 01       	movw	r26, r24
    364a:	cb 01       	movw	r24, r22
    364c:	9e 83       	std	Y+6, r25	; 0x06
    364e:	8d 83       	std	Y+5, r24	; 0x05
    3650:	0f c0       	rjmp	.+30     	; 0x3670 <HCLCD_Vid8Bits_CursorShiftRight+0xd2>
    3652:	88 ec       	ldi	r24, 0xC8	; 200
    3654:	90 e0       	ldi	r25, 0x00	; 0
    3656:	9c 83       	std	Y+4, r25	; 0x04
    3658:	8b 83       	std	Y+3, r24	; 0x03
    365a:	8b 81       	ldd	r24, Y+3	; 0x03
    365c:	9c 81       	ldd	r25, Y+4	; 0x04
    365e:	01 97       	sbiw	r24, 0x01	; 1
    3660:	f1 f7       	brne	.-4      	; 0x365e <HCLCD_Vid8Bits_CursorShiftRight+0xc0>
    3662:	9c 83       	std	Y+4, r25	; 0x04
    3664:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3666:	8d 81       	ldd	r24, Y+5	; 0x05
    3668:	9e 81       	ldd	r25, Y+6	; 0x06
    366a:	01 97       	sbiw	r24, 0x01	; 1
    366c:	9e 83       	std	Y+6, r25	; 0x06
    366e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3670:	8d 81       	ldd	r24, Y+5	; 0x05
    3672:	9e 81       	ldd	r25, Y+6	; 0x06
    3674:	00 97       	sbiw	r24, 0x00	; 0
    3676:	69 f7       	brne	.-38     	; 0x3652 <HCLCD_Vid8Bits_CursorShiftRight+0xb4>
    3678:	14 c0       	rjmp	.+40     	; 0x36a2 <HCLCD_Vid8Bits_CursorShiftRight+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    367a:	6f 81       	ldd	r22, Y+7	; 0x07
    367c:	78 85       	ldd	r23, Y+8	; 0x08
    367e:	89 85       	ldd	r24, Y+9	; 0x09
    3680:	9a 85       	ldd	r25, Y+10	; 0x0a
    3682:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3686:	dc 01       	movw	r26, r24
    3688:	cb 01       	movw	r24, r22
    368a:	9e 83       	std	Y+6, r25	; 0x06
    368c:	8d 83       	std	Y+5, r24	; 0x05
    368e:	8d 81       	ldd	r24, Y+5	; 0x05
    3690:	9e 81       	ldd	r25, Y+6	; 0x06
    3692:	9a 83       	std	Y+2, r25	; 0x02
    3694:	89 83       	std	Y+1, r24	; 0x01
    3696:	89 81       	ldd	r24, Y+1	; 0x01
    3698:	9a 81       	ldd	r25, Y+2	; 0x02
    369a:	01 97       	sbiw	r24, 0x01	; 1
    369c:	f1 f7       	brne	.-4      	; 0x369a <HCLCD_Vid8Bits_CursorShiftRight+0xfc>
    369e:	9a 83       	std	Y+2, r25	; 0x02
    36a0:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid8Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    36a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    36a4:	8f 5f       	subi	r24, 0xFF	; 255
    36a6:	8f 87       	std	Y+15, r24	; 0x0f
    36a8:	9f 85       	ldd	r25, Y+15	; 0x0f
    36aa:	88 89       	ldd	r24, Y+16	; 0x10
    36ac:	98 17       	cp	r25, r24
    36ae:	08 f4       	brcc	.+2      	; 0x36b2 <HCLCD_Vid8Bits_CursorShiftRight+0x114>
    36b0:	83 cf       	rjmp	.-250    	; 0x35b8 <HCLCD_Vid8Bits_CursorShiftRight+0x1a>
	{
		HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_RIGHT);
      _delay_ms(300);
	}
}
    36b2:	60 96       	adiw	r28, 0x10	; 16
    36b4:	0f b6       	in	r0, 0x3f	; 63
    36b6:	f8 94       	cli
    36b8:	de bf       	out	0x3e, r29	; 62
    36ba:	0f be       	out	0x3f, r0	; 63
    36bc:	cd bf       	out	0x3d, r28	; 61
    36be:	cf 91       	pop	r28
    36c0:	df 91       	pop	r29
    36c2:	08 95       	ret

000036c4 <HCLCD_Vid4Bits_SendCommand>:
/****************************************************************************************************************************************/

/*Send Command 4 Bits*/
void HCLCD_Vid4Bits_SendCommand(u8 Copy_u8Command )
{
    36c4:	df 93       	push	r29
    36c6:	cf 93       	push	r28
    36c8:	cd b7       	in	r28, 0x3d	; 61
    36ca:	de b7       	in	r29, 0x3e	; 62
    36cc:	2f 97       	sbiw	r28, 0x0f	; 15
    36ce:	0f b6       	in	r0, 0x3f	; 63
    36d0:	f8 94       	cli
    36d2:	de bf       	out	0x3e, r29	; 62
    36d4:	0f be       	out	0x3f, r0	; 63
    36d6:	cd bf       	out	0x3d, r28	; 61
    36d8:	8f 87       	std	Y+15, r24	; 0x0f
	//u8 LOC_u8CopyCommand;
	/*select Command register--> Write zero on Rs pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_LOW);
    36da:	80 e0       	ldi	r24, 0x00	; 0
    36dc:	62 e0       	ldi	r22, 0x02	; 2
    36de:	40 e0       	ldi	r20, 0x00	; 0
    36e0:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
	/*select Write mode--> Write zero on RW pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    36e4:	81 e0       	ldi	r24, 0x01	; 1
    36e6:	62 e0       	ldi	r22, 0x02	; 2
    36e8:	40 e0       	ldi	r20, 0x00	; 0
    36ea:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
	/*Send  Command*/
	//LOC_u8CopyCommand=(Copy_u8Command&0x0F)<<HCLCD_PINSTART;
	MDIO_Error_State_SetNippleValue(HCLCD_PINSTART,DATA_PORT,Copy_u8Command);
    36ee:	84 e0       	ldi	r24, 0x04	; 4
    36f0:	62 e0       	ldi	r22, 0x02	; 2
    36f2:	4f 85       	ldd	r20, Y+15	; 0x0f
    36f4:	0e 94 81 0c 	call	0x1902	; 0x1902 <MDIO_Error_State_SetNippleValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    36f8:	82 e0       	ldi	r24, 0x02	; 2
    36fa:	62 e0       	ldi	r22, 0x02	; 2
    36fc:	41 e0       	ldi	r20, 0x01	; 1
    36fe:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
    3702:	80 e0       	ldi	r24, 0x00	; 0
    3704:	90 e0       	ldi	r25, 0x00	; 0
    3706:	a0 e0       	ldi	r26, 0x00	; 0
    3708:	b0 e4       	ldi	r27, 0x40	; 64
    370a:	8b 87       	std	Y+11, r24	; 0x0b
    370c:	9c 87       	std	Y+12, r25	; 0x0c
    370e:	ad 87       	std	Y+13, r26	; 0x0d
    3710:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3712:	6b 85       	ldd	r22, Y+11	; 0x0b
    3714:	7c 85       	ldd	r23, Y+12	; 0x0c
    3716:	8d 85       	ldd	r24, Y+13	; 0x0d
    3718:	9e 85       	ldd	r25, Y+14	; 0x0e
    371a:	20 e0       	ldi	r18, 0x00	; 0
    371c:	30 e0       	ldi	r19, 0x00	; 0
    371e:	4a ef       	ldi	r20, 0xFA	; 250
    3720:	54 e4       	ldi	r21, 0x44	; 68
    3722:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3726:	dc 01       	movw	r26, r24
    3728:	cb 01       	movw	r24, r22
    372a:	8f 83       	std	Y+7, r24	; 0x07
    372c:	98 87       	std	Y+8, r25	; 0x08
    372e:	a9 87       	std	Y+9, r26	; 0x09
    3730:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3732:	6f 81       	ldd	r22, Y+7	; 0x07
    3734:	78 85       	ldd	r23, Y+8	; 0x08
    3736:	89 85       	ldd	r24, Y+9	; 0x09
    3738:	9a 85       	ldd	r25, Y+10	; 0x0a
    373a:	20 e0       	ldi	r18, 0x00	; 0
    373c:	30 e0       	ldi	r19, 0x00	; 0
    373e:	40 e8       	ldi	r20, 0x80	; 128
    3740:	5f e3       	ldi	r21, 0x3F	; 63
    3742:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3746:	88 23       	and	r24, r24
    3748:	2c f4       	brge	.+10     	; 0x3754 <HCLCD_Vid4Bits_SendCommand+0x90>
		__ticks = 1;
    374a:	81 e0       	ldi	r24, 0x01	; 1
    374c:	90 e0       	ldi	r25, 0x00	; 0
    374e:	9e 83       	std	Y+6, r25	; 0x06
    3750:	8d 83       	std	Y+5, r24	; 0x05
    3752:	3f c0       	rjmp	.+126    	; 0x37d2 <HCLCD_Vid4Bits_SendCommand+0x10e>
	else if (__tmp > 65535)
    3754:	6f 81       	ldd	r22, Y+7	; 0x07
    3756:	78 85       	ldd	r23, Y+8	; 0x08
    3758:	89 85       	ldd	r24, Y+9	; 0x09
    375a:	9a 85       	ldd	r25, Y+10	; 0x0a
    375c:	20 e0       	ldi	r18, 0x00	; 0
    375e:	3f ef       	ldi	r19, 0xFF	; 255
    3760:	4f e7       	ldi	r20, 0x7F	; 127
    3762:	57 e4       	ldi	r21, 0x47	; 71
    3764:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3768:	18 16       	cp	r1, r24
    376a:	4c f5       	brge	.+82     	; 0x37be <HCLCD_Vid4Bits_SendCommand+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    376c:	6b 85       	ldd	r22, Y+11	; 0x0b
    376e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3770:	8d 85       	ldd	r24, Y+13	; 0x0d
    3772:	9e 85       	ldd	r25, Y+14	; 0x0e
    3774:	20 e0       	ldi	r18, 0x00	; 0
    3776:	30 e0       	ldi	r19, 0x00	; 0
    3778:	40 e2       	ldi	r20, 0x20	; 32
    377a:	51 e4       	ldi	r21, 0x41	; 65
    377c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3780:	dc 01       	movw	r26, r24
    3782:	cb 01       	movw	r24, r22
    3784:	bc 01       	movw	r22, r24
    3786:	cd 01       	movw	r24, r26
    3788:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    378c:	dc 01       	movw	r26, r24
    378e:	cb 01       	movw	r24, r22
    3790:	9e 83       	std	Y+6, r25	; 0x06
    3792:	8d 83       	std	Y+5, r24	; 0x05
    3794:	0f c0       	rjmp	.+30     	; 0x37b4 <HCLCD_Vid4Bits_SendCommand+0xf0>
    3796:	88 ec       	ldi	r24, 0xC8	; 200
    3798:	90 e0       	ldi	r25, 0x00	; 0
    379a:	9c 83       	std	Y+4, r25	; 0x04
    379c:	8b 83       	std	Y+3, r24	; 0x03
    379e:	8b 81       	ldd	r24, Y+3	; 0x03
    37a0:	9c 81       	ldd	r25, Y+4	; 0x04
    37a2:	01 97       	sbiw	r24, 0x01	; 1
    37a4:	f1 f7       	brne	.-4      	; 0x37a2 <HCLCD_Vid4Bits_SendCommand+0xde>
    37a6:	9c 83       	std	Y+4, r25	; 0x04
    37a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37aa:	8d 81       	ldd	r24, Y+5	; 0x05
    37ac:	9e 81       	ldd	r25, Y+6	; 0x06
    37ae:	01 97       	sbiw	r24, 0x01	; 1
    37b0:	9e 83       	std	Y+6, r25	; 0x06
    37b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37b4:	8d 81       	ldd	r24, Y+5	; 0x05
    37b6:	9e 81       	ldd	r25, Y+6	; 0x06
    37b8:	00 97       	sbiw	r24, 0x00	; 0
    37ba:	69 f7       	brne	.-38     	; 0x3796 <HCLCD_Vid4Bits_SendCommand+0xd2>
    37bc:	14 c0       	rjmp	.+40     	; 0x37e6 <HCLCD_Vid4Bits_SendCommand+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37be:	6f 81       	ldd	r22, Y+7	; 0x07
    37c0:	78 85       	ldd	r23, Y+8	; 0x08
    37c2:	89 85       	ldd	r24, Y+9	; 0x09
    37c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    37c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ca:	dc 01       	movw	r26, r24
    37cc:	cb 01       	movw	r24, r22
    37ce:	9e 83       	std	Y+6, r25	; 0x06
    37d0:	8d 83       	std	Y+5, r24	; 0x05
    37d2:	8d 81       	ldd	r24, Y+5	; 0x05
    37d4:	9e 81       	ldd	r25, Y+6	; 0x06
    37d6:	9a 83       	std	Y+2, r25	; 0x02
    37d8:	89 83       	std	Y+1, r24	; 0x01
    37da:	89 81       	ldd	r24, Y+1	; 0x01
    37dc:	9a 81       	ldd	r25, Y+2	; 0x02
    37de:	01 97       	sbiw	r24, 0x01	; 1
    37e0:	f1 f7       	brne	.-4      	; 0x37de <HCLCD_Vid4Bits_SendCommand+0x11a>
    37e2:	9a 83       	std	Y+2, r25	; 0x02
    37e4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    37e6:	82 e0       	ldi	r24, 0x02	; 2
    37e8:	62 e0       	ldi	r22, 0x02	; 2
    37ea:	40 e0       	ldi	r20, 0x00	; 0
    37ec:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
}
    37f0:	2f 96       	adiw	r28, 0x0f	; 15
    37f2:	0f b6       	in	r0, 0x3f	; 63
    37f4:	f8 94       	cli
    37f6:	de bf       	out	0x3e, r29	; 62
    37f8:	0f be       	out	0x3f, r0	; 63
    37fa:	cd bf       	out	0x3d, r28	; 61
    37fc:	cf 91       	pop	r28
    37fe:	df 91       	pop	r29
    3800:	08 95       	ret

00003802 <HCLCD_Vid4Bits_Init>:


/*LCD 4 Bits Initialization*/

void HCLCD_Vid4Bits_Init(void)
{
    3802:	df 93       	push	r29
    3804:	cf 93       	push	r28
    3806:	cd b7       	in	r28, 0x3d	; 61
    3808:	de b7       	in	r29, 0x3e	; 62
    380a:	e9 97       	sbiw	r28, 0x39	; 57
    380c:	0f b6       	in	r0, 0x3f	; 63
    380e:	f8 94       	cli
    3810:	de bf       	out	0x3e, r29	; 62
    3812:	0f be       	out	0x3f, r0	; 63
    3814:	cd bf       	out	0x3d, r28	; 61
	/*Fill This Function*/
	s8 LOC_u8PinCount;
	/*LCD Data and control port initialization*/
	for(LOC_u8PinCount=HCLCD_PINEND;LOC_u8PinCount>=HCLCD_PINSTART;LOC_u8PinCount--)
    3816:	87 e0       	ldi	r24, 0x07	; 7
    3818:	89 af       	std	Y+57, r24	; 0x39
    381a:	08 c0       	rjmp	.+16     	; 0x382c <HCLCD_Vid4Bits_Init+0x2a>
	{
		MDIO_Error_State_SetPinDirection(LOC_u8PinCount,DATA_PORT,PIN_OUTPUT);
    381c:	89 ad       	ldd	r24, Y+57	; 0x39
    381e:	62 e0       	ldi	r22, 0x02	; 2
    3820:	41 e0       	ldi	r20, 0x01	; 1
    3822:	0e 94 4b 09 	call	0x1296	; 0x1296 <MDIO_Error_State_SetPinDirection>
void HCLCD_Vid4Bits_Init(void)
{
	/*Fill This Function*/
	s8 LOC_u8PinCount;
	/*LCD Data and control port initialization*/
	for(LOC_u8PinCount=HCLCD_PINEND;LOC_u8PinCount>=HCLCD_PINSTART;LOC_u8PinCount--)
    3826:	89 ad       	ldd	r24, Y+57	; 0x39
    3828:	81 50       	subi	r24, 0x01	; 1
    382a:	89 af       	std	Y+57, r24	; 0x39
    382c:	89 ad       	ldd	r24, Y+57	; 0x39
    382e:	84 30       	cpi	r24, 0x04	; 4
    3830:	ac f7       	brge	.-22     	; 0x381c <HCLCD_Vid4Bits_Init+0x1a>
	{
		MDIO_Error_State_SetPinDirection(LOC_u8PinCount,DATA_PORT,PIN_OUTPUT);
	}
	MDIO_Error_State_SetPinDirection(RS,CONTROL_PORT,PIN_OUTPUT);
    3832:	80 e0       	ldi	r24, 0x00	; 0
    3834:	62 e0       	ldi	r22, 0x02	; 2
    3836:	41 e0       	ldi	r20, 0x01	; 1
    3838:	0e 94 4b 09 	call	0x1296	; 0x1296 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(RW,CONTROL_PORT,PIN_OUTPUT);
    383c:	81 e0       	ldi	r24, 0x01	; 1
    383e:	62 e0       	ldi	r22, 0x02	; 2
    3840:	41 e0       	ldi	r20, 0x01	; 1
    3842:	0e 94 4b 09 	call	0x1296	; 0x1296 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(E,CONTROL_PORT,PIN_OUTPUT);
    3846:	82 e0       	ldi	r24, 0x02	; 2
    3848:	62 e0       	ldi	r22, 0x02	; 2
    384a:	41 e0       	ldi	r20, 0x01	; 1
    384c:	0e 94 4b 09 	call	0x1296	; 0x1296 <MDIO_Error_State_SetPinDirection>
    3850:	80 e0       	ldi	r24, 0x00	; 0
    3852:	90 e0       	ldi	r25, 0x00	; 0
    3854:	a0 ef       	ldi	r26, 0xF0	; 240
    3856:	b1 e4       	ldi	r27, 0x41	; 65
    3858:	8d ab       	std	Y+53, r24	; 0x35
    385a:	9e ab       	std	Y+54, r25	; 0x36
    385c:	af ab       	std	Y+55, r26	; 0x37
    385e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3860:	6d a9       	ldd	r22, Y+53	; 0x35
    3862:	7e a9       	ldd	r23, Y+54	; 0x36
    3864:	8f a9       	ldd	r24, Y+55	; 0x37
    3866:	98 ad       	ldd	r25, Y+56	; 0x38
    3868:	20 e0       	ldi	r18, 0x00	; 0
    386a:	30 e0       	ldi	r19, 0x00	; 0
    386c:	4a ef       	ldi	r20, 0xFA	; 250
    386e:	54 e4       	ldi	r21, 0x44	; 68
    3870:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3874:	dc 01       	movw	r26, r24
    3876:	cb 01       	movw	r24, r22
    3878:	89 ab       	std	Y+49, r24	; 0x31
    387a:	9a ab       	std	Y+50, r25	; 0x32
    387c:	ab ab       	std	Y+51, r26	; 0x33
    387e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3880:	69 a9       	ldd	r22, Y+49	; 0x31
    3882:	7a a9       	ldd	r23, Y+50	; 0x32
    3884:	8b a9       	ldd	r24, Y+51	; 0x33
    3886:	9c a9       	ldd	r25, Y+52	; 0x34
    3888:	20 e0       	ldi	r18, 0x00	; 0
    388a:	30 e0       	ldi	r19, 0x00	; 0
    388c:	40 e8       	ldi	r20, 0x80	; 128
    388e:	5f e3       	ldi	r21, 0x3F	; 63
    3890:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3894:	88 23       	and	r24, r24
    3896:	2c f4       	brge	.+10     	; 0x38a2 <HCLCD_Vid4Bits_Init+0xa0>
		__ticks = 1;
    3898:	81 e0       	ldi	r24, 0x01	; 1
    389a:	90 e0       	ldi	r25, 0x00	; 0
    389c:	98 ab       	std	Y+48, r25	; 0x30
    389e:	8f a7       	std	Y+47, r24	; 0x2f
    38a0:	3f c0       	rjmp	.+126    	; 0x3920 <HCLCD_Vid4Bits_Init+0x11e>
	else if (__tmp > 65535)
    38a2:	69 a9       	ldd	r22, Y+49	; 0x31
    38a4:	7a a9       	ldd	r23, Y+50	; 0x32
    38a6:	8b a9       	ldd	r24, Y+51	; 0x33
    38a8:	9c a9       	ldd	r25, Y+52	; 0x34
    38aa:	20 e0       	ldi	r18, 0x00	; 0
    38ac:	3f ef       	ldi	r19, 0xFF	; 255
    38ae:	4f e7       	ldi	r20, 0x7F	; 127
    38b0:	57 e4       	ldi	r21, 0x47	; 71
    38b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38b6:	18 16       	cp	r1, r24
    38b8:	4c f5       	brge	.+82     	; 0x390c <HCLCD_Vid4Bits_Init+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38ba:	6d a9       	ldd	r22, Y+53	; 0x35
    38bc:	7e a9       	ldd	r23, Y+54	; 0x36
    38be:	8f a9       	ldd	r24, Y+55	; 0x37
    38c0:	98 ad       	ldd	r25, Y+56	; 0x38
    38c2:	20 e0       	ldi	r18, 0x00	; 0
    38c4:	30 e0       	ldi	r19, 0x00	; 0
    38c6:	40 e2       	ldi	r20, 0x20	; 32
    38c8:	51 e4       	ldi	r21, 0x41	; 65
    38ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ce:	dc 01       	movw	r26, r24
    38d0:	cb 01       	movw	r24, r22
    38d2:	bc 01       	movw	r22, r24
    38d4:	cd 01       	movw	r24, r26
    38d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38da:	dc 01       	movw	r26, r24
    38dc:	cb 01       	movw	r24, r22
    38de:	98 ab       	std	Y+48, r25	; 0x30
    38e0:	8f a7       	std	Y+47, r24	; 0x2f
    38e2:	0f c0       	rjmp	.+30     	; 0x3902 <HCLCD_Vid4Bits_Init+0x100>
    38e4:	88 ec       	ldi	r24, 0xC8	; 200
    38e6:	90 e0       	ldi	r25, 0x00	; 0
    38e8:	9e a7       	std	Y+46, r25	; 0x2e
    38ea:	8d a7       	std	Y+45, r24	; 0x2d
    38ec:	8d a5       	ldd	r24, Y+45	; 0x2d
    38ee:	9e a5       	ldd	r25, Y+46	; 0x2e
    38f0:	01 97       	sbiw	r24, 0x01	; 1
    38f2:	f1 f7       	brne	.-4      	; 0x38f0 <HCLCD_Vid4Bits_Init+0xee>
    38f4:	9e a7       	std	Y+46, r25	; 0x2e
    38f6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    38fa:	98 a9       	ldd	r25, Y+48	; 0x30
    38fc:	01 97       	sbiw	r24, 0x01	; 1
    38fe:	98 ab       	std	Y+48, r25	; 0x30
    3900:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3902:	8f a5       	ldd	r24, Y+47	; 0x2f
    3904:	98 a9       	ldd	r25, Y+48	; 0x30
    3906:	00 97       	sbiw	r24, 0x00	; 0
    3908:	69 f7       	brne	.-38     	; 0x38e4 <HCLCD_Vid4Bits_Init+0xe2>
    390a:	14 c0       	rjmp	.+40     	; 0x3934 <HCLCD_Vid4Bits_Init+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    390c:	69 a9       	ldd	r22, Y+49	; 0x31
    390e:	7a a9       	ldd	r23, Y+50	; 0x32
    3910:	8b a9       	ldd	r24, Y+51	; 0x33
    3912:	9c a9       	ldd	r25, Y+52	; 0x34
    3914:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3918:	dc 01       	movw	r26, r24
    391a:	cb 01       	movw	r24, r22
    391c:	98 ab       	std	Y+48, r25	; 0x30
    391e:	8f a7       	std	Y+47, r24	; 0x2f
    3920:	8f a5       	ldd	r24, Y+47	; 0x2f
    3922:	98 a9       	ldd	r25, Y+48	; 0x30
    3924:	9c a7       	std	Y+44, r25	; 0x2c
    3926:	8b a7       	std	Y+43, r24	; 0x2b
    3928:	8b a5       	ldd	r24, Y+43	; 0x2b
    392a:	9c a5       	ldd	r25, Y+44	; 0x2c
    392c:	01 97       	sbiw	r24, 0x01	; 1
    392e:	f1 f7       	brne	.-4      	; 0x392c <HCLCD_Vid4Bits_Init+0x12a>
    3930:	9c a7       	std	Y+44, r25	; 0x2c
    3932:	8b a7       	std	Y+43, r24	; 0x2b
	/*wait to 30ms*/
	_delay_ms(30);
	/*send function set command*/
	HCLCD_Vid4Bits_SendCommand(HCLCD_FUNCTION_SET>>4);
    3934:	82 e0       	ldi	r24, 0x02	; 2
    3936:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_FUNCTION_SET>>4);
    393a:	82 e0       	ldi	r24, 0x02	; 2
    393c:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_FUNCTION_SET);
    3940:	88 e2       	ldi	r24, 0x28	; 40
    3942:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <HCLCD_Vid4Bits_SendCommand>
    3946:	80 e0       	ldi	r24, 0x00	; 0
    3948:	90 e0       	ldi	r25, 0x00	; 0
    394a:	a0 e8       	ldi	r26, 0x80	; 128
    394c:	bf e3       	ldi	r27, 0x3F	; 63
    394e:	8f a3       	std	Y+39, r24	; 0x27
    3950:	98 a7       	std	Y+40, r25	; 0x28
    3952:	a9 a7       	std	Y+41, r26	; 0x29
    3954:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3956:	6f a1       	ldd	r22, Y+39	; 0x27
    3958:	78 a5       	ldd	r23, Y+40	; 0x28
    395a:	89 a5       	ldd	r24, Y+41	; 0x29
    395c:	9a a5       	ldd	r25, Y+42	; 0x2a
    395e:	20 e0       	ldi	r18, 0x00	; 0
    3960:	30 e0       	ldi	r19, 0x00	; 0
    3962:	4a ef       	ldi	r20, 0xFA	; 250
    3964:	54 e4       	ldi	r21, 0x44	; 68
    3966:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    396a:	dc 01       	movw	r26, r24
    396c:	cb 01       	movw	r24, r22
    396e:	8b a3       	std	Y+35, r24	; 0x23
    3970:	9c a3       	std	Y+36, r25	; 0x24
    3972:	ad a3       	std	Y+37, r26	; 0x25
    3974:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3976:	6b a1       	ldd	r22, Y+35	; 0x23
    3978:	7c a1       	ldd	r23, Y+36	; 0x24
    397a:	8d a1       	ldd	r24, Y+37	; 0x25
    397c:	9e a1       	ldd	r25, Y+38	; 0x26
    397e:	20 e0       	ldi	r18, 0x00	; 0
    3980:	30 e0       	ldi	r19, 0x00	; 0
    3982:	40 e8       	ldi	r20, 0x80	; 128
    3984:	5f e3       	ldi	r21, 0x3F	; 63
    3986:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    398a:	88 23       	and	r24, r24
    398c:	2c f4       	brge	.+10     	; 0x3998 <HCLCD_Vid4Bits_Init+0x196>
		__ticks = 1;
    398e:	81 e0       	ldi	r24, 0x01	; 1
    3990:	90 e0       	ldi	r25, 0x00	; 0
    3992:	9a a3       	std	Y+34, r25	; 0x22
    3994:	89 a3       	std	Y+33, r24	; 0x21
    3996:	3f c0       	rjmp	.+126    	; 0x3a16 <HCLCD_Vid4Bits_Init+0x214>
	else if (__tmp > 65535)
    3998:	6b a1       	ldd	r22, Y+35	; 0x23
    399a:	7c a1       	ldd	r23, Y+36	; 0x24
    399c:	8d a1       	ldd	r24, Y+37	; 0x25
    399e:	9e a1       	ldd	r25, Y+38	; 0x26
    39a0:	20 e0       	ldi	r18, 0x00	; 0
    39a2:	3f ef       	ldi	r19, 0xFF	; 255
    39a4:	4f e7       	ldi	r20, 0x7F	; 127
    39a6:	57 e4       	ldi	r21, 0x47	; 71
    39a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39ac:	18 16       	cp	r1, r24
    39ae:	4c f5       	brge	.+82     	; 0x3a02 <HCLCD_Vid4Bits_Init+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39b0:	6f a1       	ldd	r22, Y+39	; 0x27
    39b2:	78 a5       	ldd	r23, Y+40	; 0x28
    39b4:	89 a5       	ldd	r24, Y+41	; 0x29
    39b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    39b8:	20 e0       	ldi	r18, 0x00	; 0
    39ba:	30 e0       	ldi	r19, 0x00	; 0
    39bc:	40 e2       	ldi	r20, 0x20	; 32
    39be:	51 e4       	ldi	r21, 0x41	; 65
    39c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39c4:	dc 01       	movw	r26, r24
    39c6:	cb 01       	movw	r24, r22
    39c8:	bc 01       	movw	r22, r24
    39ca:	cd 01       	movw	r24, r26
    39cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39d0:	dc 01       	movw	r26, r24
    39d2:	cb 01       	movw	r24, r22
    39d4:	9a a3       	std	Y+34, r25	; 0x22
    39d6:	89 a3       	std	Y+33, r24	; 0x21
    39d8:	0f c0       	rjmp	.+30     	; 0x39f8 <HCLCD_Vid4Bits_Init+0x1f6>
    39da:	88 ec       	ldi	r24, 0xC8	; 200
    39dc:	90 e0       	ldi	r25, 0x00	; 0
    39de:	98 a3       	std	Y+32, r25	; 0x20
    39e0:	8f 8f       	std	Y+31, r24	; 0x1f
    39e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    39e4:	98 a1       	ldd	r25, Y+32	; 0x20
    39e6:	01 97       	sbiw	r24, 0x01	; 1
    39e8:	f1 f7       	brne	.-4      	; 0x39e6 <HCLCD_Vid4Bits_Init+0x1e4>
    39ea:	98 a3       	std	Y+32, r25	; 0x20
    39ec:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39ee:	89 a1       	ldd	r24, Y+33	; 0x21
    39f0:	9a a1       	ldd	r25, Y+34	; 0x22
    39f2:	01 97       	sbiw	r24, 0x01	; 1
    39f4:	9a a3       	std	Y+34, r25	; 0x22
    39f6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39f8:	89 a1       	ldd	r24, Y+33	; 0x21
    39fa:	9a a1       	ldd	r25, Y+34	; 0x22
    39fc:	00 97       	sbiw	r24, 0x00	; 0
    39fe:	69 f7       	brne	.-38     	; 0x39da <HCLCD_Vid4Bits_Init+0x1d8>
    3a00:	14 c0       	rjmp	.+40     	; 0x3a2a <HCLCD_Vid4Bits_Init+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a02:	6b a1       	ldd	r22, Y+35	; 0x23
    3a04:	7c a1       	ldd	r23, Y+36	; 0x24
    3a06:	8d a1       	ldd	r24, Y+37	; 0x25
    3a08:	9e a1       	ldd	r25, Y+38	; 0x26
    3a0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a0e:	dc 01       	movw	r26, r24
    3a10:	cb 01       	movw	r24, r22
    3a12:	9a a3       	std	Y+34, r25	; 0x22
    3a14:	89 a3       	std	Y+33, r24	; 0x21
    3a16:	89 a1       	ldd	r24, Y+33	; 0x21
    3a18:	9a a1       	ldd	r25, Y+34	; 0x22
    3a1a:	9e 8f       	std	Y+30, r25	; 0x1e
    3a1c:	8d 8f       	std	Y+29, r24	; 0x1d
    3a1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a20:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a22:	01 97       	sbiw	r24, 0x01	; 1
    3a24:	f1 f7       	brne	.-4      	; 0x3a22 <HCLCD_Vid4Bits_Init+0x220>
    3a26:	9e 8f       	std	Y+30, r25	; 0x1e
    3a28:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*send Display on/off  command*/
	HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_ON_OFF>>4);
    3a2a:	80 e0       	ldi	r24, 0x00	; 0
    3a2c:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_ON_OFF);
    3a30:	8c e0       	ldi	r24, 0x0C	; 12
    3a32:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <HCLCD_Vid4Bits_SendCommand>
    3a36:	80 e0       	ldi	r24, 0x00	; 0
    3a38:	90 e0       	ldi	r25, 0x00	; 0
    3a3a:	a0 e8       	ldi	r26, 0x80	; 128
    3a3c:	bf e3       	ldi	r27, 0x3F	; 63
    3a3e:	89 8f       	std	Y+25, r24	; 0x19
    3a40:	9a 8f       	std	Y+26, r25	; 0x1a
    3a42:	ab 8f       	std	Y+27, r26	; 0x1b
    3a44:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a46:	69 8d       	ldd	r22, Y+25	; 0x19
    3a48:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a4e:	20 e0       	ldi	r18, 0x00	; 0
    3a50:	30 e0       	ldi	r19, 0x00	; 0
    3a52:	4a ef       	ldi	r20, 0xFA	; 250
    3a54:	54 e4       	ldi	r21, 0x44	; 68
    3a56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a5a:	dc 01       	movw	r26, r24
    3a5c:	cb 01       	movw	r24, r22
    3a5e:	8d 8b       	std	Y+21, r24	; 0x15
    3a60:	9e 8b       	std	Y+22, r25	; 0x16
    3a62:	af 8b       	std	Y+23, r26	; 0x17
    3a64:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a66:	6d 89       	ldd	r22, Y+21	; 0x15
    3a68:	7e 89       	ldd	r23, Y+22	; 0x16
    3a6a:	8f 89       	ldd	r24, Y+23	; 0x17
    3a6c:	98 8d       	ldd	r25, Y+24	; 0x18
    3a6e:	20 e0       	ldi	r18, 0x00	; 0
    3a70:	30 e0       	ldi	r19, 0x00	; 0
    3a72:	40 e8       	ldi	r20, 0x80	; 128
    3a74:	5f e3       	ldi	r21, 0x3F	; 63
    3a76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a7a:	88 23       	and	r24, r24
    3a7c:	2c f4       	brge	.+10     	; 0x3a88 <HCLCD_Vid4Bits_Init+0x286>
		__ticks = 1;
    3a7e:	81 e0       	ldi	r24, 0x01	; 1
    3a80:	90 e0       	ldi	r25, 0x00	; 0
    3a82:	9c 8b       	std	Y+20, r25	; 0x14
    3a84:	8b 8b       	std	Y+19, r24	; 0x13
    3a86:	3f c0       	rjmp	.+126    	; 0x3b06 <HCLCD_Vid4Bits_Init+0x304>
	else if (__tmp > 65535)
    3a88:	6d 89       	ldd	r22, Y+21	; 0x15
    3a8a:	7e 89       	ldd	r23, Y+22	; 0x16
    3a8c:	8f 89       	ldd	r24, Y+23	; 0x17
    3a8e:	98 8d       	ldd	r25, Y+24	; 0x18
    3a90:	20 e0       	ldi	r18, 0x00	; 0
    3a92:	3f ef       	ldi	r19, 0xFF	; 255
    3a94:	4f e7       	ldi	r20, 0x7F	; 127
    3a96:	57 e4       	ldi	r21, 0x47	; 71
    3a98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a9c:	18 16       	cp	r1, r24
    3a9e:	4c f5       	brge	.+82     	; 0x3af2 <HCLCD_Vid4Bits_Init+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3aa0:	69 8d       	ldd	r22, Y+25	; 0x19
    3aa2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3aa4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3aa6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3aa8:	20 e0       	ldi	r18, 0x00	; 0
    3aaa:	30 e0       	ldi	r19, 0x00	; 0
    3aac:	40 e2       	ldi	r20, 0x20	; 32
    3aae:	51 e4       	ldi	r21, 0x41	; 65
    3ab0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ab4:	dc 01       	movw	r26, r24
    3ab6:	cb 01       	movw	r24, r22
    3ab8:	bc 01       	movw	r22, r24
    3aba:	cd 01       	movw	r24, r26
    3abc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ac0:	dc 01       	movw	r26, r24
    3ac2:	cb 01       	movw	r24, r22
    3ac4:	9c 8b       	std	Y+20, r25	; 0x14
    3ac6:	8b 8b       	std	Y+19, r24	; 0x13
    3ac8:	0f c0       	rjmp	.+30     	; 0x3ae8 <HCLCD_Vid4Bits_Init+0x2e6>
    3aca:	88 ec       	ldi	r24, 0xC8	; 200
    3acc:	90 e0       	ldi	r25, 0x00	; 0
    3ace:	9a 8b       	std	Y+18, r25	; 0x12
    3ad0:	89 8b       	std	Y+17, r24	; 0x11
    3ad2:	89 89       	ldd	r24, Y+17	; 0x11
    3ad4:	9a 89       	ldd	r25, Y+18	; 0x12
    3ad6:	01 97       	sbiw	r24, 0x01	; 1
    3ad8:	f1 f7       	brne	.-4      	; 0x3ad6 <HCLCD_Vid4Bits_Init+0x2d4>
    3ada:	9a 8b       	std	Y+18, r25	; 0x12
    3adc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ade:	8b 89       	ldd	r24, Y+19	; 0x13
    3ae0:	9c 89       	ldd	r25, Y+20	; 0x14
    3ae2:	01 97       	sbiw	r24, 0x01	; 1
    3ae4:	9c 8b       	std	Y+20, r25	; 0x14
    3ae6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ae8:	8b 89       	ldd	r24, Y+19	; 0x13
    3aea:	9c 89       	ldd	r25, Y+20	; 0x14
    3aec:	00 97       	sbiw	r24, 0x00	; 0
    3aee:	69 f7       	brne	.-38     	; 0x3aca <HCLCD_Vid4Bits_Init+0x2c8>
    3af0:	14 c0       	rjmp	.+40     	; 0x3b1a <HCLCD_Vid4Bits_Init+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3af2:	6d 89       	ldd	r22, Y+21	; 0x15
    3af4:	7e 89       	ldd	r23, Y+22	; 0x16
    3af6:	8f 89       	ldd	r24, Y+23	; 0x17
    3af8:	98 8d       	ldd	r25, Y+24	; 0x18
    3afa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3afe:	dc 01       	movw	r26, r24
    3b00:	cb 01       	movw	r24, r22
    3b02:	9c 8b       	std	Y+20, r25	; 0x14
    3b04:	8b 8b       	std	Y+19, r24	; 0x13
    3b06:	8b 89       	ldd	r24, Y+19	; 0x13
    3b08:	9c 89       	ldd	r25, Y+20	; 0x14
    3b0a:	98 8b       	std	Y+16, r25	; 0x10
    3b0c:	8f 87       	std	Y+15, r24	; 0x0f
    3b0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b10:	98 89       	ldd	r25, Y+16	; 0x10
    3b12:	01 97       	sbiw	r24, 0x01	; 1
    3b14:	f1 f7       	brne	.-4      	; 0x3b12 <HCLCD_Vid4Bits_Init+0x310>
    3b16:	98 8b       	std	Y+16, r25	; 0x10
    3b18:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*send Display Clear  command*/
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR>>4);
    3b1a:	80 e0       	ldi	r24, 0x00	; 0
    3b1c:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR);
    3b20:	81 e0       	ldi	r24, 0x01	; 1
    3b22:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <HCLCD_Vid4Bits_SendCommand>
    3b26:	80 e0       	ldi	r24, 0x00	; 0
    3b28:	90 e0       	ldi	r25, 0x00	; 0
    3b2a:	a0 e0       	ldi	r26, 0x00	; 0
    3b2c:	b0 e4       	ldi	r27, 0x40	; 64
    3b2e:	8b 87       	std	Y+11, r24	; 0x0b
    3b30:	9c 87       	std	Y+12, r25	; 0x0c
    3b32:	ad 87       	std	Y+13, r26	; 0x0d
    3b34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b36:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b38:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b3e:	20 e0       	ldi	r18, 0x00	; 0
    3b40:	30 e0       	ldi	r19, 0x00	; 0
    3b42:	4a ef       	ldi	r20, 0xFA	; 250
    3b44:	54 e4       	ldi	r21, 0x44	; 68
    3b46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b4a:	dc 01       	movw	r26, r24
    3b4c:	cb 01       	movw	r24, r22
    3b4e:	8f 83       	std	Y+7, r24	; 0x07
    3b50:	98 87       	std	Y+8, r25	; 0x08
    3b52:	a9 87       	std	Y+9, r26	; 0x09
    3b54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b56:	6f 81       	ldd	r22, Y+7	; 0x07
    3b58:	78 85       	ldd	r23, Y+8	; 0x08
    3b5a:	89 85       	ldd	r24, Y+9	; 0x09
    3b5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b5e:	20 e0       	ldi	r18, 0x00	; 0
    3b60:	30 e0       	ldi	r19, 0x00	; 0
    3b62:	40 e8       	ldi	r20, 0x80	; 128
    3b64:	5f e3       	ldi	r21, 0x3F	; 63
    3b66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b6a:	88 23       	and	r24, r24
    3b6c:	2c f4       	brge	.+10     	; 0x3b78 <HCLCD_Vid4Bits_Init+0x376>
		__ticks = 1;
    3b6e:	81 e0       	ldi	r24, 0x01	; 1
    3b70:	90 e0       	ldi	r25, 0x00	; 0
    3b72:	9e 83       	std	Y+6, r25	; 0x06
    3b74:	8d 83       	std	Y+5, r24	; 0x05
    3b76:	3f c0       	rjmp	.+126    	; 0x3bf6 <HCLCD_Vid4Bits_Init+0x3f4>
	else if (__tmp > 65535)
    3b78:	6f 81       	ldd	r22, Y+7	; 0x07
    3b7a:	78 85       	ldd	r23, Y+8	; 0x08
    3b7c:	89 85       	ldd	r24, Y+9	; 0x09
    3b7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b80:	20 e0       	ldi	r18, 0x00	; 0
    3b82:	3f ef       	ldi	r19, 0xFF	; 255
    3b84:	4f e7       	ldi	r20, 0x7F	; 127
    3b86:	57 e4       	ldi	r21, 0x47	; 71
    3b88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b8c:	18 16       	cp	r1, r24
    3b8e:	4c f5       	brge	.+82     	; 0x3be2 <HCLCD_Vid4Bits_Init+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b90:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b92:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b94:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b96:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b98:	20 e0       	ldi	r18, 0x00	; 0
    3b9a:	30 e0       	ldi	r19, 0x00	; 0
    3b9c:	40 e2       	ldi	r20, 0x20	; 32
    3b9e:	51 e4       	ldi	r21, 0x41	; 65
    3ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ba4:	dc 01       	movw	r26, r24
    3ba6:	cb 01       	movw	r24, r22
    3ba8:	bc 01       	movw	r22, r24
    3baa:	cd 01       	movw	r24, r26
    3bac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bb0:	dc 01       	movw	r26, r24
    3bb2:	cb 01       	movw	r24, r22
    3bb4:	9e 83       	std	Y+6, r25	; 0x06
    3bb6:	8d 83       	std	Y+5, r24	; 0x05
    3bb8:	0f c0       	rjmp	.+30     	; 0x3bd8 <HCLCD_Vid4Bits_Init+0x3d6>
    3bba:	88 ec       	ldi	r24, 0xC8	; 200
    3bbc:	90 e0       	ldi	r25, 0x00	; 0
    3bbe:	9c 83       	std	Y+4, r25	; 0x04
    3bc0:	8b 83       	std	Y+3, r24	; 0x03
    3bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    3bc4:	9c 81       	ldd	r25, Y+4	; 0x04
    3bc6:	01 97       	sbiw	r24, 0x01	; 1
    3bc8:	f1 f7       	brne	.-4      	; 0x3bc6 <HCLCD_Vid4Bits_Init+0x3c4>
    3bca:	9c 83       	std	Y+4, r25	; 0x04
    3bcc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bce:	8d 81       	ldd	r24, Y+5	; 0x05
    3bd0:	9e 81       	ldd	r25, Y+6	; 0x06
    3bd2:	01 97       	sbiw	r24, 0x01	; 1
    3bd4:	9e 83       	std	Y+6, r25	; 0x06
    3bd6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bd8:	8d 81       	ldd	r24, Y+5	; 0x05
    3bda:	9e 81       	ldd	r25, Y+6	; 0x06
    3bdc:	00 97       	sbiw	r24, 0x00	; 0
    3bde:	69 f7       	brne	.-38     	; 0x3bba <HCLCD_Vid4Bits_Init+0x3b8>
    3be0:	14 c0       	rjmp	.+40     	; 0x3c0a <HCLCD_Vid4Bits_Init+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3be2:	6f 81       	ldd	r22, Y+7	; 0x07
    3be4:	78 85       	ldd	r23, Y+8	; 0x08
    3be6:	89 85       	ldd	r24, Y+9	; 0x09
    3be8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bee:	dc 01       	movw	r26, r24
    3bf0:	cb 01       	movw	r24, r22
    3bf2:	9e 83       	std	Y+6, r25	; 0x06
    3bf4:	8d 83       	std	Y+5, r24	; 0x05
    3bf6:	8d 81       	ldd	r24, Y+5	; 0x05
    3bf8:	9e 81       	ldd	r25, Y+6	; 0x06
    3bfa:	9a 83       	std	Y+2, r25	; 0x02
    3bfc:	89 83       	std	Y+1, r24	; 0x01
    3bfe:	89 81       	ldd	r24, Y+1	; 0x01
    3c00:	9a 81       	ldd	r25, Y+2	; 0x02
    3c02:	01 97       	sbiw	r24, 0x01	; 1
    3c04:	f1 f7       	brne	.-4      	; 0x3c02 <HCLCD_Vid4Bits_Init+0x400>
    3c06:	9a 83       	std	Y+2, r25	; 0x02
    3c08:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*send Entry Mode  set command*/
	HCLCD_Vid4Bits_SendCommand(HCLCD_ENTRY_MODE_SET>>4);
    3c0a:	80 e0       	ldi	r24, 0x00	; 0
    3c0c:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_ENTRY_MODE_SET);
    3c10:	86 e0       	ldi	r24, 0x06	; 6
    3c12:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <HCLCD_Vid4Bits_SendCommand>
}
    3c16:	e9 96       	adiw	r28, 0x39	; 57
    3c18:	0f b6       	in	r0, 0x3f	; 63
    3c1a:	f8 94       	cli
    3c1c:	de bf       	out	0x3e, r29	; 62
    3c1e:	0f be       	out	0x3f, r0	; 63
    3c20:	cd bf       	out	0x3d, r28	; 61
    3c22:	cf 91       	pop	r28
    3c24:	df 91       	pop	r29
    3c26:	08 95       	ret

00003c28 <HCLCD_VidWriteChar_4Bits>:


/*Helper function*/
void HCLCD_VidWriteChar_4Bits(u8 Copy_u8Data)
{
    3c28:	df 93       	push	r29
    3c2a:	cf 93       	push	r28
    3c2c:	cd b7       	in	r28, 0x3d	; 61
    3c2e:	de b7       	in	r29, 0x3e	; 62
    3c30:	2f 97       	sbiw	r28, 0x0f	; 15
    3c32:	0f b6       	in	r0, 0x3f	; 63
    3c34:	f8 94       	cli
    3c36:	de bf       	out	0x3e, r29	; 62
    3c38:	0f be       	out	0x3f, r0	; 63
    3c3a:	cd bf       	out	0x3d, r28	; 61
    3c3c:	8f 87       	std	Y+15, r24	; 0x0f
	//u8 LOC_u8CopyData;
	/*select Data register--> Write One on Rs pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_HIGH);
    3c3e:	80 e0       	ldi	r24, 0x00	; 0
    3c40:	62 e0       	ldi	r22, 0x02	; 2
    3c42:	41 e0       	ldi	r20, 0x01	; 1
    3c44:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
	/*select Write mode--> Write zero on RW pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    3c48:	81 e0       	ldi	r24, 0x01	; 1
    3c4a:	62 e0       	ldi	r22, 0x02	; 2
    3c4c:	40 e0       	ldi	r20, 0x00	; 0
    3c4e:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
	/*Send Data*/
	//LOC_u8CopyData=(Copy_u8Data&0x0F)<<HCLCD_PINSTART;
	MDIO_Error_State_SetNippleValue(HCLCD_PINSTART,DATA_PORT,Copy_u8Data);
    3c52:	84 e0       	ldi	r24, 0x04	; 4
    3c54:	62 e0       	ldi	r22, 0x02	; 2
    3c56:	4f 85       	ldd	r20, Y+15	; 0x0f
    3c58:	0e 94 81 0c 	call	0x1902	; 0x1902 <MDIO_Error_State_SetNippleValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    3c5c:	82 e0       	ldi	r24, 0x02	; 2
    3c5e:	62 e0       	ldi	r22, 0x02	; 2
    3c60:	41 e0       	ldi	r20, 0x01	; 1
    3c62:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
    3c66:	80 e0       	ldi	r24, 0x00	; 0
    3c68:	90 e0       	ldi	r25, 0x00	; 0
    3c6a:	a0 e0       	ldi	r26, 0x00	; 0
    3c6c:	b0 e4       	ldi	r27, 0x40	; 64
    3c6e:	8b 87       	std	Y+11, r24	; 0x0b
    3c70:	9c 87       	std	Y+12, r25	; 0x0c
    3c72:	ad 87       	std	Y+13, r26	; 0x0d
    3c74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c76:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c78:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c7e:	20 e0       	ldi	r18, 0x00	; 0
    3c80:	30 e0       	ldi	r19, 0x00	; 0
    3c82:	4a ef       	ldi	r20, 0xFA	; 250
    3c84:	54 e4       	ldi	r21, 0x44	; 68
    3c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c8a:	dc 01       	movw	r26, r24
    3c8c:	cb 01       	movw	r24, r22
    3c8e:	8f 83       	std	Y+7, r24	; 0x07
    3c90:	98 87       	std	Y+8, r25	; 0x08
    3c92:	a9 87       	std	Y+9, r26	; 0x09
    3c94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c96:	6f 81       	ldd	r22, Y+7	; 0x07
    3c98:	78 85       	ldd	r23, Y+8	; 0x08
    3c9a:	89 85       	ldd	r24, Y+9	; 0x09
    3c9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c9e:	20 e0       	ldi	r18, 0x00	; 0
    3ca0:	30 e0       	ldi	r19, 0x00	; 0
    3ca2:	40 e8       	ldi	r20, 0x80	; 128
    3ca4:	5f e3       	ldi	r21, 0x3F	; 63
    3ca6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3caa:	88 23       	and	r24, r24
    3cac:	2c f4       	brge	.+10     	; 0x3cb8 <HCLCD_VidWriteChar_4Bits+0x90>
		__ticks = 1;
    3cae:	81 e0       	ldi	r24, 0x01	; 1
    3cb0:	90 e0       	ldi	r25, 0x00	; 0
    3cb2:	9e 83       	std	Y+6, r25	; 0x06
    3cb4:	8d 83       	std	Y+5, r24	; 0x05
    3cb6:	3f c0       	rjmp	.+126    	; 0x3d36 <HCLCD_VidWriteChar_4Bits+0x10e>
	else if (__tmp > 65535)
    3cb8:	6f 81       	ldd	r22, Y+7	; 0x07
    3cba:	78 85       	ldd	r23, Y+8	; 0x08
    3cbc:	89 85       	ldd	r24, Y+9	; 0x09
    3cbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cc0:	20 e0       	ldi	r18, 0x00	; 0
    3cc2:	3f ef       	ldi	r19, 0xFF	; 255
    3cc4:	4f e7       	ldi	r20, 0x7F	; 127
    3cc6:	57 e4       	ldi	r21, 0x47	; 71
    3cc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ccc:	18 16       	cp	r1, r24
    3cce:	4c f5       	brge	.+82     	; 0x3d22 <HCLCD_VidWriteChar_4Bits+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cd8:	20 e0       	ldi	r18, 0x00	; 0
    3cda:	30 e0       	ldi	r19, 0x00	; 0
    3cdc:	40 e2       	ldi	r20, 0x20	; 32
    3cde:	51 e4       	ldi	r21, 0x41	; 65
    3ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ce4:	dc 01       	movw	r26, r24
    3ce6:	cb 01       	movw	r24, r22
    3ce8:	bc 01       	movw	r22, r24
    3cea:	cd 01       	movw	r24, r26
    3cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cf0:	dc 01       	movw	r26, r24
    3cf2:	cb 01       	movw	r24, r22
    3cf4:	9e 83       	std	Y+6, r25	; 0x06
    3cf6:	8d 83       	std	Y+5, r24	; 0x05
    3cf8:	0f c0       	rjmp	.+30     	; 0x3d18 <HCLCD_VidWriteChar_4Bits+0xf0>
    3cfa:	88 ec       	ldi	r24, 0xC8	; 200
    3cfc:	90 e0       	ldi	r25, 0x00	; 0
    3cfe:	9c 83       	std	Y+4, r25	; 0x04
    3d00:	8b 83       	std	Y+3, r24	; 0x03
    3d02:	8b 81       	ldd	r24, Y+3	; 0x03
    3d04:	9c 81       	ldd	r25, Y+4	; 0x04
    3d06:	01 97       	sbiw	r24, 0x01	; 1
    3d08:	f1 f7       	brne	.-4      	; 0x3d06 <HCLCD_VidWriteChar_4Bits+0xde>
    3d0a:	9c 83       	std	Y+4, r25	; 0x04
    3d0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d0e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d10:	9e 81       	ldd	r25, Y+6	; 0x06
    3d12:	01 97       	sbiw	r24, 0x01	; 1
    3d14:	9e 83       	std	Y+6, r25	; 0x06
    3d16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d18:	8d 81       	ldd	r24, Y+5	; 0x05
    3d1a:	9e 81       	ldd	r25, Y+6	; 0x06
    3d1c:	00 97       	sbiw	r24, 0x00	; 0
    3d1e:	69 f7       	brne	.-38     	; 0x3cfa <HCLCD_VidWriteChar_4Bits+0xd2>
    3d20:	14 c0       	rjmp	.+40     	; 0x3d4a <HCLCD_VidWriteChar_4Bits+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d22:	6f 81       	ldd	r22, Y+7	; 0x07
    3d24:	78 85       	ldd	r23, Y+8	; 0x08
    3d26:	89 85       	ldd	r24, Y+9	; 0x09
    3d28:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d2e:	dc 01       	movw	r26, r24
    3d30:	cb 01       	movw	r24, r22
    3d32:	9e 83       	std	Y+6, r25	; 0x06
    3d34:	8d 83       	std	Y+5, r24	; 0x05
    3d36:	8d 81       	ldd	r24, Y+5	; 0x05
    3d38:	9e 81       	ldd	r25, Y+6	; 0x06
    3d3a:	9a 83       	std	Y+2, r25	; 0x02
    3d3c:	89 83       	std	Y+1, r24	; 0x01
    3d3e:	89 81       	ldd	r24, Y+1	; 0x01
    3d40:	9a 81       	ldd	r25, Y+2	; 0x02
    3d42:	01 97       	sbiw	r24, 0x01	; 1
    3d44:	f1 f7       	brne	.-4      	; 0x3d42 <HCLCD_VidWriteChar_4Bits+0x11a>
    3d46:	9a 83       	std	Y+2, r25	; 0x02
    3d48:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    3d4a:	82 e0       	ldi	r24, 0x02	; 2
    3d4c:	62 e0       	ldi	r22, 0x02	; 2
    3d4e:	40 e0       	ldi	r20, 0x00	; 0
    3d50:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
}
    3d54:	2f 96       	adiw	r28, 0x0f	; 15
    3d56:	0f b6       	in	r0, 0x3f	; 63
    3d58:	f8 94       	cli
    3d5a:	de bf       	out	0x3e, r29	; 62
    3d5c:	0f be       	out	0x3f, r0	; 63
    3d5e:	cd bf       	out	0x3d, r28	; 61
    3d60:	cf 91       	pop	r28
    3d62:	df 91       	pop	r29
    3d64:	08 95       	ret

00003d66 <HCLCD_Vid4Bits_DisplayCharacter>:
/*Display Character 4 Bits*/
void HCLCD_Vid4Bits_DisplayCharacter(u8 Copy_u8Data)
{
    3d66:	df 93       	push	r29
    3d68:	cf 93       	push	r28
    3d6a:	0f 92       	push	r0
    3d6c:	cd b7       	in	r28, 0x3d	; 61
    3d6e:	de b7       	in	r29, 0x3e	; 62
    3d70:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_VidWriteChar_4Bits(Copy_u8Data>>4);
    3d72:	89 81       	ldd	r24, Y+1	; 0x01
    3d74:	82 95       	swap	r24
    3d76:	8f 70       	andi	r24, 0x0F	; 15
    3d78:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <HCLCD_VidWriteChar_4Bits>
	HCLCD_VidWriteChar_4Bits(Copy_u8Data);
    3d7c:	89 81       	ldd	r24, Y+1	; 0x01
    3d7e:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <HCLCD_VidWriteChar_4Bits>
}
    3d82:	0f 90       	pop	r0
    3d84:	cf 91       	pop	r28
    3d86:	df 91       	pop	r29
    3d88:	08 95       	ret

00003d8a <HCLCD_Vid4Bits_DisplayString>:

/*Display String 4 Bits*/

void HCLCD_Vid4Bits_DisplayString(u8* PCopy_u8String)
{
    3d8a:	df 93       	push	r29
    3d8c:	cf 93       	push	r28
    3d8e:	00 d0       	rcall	.+0      	; 0x3d90 <HCLCD_Vid4Bits_DisplayString+0x6>
    3d90:	0f 92       	push	r0
    3d92:	cd b7       	in	r28, 0x3d	; 61
    3d94:	de b7       	in	r29, 0x3e	; 62
    3d96:	9b 83       	std	Y+3, r25	; 0x03
    3d98:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Count=0;
    3d9a:	19 82       	std	Y+1, r1	; 0x01
    3d9c:	0e c0       	rjmp	.+28     	; 0x3dba <HCLCD_Vid4Bits_DisplayString+0x30>
	while(PCopy_u8String[Loc_u8Count]!=NULL)
	{
		HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8String[Loc_u8Count]);
    3d9e:	89 81       	ldd	r24, Y+1	; 0x01
    3da0:	28 2f       	mov	r18, r24
    3da2:	30 e0       	ldi	r19, 0x00	; 0
    3da4:	8a 81       	ldd	r24, Y+2	; 0x02
    3da6:	9b 81       	ldd	r25, Y+3	; 0x03
    3da8:	fc 01       	movw	r30, r24
    3daa:	e2 0f       	add	r30, r18
    3dac:	f3 1f       	adc	r31, r19
    3dae:	80 81       	ld	r24, Z
    3db0:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <HCLCD_Vid4Bits_DisplayCharacter>
		Loc_u8Count++;
    3db4:	89 81       	ldd	r24, Y+1	; 0x01
    3db6:	8f 5f       	subi	r24, 0xFF	; 255
    3db8:	89 83       	std	Y+1, r24	; 0x01
/*Display String 4 Bits*/

void HCLCD_Vid4Bits_DisplayString(u8* PCopy_u8String)
{
	u8 Loc_u8Count=0;
	while(PCopy_u8String[Loc_u8Count]!=NULL)
    3dba:	89 81       	ldd	r24, Y+1	; 0x01
    3dbc:	28 2f       	mov	r18, r24
    3dbe:	30 e0       	ldi	r19, 0x00	; 0
    3dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    3dc2:	9b 81       	ldd	r25, Y+3	; 0x03
    3dc4:	fc 01       	movw	r30, r24
    3dc6:	e2 0f       	add	r30, r18
    3dc8:	f3 1f       	adc	r31, r19
    3dca:	80 81       	ld	r24, Z
    3dcc:	88 23       	and	r24, r24
    3dce:	39 f7       	brne	.-50     	; 0x3d9e <HCLCD_Vid4Bits_DisplayString+0x14>
	{
		HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8String[Loc_u8Count]);
		Loc_u8Count++;
	}
}
    3dd0:	0f 90       	pop	r0
    3dd2:	0f 90       	pop	r0
    3dd4:	0f 90       	pop	r0
    3dd6:	cf 91       	pop	r28
    3dd8:	df 91       	pop	r29
    3dda:	08 95       	ret

00003ddc <HCLCD_Vid4Bits_DisplayNumber>:

void HCLCD_Vid4Bits_DisplayNumber(u32 Copy_u8Number)
{
    3ddc:	0f 93       	push	r16
    3dde:	1f 93       	push	r17
    3de0:	df 93       	push	r29
    3de2:	cf 93       	push	r28
    3de4:	cd b7       	in	r28, 0x3d	; 61
    3de6:	de b7       	in	r29, 0x3e	; 62
    3de8:	60 97       	sbiw	r28, 0x10	; 16
    3dea:	0f b6       	in	r0, 0x3f	; 63
    3dec:	f8 94       	cli
    3dee:	de bf       	out	0x3e, r29	; 62
    3df0:	0f be       	out	0x3f, r0	; 63
    3df2:	cd bf       	out	0x3d, r28	; 61
    3df4:	6d 87       	std	Y+13, r22	; 0x0d
    3df6:	7e 87       	std	Y+14, r23	; 0x0e
    3df8:	8f 87       	std	Y+15, r24	; 0x0f
    3dfa:	98 8b       	std	Y+16, r25	; 0x10
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
    3dfc:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u8Number>0)
    3dfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e00:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e02:	af 85       	ldd	r26, Y+15	; 0x0f
    3e04:	b8 89       	ldd	r27, Y+16	; 0x10
    3e06:	00 97       	sbiw	r24, 0x00	; 0
    3e08:	a1 05       	cpc	r26, r1
    3e0a:	b1 05       	cpc	r27, r1
    3e0c:	09 f4       	brne	.+2      	; 0x3e10 <HCLCD_Vid4Bits_DisplayNumber+0x34>
    3e0e:	4f c0       	rjmp	.+158    	; 0x3eae <HCLCD_Vid4Bits_DisplayNumber+0xd2>
    3e10:	2d c0       	rjmp	.+90     	; 0x3e6c <HCLCD_Vid4Bits_DisplayNumber+0x90>
	{
		while(Copy_u8Number!=0)
		{
			ARR_Digits[LOC_Count] = (Copy_u8Number%10);
    3e12:	8a 81       	ldd	r24, Y+2	; 0x02
    3e14:	08 2f       	mov	r16, r24
    3e16:	10 e0       	ldi	r17, 0x00	; 0
    3e18:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e1c:	af 85       	ldd	r26, Y+15	; 0x0f
    3e1e:	b8 89       	ldd	r27, Y+16	; 0x10
    3e20:	2a e0       	ldi	r18, 0x0A	; 10
    3e22:	30 e0       	ldi	r19, 0x00	; 0
    3e24:	40 e0       	ldi	r20, 0x00	; 0
    3e26:	50 e0       	ldi	r21, 0x00	; 0
    3e28:	bc 01       	movw	r22, r24
    3e2a:	cd 01       	movw	r24, r26
    3e2c:	0e 94 52 29 	call	0x52a4	; 0x52a4 <__udivmodsi4>
    3e30:	dc 01       	movw	r26, r24
    3e32:	cb 01       	movw	r24, r22
    3e34:	28 2f       	mov	r18, r24
    3e36:	ce 01       	movw	r24, r28
    3e38:	03 96       	adiw	r24, 0x03	; 3
    3e3a:	fc 01       	movw	r30, r24
    3e3c:	e0 0f       	add	r30, r16
    3e3e:	f1 1f       	adc	r31, r17
    3e40:	20 83       	st	Z, r18
			Copy_u8Number/=10;
    3e42:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e44:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e46:	af 85       	ldd	r26, Y+15	; 0x0f
    3e48:	b8 89       	ldd	r27, Y+16	; 0x10
    3e4a:	2a e0       	ldi	r18, 0x0A	; 10
    3e4c:	30 e0       	ldi	r19, 0x00	; 0
    3e4e:	40 e0       	ldi	r20, 0x00	; 0
    3e50:	50 e0       	ldi	r21, 0x00	; 0
    3e52:	bc 01       	movw	r22, r24
    3e54:	cd 01       	movw	r24, r26
    3e56:	0e 94 52 29 	call	0x52a4	; 0x52a4 <__udivmodsi4>
    3e5a:	da 01       	movw	r26, r20
    3e5c:	c9 01       	movw	r24, r18
    3e5e:	8d 87       	std	Y+13, r24	; 0x0d
    3e60:	9e 87       	std	Y+14, r25	; 0x0e
    3e62:	af 87       	std	Y+15, r26	; 0x0f
    3e64:	b8 8b       	std	Y+16, r27	; 0x10
			LOC_Count++;
    3e66:	8a 81       	ldd	r24, Y+2	; 0x02
    3e68:	8f 5f       	subi	r24, 0xFF	; 255
    3e6a:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
	if(Copy_u8Number>0)
	{
		while(Copy_u8Number!=0)
    3e6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e70:	af 85       	ldd	r26, Y+15	; 0x0f
    3e72:	b8 89       	ldd	r27, Y+16	; 0x10
    3e74:	00 97       	sbiw	r24, 0x00	; 0
    3e76:	a1 05       	cpc	r26, r1
    3e78:	b1 05       	cpc	r27, r1
    3e7a:	59 f6       	brne	.-106    	; 0x3e12 <HCLCD_Vid4Bits_DisplayNumber+0x36>
		{
			ARR_Digits[LOC_Count] = (Copy_u8Number%10);
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    3e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e7e:	81 50       	subi	r24, 0x01	; 1
    3e80:	89 83       	std	Y+1, r24	; 0x01
    3e82:	11 c0       	rjmp	.+34     	; 0x3ea6 <HCLCD_Vid4Bits_DisplayNumber+0xca>
		{
			HCLCD_Vid4Bits_DisplayCharacter(ARR_Digits[i]+'0');
    3e84:	89 81       	ldd	r24, Y+1	; 0x01
    3e86:	28 2f       	mov	r18, r24
    3e88:	33 27       	eor	r19, r19
    3e8a:	27 fd       	sbrc	r18, 7
    3e8c:	30 95       	com	r19
    3e8e:	ce 01       	movw	r24, r28
    3e90:	03 96       	adiw	r24, 0x03	; 3
    3e92:	fc 01       	movw	r30, r24
    3e94:	e2 0f       	add	r30, r18
    3e96:	f3 1f       	adc	r31, r19
    3e98:	80 81       	ld	r24, Z
    3e9a:	80 5d       	subi	r24, 0xD0	; 208
    3e9c:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <HCLCD_Vid4Bits_DisplayCharacter>
		{
			ARR_Digits[LOC_Count] = (Copy_u8Number%10);
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    3ea0:	89 81       	ldd	r24, Y+1	; 0x01
    3ea2:	81 50       	subi	r24, 0x01	; 1
    3ea4:	89 83       	std	Y+1, r24	; 0x01
    3ea6:	89 81       	ldd	r24, Y+1	; 0x01
    3ea8:	88 23       	and	r24, r24
    3eaa:	64 f7       	brge	.-40     	; 0x3e84 <HCLCD_Vid4Bits_DisplayNumber+0xa8>
    3eac:	03 c0       	rjmp	.+6      	; 0x3eb4 <HCLCD_Vid4Bits_DisplayNumber+0xd8>
			HCLCD_Vid4Bits_DisplayCharacter(ARR_Digits[i]+'0');
		}
	}
	else
	{
		HCLCD_Vid4Bits_DisplayCharacter('0');
    3eae:	80 e3       	ldi	r24, 0x30	; 48
    3eb0:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <HCLCD_Vid4Bits_DisplayCharacter>
	}

}
    3eb4:	60 96       	adiw	r28, 0x10	; 16
    3eb6:	0f b6       	in	r0, 0x3f	; 63
    3eb8:	f8 94       	cli
    3eba:	de bf       	out	0x3e, r29	; 62
    3ebc:	0f be       	out	0x3f, r0	; 63
    3ebe:	cd bf       	out	0x3d, r28	; 61
    3ec0:	cf 91       	pop	r28
    3ec2:	df 91       	pop	r29
    3ec4:	1f 91       	pop	r17
    3ec6:	0f 91       	pop	r16
    3ec8:	08 95       	ret

00003eca <HCLCD_Vid4Bits_SetPosition>:


void HCLCD_Vid4Bits_SetPosition(u8 Copy_u8LineNumber,u8 Copy_u8PositionNumber)
{
    3eca:	df 93       	push	r29
    3ecc:	cf 93       	push	r28
    3ece:	00 d0       	rcall	.+0      	; 0x3ed0 <HCLCD_Vid4Bits_SetPosition+0x6>
    3ed0:	cd b7       	in	r28, 0x3d	; 61
    3ed2:	de b7       	in	r29, 0x3e	; 62
    3ed4:	89 83       	std	Y+1, r24	; 0x01
    3ed6:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8LineNumber==HCLCD_LINE1)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    3ed8:	89 81       	ldd	r24, Y+1	; 0x01
    3eda:	81 30       	cpi	r24, 0x01	; 1
    3edc:	b9 f4       	brne	.+46     	; 0x3f0c <HCLCD_Vid4Bits_SetPosition+0x42>
    3ede:	8a 81       	ldd	r24, Y+2	; 0x02
    3ee0:	80 31       	cpi	r24, 0x10	; 16
    3ee2:	a0 f4       	brcc	.+40     	; 0x3f0c <HCLCD_Vid4Bits_SetPosition+0x42>
	{
		HCLCD_Vid4Bits_SendCommand((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber)>>4);
    3ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ee6:	88 2f       	mov	r24, r24
    3ee8:	90 e0       	ldi	r25, 0x00	; 0
    3eea:	80 58       	subi	r24, 0x80	; 128
    3eec:	9f 4f       	sbci	r25, 0xFF	; 255
    3eee:	95 95       	asr	r25
    3ef0:	87 95       	ror	r24
    3ef2:	95 95       	asr	r25
    3ef4:	87 95       	ror	r24
    3ef6:	95 95       	asr	r25
    3ef8:	87 95       	ror	r24
    3efa:	95 95       	asr	r25
    3efc:	87 95       	ror	r24
    3efe:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber));
    3f02:	8a 81       	ldd	r24, Y+2	; 0x02
    3f04:	80 58       	subi	r24, 0x80	; 128
    3f06:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <HCLCD_Vid4Bits_SendCommand>
    3f0a:	19 c0       	rjmp	.+50     	; 0x3f3e <HCLCD_Vid4Bits_SetPosition+0x74>
	}
	else if((Copy_u8LineNumber==HCLCD_LINE2)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    3f0c:	89 81       	ldd	r24, Y+1	; 0x01
    3f0e:	82 30       	cpi	r24, 0x02	; 2
    3f10:	b1 f4       	brne	.+44     	; 0x3f3e <HCLCD_Vid4Bits_SetPosition+0x74>
    3f12:	8a 81       	ldd	r24, Y+2	; 0x02
    3f14:	80 31       	cpi	r24, 0x10	; 16
    3f16:	98 f4       	brcc	.+38     	; 0x3f3e <HCLCD_Vid4Bits_SetPosition+0x74>
	{
		HCLCD_Vid4Bits_SendCommand((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber)>>4);
    3f18:	8a 81       	ldd	r24, Y+2	; 0x02
    3f1a:	88 2f       	mov	r24, r24
    3f1c:	90 e0       	ldi	r25, 0x00	; 0
    3f1e:	80 54       	subi	r24, 0x40	; 64
    3f20:	9f 4f       	sbci	r25, 0xFF	; 255
    3f22:	95 95       	asr	r25
    3f24:	87 95       	ror	r24
    3f26:	95 95       	asr	r25
    3f28:	87 95       	ror	r24
    3f2a:	95 95       	asr	r25
    3f2c:	87 95       	ror	r24
    3f2e:	95 95       	asr	r25
    3f30:	87 95       	ror	r24
    3f32:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber));
    3f36:	8a 81       	ldd	r24, Y+2	; 0x02
    3f38:	80 54       	subi	r24, 0x40	; 64
    3f3a:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <HCLCD_Vid4Bits_SendCommand>
	}
	else
	{
	}
}
    3f3e:	0f 90       	pop	r0
    3f40:	0f 90       	pop	r0
    3f42:	cf 91       	pop	r28
    3f44:	df 91       	pop	r29
    3f46:	08 95       	ret

00003f48 <HCLCD_Vid4Bits_CustomAlphChar>:
 }
*/

/*LCD Create SpecialCharacter 4 Bits*/
void HCLCD_Vid4Bits_CustomAlphChar(u8 Copy_u8PatternNumber, u8* PCopy_u8Pattern)
{
    3f48:	df 93       	push	r29
    3f4a:	cf 93       	push	r28
    3f4c:	00 d0       	rcall	.+0      	; 0x3f4e <HCLCD_Vid4Bits_CustomAlphChar+0x6>
    3f4e:	00 d0       	rcall	.+0      	; 0x3f50 <HCLCD_Vid4Bits_CustomAlphChar+0x8>
    3f50:	cd b7       	in	r28, 0x3d	; 61
    3f52:	de b7       	in	r29, 0x3e	; 62
    3f54:	8a 83       	std	Y+2, r24	; 0x02
    3f56:	7c 83       	std	Y+4, r23	; 0x04
    3f58:	6b 83       	std	Y+3, r22	; 0x03
	       /*you have only 8 patterns to be customized */
	      u8 i;
	      if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
    3f5a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f5c:	88 30       	cpi	r24, 0x08	; 8
    3f5e:	98 f5       	brcc	.+102    	; 0x3fc6 <HCLCD_Vid4Bits_CustomAlphChar+0x7e>
	      {
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE))>>4);
    3f60:	8a 81       	ldd	r24, Y+2	; 0x02
    3f62:	88 2f       	mov	r24, r24
    3f64:	90 e0       	ldi	r25, 0x00	; 0
    3f66:	08 96       	adiw	r24, 0x08	; 8
    3f68:	88 0f       	add	r24, r24
    3f6a:	99 1f       	adc	r25, r25
    3f6c:	88 0f       	add	r24, r24
    3f6e:	99 1f       	adc	r25, r25
    3f70:	88 0f       	add	r24, r24
    3f72:	99 1f       	adc	r25, r25
    3f74:	95 95       	asr	r25
    3f76:	87 95       	ror	r24
    3f78:	95 95       	asr	r25
    3f7a:	87 95       	ror	r24
    3f7c:	95 95       	asr	r25
    3f7e:	87 95       	ror	r24
    3f80:	95 95       	asr	r25
    3f82:	87 95       	ror	r24
    3f84:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <HCLCD_Vid4Bits_SendCommand>
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE)));
    3f88:	8a 81       	ldd	r24, Y+2	; 0x02
    3f8a:	88 2f       	mov	r24, r24
    3f8c:	90 e0       	ldi	r25, 0x00	; 0
    3f8e:	08 96       	adiw	r24, 0x08	; 8
    3f90:	88 0f       	add	r24, r24
    3f92:	99 1f       	adc	r25, r25
    3f94:	88 0f       	add	r24, r24
    3f96:	99 1f       	adc	r25, r25
    3f98:	88 0f       	add	r24, r24
    3f9a:	99 1f       	adc	r25, r25
    3f9c:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <HCLCD_Vid4Bits_SendCommand>

	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    3fa0:	19 82       	std	Y+1, r1	; 0x01
    3fa2:	0e c0       	rjmp	.+28     	; 0x3fc0 <HCLCD_Vid4Bits_CustomAlphChar+0x78>
	          {
	        	  HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8Pattern[i]);
    3fa4:	89 81       	ldd	r24, Y+1	; 0x01
    3fa6:	28 2f       	mov	r18, r24
    3fa8:	30 e0       	ldi	r19, 0x00	; 0
    3faa:	8b 81       	ldd	r24, Y+3	; 0x03
    3fac:	9c 81       	ldd	r25, Y+4	; 0x04
    3fae:	fc 01       	movw	r30, r24
    3fb0:	e2 0f       	add	r30, r18
    3fb2:	f3 1f       	adc	r31, r19
    3fb4:	80 81       	ld	r24, Z
    3fb6:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <HCLCD_Vid4Bits_DisplayCharacter>
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE))>>4);
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE)));

	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    3fba:	89 81       	ldd	r24, Y+1	; 0x01
    3fbc:	8f 5f       	subi	r24, 0xFF	; 255
    3fbe:	89 83       	std	Y+1, r24	; 0x01
    3fc0:	89 81       	ldd	r24, Y+1	; 0x01
    3fc2:	88 30       	cpi	r24, 0x08	; 8
    3fc4:	78 f3       	brcs	.-34     	; 0x3fa4 <HCLCD_Vid4Bits_CustomAlphChar+0x5c>
	          {
	        	  HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8Pattern[i]);
	          }
	      }
}
    3fc6:	0f 90       	pop	r0
    3fc8:	0f 90       	pop	r0
    3fca:	0f 90       	pop	r0
    3fcc:	0f 90       	pop	r0
    3fce:	cf 91       	pop	r28
    3fd0:	df 91       	pop	r29
    3fd2:	08 95       	ret

00003fd4 <HCLCD_Vid4Bits_ClearScreen>:
/**/
void HCLCD_Vid4Bits_ClearScreen(void)
{
    3fd4:	df 93       	push	r29
    3fd6:	cf 93       	push	r28
    3fd8:	cd b7       	in	r28, 0x3d	; 61
    3fda:	de b7       	in	r29, 0x3e	; 62
    3fdc:	2e 97       	sbiw	r28, 0x0e	; 14
    3fde:	0f b6       	in	r0, 0x3f	; 63
    3fe0:	f8 94       	cli
    3fe2:	de bf       	out	0x3e, r29	; 62
    3fe4:	0f be       	out	0x3f, r0	; 63
    3fe6:	cd bf       	out	0x3d, r28	; 61
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR>>4);
    3fe8:	80 e0       	ldi	r24, 0x00	; 0
    3fea:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR);
    3fee:	81 e0       	ldi	r24, 0x01	; 1
    3ff0:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <HCLCD_Vid4Bits_SendCommand>
    3ff4:	80 e0       	ldi	r24, 0x00	; 0
    3ff6:	90 e0       	ldi	r25, 0x00	; 0
    3ff8:	a0 e0       	ldi	r26, 0x00	; 0
    3ffa:	b0 e4       	ldi	r27, 0x40	; 64
    3ffc:	8b 87       	std	Y+11, r24	; 0x0b
    3ffe:	9c 87       	std	Y+12, r25	; 0x0c
    4000:	ad 87       	std	Y+13, r26	; 0x0d
    4002:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4004:	6b 85       	ldd	r22, Y+11	; 0x0b
    4006:	7c 85       	ldd	r23, Y+12	; 0x0c
    4008:	8d 85       	ldd	r24, Y+13	; 0x0d
    400a:	9e 85       	ldd	r25, Y+14	; 0x0e
    400c:	20 e0       	ldi	r18, 0x00	; 0
    400e:	30 e0       	ldi	r19, 0x00	; 0
    4010:	4a ef       	ldi	r20, 0xFA	; 250
    4012:	54 e4       	ldi	r21, 0x44	; 68
    4014:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4018:	dc 01       	movw	r26, r24
    401a:	cb 01       	movw	r24, r22
    401c:	8f 83       	std	Y+7, r24	; 0x07
    401e:	98 87       	std	Y+8, r25	; 0x08
    4020:	a9 87       	std	Y+9, r26	; 0x09
    4022:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4024:	6f 81       	ldd	r22, Y+7	; 0x07
    4026:	78 85       	ldd	r23, Y+8	; 0x08
    4028:	89 85       	ldd	r24, Y+9	; 0x09
    402a:	9a 85       	ldd	r25, Y+10	; 0x0a
    402c:	20 e0       	ldi	r18, 0x00	; 0
    402e:	30 e0       	ldi	r19, 0x00	; 0
    4030:	40 e8       	ldi	r20, 0x80	; 128
    4032:	5f e3       	ldi	r21, 0x3F	; 63
    4034:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4038:	88 23       	and	r24, r24
    403a:	2c f4       	brge	.+10     	; 0x4046 <HCLCD_Vid4Bits_ClearScreen+0x72>
		__ticks = 1;
    403c:	81 e0       	ldi	r24, 0x01	; 1
    403e:	90 e0       	ldi	r25, 0x00	; 0
    4040:	9e 83       	std	Y+6, r25	; 0x06
    4042:	8d 83       	std	Y+5, r24	; 0x05
    4044:	3f c0       	rjmp	.+126    	; 0x40c4 <HCLCD_Vid4Bits_ClearScreen+0xf0>
	else if (__tmp > 65535)
    4046:	6f 81       	ldd	r22, Y+7	; 0x07
    4048:	78 85       	ldd	r23, Y+8	; 0x08
    404a:	89 85       	ldd	r24, Y+9	; 0x09
    404c:	9a 85       	ldd	r25, Y+10	; 0x0a
    404e:	20 e0       	ldi	r18, 0x00	; 0
    4050:	3f ef       	ldi	r19, 0xFF	; 255
    4052:	4f e7       	ldi	r20, 0x7F	; 127
    4054:	57 e4       	ldi	r21, 0x47	; 71
    4056:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    405a:	18 16       	cp	r1, r24
    405c:	4c f5       	brge	.+82     	; 0x40b0 <HCLCD_Vid4Bits_ClearScreen+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    405e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4060:	7c 85       	ldd	r23, Y+12	; 0x0c
    4062:	8d 85       	ldd	r24, Y+13	; 0x0d
    4064:	9e 85       	ldd	r25, Y+14	; 0x0e
    4066:	20 e0       	ldi	r18, 0x00	; 0
    4068:	30 e0       	ldi	r19, 0x00	; 0
    406a:	40 e2       	ldi	r20, 0x20	; 32
    406c:	51 e4       	ldi	r21, 0x41	; 65
    406e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4072:	dc 01       	movw	r26, r24
    4074:	cb 01       	movw	r24, r22
    4076:	bc 01       	movw	r22, r24
    4078:	cd 01       	movw	r24, r26
    407a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    407e:	dc 01       	movw	r26, r24
    4080:	cb 01       	movw	r24, r22
    4082:	9e 83       	std	Y+6, r25	; 0x06
    4084:	8d 83       	std	Y+5, r24	; 0x05
    4086:	0f c0       	rjmp	.+30     	; 0x40a6 <HCLCD_Vid4Bits_ClearScreen+0xd2>
    4088:	88 ec       	ldi	r24, 0xC8	; 200
    408a:	90 e0       	ldi	r25, 0x00	; 0
    408c:	9c 83       	std	Y+4, r25	; 0x04
    408e:	8b 83       	std	Y+3, r24	; 0x03
    4090:	8b 81       	ldd	r24, Y+3	; 0x03
    4092:	9c 81       	ldd	r25, Y+4	; 0x04
    4094:	01 97       	sbiw	r24, 0x01	; 1
    4096:	f1 f7       	brne	.-4      	; 0x4094 <HCLCD_Vid4Bits_ClearScreen+0xc0>
    4098:	9c 83       	std	Y+4, r25	; 0x04
    409a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    409c:	8d 81       	ldd	r24, Y+5	; 0x05
    409e:	9e 81       	ldd	r25, Y+6	; 0x06
    40a0:	01 97       	sbiw	r24, 0x01	; 1
    40a2:	9e 83       	std	Y+6, r25	; 0x06
    40a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40a6:	8d 81       	ldd	r24, Y+5	; 0x05
    40a8:	9e 81       	ldd	r25, Y+6	; 0x06
    40aa:	00 97       	sbiw	r24, 0x00	; 0
    40ac:	69 f7       	brne	.-38     	; 0x4088 <HCLCD_Vid4Bits_ClearScreen+0xb4>
    40ae:	14 c0       	rjmp	.+40     	; 0x40d8 <HCLCD_Vid4Bits_ClearScreen+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40b0:	6f 81       	ldd	r22, Y+7	; 0x07
    40b2:	78 85       	ldd	r23, Y+8	; 0x08
    40b4:	89 85       	ldd	r24, Y+9	; 0x09
    40b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    40b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40bc:	dc 01       	movw	r26, r24
    40be:	cb 01       	movw	r24, r22
    40c0:	9e 83       	std	Y+6, r25	; 0x06
    40c2:	8d 83       	std	Y+5, r24	; 0x05
    40c4:	8d 81       	ldd	r24, Y+5	; 0x05
    40c6:	9e 81       	ldd	r25, Y+6	; 0x06
    40c8:	9a 83       	std	Y+2, r25	; 0x02
    40ca:	89 83       	std	Y+1, r24	; 0x01
    40cc:	89 81       	ldd	r24, Y+1	; 0x01
    40ce:	9a 81       	ldd	r25, Y+2	; 0x02
    40d0:	01 97       	sbiw	r24, 0x01	; 1
    40d2:	f1 f7       	brne	.-4      	; 0x40d0 <HCLCD_Vid4Bits_ClearScreen+0xfc>
    40d4:	9a 83       	std	Y+2, r25	; 0x02
    40d6:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(2);
}
    40d8:	2e 96       	adiw	r28, 0x0e	; 14
    40da:	0f b6       	in	r0, 0x3f	; 63
    40dc:	f8 94       	cli
    40de:	de bf       	out	0x3e, r29	; 62
    40e0:	0f be       	out	0x3f, r0	; 63
    40e2:	cd bf       	out	0x3d, r28	; 61
    40e4:	cf 91       	pop	r28
    40e6:	df 91       	pop	r29
    40e8:	08 95       	ret

000040ea <HCLCD_Vid4Bits_DisplayShiftLeft>:
/**/
 void HCLCD_Vid4Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
    40ea:	df 93       	push	r29
    40ec:	cf 93       	push	r28
    40ee:	cd b7       	in	r28, 0x3d	; 61
    40f0:	de b7       	in	r29, 0x3e	; 62
    40f2:	60 97       	sbiw	r28, 0x10	; 16
    40f4:	0f b6       	in	r0, 0x3f	; 63
    40f6:	f8 94       	cli
    40f8:	de bf       	out	0x3e, r29	; 62
    40fa:	0f be       	out	0x3f, r0	; 63
    40fc:	cd bf       	out	0x3d, r28	; 61
    40fe:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    4100:	1f 86       	std	Y+15, r1	; 0x0f
    4102:	7b c0       	rjmp	.+246    	; 0x41fa <HCLCD_Vid4Bits_DisplayShiftLeft+0x110>
 {
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT>>4);
    4104:	81 e0       	ldi	r24, 0x01	; 1
    4106:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <HCLCD_Vid4Bits_SendCommand>
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT);
    410a:	88 e1       	ldi	r24, 0x18	; 24
    410c:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <HCLCD_Vid4Bits_SendCommand>
    4110:	80 e0       	ldi	r24, 0x00	; 0
    4112:	90 e0       	ldi	r25, 0x00	; 0
    4114:	a6 e9       	ldi	r26, 0x96	; 150
    4116:	b3 e4       	ldi	r27, 0x43	; 67
    4118:	8b 87       	std	Y+11, r24	; 0x0b
    411a:	9c 87       	std	Y+12, r25	; 0x0c
    411c:	ad 87       	std	Y+13, r26	; 0x0d
    411e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4120:	6b 85       	ldd	r22, Y+11	; 0x0b
    4122:	7c 85       	ldd	r23, Y+12	; 0x0c
    4124:	8d 85       	ldd	r24, Y+13	; 0x0d
    4126:	9e 85       	ldd	r25, Y+14	; 0x0e
    4128:	20 e0       	ldi	r18, 0x00	; 0
    412a:	30 e0       	ldi	r19, 0x00	; 0
    412c:	4a ef       	ldi	r20, 0xFA	; 250
    412e:	54 e4       	ldi	r21, 0x44	; 68
    4130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4134:	dc 01       	movw	r26, r24
    4136:	cb 01       	movw	r24, r22
    4138:	8f 83       	std	Y+7, r24	; 0x07
    413a:	98 87       	std	Y+8, r25	; 0x08
    413c:	a9 87       	std	Y+9, r26	; 0x09
    413e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4140:	6f 81       	ldd	r22, Y+7	; 0x07
    4142:	78 85       	ldd	r23, Y+8	; 0x08
    4144:	89 85       	ldd	r24, Y+9	; 0x09
    4146:	9a 85       	ldd	r25, Y+10	; 0x0a
    4148:	20 e0       	ldi	r18, 0x00	; 0
    414a:	30 e0       	ldi	r19, 0x00	; 0
    414c:	40 e8       	ldi	r20, 0x80	; 128
    414e:	5f e3       	ldi	r21, 0x3F	; 63
    4150:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4154:	88 23       	and	r24, r24
    4156:	2c f4       	brge	.+10     	; 0x4162 <HCLCD_Vid4Bits_DisplayShiftLeft+0x78>
		__ticks = 1;
    4158:	81 e0       	ldi	r24, 0x01	; 1
    415a:	90 e0       	ldi	r25, 0x00	; 0
    415c:	9e 83       	std	Y+6, r25	; 0x06
    415e:	8d 83       	std	Y+5, r24	; 0x05
    4160:	3f c0       	rjmp	.+126    	; 0x41e0 <HCLCD_Vid4Bits_DisplayShiftLeft+0xf6>
	else if (__tmp > 65535)
    4162:	6f 81       	ldd	r22, Y+7	; 0x07
    4164:	78 85       	ldd	r23, Y+8	; 0x08
    4166:	89 85       	ldd	r24, Y+9	; 0x09
    4168:	9a 85       	ldd	r25, Y+10	; 0x0a
    416a:	20 e0       	ldi	r18, 0x00	; 0
    416c:	3f ef       	ldi	r19, 0xFF	; 255
    416e:	4f e7       	ldi	r20, 0x7F	; 127
    4170:	57 e4       	ldi	r21, 0x47	; 71
    4172:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4176:	18 16       	cp	r1, r24
    4178:	4c f5       	brge	.+82     	; 0x41cc <HCLCD_Vid4Bits_DisplayShiftLeft+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    417a:	6b 85       	ldd	r22, Y+11	; 0x0b
    417c:	7c 85       	ldd	r23, Y+12	; 0x0c
    417e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4180:	9e 85       	ldd	r25, Y+14	; 0x0e
    4182:	20 e0       	ldi	r18, 0x00	; 0
    4184:	30 e0       	ldi	r19, 0x00	; 0
    4186:	40 e2       	ldi	r20, 0x20	; 32
    4188:	51 e4       	ldi	r21, 0x41	; 65
    418a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    418e:	dc 01       	movw	r26, r24
    4190:	cb 01       	movw	r24, r22
    4192:	bc 01       	movw	r22, r24
    4194:	cd 01       	movw	r24, r26
    4196:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    419a:	dc 01       	movw	r26, r24
    419c:	cb 01       	movw	r24, r22
    419e:	9e 83       	std	Y+6, r25	; 0x06
    41a0:	8d 83       	std	Y+5, r24	; 0x05
    41a2:	0f c0       	rjmp	.+30     	; 0x41c2 <HCLCD_Vid4Bits_DisplayShiftLeft+0xd8>
    41a4:	88 ec       	ldi	r24, 0xC8	; 200
    41a6:	90 e0       	ldi	r25, 0x00	; 0
    41a8:	9c 83       	std	Y+4, r25	; 0x04
    41aa:	8b 83       	std	Y+3, r24	; 0x03
    41ac:	8b 81       	ldd	r24, Y+3	; 0x03
    41ae:	9c 81       	ldd	r25, Y+4	; 0x04
    41b0:	01 97       	sbiw	r24, 0x01	; 1
    41b2:	f1 f7       	brne	.-4      	; 0x41b0 <HCLCD_Vid4Bits_DisplayShiftLeft+0xc6>
    41b4:	9c 83       	std	Y+4, r25	; 0x04
    41b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41b8:	8d 81       	ldd	r24, Y+5	; 0x05
    41ba:	9e 81       	ldd	r25, Y+6	; 0x06
    41bc:	01 97       	sbiw	r24, 0x01	; 1
    41be:	9e 83       	std	Y+6, r25	; 0x06
    41c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41c2:	8d 81       	ldd	r24, Y+5	; 0x05
    41c4:	9e 81       	ldd	r25, Y+6	; 0x06
    41c6:	00 97       	sbiw	r24, 0x00	; 0
    41c8:	69 f7       	brne	.-38     	; 0x41a4 <HCLCD_Vid4Bits_DisplayShiftLeft+0xba>
    41ca:	14 c0       	rjmp	.+40     	; 0x41f4 <HCLCD_Vid4Bits_DisplayShiftLeft+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41cc:	6f 81       	ldd	r22, Y+7	; 0x07
    41ce:	78 85       	ldd	r23, Y+8	; 0x08
    41d0:	89 85       	ldd	r24, Y+9	; 0x09
    41d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    41d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41d8:	dc 01       	movw	r26, r24
    41da:	cb 01       	movw	r24, r22
    41dc:	9e 83       	std	Y+6, r25	; 0x06
    41de:	8d 83       	std	Y+5, r24	; 0x05
    41e0:	8d 81       	ldd	r24, Y+5	; 0x05
    41e2:	9e 81       	ldd	r25, Y+6	; 0x06
    41e4:	9a 83       	std	Y+2, r25	; 0x02
    41e6:	89 83       	std	Y+1, r24	; 0x01
    41e8:	89 81       	ldd	r24, Y+1	; 0x01
    41ea:	9a 81       	ldd	r25, Y+2	; 0x02
    41ec:	01 97       	sbiw	r24, 0x01	; 1
    41ee:	f1 f7       	brne	.-4      	; 0x41ec <HCLCD_Vid4Bits_DisplayShiftLeft+0x102>
    41f0:	9a 83       	std	Y+2, r25	; 0x02
    41f2:	89 83       	std	Y+1, r24	; 0x01
}
/**/
 void HCLCD_Vid4Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    41f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    41f6:	8f 5f       	subi	r24, 0xFF	; 255
    41f8:	8f 87       	std	Y+15, r24	; 0x0f
    41fa:	9f 85       	ldd	r25, Y+15	; 0x0f
    41fc:	88 89       	ldd	r24, Y+16	; 0x10
    41fe:	98 17       	cp	r25, r24
    4200:	08 f4       	brcc	.+2      	; 0x4204 <HCLCD_Vid4Bits_DisplayShiftLeft+0x11a>
    4202:	80 cf       	rjmp	.-256    	; 0x4104 <HCLCD_Vid4Bits_DisplayShiftLeft+0x1a>
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT>>4);
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT);

  _delay_ms(300);
 }
}
    4204:	60 96       	adiw	r28, 0x10	; 16
    4206:	0f b6       	in	r0, 0x3f	; 63
    4208:	f8 94       	cli
    420a:	de bf       	out	0x3e, r29	; 62
    420c:	0f be       	out	0x3f, r0	; 63
    420e:	cd bf       	out	0x3d, r28	; 61
    4210:	cf 91       	pop	r28
    4212:	df 91       	pop	r29
    4214:	08 95       	ret

00004216 <HCLCD_Vid4Bits_DisplayShiftRight>:
/**/
 void HCLCD_Vid4Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
    4216:	df 93       	push	r29
    4218:	cf 93       	push	r28
    421a:	cd b7       	in	r28, 0x3d	; 61
    421c:	de b7       	in	r29, 0x3e	; 62
    421e:	60 97       	sbiw	r28, 0x10	; 16
    4220:	0f b6       	in	r0, 0x3f	; 63
    4222:	f8 94       	cli
    4224:	de bf       	out	0x3e, r29	; 62
    4226:	0f be       	out	0x3f, r0	; 63
    4228:	cd bf       	out	0x3d, r28	; 61
    422a:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    422c:	1f 86       	std	Y+15, r1	; 0x0f
    422e:	7b c0       	rjmp	.+246    	; 0x4326 <HCLCD_Vid4Bits_DisplayShiftRight+0x110>
	{
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT>>4);
    4230:	81 e0       	ldi	r24, 0x01	; 1
    4232:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT);
    4236:	8c e1       	ldi	r24, 0x1C	; 28
    4238:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <HCLCD_Vid4Bits_SendCommand>
    423c:	80 e0       	ldi	r24, 0x00	; 0
    423e:	90 e0       	ldi	r25, 0x00	; 0
    4240:	a6 e9       	ldi	r26, 0x96	; 150
    4242:	b3 e4       	ldi	r27, 0x43	; 67
    4244:	8b 87       	std	Y+11, r24	; 0x0b
    4246:	9c 87       	std	Y+12, r25	; 0x0c
    4248:	ad 87       	std	Y+13, r26	; 0x0d
    424a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    424c:	6b 85       	ldd	r22, Y+11	; 0x0b
    424e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4250:	8d 85       	ldd	r24, Y+13	; 0x0d
    4252:	9e 85       	ldd	r25, Y+14	; 0x0e
    4254:	20 e0       	ldi	r18, 0x00	; 0
    4256:	30 e0       	ldi	r19, 0x00	; 0
    4258:	4a ef       	ldi	r20, 0xFA	; 250
    425a:	54 e4       	ldi	r21, 0x44	; 68
    425c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4260:	dc 01       	movw	r26, r24
    4262:	cb 01       	movw	r24, r22
    4264:	8f 83       	std	Y+7, r24	; 0x07
    4266:	98 87       	std	Y+8, r25	; 0x08
    4268:	a9 87       	std	Y+9, r26	; 0x09
    426a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    426c:	6f 81       	ldd	r22, Y+7	; 0x07
    426e:	78 85       	ldd	r23, Y+8	; 0x08
    4270:	89 85       	ldd	r24, Y+9	; 0x09
    4272:	9a 85       	ldd	r25, Y+10	; 0x0a
    4274:	20 e0       	ldi	r18, 0x00	; 0
    4276:	30 e0       	ldi	r19, 0x00	; 0
    4278:	40 e8       	ldi	r20, 0x80	; 128
    427a:	5f e3       	ldi	r21, 0x3F	; 63
    427c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4280:	88 23       	and	r24, r24
    4282:	2c f4       	brge	.+10     	; 0x428e <HCLCD_Vid4Bits_DisplayShiftRight+0x78>
		__ticks = 1;
    4284:	81 e0       	ldi	r24, 0x01	; 1
    4286:	90 e0       	ldi	r25, 0x00	; 0
    4288:	9e 83       	std	Y+6, r25	; 0x06
    428a:	8d 83       	std	Y+5, r24	; 0x05
    428c:	3f c0       	rjmp	.+126    	; 0x430c <HCLCD_Vid4Bits_DisplayShiftRight+0xf6>
	else if (__tmp > 65535)
    428e:	6f 81       	ldd	r22, Y+7	; 0x07
    4290:	78 85       	ldd	r23, Y+8	; 0x08
    4292:	89 85       	ldd	r24, Y+9	; 0x09
    4294:	9a 85       	ldd	r25, Y+10	; 0x0a
    4296:	20 e0       	ldi	r18, 0x00	; 0
    4298:	3f ef       	ldi	r19, 0xFF	; 255
    429a:	4f e7       	ldi	r20, 0x7F	; 127
    429c:	57 e4       	ldi	r21, 0x47	; 71
    429e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    42a2:	18 16       	cp	r1, r24
    42a4:	4c f5       	brge	.+82     	; 0x42f8 <HCLCD_Vid4Bits_DisplayShiftRight+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    42a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    42aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    42ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    42ae:	20 e0       	ldi	r18, 0x00	; 0
    42b0:	30 e0       	ldi	r19, 0x00	; 0
    42b2:	40 e2       	ldi	r20, 0x20	; 32
    42b4:	51 e4       	ldi	r21, 0x41	; 65
    42b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42ba:	dc 01       	movw	r26, r24
    42bc:	cb 01       	movw	r24, r22
    42be:	bc 01       	movw	r22, r24
    42c0:	cd 01       	movw	r24, r26
    42c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42c6:	dc 01       	movw	r26, r24
    42c8:	cb 01       	movw	r24, r22
    42ca:	9e 83       	std	Y+6, r25	; 0x06
    42cc:	8d 83       	std	Y+5, r24	; 0x05
    42ce:	0f c0       	rjmp	.+30     	; 0x42ee <HCLCD_Vid4Bits_DisplayShiftRight+0xd8>
    42d0:	88 ec       	ldi	r24, 0xC8	; 200
    42d2:	90 e0       	ldi	r25, 0x00	; 0
    42d4:	9c 83       	std	Y+4, r25	; 0x04
    42d6:	8b 83       	std	Y+3, r24	; 0x03
    42d8:	8b 81       	ldd	r24, Y+3	; 0x03
    42da:	9c 81       	ldd	r25, Y+4	; 0x04
    42dc:	01 97       	sbiw	r24, 0x01	; 1
    42de:	f1 f7       	brne	.-4      	; 0x42dc <HCLCD_Vid4Bits_DisplayShiftRight+0xc6>
    42e0:	9c 83       	std	Y+4, r25	; 0x04
    42e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42e4:	8d 81       	ldd	r24, Y+5	; 0x05
    42e6:	9e 81       	ldd	r25, Y+6	; 0x06
    42e8:	01 97       	sbiw	r24, 0x01	; 1
    42ea:	9e 83       	std	Y+6, r25	; 0x06
    42ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42ee:	8d 81       	ldd	r24, Y+5	; 0x05
    42f0:	9e 81       	ldd	r25, Y+6	; 0x06
    42f2:	00 97       	sbiw	r24, 0x00	; 0
    42f4:	69 f7       	brne	.-38     	; 0x42d0 <HCLCD_Vid4Bits_DisplayShiftRight+0xba>
    42f6:	14 c0       	rjmp	.+40     	; 0x4320 <HCLCD_Vid4Bits_DisplayShiftRight+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42f8:	6f 81       	ldd	r22, Y+7	; 0x07
    42fa:	78 85       	ldd	r23, Y+8	; 0x08
    42fc:	89 85       	ldd	r24, Y+9	; 0x09
    42fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4300:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4304:	dc 01       	movw	r26, r24
    4306:	cb 01       	movw	r24, r22
    4308:	9e 83       	std	Y+6, r25	; 0x06
    430a:	8d 83       	std	Y+5, r24	; 0x05
    430c:	8d 81       	ldd	r24, Y+5	; 0x05
    430e:	9e 81       	ldd	r25, Y+6	; 0x06
    4310:	9a 83       	std	Y+2, r25	; 0x02
    4312:	89 83       	std	Y+1, r24	; 0x01
    4314:	89 81       	ldd	r24, Y+1	; 0x01
    4316:	9a 81       	ldd	r25, Y+2	; 0x02
    4318:	01 97       	sbiw	r24, 0x01	; 1
    431a:	f1 f7       	brne	.-4      	; 0x4318 <HCLCD_Vid4Bits_DisplayShiftRight+0x102>
    431c:	9a 83       	std	Y+2, r25	; 0x02
    431e:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid4Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    4320:	8f 85       	ldd	r24, Y+15	; 0x0f
    4322:	8f 5f       	subi	r24, 0xFF	; 255
    4324:	8f 87       	std	Y+15, r24	; 0x0f
    4326:	9f 85       	ldd	r25, Y+15	; 0x0f
    4328:	88 89       	ldd	r24, Y+16	; 0x10
    432a:	98 17       	cp	r25, r24
    432c:	08 f4       	brcc	.+2      	; 0x4330 <HCLCD_Vid4Bits_DisplayShiftRight+0x11a>
    432e:	80 cf       	rjmp	.-256    	; 0x4230 <HCLCD_Vid4Bits_DisplayShiftRight+0x1a>
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT>>4);
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT);

      _delay_ms(300);
	}
}
    4330:	60 96       	adiw	r28, 0x10	; 16
    4332:	0f b6       	in	r0, 0x3f	; 63
    4334:	f8 94       	cli
    4336:	de bf       	out	0x3e, r29	; 62
    4338:	0f be       	out	0x3f, r0	; 63
    433a:	cd bf       	out	0x3d, r28	; 61
    433c:	cf 91       	pop	r28
    433e:	df 91       	pop	r29
    4340:	08 95       	ret

00004342 <HCLCD_Vid4Bits_CursorShiftLeft>:
 /**/
 void HCLCD_Vid4Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
    4342:	df 93       	push	r29
    4344:	cf 93       	push	r28
    4346:	cd b7       	in	r28, 0x3d	; 61
    4348:	de b7       	in	r29, 0x3e	; 62
    434a:	60 97       	sbiw	r28, 0x10	; 16
    434c:	0f b6       	in	r0, 0x3f	; 63
    434e:	f8 94       	cli
    4350:	de bf       	out	0x3e, r29	; 62
    4352:	0f be       	out	0x3f, r0	; 63
    4354:	cd bf       	out	0x3d, r28	; 61
    4356:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    4358:	1f 86       	std	Y+15, r1	; 0x0f
    435a:	7b c0       	rjmp	.+246    	; 0x4452 <HCLCD_Vid4Bits_CursorShiftLeft+0x110>
 {
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT>>4);
    435c:	81 e0       	ldi	r24, 0x01	; 1
    435e:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <HCLCD_Vid4Bits_SendCommand>
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT);
    4362:	80 e1       	ldi	r24, 0x10	; 16
    4364:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <HCLCD_Vid4Bits_SendCommand>
    4368:	80 e0       	ldi	r24, 0x00	; 0
    436a:	90 e0       	ldi	r25, 0x00	; 0
    436c:	a6 e9       	ldi	r26, 0x96	; 150
    436e:	b3 e4       	ldi	r27, 0x43	; 67
    4370:	8b 87       	std	Y+11, r24	; 0x0b
    4372:	9c 87       	std	Y+12, r25	; 0x0c
    4374:	ad 87       	std	Y+13, r26	; 0x0d
    4376:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4378:	6b 85       	ldd	r22, Y+11	; 0x0b
    437a:	7c 85       	ldd	r23, Y+12	; 0x0c
    437c:	8d 85       	ldd	r24, Y+13	; 0x0d
    437e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4380:	20 e0       	ldi	r18, 0x00	; 0
    4382:	30 e0       	ldi	r19, 0x00	; 0
    4384:	4a ef       	ldi	r20, 0xFA	; 250
    4386:	54 e4       	ldi	r21, 0x44	; 68
    4388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    438c:	dc 01       	movw	r26, r24
    438e:	cb 01       	movw	r24, r22
    4390:	8f 83       	std	Y+7, r24	; 0x07
    4392:	98 87       	std	Y+8, r25	; 0x08
    4394:	a9 87       	std	Y+9, r26	; 0x09
    4396:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4398:	6f 81       	ldd	r22, Y+7	; 0x07
    439a:	78 85       	ldd	r23, Y+8	; 0x08
    439c:	89 85       	ldd	r24, Y+9	; 0x09
    439e:	9a 85       	ldd	r25, Y+10	; 0x0a
    43a0:	20 e0       	ldi	r18, 0x00	; 0
    43a2:	30 e0       	ldi	r19, 0x00	; 0
    43a4:	40 e8       	ldi	r20, 0x80	; 128
    43a6:	5f e3       	ldi	r21, 0x3F	; 63
    43a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    43ac:	88 23       	and	r24, r24
    43ae:	2c f4       	brge	.+10     	; 0x43ba <HCLCD_Vid4Bits_CursorShiftLeft+0x78>
		__ticks = 1;
    43b0:	81 e0       	ldi	r24, 0x01	; 1
    43b2:	90 e0       	ldi	r25, 0x00	; 0
    43b4:	9e 83       	std	Y+6, r25	; 0x06
    43b6:	8d 83       	std	Y+5, r24	; 0x05
    43b8:	3f c0       	rjmp	.+126    	; 0x4438 <HCLCD_Vid4Bits_CursorShiftLeft+0xf6>
	else if (__tmp > 65535)
    43ba:	6f 81       	ldd	r22, Y+7	; 0x07
    43bc:	78 85       	ldd	r23, Y+8	; 0x08
    43be:	89 85       	ldd	r24, Y+9	; 0x09
    43c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    43c2:	20 e0       	ldi	r18, 0x00	; 0
    43c4:	3f ef       	ldi	r19, 0xFF	; 255
    43c6:	4f e7       	ldi	r20, 0x7F	; 127
    43c8:	57 e4       	ldi	r21, 0x47	; 71
    43ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    43ce:	18 16       	cp	r1, r24
    43d0:	4c f5       	brge	.+82     	; 0x4424 <HCLCD_Vid4Bits_CursorShiftLeft+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    43d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    43d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    43d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    43da:	20 e0       	ldi	r18, 0x00	; 0
    43dc:	30 e0       	ldi	r19, 0x00	; 0
    43de:	40 e2       	ldi	r20, 0x20	; 32
    43e0:	51 e4       	ldi	r21, 0x41	; 65
    43e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43e6:	dc 01       	movw	r26, r24
    43e8:	cb 01       	movw	r24, r22
    43ea:	bc 01       	movw	r22, r24
    43ec:	cd 01       	movw	r24, r26
    43ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43f2:	dc 01       	movw	r26, r24
    43f4:	cb 01       	movw	r24, r22
    43f6:	9e 83       	std	Y+6, r25	; 0x06
    43f8:	8d 83       	std	Y+5, r24	; 0x05
    43fa:	0f c0       	rjmp	.+30     	; 0x441a <HCLCD_Vid4Bits_CursorShiftLeft+0xd8>
    43fc:	88 ec       	ldi	r24, 0xC8	; 200
    43fe:	90 e0       	ldi	r25, 0x00	; 0
    4400:	9c 83       	std	Y+4, r25	; 0x04
    4402:	8b 83       	std	Y+3, r24	; 0x03
    4404:	8b 81       	ldd	r24, Y+3	; 0x03
    4406:	9c 81       	ldd	r25, Y+4	; 0x04
    4408:	01 97       	sbiw	r24, 0x01	; 1
    440a:	f1 f7       	brne	.-4      	; 0x4408 <HCLCD_Vid4Bits_CursorShiftLeft+0xc6>
    440c:	9c 83       	std	Y+4, r25	; 0x04
    440e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4410:	8d 81       	ldd	r24, Y+5	; 0x05
    4412:	9e 81       	ldd	r25, Y+6	; 0x06
    4414:	01 97       	sbiw	r24, 0x01	; 1
    4416:	9e 83       	std	Y+6, r25	; 0x06
    4418:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    441a:	8d 81       	ldd	r24, Y+5	; 0x05
    441c:	9e 81       	ldd	r25, Y+6	; 0x06
    441e:	00 97       	sbiw	r24, 0x00	; 0
    4420:	69 f7       	brne	.-38     	; 0x43fc <HCLCD_Vid4Bits_CursorShiftLeft+0xba>
    4422:	14 c0       	rjmp	.+40     	; 0x444c <HCLCD_Vid4Bits_CursorShiftLeft+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4424:	6f 81       	ldd	r22, Y+7	; 0x07
    4426:	78 85       	ldd	r23, Y+8	; 0x08
    4428:	89 85       	ldd	r24, Y+9	; 0x09
    442a:	9a 85       	ldd	r25, Y+10	; 0x0a
    442c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4430:	dc 01       	movw	r26, r24
    4432:	cb 01       	movw	r24, r22
    4434:	9e 83       	std	Y+6, r25	; 0x06
    4436:	8d 83       	std	Y+5, r24	; 0x05
    4438:	8d 81       	ldd	r24, Y+5	; 0x05
    443a:	9e 81       	ldd	r25, Y+6	; 0x06
    443c:	9a 83       	std	Y+2, r25	; 0x02
    443e:	89 83       	std	Y+1, r24	; 0x01
    4440:	89 81       	ldd	r24, Y+1	; 0x01
    4442:	9a 81       	ldd	r25, Y+2	; 0x02
    4444:	01 97       	sbiw	r24, 0x01	; 1
    4446:	f1 f7       	brne	.-4      	; 0x4444 <HCLCD_Vid4Bits_CursorShiftLeft+0x102>
    4448:	9a 83       	std	Y+2, r25	; 0x02
    444a:	89 83       	std	Y+1, r24	; 0x01
}
 /**/
 void HCLCD_Vid4Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    444c:	8f 85       	ldd	r24, Y+15	; 0x0f
    444e:	8f 5f       	subi	r24, 0xFF	; 255
    4450:	8f 87       	std	Y+15, r24	; 0x0f
    4452:	9f 85       	ldd	r25, Y+15	; 0x0f
    4454:	88 89       	ldd	r24, Y+16	; 0x10
    4456:	98 17       	cp	r25, r24
    4458:	08 f4       	brcc	.+2      	; 0x445c <HCLCD_Vid4Bits_CursorShiftLeft+0x11a>
    445a:	80 cf       	rjmp	.-256    	; 0x435c <HCLCD_Vid4Bits_CursorShiftLeft+0x1a>
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT>>4);
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT);

  _delay_ms(300);
 }
}
    445c:	60 96       	adiw	r28, 0x10	; 16
    445e:	0f b6       	in	r0, 0x3f	; 63
    4460:	f8 94       	cli
    4462:	de bf       	out	0x3e, r29	; 62
    4464:	0f be       	out	0x3f, r0	; 63
    4466:	cd bf       	out	0x3d, r28	; 61
    4468:	cf 91       	pop	r28
    446a:	df 91       	pop	r29
    446c:	08 95       	ret

0000446e <HCLCD_Vid4Bits_CursorShiftRight>:
/**/
 void HCLCD_Vid4Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
    446e:	df 93       	push	r29
    4470:	cf 93       	push	r28
    4472:	cd b7       	in	r28, 0x3d	; 61
    4474:	de b7       	in	r29, 0x3e	; 62
    4476:	60 97       	sbiw	r28, 0x10	; 16
    4478:	0f b6       	in	r0, 0x3f	; 63
    447a:	f8 94       	cli
    447c:	de bf       	out	0x3e, r29	; 62
    447e:	0f be       	out	0x3f, r0	; 63
    4480:	cd bf       	out	0x3d, r28	; 61
    4482:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    4484:	1f 86       	std	Y+15, r1	; 0x0f
    4486:	7b c0       	rjmp	.+246    	; 0x457e <HCLCD_Vid4Bits_CursorShiftRight+0x110>
	{
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT>>4);
    4488:	81 e0       	ldi	r24, 0x01	; 1
    448a:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT);
    448e:	84 e1       	ldi	r24, 0x14	; 20
    4490:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <HCLCD_Vid4Bits_SendCommand>
    4494:	80 e0       	ldi	r24, 0x00	; 0
    4496:	90 e0       	ldi	r25, 0x00	; 0
    4498:	a6 e9       	ldi	r26, 0x96	; 150
    449a:	b3 e4       	ldi	r27, 0x43	; 67
    449c:	8b 87       	std	Y+11, r24	; 0x0b
    449e:	9c 87       	std	Y+12, r25	; 0x0c
    44a0:	ad 87       	std	Y+13, r26	; 0x0d
    44a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    44a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    44a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    44aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    44ac:	20 e0       	ldi	r18, 0x00	; 0
    44ae:	30 e0       	ldi	r19, 0x00	; 0
    44b0:	4a ef       	ldi	r20, 0xFA	; 250
    44b2:	54 e4       	ldi	r21, 0x44	; 68
    44b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44b8:	dc 01       	movw	r26, r24
    44ba:	cb 01       	movw	r24, r22
    44bc:	8f 83       	std	Y+7, r24	; 0x07
    44be:	98 87       	std	Y+8, r25	; 0x08
    44c0:	a9 87       	std	Y+9, r26	; 0x09
    44c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    44c4:	6f 81       	ldd	r22, Y+7	; 0x07
    44c6:	78 85       	ldd	r23, Y+8	; 0x08
    44c8:	89 85       	ldd	r24, Y+9	; 0x09
    44ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    44cc:	20 e0       	ldi	r18, 0x00	; 0
    44ce:	30 e0       	ldi	r19, 0x00	; 0
    44d0:	40 e8       	ldi	r20, 0x80	; 128
    44d2:	5f e3       	ldi	r21, 0x3F	; 63
    44d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    44d8:	88 23       	and	r24, r24
    44da:	2c f4       	brge	.+10     	; 0x44e6 <HCLCD_Vid4Bits_CursorShiftRight+0x78>
		__ticks = 1;
    44dc:	81 e0       	ldi	r24, 0x01	; 1
    44de:	90 e0       	ldi	r25, 0x00	; 0
    44e0:	9e 83       	std	Y+6, r25	; 0x06
    44e2:	8d 83       	std	Y+5, r24	; 0x05
    44e4:	3f c0       	rjmp	.+126    	; 0x4564 <HCLCD_Vid4Bits_CursorShiftRight+0xf6>
	else if (__tmp > 65535)
    44e6:	6f 81       	ldd	r22, Y+7	; 0x07
    44e8:	78 85       	ldd	r23, Y+8	; 0x08
    44ea:	89 85       	ldd	r24, Y+9	; 0x09
    44ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    44ee:	20 e0       	ldi	r18, 0x00	; 0
    44f0:	3f ef       	ldi	r19, 0xFF	; 255
    44f2:	4f e7       	ldi	r20, 0x7F	; 127
    44f4:	57 e4       	ldi	r21, 0x47	; 71
    44f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    44fa:	18 16       	cp	r1, r24
    44fc:	4c f5       	brge	.+82     	; 0x4550 <HCLCD_Vid4Bits_CursorShiftRight+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    4500:	7c 85       	ldd	r23, Y+12	; 0x0c
    4502:	8d 85       	ldd	r24, Y+13	; 0x0d
    4504:	9e 85       	ldd	r25, Y+14	; 0x0e
    4506:	20 e0       	ldi	r18, 0x00	; 0
    4508:	30 e0       	ldi	r19, 0x00	; 0
    450a:	40 e2       	ldi	r20, 0x20	; 32
    450c:	51 e4       	ldi	r21, 0x41	; 65
    450e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4512:	dc 01       	movw	r26, r24
    4514:	cb 01       	movw	r24, r22
    4516:	bc 01       	movw	r22, r24
    4518:	cd 01       	movw	r24, r26
    451a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    451e:	dc 01       	movw	r26, r24
    4520:	cb 01       	movw	r24, r22
    4522:	9e 83       	std	Y+6, r25	; 0x06
    4524:	8d 83       	std	Y+5, r24	; 0x05
    4526:	0f c0       	rjmp	.+30     	; 0x4546 <HCLCD_Vid4Bits_CursorShiftRight+0xd8>
    4528:	88 ec       	ldi	r24, 0xC8	; 200
    452a:	90 e0       	ldi	r25, 0x00	; 0
    452c:	9c 83       	std	Y+4, r25	; 0x04
    452e:	8b 83       	std	Y+3, r24	; 0x03
    4530:	8b 81       	ldd	r24, Y+3	; 0x03
    4532:	9c 81       	ldd	r25, Y+4	; 0x04
    4534:	01 97       	sbiw	r24, 0x01	; 1
    4536:	f1 f7       	brne	.-4      	; 0x4534 <HCLCD_Vid4Bits_CursorShiftRight+0xc6>
    4538:	9c 83       	std	Y+4, r25	; 0x04
    453a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    453c:	8d 81       	ldd	r24, Y+5	; 0x05
    453e:	9e 81       	ldd	r25, Y+6	; 0x06
    4540:	01 97       	sbiw	r24, 0x01	; 1
    4542:	9e 83       	std	Y+6, r25	; 0x06
    4544:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4546:	8d 81       	ldd	r24, Y+5	; 0x05
    4548:	9e 81       	ldd	r25, Y+6	; 0x06
    454a:	00 97       	sbiw	r24, 0x00	; 0
    454c:	69 f7       	brne	.-38     	; 0x4528 <HCLCD_Vid4Bits_CursorShiftRight+0xba>
    454e:	14 c0       	rjmp	.+40     	; 0x4578 <HCLCD_Vid4Bits_CursorShiftRight+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4550:	6f 81       	ldd	r22, Y+7	; 0x07
    4552:	78 85       	ldd	r23, Y+8	; 0x08
    4554:	89 85       	ldd	r24, Y+9	; 0x09
    4556:	9a 85       	ldd	r25, Y+10	; 0x0a
    4558:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    455c:	dc 01       	movw	r26, r24
    455e:	cb 01       	movw	r24, r22
    4560:	9e 83       	std	Y+6, r25	; 0x06
    4562:	8d 83       	std	Y+5, r24	; 0x05
    4564:	8d 81       	ldd	r24, Y+5	; 0x05
    4566:	9e 81       	ldd	r25, Y+6	; 0x06
    4568:	9a 83       	std	Y+2, r25	; 0x02
    456a:	89 83       	std	Y+1, r24	; 0x01
    456c:	89 81       	ldd	r24, Y+1	; 0x01
    456e:	9a 81       	ldd	r25, Y+2	; 0x02
    4570:	01 97       	sbiw	r24, 0x01	; 1
    4572:	f1 f7       	brne	.-4      	; 0x4570 <HCLCD_Vid4Bits_CursorShiftRight+0x102>
    4574:	9a 83       	std	Y+2, r25	; 0x02
    4576:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid4Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    4578:	8f 85       	ldd	r24, Y+15	; 0x0f
    457a:	8f 5f       	subi	r24, 0xFF	; 255
    457c:	8f 87       	std	Y+15, r24	; 0x0f
    457e:	9f 85       	ldd	r25, Y+15	; 0x0f
    4580:	88 89       	ldd	r24, Y+16	; 0x10
    4582:	98 17       	cp	r25, r24
    4584:	08 f4       	brcc	.+2      	; 0x4588 <HCLCD_Vid4Bits_CursorShiftRight+0x11a>
    4586:	80 cf       	rjmp	.-256    	; 0x4488 <HCLCD_Vid4Bits_CursorShiftRight+0x1a>
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT>>4);
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT);

      _delay_ms(300);
	}
}
    4588:	60 96       	adiw	r28, 0x10	; 16
    458a:	0f b6       	in	r0, 0x3f	; 63
    458c:	f8 94       	cli
    458e:	de bf       	out	0x3e, r29	; 62
    4590:	0f be       	out	0x3f, r0	; 63
    4592:	cd bf       	out	0x3d, r28	; 61
    4594:	cf 91       	pop	r28
    4596:	df 91       	pop	r29
    4598:	08 95       	ret

0000459a <EEPROM_voidSendDataByte>:
#include "EEPROM_interface.h"
#include "EEPROM_config.h"
#include "EEPROM_private.h"

void EEPROM_voidSendDataByte(u16 Copy_u16LocationAddress, u8 Copy_u8DataByte)
{
    459a:	df 93       	push	r29
    459c:	cf 93       	push	r28
    459e:	cd b7       	in	r28, 0x3d	; 61
    45a0:	de b7       	in	r29, 0x3e	; 62
    45a2:	62 97       	sbiw	r28, 0x12	; 18
    45a4:	0f b6       	in	r0, 0x3f	; 63
    45a6:	f8 94       	cli
    45a8:	de bf       	out	0x3e, r29	; 62
    45aa:	0f be       	out	0x3f, r0	; 63
    45ac:	cd bf       	out	0x3d, r28	; 61
    45ae:	99 8b       	std	Y+17, r25	; 0x11
    45b0:	88 8b       	std	Y+16, r24	; 0x10
    45b2:	6a 8b       	std	Y+18, r22	; 0x12
	u8 Local_u8AddressPacket;

	Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | (A2_CONNECTION <<2) | (u8)(Copy_u16LocationAddress >>8);
    45b4:	88 89       	ldd	r24, Y+16	; 0x10
    45b6:	99 89       	ldd	r25, Y+17	; 0x11
    45b8:	89 2f       	mov	r24, r25
    45ba:	99 27       	eor	r25, r25
    45bc:	80 65       	ori	r24, 0x50	; 80
    45be:	8f 87       	std	Y+15, r24	; 0x0f
	/*if 24C02 :
	 * 	Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | A2_CONNECTION <<2 | A1_CONNECTION <<1 | A0_CONNECTION;
	 */

	/*Send start condition*/
	TWI_SendStartCondition();
    45c0:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <TWI_SendStartCondition>

	/*Send the address packet*/
	TWI_SendSlaveAddressWithWrite(Local_u8AddressPacket);
    45c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    45c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <TWI_SendSlaveAddressWithWrite>

	/*Send the rest 8bits of the location address*/
	TWI_MasterWriteDataByte((u8)Copy_u16LocationAddress);
    45ca:	88 89       	ldd	r24, Y+16	; 0x10
    45cc:	0e 94 b6 06 	call	0xd6c	; 0xd6c <TWI_MasterWriteDataByte>

	/*Send the data byte to the memory location*/
	TWI_MasterWriteDataByte(Copy_u8DataByte);
    45d0:	8a 89       	ldd	r24, Y+18	; 0x12
    45d2:	0e 94 b6 06 	call	0xd6c	; 0xd6c <TWI_MasterWriteDataByte>

	/*Send stop condition*/
	TWI_SendStopCondition();
    45d6:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_SendStopCondition>
    45da:	80 e0       	ldi	r24, 0x00	; 0
    45dc:	90 e0       	ldi	r25, 0x00	; 0
    45de:	a0 e2       	ldi	r26, 0x20	; 32
    45e0:	b1 e4       	ldi	r27, 0x41	; 65
    45e2:	8b 87       	std	Y+11, r24	; 0x0b
    45e4:	9c 87       	std	Y+12, r25	; 0x0c
    45e6:	ad 87       	std	Y+13, r26	; 0x0d
    45e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    45ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    45ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    45f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    45f2:	20 e0       	ldi	r18, 0x00	; 0
    45f4:	30 e0       	ldi	r19, 0x00	; 0
    45f6:	4a ef       	ldi	r20, 0xFA	; 250
    45f8:	54 e4       	ldi	r21, 0x44	; 68
    45fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45fe:	dc 01       	movw	r26, r24
    4600:	cb 01       	movw	r24, r22
    4602:	8f 83       	std	Y+7, r24	; 0x07
    4604:	98 87       	std	Y+8, r25	; 0x08
    4606:	a9 87       	std	Y+9, r26	; 0x09
    4608:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    460a:	6f 81       	ldd	r22, Y+7	; 0x07
    460c:	78 85       	ldd	r23, Y+8	; 0x08
    460e:	89 85       	ldd	r24, Y+9	; 0x09
    4610:	9a 85       	ldd	r25, Y+10	; 0x0a
    4612:	20 e0       	ldi	r18, 0x00	; 0
    4614:	30 e0       	ldi	r19, 0x00	; 0
    4616:	40 e8       	ldi	r20, 0x80	; 128
    4618:	5f e3       	ldi	r21, 0x3F	; 63
    461a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    461e:	88 23       	and	r24, r24
    4620:	2c f4       	brge	.+10     	; 0x462c <EEPROM_voidSendDataByte+0x92>
		__ticks = 1;
    4622:	81 e0       	ldi	r24, 0x01	; 1
    4624:	90 e0       	ldi	r25, 0x00	; 0
    4626:	9e 83       	std	Y+6, r25	; 0x06
    4628:	8d 83       	std	Y+5, r24	; 0x05
    462a:	3f c0       	rjmp	.+126    	; 0x46aa <EEPROM_voidSendDataByte+0x110>
	else if (__tmp > 65535)
    462c:	6f 81       	ldd	r22, Y+7	; 0x07
    462e:	78 85       	ldd	r23, Y+8	; 0x08
    4630:	89 85       	ldd	r24, Y+9	; 0x09
    4632:	9a 85       	ldd	r25, Y+10	; 0x0a
    4634:	20 e0       	ldi	r18, 0x00	; 0
    4636:	3f ef       	ldi	r19, 0xFF	; 255
    4638:	4f e7       	ldi	r20, 0x7F	; 127
    463a:	57 e4       	ldi	r21, 0x47	; 71
    463c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4640:	18 16       	cp	r1, r24
    4642:	4c f5       	brge	.+82     	; 0x4696 <EEPROM_voidSendDataByte+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4644:	6b 85       	ldd	r22, Y+11	; 0x0b
    4646:	7c 85       	ldd	r23, Y+12	; 0x0c
    4648:	8d 85       	ldd	r24, Y+13	; 0x0d
    464a:	9e 85       	ldd	r25, Y+14	; 0x0e
    464c:	20 e0       	ldi	r18, 0x00	; 0
    464e:	30 e0       	ldi	r19, 0x00	; 0
    4650:	40 e2       	ldi	r20, 0x20	; 32
    4652:	51 e4       	ldi	r21, 0x41	; 65
    4654:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4658:	dc 01       	movw	r26, r24
    465a:	cb 01       	movw	r24, r22
    465c:	bc 01       	movw	r22, r24
    465e:	cd 01       	movw	r24, r26
    4660:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4664:	dc 01       	movw	r26, r24
    4666:	cb 01       	movw	r24, r22
    4668:	9e 83       	std	Y+6, r25	; 0x06
    466a:	8d 83       	std	Y+5, r24	; 0x05
    466c:	0f c0       	rjmp	.+30     	; 0x468c <EEPROM_voidSendDataByte+0xf2>
    466e:	88 ec       	ldi	r24, 0xC8	; 200
    4670:	90 e0       	ldi	r25, 0x00	; 0
    4672:	9c 83       	std	Y+4, r25	; 0x04
    4674:	8b 83       	std	Y+3, r24	; 0x03
    4676:	8b 81       	ldd	r24, Y+3	; 0x03
    4678:	9c 81       	ldd	r25, Y+4	; 0x04
    467a:	01 97       	sbiw	r24, 0x01	; 1
    467c:	f1 f7       	brne	.-4      	; 0x467a <EEPROM_voidSendDataByte+0xe0>
    467e:	9c 83       	std	Y+4, r25	; 0x04
    4680:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4682:	8d 81       	ldd	r24, Y+5	; 0x05
    4684:	9e 81       	ldd	r25, Y+6	; 0x06
    4686:	01 97       	sbiw	r24, 0x01	; 1
    4688:	9e 83       	std	Y+6, r25	; 0x06
    468a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    468c:	8d 81       	ldd	r24, Y+5	; 0x05
    468e:	9e 81       	ldd	r25, Y+6	; 0x06
    4690:	00 97       	sbiw	r24, 0x00	; 0
    4692:	69 f7       	brne	.-38     	; 0x466e <EEPROM_voidSendDataByte+0xd4>
    4694:	14 c0       	rjmp	.+40     	; 0x46be <EEPROM_voidSendDataByte+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4696:	6f 81       	ldd	r22, Y+7	; 0x07
    4698:	78 85       	ldd	r23, Y+8	; 0x08
    469a:	89 85       	ldd	r24, Y+9	; 0x09
    469c:	9a 85       	ldd	r25, Y+10	; 0x0a
    469e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46a2:	dc 01       	movw	r26, r24
    46a4:	cb 01       	movw	r24, r22
    46a6:	9e 83       	std	Y+6, r25	; 0x06
    46a8:	8d 83       	std	Y+5, r24	; 0x05
    46aa:	8d 81       	ldd	r24, Y+5	; 0x05
    46ac:	9e 81       	ldd	r25, Y+6	; 0x06
    46ae:	9a 83       	std	Y+2, r25	; 0x02
    46b0:	89 83       	std	Y+1, r24	; 0x01
    46b2:	89 81       	ldd	r24, Y+1	; 0x01
    46b4:	9a 81       	ldd	r25, Y+2	; 0x02
    46b6:	01 97       	sbiw	r24, 0x01	; 1
    46b8:	f1 f7       	brne	.-4      	; 0x46b6 <EEPROM_voidSendDataByte+0x11c>
    46ba:	9a 83       	std	Y+2, r25	; 0x02
    46bc:	89 83       	std	Y+1, r24	; 0x01

	/*Delay until the write cycle is finished*/
	_delay_ms(10);
}
    46be:	62 96       	adiw	r28, 0x12	; 18
    46c0:	0f b6       	in	r0, 0x3f	; 63
    46c2:	f8 94       	cli
    46c4:	de bf       	out	0x3e, r29	; 62
    46c6:	0f be       	out	0x3f, r0	; 63
    46c8:	cd bf       	out	0x3d, r28	; 61
    46ca:	cf 91       	pop	r28
    46cc:	df 91       	pop	r29
    46ce:	08 95       	ret

000046d0 <EEPROM_u8ReadDataByte>:

u8 EEPROM_u8ReadDataByte(u16 Copy_u16LocationAddress)
{
    46d0:	df 93       	push	r29
    46d2:	cf 93       	push	r28
    46d4:	00 d0       	rcall	.+0      	; 0x46d6 <EEPROM_u8ReadDataByte+0x6>
    46d6:	00 d0       	rcall	.+0      	; 0x46d8 <EEPROM_u8ReadDataByte+0x8>
    46d8:	cd b7       	in	r28, 0x3d	; 61
    46da:	de b7       	in	r29, 0x3e	; 62
    46dc:	9c 83       	std	Y+4, r25	; 0x04
    46de:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8AddressPacket, Local_u8Data;

	Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | (A2_CONNECTION <<2) | (u8)(Copy_u16LocationAddress >>8);
    46e0:	8b 81       	ldd	r24, Y+3	; 0x03
    46e2:	9c 81       	ldd	r25, Y+4	; 0x04
    46e4:	89 2f       	mov	r24, r25
    46e6:	99 27       	eor	r25, r25
    46e8:	80 65       	ori	r24, 0x50	; 80
    46ea:	89 83       	std	Y+1, r24	; 0x01
	/*if 24C02 :
	 * 	Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | A2_CONNECTION <<2 | A1_CONNECTION <<1 | A0_CONNECTION;
	 */

	/*Send start condition*/
	TWI_SendStartCondition();
    46ec:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <TWI_SendStartCondition>

	/*Send the address packet with write request*/
	TWI_SendSlaveAddressWithWrite(Local_u8AddressPacket);
    46f0:	89 81       	ldd	r24, Y+1	; 0x01
    46f2:	0e 94 46 06 	call	0xc8c	; 0xc8c <TWI_SendSlaveAddressWithWrite>

	/*Send the rest 8bits of the location address*/
	TWI_MasterWriteDataByte((u8)Copy_u16LocationAddress);
    46f6:	8b 81       	ldd	r24, Y+3	; 0x03
    46f8:	0e 94 b6 06 	call	0xd6c	; 0xd6c <TWI_MasterWriteDataByte>

	/*Send repeated start to change write request into read request*/
	TWI_SendRepeatedStart();
    46fc:	0e 94 1c 06 	call	0xc38	; 0xc38 <TWI_SendRepeatedStart>

	/*Send the address packet with read request*/
	TWI_SendSlaveAddressWithRead(Local_u8AddressPacket);
    4700:	89 81       	ldd	r24, Y+1	; 0x01
    4702:	0e 94 7e 06 	call	0xcfc	; 0xcfc <TWI_SendSlaveAddressWithRead>
	
	/*Get the data from memory*/
	TWI_MasterReadDataByte(&Local_u8Data);
    4706:	ce 01       	movw	r24, r28
    4708:	02 96       	adiw	r24, 0x02	; 2
    470a:	0e 94 df 06 	call	0xdbe	; 0xdbe <TWI_MasterReadDataByte>

	/*send the stop condition*/
	TWI_SendStopCondition();
    470e:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_SendStopCondition>

	return Local_u8Data;
    4712:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4714:	0f 90       	pop	r0
    4716:	0f 90       	pop	r0
    4718:	0f 90       	pop	r0
    471a:	0f 90       	pop	r0
    471c:	cf 91       	pop	r28
    471e:	df 91       	pop	r29
    4720:	08 95       	ret

00004722 <main>:
#include<util\delay.h>

void ISR(void);

int main(void)
{
    4722:	df 93       	push	r29
    4724:	cf 93       	push	r28
    4726:	cd b7       	in	r28, 0x3d	; 61
    4728:	de b7       	in	r29, 0x3e	; 62
    472a:	af 97       	sbiw	r28, 0x2f	; 47
    472c:	0f b6       	in	r0, 0x3f	; 63
    472e:	f8 94       	cli
    4730:	de bf       	out	0x3e, r29	; 62
    4732:	0f be       	out	0x3f, r0	; 63
    4734:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8ADCLM35;
	u8 Local_u8ADCLDR;
	u16 MilliVolt;
	u8 temp;

	MDIO_Error_State_SetPinDirection(PIN4,MDIO_PORTD,PIN_OUTPUT);    //Rows
    4736:	84 e0       	ldi	r24, 0x04	; 4
    4738:	63 e0       	ldi	r22, 0x03	; 3
    473a:	41 e0       	ldi	r20, 0x01	; 1
    473c:	0e 94 4b 09 	call	0x1296	; 0x1296 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(PIN3,MDIO_PORTA,PIN_OUTPUT);
    4740:	83 e0       	ldi	r24, 0x03	; 3
    4742:	60 e0       	ldi	r22, 0x00	; 0
    4744:	41 e0       	ldi	r20, 0x01	; 1
    4746:	0e 94 4b 09 	call	0x1296	; 0x1296 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(PIN6,MDIO_PORTD,PIN_OUTPUT);
    474a:	86 e0       	ldi	r24, 0x06	; 6
    474c:	63 e0       	ldi	r22, 0x03	; 3
    474e:	41 e0       	ldi	r20, 0x01	; 1
    4750:	0e 94 4b 09 	call	0x1296	; 0x1296 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(PIN7,MDIO_PORTD,PIN_OUTPUT);
    4754:	87 e0       	ldi	r24, 0x07	; 7
    4756:	63 e0       	ldi	r22, 0x03	; 3
    4758:	41 e0       	ldi	r20, 0x01	; 1
    475a:	0e 94 4b 09 	call	0x1296	; 0x1296 <MDIO_Error_State_SetPinDirection>

	MDIO_Error_State_SetPinValue(PIN4, MDIO_PORTD, PIN_HIGH);
    475e:	84 e0       	ldi	r24, 0x04	; 4
    4760:	63 e0       	ldi	r22, 0x03	; 3
    4762:	41 e0       	ldi	r20, 0x01	; 1
    4764:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(PIN3, MDIO_PORTA, PIN_HIGH);
    4768:	83 e0       	ldi	r24, 0x03	; 3
    476a:	60 e0       	ldi	r22, 0x00	; 0
    476c:	41 e0       	ldi	r20, 0x01	; 1
    476e:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(PIN6, MDIO_PORTD, PIN_HIGH);
    4772:	86 e0       	ldi	r24, 0x06	; 6
    4774:	63 e0       	ldi	r22, 0x03	; 3
    4776:	41 e0       	ldi	r20, 0x01	; 1
    4778:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(PIN7, MDIO_PORTD, PIN_HIGH);
    477c:	87 e0       	ldi	r24, 0x07	; 7
    477e:	63 e0       	ldi	r22, 0x03	; 3
    4780:	41 e0       	ldi	r20, 0x01	; 1
    4782:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>

	MDIO_Error_State_SetPinDirection(PIN3,MDIO_PORTD,PIN_INPUT);     //Col
    4786:	83 e0       	ldi	r24, 0x03	; 3
    4788:	63 e0       	ldi	r22, 0x03	; 3
    478a:	40 e0       	ldi	r20, 0x00	; 0
    478c:	0e 94 4b 09 	call	0x1296	; 0x1296 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(PIN1,MDIO_PORTD,PIN_INPUT);
    4790:	81 e0       	ldi	r24, 0x01	; 1
    4792:	63 e0       	ldi	r22, 0x03	; 3
    4794:	40 e0       	ldi	r20, 0x00	; 0
    4796:	0e 94 4b 09 	call	0x1296	; 0x1296 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(PIN0,MDIO_PORTD,PIN_INPUT);
    479a:	80 e0       	ldi	r24, 0x00	; 0
    479c:	63 e0       	ldi	r22, 0x03	; 3
    479e:	40 e0       	ldi	r20, 0x00	; 0
    47a0:	0e 94 4b 09 	call	0x1296	; 0x1296 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(PIN2,MDIO_PORTA,PIN_INPUT);
    47a4:	82 e0       	ldi	r24, 0x02	; 2
    47a6:	60 e0       	ldi	r22, 0x00	; 0
    47a8:	40 e0       	ldi	r20, 0x00	; 0
    47aa:	0e 94 4b 09 	call	0x1296	; 0x1296 <MDIO_Error_State_SetPinDirection>

	MDIO_Error_State_SetPinValue(PIN3, MDIO_PORTD, PIN_HIGH);
    47ae:	83 e0       	ldi	r24, 0x03	; 3
    47b0:	63 e0       	ldi	r22, 0x03	; 3
    47b2:	41 e0       	ldi	r20, 0x01	; 1
    47b4:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(PIN1, MDIO_PORTD, PIN_HIGH);
    47b8:	81 e0       	ldi	r24, 0x01	; 1
    47ba:	63 e0       	ldi	r22, 0x03	; 3
    47bc:	41 e0       	ldi	r20, 0x01	; 1
    47be:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(PIN0, MDIO_PORTD, PIN_HIGH);
    47c2:	80 e0       	ldi	r24, 0x00	; 0
    47c4:	63 e0       	ldi	r22, 0x03	; 3
    47c6:	41 e0       	ldi	r20, 0x01	; 1
    47c8:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(PIN2, MDIO_PORTA, PIN_HIGH);
    47cc:	82 e0       	ldi	r24, 0x02	; 2
    47ce:	60 e0       	ldi	r22, 0x00	; 0
    47d0:	41 e0       	ldi	r20, 0x01	; 1
    47d2:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>



	MDIO_Error_State_SetPinDirection(PIN3,MDIO_PORTC,PIN_OUTPUT);
    47d6:	83 e0       	ldi	r24, 0x03	; 3
    47d8:	62 e0       	ldi	r22, 0x02	; 2
    47da:	41 e0       	ldi	r20, 0x01	; 1
    47dc:	0e 94 4b 09 	call	0x1296	; 0x1296 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(PIN2,MDIO_PORTD,PIN_INPUT);
    47e0:	82 e0       	ldi	r24, 0x02	; 2
    47e2:	63 e0       	ldi	r22, 0x03	; 3
    47e4:	40 e0       	ldi	r20, 0x00	; 0
    47e6:	0e 94 4b 09 	call	0x1296	; 0x1296 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinValue(PIN2, MDIO_PORTD, PIN_HIGH);
    47ea:	82 e0       	ldi	r24, 0x02	; 2
    47ec:	63 e0       	ldi	r22, 0x03	; 3
    47ee:	41 e0       	ldi	r20, 0x01	; 1
    47f0:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPortDirection(MDIO_PORTB,PORT_OUTPUT);
    47f4:	81 e0       	ldi	r24, 0x01	; 1
    47f6:	6f ef       	ldi	r22, 0xFF	; 255
    47f8:	0e 94 4e 0a 	call	0x149c	; 0x149c <MDIO_Error_State_SetPortDirection>


	EXTI_voidInt0SenseControl();
    47fc:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <EXTI_voidInt0SenseControl>
	EXTI_u8Int0SetCallBack(&ISR);
    4800:	88 e3       	ldi	r24, 0x38	; 56
    4802:	97 e2       	ldi	r25, 0x27	; 39
    4804:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <EXTI_u8Int0SetCallBack>
	EXTI_u8IntEnable(EXTI_INT0);
    4808:	80 e0       	ldi	r24, 0x00	; 0
    480a:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <EXTI_u8IntEnable>
	GIE_voidEnable();
    480e:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <GIE_voidEnable>
    MADC_VidInit();                                       //  Initialize ADC
    4812:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <MADC_VidInit>
	HCLCD_Vid4Bits_Init();
    4816:	0e 94 01 1c 	call	0x3802	; 0x3802 <HCLCD_Vid4Bits_Init>





	HCLCD_Vid4Bits_ClearScreen();
    481a:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <HCLCD_Vid4Bits_ClearScreen>
	HCLCD_Vid4Bits_SetPosition(1, 0);
    481e:	81 e0       	ldi	r24, 0x01	; 1
    4820:	60 e0       	ldi	r22, 0x00	; 0
    4822:	0e 94 65 1f 	call	0x3eca	; 0x3eca <HCLCD_Vid4Bits_SetPosition>

	HCLCD_Vid4Bits_DisplayString((u8*) "SMART HOME");
    4826:	80 e6       	ldi	r24, 0x60	; 96
    4828:	90 e0       	ldi	r25, 0x00	; 0
    482a:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <HCLCD_Vid4Bits_DisplayString>
    482e:	80 e0       	ldi	r24, 0x00	; 0
    4830:	90 e0       	ldi	r25, 0x00	; 0
    4832:	aa e7       	ldi	r26, 0x7A	; 122
    4834:	b4 e4       	ldi	r27, 0x44	; 68
    4836:	8f a3       	std	Y+39, r24	; 0x27
    4838:	98 a7       	std	Y+40, r25	; 0x28
    483a:	a9 a7       	std	Y+41, r26	; 0x29
    483c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    483e:	6f a1       	ldd	r22, Y+39	; 0x27
    4840:	78 a5       	ldd	r23, Y+40	; 0x28
    4842:	89 a5       	ldd	r24, Y+41	; 0x29
    4844:	9a a5       	ldd	r25, Y+42	; 0x2a
    4846:	20 e0       	ldi	r18, 0x00	; 0
    4848:	30 e0       	ldi	r19, 0x00	; 0
    484a:	4a ef       	ldi	r20, 0xFA	; 250
    484c:	54 e4       	ldi	r21, 0x44	; 68
    484e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4852:	dc 01       	movw	r26, r24
    4854:	cb 01       	movw	r24, r22
    4856:	8b a3       	std	Y+35, r24	; 0x23
    4858:	9c a3       	std	Y+36, r25	; 0x24
    485a:	ad a3       	std	Y+37, r26	; 0x25
    485c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    485e:	6b a1       	ldd	r22, Y+35	; 0x23
    4860:	7c a1       	ldd	r23, Y+36	; 0x24
    4862:	8d a1       	ldd	r24, Y+37	; 0x25
    4864:	9e a1       	ldd	r25, Y+38	; 0x26
    4866:	20 e0       	ldi	r18, 0x00	; 0
    4868:	30 e0       	ldi	r19, 0x00	; 0
    486a:	40 e8       	ldi	r20, 0x80	; 128
    486c:	5f e3       	ldi	r21, 0x3F	; 63
    486e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4872:	88 23       	and	r24, r24
    4874:	2c f4       	brge	.+10     	; 0x4880 <main+0x15e>
		__ticks = 1;
    4876:	81 e0       	ldi	r24, 0x01	; 1
    4878:	90 e0       	ldi	r25, 0x00	; 0
    487a:	9a a3       	std	Y+34, r25	; 0x22
    487c:	89 a3       	std	Y+33, r24	; 0x21
    487e:	3f c0       	rjmp	.+126    	; 0x48fe <main+0x1dc>
	else if (__tmp > 65535)
    4880:	6b a1       	ldd	r22, Y+35	; 0x23
    4882:	7c a1       	ldd	r23, Y+36	; 0x24
    4884:	8d a1       	ldd	r24, Y+37	; 0x25
    4886:	9e a1       	ldd	r25, Y+38	; 0x26
    4888:	20 e0       	ldi	r18, 0x00	; 0
    488a:	3f ef       	ldi	r19, 0xFF	; 255
    488c:	4f e7       	ldi	r20, 0x7F	; 127
    488e:	57 e4       	ldi	r21, 0x47	; 71
    4890:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4894:	18 16       	cp	r1, r24
    4896:	4c f5       	brge	.+82     	; 0x48ea <main+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4898:	6f a1       	ldd	r22, Y+39	; 0x27
    489a:	78 a5       	ldd	r23, Y+40	; 0x28
    489c:	89 a5       	ldd	r24, Y+41	; 0x29
    489e:	9a a5       	ldd	r25, Y+42	; 0x2a
    48a0:	20 e0       	ldi	r18, 0x00	; 0
    48a2:	30 e0       	ldi	r19, 0x00	; 0
    48a4:	40 e2       	ldi	r20, 0x20	; 32
    48a6:	51 e4       	ldi	r21, 0x41	; 65
    48a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48ac:	dc 01       	movw	r26, r24
    48ae:	cb 01       	movw	r24, r22
    48b0:	bc 01       	movw	r22, r24
    48b2:	cd 01       	movw	r24, r26
    48b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48b8:	dc 01       	movw	r26, r24
    48ba:	cb 01       	movw	r24, r22
    48bc:	9a a3       	std	Y+34, r25	; 0x22
    48be:	89 a3       	std	Y+33, r24	; 0x21
    48c0:	0f c0       	rjmp	.+30     	; 0x48e0 <main+0x1be>
    48c2:	88 ec       	ldi	r24, 0xC8	; 200
    48c4:	90 e0       	ldi	r25, 0x00	; 0
    48c6:	98 a3       	std	Y+32, r25	; 0x20
    48c8:	8f 8f       	std	Y+31, r24	; 0x1f
    48ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    48cc:	98 a1       	ldd	r25, Y+32	; 0x20
    48ce:	01 97       	sbiw	r24, 0x01	; 1
    48d0:	f1 f7       	brne	.-4      	; 0x48ce <main+0x1ac>
    48d2:	98 a3       	std	Y+32, r25	; 0x20
    48d4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48d6:	89 a1       	ldd	r24, Y+33	; 0x21
    48d8:	9a a1       	ldd	r25, Y+34	; 0x22
    48da:	01 97       	sbiw	r24, 0x01	; 1
    48dc:	9a a3       	std	Y+34, r25	; 0x22
    48de:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48e0:	89 a1       	ldd	r24, Y+33	; 0x21
    48e2:	9a a1       	ldd	r25, Y+34	; 0x22
    48e4:	00 97       	sbiw	r24, 0x00	; 0
    48e6:	69 f7       	brne	.-38     	; 0x48c2 <main+0x1a0>
    48e8:	14 c0       	rjmp	.+40     	; 0x4912 <main+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48ea:	6b a1       	ldd	r22, Y+35	; 0x23
    48ec:	7c a1       	ldd	r23, Y+36	; 0x24
    48ee:	8d a1       	ldd	r24, Y+37	; 0x25
    48f0:	9e a1       	ldd	r25, Y+38	; 0x26
    48f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48f6:	dc 01       	movw	r26, r24
    48f8:	cb 01       	movw	r24, r22
    48fa:	9a a3       	std	Y+34, r25	; 0x22
    48fc:	89 a3       	std	Y+33, r24	; 0x21
    48fe:	89 a1       	ldd	r24, Y+33	; 0x21
    4900:	9a a1       	ldd	r25, Y+34	; 0x22
    4902:	9e 8f       	std	Y+30, r25	; 0x1e
    4904:	8d 8f       	std	Y+29, r24	; 0x1d
    4906:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4908:	9e 8d       	ldd	r25, Y+30	; 0x1e
    490a:	01 97       	sbiw	r24, 0x01	; 1
    490c:	f1 f7       	brne	.-4      	; 0x490a <main+0x1e8>
    490e:	9e 8f       	std	Y+30, r25	; 0x1e
    4910:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	HCLCD_Vid4Bits_ClearScreen();
    4912:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <HCLCD_Vid4Bits_ClearScreen>
    4916:	80 e0       	ldi	r24, 0x00	; 0
    4918:	90 e0       	ldi	r25, 0x00	; 0
    491a:	aa e7       	ldi	r26, 0x7A	; 122
    491c:	b4 e4       	ldi	r27, 0x44	; 68
    491e:	89 8f       	std	Y+25, r24	; 0x19
    4920:	9a 8f       	std	Y+26, r25	; 0x1a
    4922:	ab 8f       	std	Y+27, r26	; 0x1b
    4924:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4926:	69 8d       	ldd	r22, Y+25	; 0x19
    4928:	7a 8d       	ldd	r23, Y+26	; 0x1a
    492a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    492c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    492e:	20 e0       	ldi	r18, 0x00	; 0
    4930:	30 e0       	ldi	r19, 0x00	; 0
    4932:	4a ef       	ldi	r20, 0xFA	; 250
    4934:	54 e4       	ldi	r21, 0x44	; 68
    4936:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    493a:	dc 01       	movw	r26, r24
    493c:	cb 01       	movw	r24, r22
    493e:	8d 8b       	std	Y+21, r24	; 0x15
    4940:	9e 8b       	std	Y+22, r25	; 0x16
    4942:	af 8b       	std	Y+23, r26	; 0x17
    4944:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4946:	6d 89       	ldd	r22, Y+21	; 0x15
    4948:	7e 89       	ldd	r23, Y+22	; 0x16
    494a:	8f 89       	ldd	r24, Y+23	; 0x17
    494c:	98 8d       	ldd	r25, Y+24	; 0x18
    494e:	20 e0       	ldi	r18, 0x00	; 0
    4950:	30 e0       	ldi	r19, 0x00	; 0
    4952:	40 e8       	ldi	r20, 0x80	; 128
    4954:	5f e3       	ldi	r21, 0x3F	; 63
    4956:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    495a:	88 23       	and	r24, r24
    495c:	2c f4       	brge	.+10     	; 0x4968 <main+0x246>
		__ticks = 1;
    495e:	81 e0       	ldi	r24, 0x01	; 1
    4960:	90 e0       	ldi	r25, 0x00	; 0
    4962:	9c 8b       	std	Y+20, r25	; 0x14
    4964:	8b 8b       	std	Y+19, r24	; 0x13
    4966:	3f c0       	rjmp	.+126    	; 0x49e6 <main+0x2c4>
	else if (__tmp > 65535)
    4968:	6d 89       	ldd	r22, Y+21	; 0x15
    496a:	7e 89       	ldd	r23, Y+22	; 0x16
    496c:	8f 89       	ldd	r24, Y+23	; 0x17
    496e:	98 8d       	ldd	r25, Y+24	; 0x18
    4970:	20 e0       	ldi	r18, 0x00	; 0
    4972:	3f ef       	ldi	r19, 0xFF	; 255
    4974:	4f e7       	ldi	r20, 0x7F	; 127
    4976:	57 e4       	ldi	r21, 0x47	; 71
    4978:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    497c:	18 16       	cp	r1, r24
    497e:	4c f5       	brge	.+82     	; 0x49d2 <main+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4980:	69 8d       	ldd	r22, Y+25	; 0x19
    4982:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4984:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4986:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4988:	20 e0       	ldi	r18, 0x00	; 0
    498a:	30 e0       	ldi	r19, 0x00	; 0
    498c:	40 e2       	ldi	r20, 0x20	; 32
    498e:	51 e4       	ldi	r21, 0x41	; 65
    4990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4994:	dc 01       	movw	r26, r24
    4996:	cb 01       	movw	r24, r22
    4998:	bc 01       	movw	r22, r24
    499a:	cd 01       	movw	r24, r26
    499c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49a0:	dc 01       	movw	r26, r24
    49a2:	cb 01       	movw	r24, r22
    49a4:	9c 8b       	std	Y+20, r25	; 0x14
    49a6:	8b 8b       	std	Y+19, r24	; 0x13
    49a8:	0f c0       	rjmp	.+30     	; 0x49c8 <main+0x2a6>
    49aa:	88 ec       	ldi	r24, 0xC8	; 200
    49ac:	90 e0       	ldi	r25, 0x00	; 0
    49ae:	9a 8b       	std	Y+18, r25	; 0x12
    49b0:	89 8b       	std	Y+17, r24	; 0x11
    49b2:	89 89       	ldd	r24, Y+17	; 0x11
    49b4:	9a 89       	ldd	r25, Y+18	; 0x12
    49b6:	01 97       	sbiw	r24, 0x01	; 1
    49b8:	f1 f7       	brne	.-4      	; 0x49b6 <main+0x294>
    49ba:	9a 8b       	std	Y+18, r25	; 0x12
    49bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49be:	8b 89       	ldd	r24, Y+19	; 0x13
    49c0:	9c 89       	ldd	r25, Y+20	; 0x14
    49c2:	01 97       	sbiw	r24, 0x01	; 1
    49c4:	9c 8b       	std	Y+20, r25	; 0x14
    49c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49c8:	8b 89       	ldd	r24, Y+19	; 0x13
    49ca:	9c 89       	ldd	r25, Y+20	; 0x14
    49cc:	00 97       	sbiw	r24, 0x00	; 0
    49ce:	69 f7       	brne	.-38     	; 0x49aa <main+0x288>
    49d0:	14 c0       	rjmp	.+40     	; 0x49fa <main+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49d2:	6d 89       	ldd	r22, Y+21	; 0x15
    49d4:	7e 89       	ldd	r23, Y+22	; 0x16
    49d6:	8f 89       	ldd	r24, Y+23	; 0x17
    49d8:	98 8d       	ldd	r25, Y+24	; 0x18
    49da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49de:	dc 01       	movw	r26, r24
    49e0:	cb 01       	movw	r24, r22
    49e2:	9c 8b       	std	Y+20, r25	; 0x14
    49e4:	8b 8b       	std	Y+19, r24	; 0x13
    49e6:	8b 89       	ldd	r24, Y+19	; 0x13
    49e8:	9c 89       	ldd	r25, Y+20	; 0x14
    49ea:	98 8b       	std	Y+16, r25	; 0x10
    49ec:	8f 87       	std	Y+15, r24	; 0x0f
    49ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    49f0:	98 89       	ldd	r25, Y+16	; 0x10
    49f2:	01 97       	sbiw	r24, 0x01	; 1
    49f4:	f1 f7       	brne	.-4      	; 0x49f2 <main+0x2d0>
    49f6:	98 8b       	std	Y+16, r25	; 0x10
    49f8:	8f 87       	std	Y+15, r24	; 0x0f



	while (1)
	{
		Local_u8ADCLM35 = MADC_u16ADC_StartConversion(CHANNEL_0);
    49fa:	80 e0       	ldi	r24, 0x00	; 0
    49fc:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <MADC_u16ADC_StartConversion>
    4a00:	8f a7       	std	Y+47, r24	; 0x2f
		Local_u8ADCLDR  = MADC_u16ADC_StartConversion(CHANNEL_1);
    4a02:	81 e0       	ldi	r24, 0x01	; 1
    4a04:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <MADC_u16ADC_StartConversion>
    4a08:	8e a7       	std	Y+46, r24	; 0x2e
		MilliVolt = (u16) ((u32) Local_u8ADCLM35 * 5000UL) / 256UL;
    4a0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    4a0c:	88 2f       	mov	r24, r24
    4a0e:	90 e0       	ldi	r25, 0x00	; 0
    4a10:	a0 e0       	ldi	r26, 0x00	; 0
    4a12:	b0 e0       	ldi	r27, 0x00	; 0
    4a14:	28 e8       	ldi	r18, 0x88	; 136
    4a16:	33 e1       	ldi	r19, 0x13	; 19
    4a18:	40 e0       	ldi	r20, 0x00	; 0
    4a1a:	50 e0       	ldi	r21, 0x00	; 0
    4a1c:	bc 01       	movw	r22, r24
    4a1e:	cd 01       	movw	r24, r26
    4a20:	0e 94 1f 29 	call	0x523e	; 0x523e <__mulsi3>
    4a24:	dc 01       	movw	r26, r24
    4a26:	cb 01       	movw	r24, r22
    4a28:	89 2f       	mov	r24, r25
    4a2a:	99 27       	eor	r25, r25
    4a2c:	9d a7       	std	Y+45, r25	; 0x2d
    4a2e:	8c a7       	std	Y+44, r24	; 0x2c
		temp = MilliVolt / 10;
    4a30:	8c a5       	ldd	r24, Y+44	; 0x2c
    4a32:	9d a5       	ldd	r25, Y+45	; 0x2d
    4a34:	2a e0       	ldi	r18, 0x0A	; 10
    4a36:	30 e0       	ldi	r19, 0x00	; 0
    4a38:	b9 01       	movw	r22, r18
    4a3a:	0e 94 3e 29 	call	0x527c	; 0x527c <__udivmodhi4>
    4a3e:	cb 01       	movw	r24, r22
    4a40:	8b a7       	std	Y+43, r24	; 0x2b
		if ((Local_u8ADCLDR == 0) && (Local_u8ADCLDR <= 28)) {
    4a42:	8e a5       	ldd	r24, Y+46	; 0x2e
    4a44:	88 23       	and	r24, r24
    4a46:	61 f5       	brne	.+88     	; 0x4aa0 <main+0x37e>
    4a48:	8e a5       	ldd	r24, Y+46	; 0x2e
    4a4a:	8d 31       	cpi	r24, 0x1D	; 29
    4a4c:	48 f5       	brcc	.+82     	; 0x4aa0 <main+0x37e>
			MDIO_Error_State_SetPinValue(PIN0, MDIO_PORTB, PIN_HIGH);
    4a4e:	80 e0       	ldi	r24, 0x00	; 0
    4a50:	61 e0       	ldi	r22, 0x01	; 1
    4a52:	41 e0       	ldi	r20, 0x01	; 1
    4a54:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN1, MDIO_PORTB, PIN_HIGH);
    4a58:	81 e0       	ldi	r24, 0x01	; 1
    4a5a:	61 e0       	ldi	r22, 0x01	; 1
    4a5c:	41 e0       	ldi	r20, 0x01	; 1
    4a5e:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN2, MDIO_PORTB, PIN_HIGH);
    4a62:	82 e0       	ldi	r24, 0x02	; 2
    4a64:	61 e0       	ldi	r22, 0x01	; 1
    4a66:	41 e0       	ldi	r20, 0x01	; 1
    4a68:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN3, MDIO_PORTB, PIN_HIGH);
    4a6c:	83 e0       	ldi	r24, 0x03	; 3
    4a6e:	61 e0       	ldi	r22, 0x01	; 1
    4a70:	41 e0       	ldi	r20, 0x01	; 1
    4a72:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN4, MDIO_PORTB, PIN_HIGH);
    4a76:	84 e0       	ldi	r24, 0x04	; 4
    4a78:	61 e0       	ldi	r22, 0x01	; 1
    4a7a:	41 e0       	ldi	r20, 0x01	; 1
    4a7c:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN5, MDIO_PORTB, PIN_HIGH);
    4a80:	85 e0       	ldi	r24, 0x05	; 5
    4a82:	61 e0       	ldi	r22, 0x01	; 1
    4a84:	41 e0       	ldi	r20, 0x01	; 1
    4a86:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN6, MDIO_PORTB, PIN_HIGH);
    4a8a:	86 e0       	ldi	r24, 0x06	; 6
    4a8c:	61 e0       	ldi	r22, 0x01	; 1
    4a8e:	41 e0       	ldi	r20, 0x01	; 1
    4a90:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN7, MDIO_PORTB, PIN_HIGH);
    4a94:	87 e0       	ldi	r24, 0x07	; 7
    4a96:	61 e0       	ldi	r22, 0x01	; 1
    4a98:	41 e0       	ldi	r20, 0x01	; 1
    4a9a:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
    4a9e:	48 c1       	rjmp	.+656    	; 0x4d30 <main+0x60e>
		} else if ((Local_u8ADCLDR > 28) && (Local_u8ADCLDR <= 56)) {
    4aa0:	8e a5       	ldd	r24, Y+46	; 0x2e
    4aa2:	8d 31       	cpi	r24, 0x1D	; 29
    4aa4:	60 f1       	brcs	.+88     	; 0x4afe <main+0x3dc>
    4aa6:	8e a5       	ldd	r24, Y+46	; 0x2e
    4aa8:	89 33       	cpi	r24, 0x39	; 57
    4aaa:	48 f5       	brcc	.+82     	; 0x4afe <main+0x3dc>
			MDIO_Error_State_SetPinValue(PIN0, MDIO_PORTB, PIN_HIGH);
    4aac:	80 e0       	ldi	r24, 0x00	; 0
    4aae:	61 e0       	ldi	r22, 0x01	; 1
    4ab0:	41 e0       	ldi	r20, 0x01	; 1
    4ab2:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN1, MDIO_PORTB, PIN_HIGH);
    4ab6:	81 e0       	ldi	r24, 0x01	; 1
    4ab8:	61 e0       	ldi	r22, 0x01	; 1
    4aba:	41 e0       	ldi	r20, 0x01	; 1
    4abc:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN2, MDIO_PORTB, PIN_HIGH);
    4ac0:	82 e0       	ldi	r24, 0x02	; 2
    4ac2:	61 e0       	ldi	r22, 0x01	; 1
    4ac4:	41 e0       	ldi	r20, 0x01	; 1
    4ac6:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN3, MDIO_PORTB, PIN_HIGH);
    4aca:	83 e0       	ldi	r24, 0x03	; 3
    4acc:	61 e0       	ldi	r22, 0x01	; 1
    4ace:	41 e0       	ldi	r20, 0x01	; 1
    4ad0:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN4, MDIO_PORTB, PIN_HIGH);
    4ad4:	84 e0       	ldi	r24, 0x04	; 4
    4ad6:	61 e0       	ldi	r22, 0x01	; 1
    4ad8:	41 e0       	ldi	r20, 0x01	; 1
    4ada:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN5, MDIO_PORTB, PIN_HIGH);
    4ade:	85 e0       	ldi	r24, 0x05	; 5
    4ae0:	61 e0       	ldi	r22, 0x01	; 1
    4ae2:	41 e0       	ldi	r20, 0x01	; 1
    4ae4:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN6, MDIO_PORTB, PIN_HIGH);
    4ae8:	86 e0       	ldi	r24, 0x06	; 6
    4aea:	61 e0       	ldi	r22, 0x01	; 1
    4aec:	41 e0       	ldi	r20, 0x01	; 1
    4aee:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN7, MDIO_PORTB, PIN_LOW);
    4af2:	87 e0       	ldi	r24, 0x07	; 7
    4af4:	61 e0       	ldi	r22, 0x01	; 1
    4af6:	40 e0       	ldi	r20, 0x00	; 0
    4af8:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
    4afc:	19 c1       	rjmp	.+562    	; 0x4d30 <main+0x60e>
		} else if ((Local_u8ADCLDR > 56) && (Local_u8ADCLDR <= 84)) {
    4afe:	8e a5       	ldd	r24, Y+46	; 0x2e
    4b00:	89 33       	cpi	r24, 0x39	; 57
    4b02:	60 f1       	brcs	.+88     	; 0x4b5c <main+0x43a>
    4b04:	8e a5       	ldd	r24, Y+46	; 0x2e
    4b06:	85 35       	cpi	r24, 0x55	; 85
    4b08:	48 f5       	brcc	.+82     	; 0x4b5c <main+0x43a>
			MDIO_Error_State_SetPinValue(PIN0, MDIO_PORTB, PIN_HIGH);
    4b0a:	80 e0       	ldi	r24, 0x00	; 0
    4b0c:	61 e0       	ldi	r22, 0x01	; 1
    4b0e:	41 e0       	ldi	r20, 0x01	; 1
    4b10:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN1, MDIO_PORTB, PIN_HIGH);
    4b14:	81 e0       	ldi	r24, 0x01	; 1
    4b16:	61 e0       	ldi	r22, 0x01	; 1
    4b18:	41 e0       	ldi	r20, 0x01	; 1
    4b1a:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN2, MDIO_PORTB, PIN_HIGH);
    4b1e:	82 e0       	ldi	r24, 0x02	; 2
    4b20:	61 e0       	ldi	r22, 0x01	; 1
    4b22:	41 e0       	ldi	r20, 0x01	; 1
    4b24:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN3, MDIO_PORTB, PIN_HIGH);
    4b28:	83 e0       	ldi	r24, 0x03	; 3
    4b2a:	61 e0       	ldi	r22, 0x01	; 1
    4b2c:	41 e0       	ldi	r20, 0x01	; 1
    4b2e:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN4, MDIO_PORTB, PIN_HIGH);
    4b32:	84 e0       	ldi	r24, 0x04	; 4
    4b34:	61 e0       	ldi	r22, 0x01	; 1
    4b36:	41 e0       	ldi	r20, 0x01	; 1
    4b38:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN5, MDIO_PORTB, PIN_HIGH);
    4b3c:	85 e0       	ldi	r24, 0x05	; 5
    4b3e:	61 e0       	ldi	r22, 0x01	; 1
    4b40:	41 e0       	ldi	r20, 0x01	; 1
    4b42:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN6, MDIO_PORTB, PIN_LOW);
    4b46:	86 e0       	ldi	r24, 0x06	; 6
    4b48:	61 e0       	ldi	r22, 0x01	; 1
    4b4a:	40 e0       	ldi	r20, 0x00	; 0
    4b4c:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN7, MDIO_PORTB, PIN_LOW);
    4b50:	87 e0       	ldi	r24, 0x07	; 7
    4b52:	61 e0       	ldi	r22, 0x01	; 1
    4b54:	40 e0       	ldi	r20, 0x00	; 0
    4b56:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
    4b5a:	ea c0       	rjmp	.+468    	; 0x4d30 <main+0x60e>
		} else if ((Local_u8ADCLDR > 84) && (Local_u8ADCLDR <= 112)) {
    4b5c:	8e a5       	ldd	r24, Y+46	; 0x2e
    4b5e:	85 35       	cpi	r24, 0x55	; 85
    4b60:	60 f1       	brcs	.+88     	; 0x4bba <main+0x498>
    4b62:	8e a5       	ldd	r24, Y+46	; 0x2e
    4b64:	81 37       	cpi	r24, 0x71	; 113
    4b66:	48 f5       	brcc	.+82     	; 0x4bba <main+0x498>
			MDIO_Error_State_SetPinValue(PIN0, MDIO_PORTB, PIN_HIGH);
    4b68:	80 e0       	ldi	r24, 0x00	; 0
    4b6a:	61 e0       	ldi	r22, 0x01	; 1
    4b6c:	41 e0       	ldi	r20, 0x01	; 1
    4b6e:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN1, MDIO_PORTB, PIN_HIGH);
    4b72:	81 e0       	ldi	r24, 0x01	; 1
    4b74:	61 e0       	ldi	r22, 0x01	; 1
    4b76:	41 e0       	ldi	r20, 0x01	; 1
    4b78:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN2, MDIO_PORTB, PIN_HIGH);
    4b7c:	82 e0       	ldi	r24, 0x02	; 2
    4b7e:	61 e0       	ldi	r22, 0x01	; 1
    4b80:	41 e0       	ldi	r20, 0x01	; 1
    4b82:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN3, MDIO_PORTB, PIN_HIGH);
    4b86:	83 e0       	ldi	r24, 0x03	; 3
    4b88:	61 e0       	ldi	r22, 0x01	; 1
    4b8a:	41 e0       	ldi	r20, 0x01	; 1
    4b8c:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN4, MDIO_PORTB, PIN_HIGH);
    4b90:	84 e0       	ldi	r24, 0x04	; 4
    4b92:	61 e0       	ldi	r22, 0x01	; 1
    4b94:	41 e0       	ldi	r20, 0x01	; 1
    4b96:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN5, MDIO_PORTB, PIN_LOW);
    4b9a:	85 e0       	ldi	r24, 0x05	; 5
    4b9c:	61 e0       	ldi	r22, 0x01	; 1
    4b9e:	40 e0       	ldi	r20, 0x00	; 0
    4ba0:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN6, MDIO_PORTB, PIN_LOW);
    4ba4:	86 e0       	ldi	r24, 0x06	; 6
    4ba6:	61 e0       	ldi	r22, 0x01	; 1
    4ba8:	40 e0       	ldi	r20, 0x00	; 0
    4baa:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN7, MDIO_PORTB, PIN_LOW);
    4bae:	87 e0       	ldi	r24, 0x07	; 7
    4bb0:	61 e0       	ldi	r22, 0x01	; 1
    4bb2:	40 e0       	ldi	r20, 0x00	; 0
    4bb4:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
    4bb8:	bb c0       	rjmp	.+374    	; 0x4d30 <main+0x60e>
		} else if ((Local_u8ADCLDR > 112) && (Local_u8ADCLDR <= 140)) {
    4bba:	8e a5       	ldd	r24, Y+46	; 0x2e
    4bbc:	81 37       	cpi	r24, 0x71	; 113
    4bbe:	60 f1       	brcs	.+88     	; 0x4c18 <main+0x4f6>
    4bc0:	8e a5       	ldd	r24, Y+46	; 0x2e
    4bc2:	8d 38       	cpi	r24, 0x8D	; 141
    4bc4:	48 f5       	brcc	.+82     	; 0x4c18 <main+0x4f6>
			MDIO_Error_State_SetPinValue(PIN0, MDIO_PORTB, PIN_HIGH);
    4bc6:	80 e0       	ldi	r24, 0x00	; 0
    4bc8:	61 e0       	ldi	r22, 0x01	; 1
    4bca:	41 e0       	ldi	r20, 0x01	; 1
    4bcc:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN1, MDIO_PORTB, PIN_HIGH);
    4bd0:	81 e0       	ldi	r24, 0x01	; 1
    4bd2:	61 e0       	ldi	r22, 0x01	; 1
    4bd4:	41 e0       	ldi	r20, 0x01	; 1
    4bd6:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN2, MDIO_PORTB, PIN_HIGH);
    4bda:	82 e0       	ldi	r24, 0x02	; 2
    4bdc:	61 e0       	ldi	r22, 0x01	; 1
    4bde:	41 e0       	ldi	r20, 0x01	; 1
    4be0:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN3, MDIO_PORTB, PIN_HIGH);
    4be4:	83 e0       	ldi	r24, 0x03	; 3
    4be6:	61 e0       	ldi	r22, 0x01	; 1
    4be8:	41 e0       	ldi	r20, 0x01	; 1
    4bea:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN4, MDIO_PORTB, PIN_LOW);
    4bee:	84 e0       	ldi	r24, 0x04	; 4
    4bf0:	61 e0       	ldi	r22, 0x01	; 1
    4bf2:	40 e0       	ldi	r20, 0x00	; 0
    4bf4:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN5, MDIO_PORTB, PIN_LOW);
    4bf8:	85 e0       	ldi	r24, 0x05	; 5
    4bfa:	61 e0       	ldi	r22, 0x01	; 1
    4bfc:	40 e0       	ldi	r20, 0x00	; 0
    4bfe:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN6, MDIO_PORTB, PIN_LOW);
    4c02:	86 e0       	ldi	r24, 0x06	; 6
    4c04:	61 e0       	ldi	r22, 0x01	; 1
    4c06:	40 e0       	ldi	r20, 0x00	; 0
    4c08:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN7, MDIO_PORTB, PIN_LOW);
    4c0c:	87 e0       	ldi	r24, 0x07	; 7
    4c0e:	61 e0       	ldi	r22, 0x01	; 1
    4c10:	40 e0       	ldi	r20, 0x00	; 0
    4c12:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
    4c16:	8c c0       	rjmp	.+280    	; 0x4d30 <main+0x60e>
		} else if ((Local_u8ADCLDR > 140) && (Local_u8ADCLDR <= 168)) {
    4c18:	8e a5       	ldd	r24, Y+46	; 0x2e
    4c1a:	8d 38       	cpi	r24, 0x8D	; 141
    4c1c:	60 f1       	brcs	.+88     	; 0x4c76 <main+0x554>
    4c1e:	8e a5       	ldd	r24, Y+46	; 0x2e
    4c20:	89 3a       	cpi	r24, 0xA9	; 169
    4c22:	48 f5       	brcc	.+82     	; 0x4c76 <main+0x554>
			MDIO_Error_State_SetPinValue(PIN0, MDIO_PORTB, PIN_HIGH);
    4c24:	80 e0       	ldi	r24, 0x00	; 0
    4c26:	61 e0       	ldi	r22, 0x01	; 1
    4c28:	41 e0       	ldi	r20, 0x01	; 1
    4c2a:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN1, MDIO_PORTB, PIN_HIGH);
    4c2e:	81 e0       	ldi	r24, 0x01	; 1
    4c30:	61 e0       	ldi	r22, 0x01	; 1
    4c32:	41 e0       	ldi	r20, 0x01	; 1
    4c34:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN2, MDIO_PORTB, PIN_HIGH);
    4c38:	82 e0       	ldi	r24, 0x02	; 2
    4c3a:	61 e0       	ldi	r22, 0x01	; 1
    4c3c:	41 e0       	ldi	r20, 0x01	; 1
    4c3e:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN3, MDIO_PORTB, PIN_LOW);
    4c42:	83 e0       	ldi	r24, 0x03	; 3
    4c44:	61 e0       	ldi	r22, 0x01	; 1
    4c46:	40 e0       	ldi	r20, 0x00	; 0
    4c48:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN4, MDIO_PORTB, PIN_LOW);
    4c4c:	84 e0       	ldi	r24, 0x04	; 4
    4c4e:	61 e0       	ldi	r22, 0x01	; 1
    4c50:	40 e0       	ldi	r20, 0x00	; 0
    4c52:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN5, MDIO_PORTB, PIN_LOW);
    4c56:	85 e0       	ldi	r24, 0x05	; 5
    4c58:	61 e0       	ldi	r22, 0x01	; 1
    4c5a:	40 e0       	ldi	r20, 0x00	; 0
    4c5c:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN6, MDIO_PORTB, PIN_LOW);
    4c60:	86 e0       	ldi	r24, 0x06	; 6
    4c62:	61 e0       	ldi	r22, 0x01	; 1
    4c64:	40 e0       	ldi	r20, 0x00	; 0
    4c66:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN7, MDIO_PORTB, PIN_LOW);
    4c6a:	87 e0       	ldi	r24, 0x07	; 7
    4c6c:	61 e0       	ldi	r22, 0x01	; 1
    4c6e:	40 e0       	ldi	r20, 0x00	; 0
    4c70:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
    4c74:	5d c0       	rjmp	.+186    	; 0x4d30 <main+0x60e>
		} else if ((Local_u8ADCLDR > 168) && (Local_u8ADCLDR <= 196)) {
    4c76:	8e a5       	ldd	r24, Y+46	; 0x2e
    4c78:	89 3a       	cpi	r24, 0xA9	; 169
    4c7a:	60 f1       	brcs	.+88     	; 0x4cd4 <main+0x5b2>
    4c7c:	8e a5       	ldd	r24, Y+46	; 0x2e
    4c7e:	85 3c       	cpi	r24, 0xC5	; 197
    4c80:	48 f5       	brcc	.+82     	; 0x4cd4 <main+0x5b2>
			MDIO_Error_State_SetPinValue(PIN0, MDIO_PORTB, PIN_HIGH);
    4c82:	80 e0       	ldi	r24, 0x00	; 0
    4c84:	61 e0       	ldi	r22, 0x01	; 1
    4c86:	41 e0       	ldi	r20, 0x01	; 1
    4c88:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN1, MDIO_PORTB, PIN_HIGH);
    4c8c:	81 e0       	ldi	r24, 0x01	; 1
    4c8e:	61 e0       	ldi	r22, 0x01	; 1
    4c90:	41 e0       	ldi	r20, 0x01	; 1
    4c92:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN2, MDIO_PORTB, PIN_LOW);
    4c96:	82 e0       	ldi	r24, 0x02	; 2
    4c98:	61 e0       	ldi	r22, 0x01	; 1
    4c9a:	40 e0       	ldi	r20, 0x00	; 0
    4c9c:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN3, MDIO_PORTB, PIN_LOW);
    4ca0:	83 e0       	ldi	r24, 0x03	; 3
    4ca2:	61 e0       	ldi	r22, 0x01	; 1
    4ca4:	40 e0       	ldi	r20, 0x00	; 0
    4ca6:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN4, MDIO_PORTB, PIN_LOW);
    4caa:	84 e0       	ldi	r24, 0x04	; 4
    4cac:	61 e0       	ldi	r22, 0x01	; 1
    4cae:	40 e0       	ldi	r20, 0x00	; 0
    4cb0:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN5, MDIO_PORTB, PIN_LOW);
    4cb4:	85 e0       	ldi	r24, 0x05	; 5
    4cb6:	61 e0       	ldi	r22, 0x01	; 1
    4cb8:	40 e0       	ldi	r20, 0x00	; 0
    4cba:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN6, MDIO_PORTB, PIN_LOW);
    4cbe:	86 e0       	ldi	r24, 0x06	; 6
    4cc0:	61 e0       	ldi	r22, 0x01	; 1
    4cc2:	40 e0       	ldi	r20, 0x00	; 0
    4cc4:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN7, MDIO_PORTB, PIN_LOW);
    4cc8:	87 e0       	ldi	r24, 0x07	; 7
    4cca:	61 e0       	ldi	r22, 0x01	; 1
    4ccc:	40 e0       	ldi	r20, 0x00	; 0
    4cce:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
    4cd2:	2e c0       	rjmp	.+92     	; 0x4d30 <main+0x60e>
		} else if ((Local_u8ADCLDR > 196) && (Local_u8ADCLDR <= 224)) {
    4cd4:	8e a5       	ldd	r24, Y+46	; 0x2e
    4cd6:	85 3c       	cpi	r24, 0xC5	; 197
    4cd8:	58 f1       	brcs	.+86     	; 0x4d30 <main+0x60e>
    4cda:	8e a5       	ldd	r24, Y+46	; 0x2e
    4cdc:	81 3e       	cpi	r24, 0xE1	; 225
    4cde:	40 f5       	brcc	.+80     	; 0x4d30 <main+0x60e>
			MDIO_Error_State_SetPinValue(PIN0, MDIO_PORTB, PIN_LOW);
    4ce0:	80 e0       	ldi	r24, 0x00	; 0
    4ce2:	61 e0       	ldi	r22, 0x01	; 1
    4ce4:	40 e0       	ldi	r20, 0x00	; 0
    4ce6:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN1, MDIO_PORTB, PIN_LOW);
    4cea:	81 e0       	ldi	r24, 0x01	; 1
    4cec:	61 e0       	ldi	r22, 0x01	; 1
    4cee:	40 e0       	ldi	r20, 0x00	; 0
    4cf0:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN2, MDIO_PORTB, PIN_LOW);
    4cf4:	82 e0       	ldi	r24, 0x02	; 2
    4cf6:	61 e0       	ldi	r22, 0x01	; 1
    4cf8:	40 e0       	ldi	r20, 0x00	; 0
    4cfa:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN3, MDIO_PORTB, PIN_LOW);
    4cfe:	83 e0       	ldi	r24, 0x03	; 3
    4d00:	61 e0       	ldi	r22, 0x01	; 1
    4d02:	40 e0       	ldi	r20, 0x00	; 0
    4d04:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN4, MDIO_PORTB, PIN_LOW);
    4d08:	84 e0       	ldi	r24, 0x04	; 4
    4d0a:	61 e0       	ldi	r22, 0x01	; 1
    4d0c:	40 e0       	ldi	r20, 0x00	; 0
    4d0e:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN5, MDIO_PORTB, PIN_LOW);
    4d12:	85 e0       	ldi	r24, 0x05	; 5
    4d14:	61 e0       	ldi	r22, 0x01	; 1
    4d16:	40 e0       	ldi	r20, 0x00	; 0
    4d18:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN6, MDIO_PORTB, PIN_LOW);
    4d1c:	86 e0       	ldi	r24, 0x06	; 6
    4d1e:	61 e0       	ldi	r22, 0x01	; 1
    4d20:	40 e0       	ldi	r20, 0x00	; 0
    4d22:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN7, MDIO_PORTB, PIN_LOW);
    4d26:	87 e0       	ldi	r24, 0x07	; 7
    4d28:	61 e0       	ldi	r22, 0x01	; 1
    4d2a:	40 e0       	ldi	r20, 0x00	; 0
    4d2c:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
		}
		if (temp > 10)
    4d30:	8b a5       	ldd	r24, Y+43	; 0x2b
    4d32:	8b 30       	cpi	r24, 0x0B	; 11
    4d34:	30 f0       	brcs	.+12     	; 0x4d42 <main+0x620>
		{
			MDIO_Error_State_SetPinValue(PIN3, MDIO_PORTC, PIN_HIGH);
    4d36:	83 e0       	ldi	r24, 0x03	; 3
    4d38:	62 e0       	ldi	r22, 0x02	; 2
    4d3a:	41 e0       	ldi	r20, 0x01	; 1
    4d3c:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
    4d40:	05 c0       	rjmp	.+10     	; 0x4d4c <main+0x62a>
		}
		else
		{
			MDIO_Error_State_SetPinValue(PIN3, MDIO_PORTC, PIN_LOW);
    4d42:	83 e0       	ldi	r24, 0x03	; 3
    4d44:	62 e0       	ldi	r22, 0x02	; 2
    4d46:	40 e0       	ldi	r20, 0x00	; 0
    4d48:	0e 94 9e 0a 	call	0x153c	; 0x153c <MDIO_Error_State_SetPinValue>
		}
		HCLCD_Vid4Bits_SetPosition(1, 0);
    4d4c:	81 e0       	ldi	r24, 0x01	; 1
    4d4e:	60 e0       	ldi	r22, 0x00	; 0
    4d50:	0e 94 65 1f 	call	0x3eca	; 0x3eca <HCLCD_Vid4Bits_SetPosition>
		HCLCD_Vid4Bits_DisplayString((u8*) "TEMP =");
    4d54:	8b e6       	ldi	r24, 0x6B	; 107
    4d56:	90 e0       	ldi	r25, 0x00	; 0
    4d58:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <HCLCD_Vid4Bits_DisplayString>
		HCLCD_Vid4Bits_DisplayNumber(temp);
    4d5c:	8b a5       	ldd	r24, Y+43	; 0x2b
    4d5e:	88 2f       	mov	r24, r24
    4d60:	90 e0       	ldi	r25, 0x00	; 0
    4d62:	a0 e0       	ldi	r26, 0x00	; 0
    4d64:	b0 e0       	ldi	r27, 0x00	; 0
    4d66:	bc 01       	movw	r22, r24
    4d68:	cd 01       	movw	r24, r26
    4d6a:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <HCLCD_Vid4Bits_DisplayNumber>
		HCLCD_Vid4Bits_DisplayString((u8*) "C");
    4d6e:	82 e7       	ldi	r24, 0x72	; 114
    4d70:	90 e0       	ldi	r25, 0x00	; 0
    4d72:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <HCLCD_Vid4Bits_DisplayString>
		HCLCD_Vid4Bits_SetPosition(2,0);
    4d76:	82 e0       	ldi	r24, 0x02	; 2
    4d78:	60 e0       	ldi	r22, 0x00	; 0
    4d7a:	0e 94 65 1f 	call	0x3eca	; 0x3eca <HCLCD_Vid4Bits_SetPosition>
		HCLCD_Vid4Bits_DisplayString((u8*) "PRESS TO LOGIN");
    4d7e:	84 e7       	ldi	r24, 0x74	; 116
    4d80:	90 e0       	ldi	r25, 0x00	; 0
    4d82:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <HCLCD_Vid4Bits_DisplayString>
    4d86:	80 e0       	ldi	r24, 0x00	; 0
    4d88:	90 e0       	ldi	r25, 0x00	; 0
    4d8a:	aa e7       	ldi	r26, 0x7A	; 122
    4d8c:	b4 e4       	ldi	r27, 0x44	; 68
    4d8e:	8b 87       	std	Y+11, r24	; 0x0b
    4d90:	9c 87       	std	Y+12, r25	; 0x0c
    4d92:	ad 87       	std	Y+13, r26	; 0x0d
    4d94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d96:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d98:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d9e:	20 e0       	ldi	r18, 0x00	; 0
    4da0:	30 e0       	ldi	r19, 0x00	; 0
    4da2:	4a ef       	ldi	r20, 0xFA	; 250
    4da4:	54 e4       	ldi	r21, 0x44	; 68
    4da6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4daa:	dc 01       	movw	r26, r24
    4dac:	cb 01       	movw	r24, r22
    4dae:	8f 83       	std	Y+7, r24	; 0x07
    4db0:	98 87       	std	Y+8, r25	; 0x08
    4db2:	a9 87       	std	Y+9, r26	; 0x09
    4db4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4db6:	6f 81       	ldd	r22, Y+7	; 0x07
    4db8:	78 85       	ldd	r23, Y+8	; 0x08
    4dba:	89 85       	ldd	r24, Y+9	; 0x09
    4dbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    4dbe:	20 e0       	ldi	r18, 0x00	; 0
    4dc0:	30 e0       	ldi	r19, 0x00	; 0
    4dc2:	40 e8       	ldi	r20, 0x80	; 128
    4dc4:	5f e3       	ldi	r21, 0x3F	; 63
    4dc6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4dca:	88 23       	and	r24, r24
    4dcc:	2c f4       	brge	.+10     	; 0x4dd8 <main+0x6b6>
		__ticks = 1;
    4dce:	81 e0       	ldi	r24, 0x01	; 1
    4dd0:	90 e0       	ldi	r25, 0x00	; 0
    4dd2:	9e 83       	std	Y+6, r25	; 0x06
    4dd4:	8d 83       	std	Y+5, r24	; 0x05
    4dd6:	3f c0       	rjmp	.+126    	; 0x4e56 <main+0x734>
	else if (__tmp > 65535)
    4dd8:	6f 81       	ldd	r22, Y+7	; 0x07
    4dda:	78 85       	ldd	r23, Y+8	; 0x08
    4ddc:	89 85       	ldd	r24, Y+9	; 0x09
    4dde:	9a 85       	ldd	r25, Y+10	; 0x0a
    4de0:	20 e0       	ldi	r18, 0x00	; 0
    4de2:	3f ef       	ldi	r19, 0xFF	; 255
    4de4:	4f e7       	ldi	r20, 0x7F	; 127
    4de6:	57 e4       	ldi	r21, 0x47	; 71
    4de8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4dec:	18 16       	cp	r1, r24
    4dee:	4c f5       	brge	.+82     	; 0x4e42 <main+0x720>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4df0:	6b 85       	ldd	r22, Y+11	; 0x0b
    4df2:	7c 85       	ldd	r23, Y+12	; 0x0c
    4df4:	8d 85       	ldd	r24, Y+13	; 0x0d
    4df6:	9e 85       	ldd	r25, Y+14	; 0x0e
    4df8:	20 e0       	ldi	r18, 0x00	; 0
    4dfa:	30 e0       	ldi	r19, 0x00	; 0
    4dfc:	40 e2       	ldi	r20, 0x20	; 32
    4dfe:	51 e4       	ldi	r21, 0x41	; 65
    4e00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e04:	dc 01       	movw	r26, r24
    4e06:	cb 01       	movw	r24, r22
    4e08:	bc 01       	movw	r22, r24
    4e0a:	cd 01       	movw	r24, r26
    4e0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e10:	dc 01       	movw	r26, r24
    4e12:	cb 01       	movw	r24, r22
    4e14:	9e 83       	std	Y+6, r25	; 0x06
    4e16:	8d 83       	std	Y+5, r24	; 0x05
    4e18:	0f c0       	rjmp	.+30     	; 0x4e38 <main+0x716>
    4e1a:	88 ec       	ldi	r24, 0xC8	; 200
    4e1c:	90 e0       	ldi	r25, 0x00	; 0
    4e1e:	9c 83       	std	Y+4, r25	; 0x04
    4e20:	8b 83       	std	Y+3, r24	; 0x03
    4e22:	8b 81       	ldd	r24, Y+3	; 0x03
    4e24:	9c 81       	ldd	r25, Y+4	; 0x04
    4e26:	01 97       	sbiw	r24, 0x01	; 1
    4e28:	f1 f7       	brne	.-4      	; 0x4e26 <main+0x704>
    4e2a:	9c 83       	std	Y+4, r25	; 0x04
    4e2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e2e:	8d 81       	ldd	r24, Y+5	; 0x05
    4e30:	9e 81       	ldd	r25, Y+6	; 0x06
    4e32:	01 97       	sbiw	r24, 0x01	; 1
    4e34:	9e 83       	std	Y+6, r25	; 0x06
    4e36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e38:	8d 81       	ldd	r24, Y+5	; 0x05
    4e3a:	9e 81       	ldd	r25, Y+6	; 0x06
    4e3c:	00 97       	sbiw	r24, 0x00	; 0
    4e3e:	69 f7       	brne	.-38     	; 0x4e1a <main+0x6f8>
    4e40:	14 c0       	rjmp	.+40     	; 0x4e6a <main+0x748>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e42:	6f 81       	ldd	r22, Y+7	; 0x07
    4e44:	78 85       	ldd	r23, Y+8	; 0x08
    4e46:	89 85       	ldd	r24, Y+9	; 0x09
    4e48:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e4e:	dc 01       	movw	r26, r24
    4e50:	cb 01       	movw	r24, r22
    4e52:	9e 83       	std	Y+6, r25	; 0x06
    4e54:	8d 83       	std	Y+5, r24	; 0x05
    4e56:	8d 81       	ldd	r24, Y+5	; 0x05
    4e58:	9e 81       	ldd	r25, Y+6	; 0x06
    4e5a:	9a 83       	std	Y+2, r25	; 0x02
    4e5c:	89 83       	std	Y+1, r24	; 0x01
    4e5e:	89 81       	ldd	r24, Y+1	; 0x01
    4e60:	9a 81       	ldd	r25, Y+2	; 0x02
    4e62:	01 97       	sbiw	r24, 0x01	; 1
    4e64:	f1 f7       	brne	.-4      	; 0x4e62 <main+0x740>
    4e66:	9a 83       	std	Y+2, r25	; 0x02
    4e68:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		HCLCD_Vid4Bits_ClearScreen();
    4e6a:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <HCLCD_Vid4Bits_ClearScreen>
    4e6e:	c5 cd       	rjmp	.-1142   	; 0x49fa <main+0x2d8>

00004e70 <ISR>:
	return 0;
}


void ISR(void)
{
    4e70:	df 93       	push	r29
    4e72:	cf 93       	push	r28
    4e74:	cd b7       	in	r28, 0x3d	; 61
    4e76:	de b7       	in	r29, 0x3e	; 62
    4e78:	e4 97       	sbiw	r28, 0x34	; 52
    4e7a:	0f b6       	in	r0, 0x3f	; 63
    4e7c:	f8 94       	cli
    4e7e:	de bf       	out	0x3e, r29	; 62
    4e80:	0f be       	out	0x3f, r0	; 63
    4e82:	cd bf       	out	0x3d, r28	; 61
	u8 PASSWORD[4];
	u8 temp_password;
	u8 Local_u8Counter = 0;
    4e84:	1f a6       	std	Y+47, r1	; 0x2f
	u16 PASSWORD_NUM;
	u8 Local_u8WrongPasswordCounter=0;
    4e86:	1c a6       	std	Y+44, r1	; 0x2c
	HCLCD_Vid4Bits_ClearScreen();
    4e88:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <HCLCD_Vid4Bits_ClearScreen>
    4e8c:	80 e0       	ldi	r24, 0x00	; 0
    4e8e:	90 e0       	ldi	r25, 0x00	; 0
    4e90:	aa e7       	ldi	r26, 0x7A	; 122
    4e92:	b4 e4       	ldi	r27, 0x44	; 68
    4e94:	8f a3       	std	Y+39, r24	; 0x27
    4e96:	98 a7       	std	Y+40, r25	; 0x28
    4e98:	a9 a7       	std	Y+41, r26	; 0x29
    4e9a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e9c:	6f a1       	ldd	r22, Y+39	; 0x27
    4e9e:	78 a5       	ldd	r23, Y+40	; 0x28
    4ea0:	89 a5       	ldd	r24, Y+41	; 0x29
    4ea2:	9a a5       	ldd	r25, Y+42	; 0x2a
    4ea4:	20 e0       	ldi	r18, 0x00	; 0
    4ea6:	30 e0       	ldi	r19, 0x00	; 0
    4ea8:	4a ef       	ldi	r20, 0xFA	; 250
    4eaa:	54 e4       	ldi	r21, 0x44	; 68
    4eac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4eb0:	dc 01       	movw	r26, r24
    4eb2:	cb 01       	movw	r24, r22
    4eb4:	8b a3       	std	Y+35, r24	; 0x23
    4eb6:	9c a3       	std	Y+36, r25	; 0x24
    4eb8:	ad a3       	std	Y+37, r26	; 0x25
    4eba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4ebc:	6b a1       	ldd	r22, Y+35	; 0x23
    4ebe:	7c a1       	ldd	r23, Y+36	; 0x24
    4ec0:	8d a1       	ldd	r24, Y+37	; 0x25
    4ec2:	9e a1       	ldd	r25, Y+38	; 0x26
    4ec4:	20 e0       	ldi	r18, 0x00	; 0
    4ec6:	30 e0       	ldi	r19, 0x00	; 0
    4ec8:	40 e8       	ldi	r20, 0x80	; 128
    4eca:	5f e3       	ldi	r21, 0x3F	; 63
    4ecc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4ed0:	88 23       	and	r24, r24
    4ed2:	2c f4       	brge	.+10     	; 0x4ede <ISR+0x6e>
		__ticks = 1;
    4ed4:	81 e0       	ldi	r24, 0x01	; 1
    4ed6:	90 e0       	ldi	r25, 0x00	; 0
    4ed8:	9a a3       	std	Y+34, r25	; 0x22
    4eda:	89 a3       	std	Y+33, r24	; 0x21
    4edc:	3f c0       	rjmp	.+126    	; 0x4f5c <ISR+0xec>
	else if (__tmp > 65535)
    4ede:	6b a1       	ldd	r22, Y+35	; 0x23
    4ee0:	7c a1       	ldd	r23, Y+36	; 0x24
    4ee2:	8d a1       	ldd	r24, Y+37	; 0x25
    4ee4:	9e a1       	ldd	r25, Y+38	; 0x26
    4ee6:	20 e0       	ldi	r18, 0x00	; 0
    4ee8:	3f ef       	ldi	r19, 0xFF	; 255
    4eea:	4f e7       	ldi	r20, 0x7F	; 127
    4eec:	57 e4       	ldi	r21, 0x47	; 71
    4eee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4ef2:	18 16       	cp	r1, r24
    4ef4:	4c f5       	brge	.+82     	; 0x4f48 <ISR+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ef6:	6f a1       	ldd	r22, Y+39	; 0x27
    4ef8:	78 a5       	ldd	r23, Y+40	; 0x28
    4efa:	89 a5       	ldd	r24, Y+41	; 0x29
    4efc:	9a a5       	ldd	r25, Y+42	; 0x2a
    4efe:	20 e0       	ldi	r18, 0x00	; 0
    4f00:	30 e0       	ldi	r19, 0x00	; 0
    4f02:	40 e2       	ldi	r20, 0x20	; 32
    4f04:	51 e4       	ldi	r21, 0x41	; 65
    4f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f0a:	dc 01       	movw	r26, r24
    4f0c:	cb 01       	movw	r24, r22
    4f0e:	bc 01       	movw	r22, r24
    4f10:	cd 01       	movw	r24, r26
    4f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f16:	dc 01       	movw	r26, r24
    4f18:	cb 01       	movw	r24, r22
    4f1a:	9a a3       	std	Y+34, r25	; 0x22
    4f1c:	89 a3       	std	Y+33, r24	; 0x21
    4f1e:	0f c0       	rjmp	.+30     	; 0x4f3e <ISR+0xce>
    4f20:	88 ec       	ldi	r24, 0xC8	; 200
    4f22:	90 e0       	ldi	r25, 0x00	; 0
    4f24:	98 a3       	std	Y+32, r25	; 0x20
    4f26:	8f 8f       	std	Y+31, r24	; 0x1f
    4f28:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4f2a:	98 a1       	ldd	r25, Y+32	; 0x20
    4f2c:	01 97       	sbiw	r24, 0x01	; 1
    4f2e:	f1 f7       	brne	.-4      	; 0x4f2c <ISR+0xbc>
    4f30:	98 a3       	std	Y+32, r25	; 0x20
    4f32:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f34:	89 a1       	ldd	r24, Y+33	; 0x21
    4f36:	9a a1       	ldd	r25, Y+34	; 0x22
    4f38:	01 97       	sbiw	r24, 0x01	; 1
    4f3a:	9a a3       	std	Y+34, r25	; 0x22
    4f3c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f3e:	89 a1       	ldd	r24, Y+33	; 0x21
    4f40:	9a a1       	ldd	r25, Y+34	; 0x22
    4f42:	00 97       	sbiw	r24, 0x00	; 0
    4f44:	69 f7       	brne	.-38     	; 0x4f20 <ISR+0xb0>
    4f46:	14 c0       	rjmp	.+40     	; 0x4f70 <ISR+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f48:	6b a1       	ldd	r22, Y+35	; 0x23
    4f4a:	7c a1       	ldd	r23, Y+36	; 0x24
    4f4c:	8d a1       	ldd	r24, Y+37	; 0x25
    4f4e:	9e a1       	ldd	r25, Y+38	; 0x26
    4f50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f54:	dc 01       	movw	r26, r24
    4f56:	cb 01       	movw	r24, r22
    4f58:	9a a3       	std	Y+34, r25	; 0x22
    4f5a:	89 a3       	std	Y+33, r24	; 0x21
    4f5c:	89 a1       	ldd	r24, Y+33	; 0x21
    4f5e:	9a a1       	ldd	r25, Y+34	; 0x22
    4f60:	9e 8f       	std	Y+30, r25	; 0x1e
    4f62:	8d 8f       	std	Y+29, r24	; 0x1d
    4f64:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4f66:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4f68:	01 97       	sbiw	r24, 0x01	; 1
    4f6a:	f1 f7       	brne	.-4      	; 0x4f68 <ISR+0xf8>
    4f6c:	9e 8f       	std	Y+30, r25	; 0x1e
    4f6e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	HCLCD_Vid4Bits_SetPosition(1, 0);
    4f70:	81 e0       	ldi	r24, 0x01	; 1
    4f72:	60 e0       	ldi	r22, 0x00	; 0
    4f74:	0e 94 65 1f 	call	0x3eca	; 0x3eca <HCLCD_Vid4Bits_SetPosition>

	HCLCD_Vid4Bits_DisplayString((u8*) "ENTER PASSWORD");
    4f78:	83 e8       	ldi	r24, 0x83	; 131
    4f7a:	90 e0       	ldi	r25, 0x00	; 0
    4f7c:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <HCLCD_Vid4Bits_DisplayString>



		do
		{
			KPD_u8GetSwitch(&temp_password);
    4f80:	ce 01       	movw	r24, r28
    4f82:	c4 96       	adiw	r24, 0x34	; 52
    4f84:	0e 94 bd 10 	call	0x217a	; 0x217a <KPD_u8GetSwitch>
    4f88:	80 e0       	ldi	r24, 0x00	; 0
    4f8a:	90 e0       	ldi	r25, 0x00	; 0
    4f8c:	a0 ea       	ldi	r26, 0xA0	; 160
    4f8e:	b1 e4       	ldi	r27, 0x41	; 65
    4f90:	89 8f       	std	Y+25, r24	; 0x19
    4f92:	9a 8f       	std	Y+26, r25	; 0x1a
    4f94:	ab 8f       	std	Y+27, r26	; 0x1b
    4f96:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f98:	69 8d       	ldd	r22, Y+25	; 0x19
    4f9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4f9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4f9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4fa0:	20 e0       	ldi	r18, 0x00	; 0
    4fa2:	30 e0       	ldi	r19, 0x00	; 0
    4fa4:	4a ef       	ldi	r20, 0xFA	; 250
    4fa6:	54 e4       	ldi	r21, 0x44	; 68
    4fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fac:	dc 01       	movw	r26, r24
    4fae:	cb 01       	movw	r24, r22
    4fb0:	8d 8b       	std	Y+21, r24	; 0x15
    4fb2:	9e 8b       	std	Y+22, r25	; 0x16
    4fb4:	af 8b       	std	Y+23, r26	; 0x17
    4fb6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4fb8:	6d 89       	ldd	r22, Y+21	; 0x15
    4fba:	7e 89       	ldd	r23, Y+22	; 0x16
    4fbc:	8f 89       	ldd	r24, Y+23	; 0x17
    4fbe:	98 8d       	ldd	r25, Y+24	; 0x18
    4fc0:	20 e0       	ldi	r18, 0x00	; 0
    4fc2:	30 e0       	ldi	r19, 0x00	; 0
    4fc4:	40 e8       	ldi	r20, 0x80	; 128
    4fc6:	5f e3       	ldi	r21, 0x3F	; 63
    4fc8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4fcc:	88 23       	and	r24, r24
    4fce:	2c f4       	brge	.+10     	; 0x4fda <ISR+0x16a>
		__ticks = 1;
    4fd0:	81 e0       	ldi	r24, 0x01	; 1
    4fd2:	90 e0       	ldi	r25, 0x00	; 0
    4fd4:	9c 8b       	std	Y+20, r25	; 0x14
    4fd6:	8b 8b       	std	Y+19, r24	; 0x13
    4fd8:	3f c0       	rjmp	.+126    	; 0x5058 <ISR+0x1e8>
	else if (__tmp > 65535)
    4fda:	6d 89       	ldd	r22, Y+21	; 0x15
    4fdc:	7e 89       	ldd	r23, Y+22	; 0x16
    4fde:	8f 89       	ldd	r24, Y+23	; 0x17
    4fe0:	98 8d       	ldd	r25, Y+24	; 0x18
    4fe2:	20 e0       	ldi	r18, 0x00	; 0
    4fe4:	3f ef       	ldi	r19, 0xFF	; 255
    4fe6:	4f e7       	ldi	r20, 0x7F	; 127
    4fe8:	57 e4       	ldi	r21, 0x47	; 71
    4fea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4fee:	18 16       	cp	r1, r24
    4ff0:	4c f5       	brge	.+82     	; 0x5044 <ISR+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ff2:	69 8d       	ldd	r22, Y+25	; 0x19
    4ff4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4ff6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4ff8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ffa:	20 e0       	ldi	r18, 0x00	; 0
    4ffc:	30 e0       	ldi	r19, 0x00	; 0
    4ffe:	40 e2       	ldi	r20, 0x20	; 32
    5000:	51 e4       	ldi	r21, 0x41	; 65
    5002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5006:	dc 01       	movw	r26, r24
    5008:	cb 01       	movw	r24, r22
    500a:	bc 01       	movw	r22, r24
    500c:	cd 01       	movw	r24, r26
    500e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5012:	dc 01       	movw	r26, r24
    5014:	cb 01       	movw	r24, r22
    5016:	9c 8b       	std	Y+20, r25	; 0x14
    5018:	8b 8b       	std	Y+19, r24	; 0x13
    501a:	0f c0       	rjmp	.+30     	; 0x503a <ISR+0x1ca>
    501c:	88 ec       	ldi	r24, 0xC8	; 200
    501e:	90 e0       	ldi	r25, 0x00	; 0
    5020:	9a 8b       	std	Y+18, r25	; 0x12
    5022:	89 8b       	std	Y+17, r24	; 0x11
    5024:	89 89       	ldd	r24, Y+17	; 0x11
    5026:	9a 89       	ldd	r25, Y+18	; 0x12
    5028:	01 97       	sbiw	r24, 0x01	; 1
    502a:	f1 f7       	brne	.-4      	; 0x5028 <ISR+0x1b8>
    502c:	9a 8b       	std	Y+18, r25	; 0x12
    502e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5030:	8b 89       	ldd	r24, Y+19	; 0x13
    5032:	9c 89       	ldd	r25, Y+20	; 0x14
    5034:	01 97       	sbiw	r24, 0x01	; 1
    5036:	9c 8b       	std	Y+20, r25	; 0x14
    5038:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    503a:	8b 89       	ldd	r24, Y+19	; 0x13
    503c:	9c 89       	ldd	r25, Y+20	; 0x14
    503e:	00 97       	sbiw	r24, 0x00	; 0
    5040:	69 f7       	brne	.-38     	; 0x501c <ISR+0x1ac>
    5042:	14 c0       	rjmp	.+40     	; 0x506c <ISR+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5044:	6d 89       	ldd	r22, Y+21	; 0x15
    5046:	7e 89       	ldd	r23, Y+22	; 0x16
    5048:	8f 89       	ldd	r24, Y+23	; 0x17
    504a:	98 8d       	ldd	r25, Y+24	; 0x18
    504c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5050:	dc 01       	movw	r26, r24
    5052:	cb 01       	movw	r24, r22
    5054:	9c 8b       	std	Y+20, r25	; 0x14
    5056:	8b 8b       	std	Y+19, r24	; 0x13
    5058:	8b 89       	ldd	r24, Y+19	; 0x13
    505a:	9c 89       	ldd	r25, Y+20	; 0x14
    505c:	98 8b       	std	Y+16, r25	; 0x10
    505e:	8f 87       	std	Y+15, r24	; 0x0f
    5060:	8f 85       	ldd	r24, Y+15	; 0x0f
    5062:	98 89       	ldd	r25, Y+16	; 0x10
    5064:	01 97       	sbiw	r24, 0x01	; 1
    5066:	f1 f7       	brne	.-4      	; 0x5064 <ISR+0x1f4>
    5068:	98 8b       	std	Y+16, r25	; 0x10
    506a:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(20);
			if(temp_password != 0xff)
    506c:	8c a9       	ldd	r24, Y+52	; 0x34
    506e:	8f 3f       	cpi	r24, 0xFF	; 255
    5070:	f9 f0       	breq	.+62     	; 0x50b0 <ISR+0x240>
			{
				HCLCD_Vid4Bits_SetPosition(2, Local_u8Counter);
    5072:	82 e0       	ldi	r24, 0x02	; 2
    5074:	6f a5       	ldd	r22, Y+47	; 0x2f
    5076:	0e 94 65 1f 	call	0x3eca	; 0x3eca <HCLCD_Vid4Bits_SetPosition>
				HCLCD_Vid4Bits_DisplayNumber(temp_password-48);
    507a:	8c a9       	ldd	r24, Y+52	; 0x34
    507c:	88 2f       	mov	r24, r24
    507e:	90 e0       	ldi	r25, 0x00	; 0
    5080:	c0 97       	sbiw	r24, 0x30	; 48
    5082:	aa 27       	eor	r26, r26
    5084:	97 fd       	sbrc	r25, 7
    5086:	a0 95       	com	r26
    5088:	ba 2f       	mov	r27, r26
    508a:	bc 01       	movw	r22, r24
    508c:	cd 01       	movw	r24, r26
    508e:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <HCLCD_Vid4Bits_DisplayNumber>
				PASSWORD[Local_u8Counter]=(temp_password-48);
    5092:	8f a5       	ldd	r24, Y+47	; 0x2f
    5094:	28 2f       	mov	r18, r24
    5096:	30 e0       	ldi	r19, 0x00	; 0
    5098:	8c a9       	ldd	r24, Y+52	; 0x34
    509a:	48 2f       	mov	r20, r24
    509c:	40 53       	subi	r20, 0x30	; 48
    509e:	ce 01       	movw	r24, r28
    50a0:	c0 96       	adiw	r24, 0x30	; 48
    50a2:	fc 01       	movw	r30, r24
    50a4:	e2 0f       	add	r30, r18
    50a6:	f3 1f       	adc	r31, r19
    50a8:	40 83       	st	Z, r20
				Local_u8Counter++;
    50aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    50ac:	8f 5f       	subi	r24, 0xFF	; 255
    50ae:	8f a7       	std	Y+47, r24	; 0x2f
			}

		}
		while (Local_u8Counter <4);
    50b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    50b2:	84 30       	cpi	r24, 0x04	; 4
    50b4:	08 f4       	brcc	.+2      	; 0x50b8 <ISR+0x248>
    50b6:	64 cf       	rjmp	.-312    	; 0x4f80 <ISR+0x110>

		u8 i = 0;
    50b8:	1b a6       	std	Y+43, r1	; 0x2b
		for (i = 0; i < 4; i++)
    50ba:	1b a6       	std	Y+43, r1	; 0x2b
    50bc:	1f c0       	rjmp	.+62     	; 0x50fc <ISR+0x28c>
		{
			PASSWORD_NUM = (10 * PASSWORD_NUM + PASSWORD[i]);
    50be:	8d a5       	ldd	r24, Y+45	; 0x2d
    50c0:	9e a5       	ldd	r25, Y+46	; 0x2e
    50c2:	9c 01       	movw	r18, r24
    50c4:	22 0f       	add	r18, r18
    50c6:	33 1f       	adc	r19, r19
    50c8:	c9 01       	movw	r24, r18
    50ca:	88 0f       	add	r24, r24
    50cc:	99 1f       	adc	r25, r25
    50ce:	88 0f       	add	r24, r24
    50d0:	99 1f       	adc	r25, r25
    50d2:	a9 01       	movw	r20, r18
    50d4:	48 0f       	add	r20, r24
    50d6:	59 1f       	adc	r21, r25
    50d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    50da:	28 2f       	mov	r18, r24
    50dc:	30 e0       	ldi	r19, 0x00	; 0
    50de:	ce 01       	movw	r24, r28
    50e0:	c0 96       	adiw	r24, 0x30	; 48
    50e2:	fc 01       	movw	r30, r24
    50e4:	e2 0f       	add	r30, r18
    50e6:	f3 1f       	adc	r31, r19
    50e8:	80 81       	ld	r24, Z
    50ea:	88 2f       	mov	r24, r24
    50ec:	90 e0       	ldi	r25, 0x00	; 0
    50ee:	84 0f       	add	r24, r20
    50f0:	95 1f       	adc	r25, r21
    50f2:	9e a7       	std	Y+46, r25	; 0x2e
    50f4:	8d a7       	std	Y+45, r24	; 0x2d

		}
		while (Local_u8Counter <4);

		u8 i = 0;
		for (i = 0; i < 4; i++)
    50f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    50f8:	8f 5f       	subi	r24, 0xFF	; 255
    50fa:	8b a7       	std	Y+43, r24	; 0x2b
    50fc:	8b a5       	ldd	r24, Y+43	; 0x2b
    50fe:	84 30       	cpi	r24, 0x04	; 4
    5100:	f0 f2       	brcs	.-68     	; 0x50be <ISR+0x24e>
		{
			PASSWORD_NUM = (10 * PASSWORD_NUM + PASSWORD[i]);
		}

		HCLCD_Vid4Bits_ClearScreen();
    5102:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <HCLCD_Vid4Bits_ClearScreen>
		HCLCD_Vid4Bits_DisplayNumber(PASSWORD_NUM);
    5106:	8d a5       	ldd	r24, Y+45	; 0x2d
    5108:	9e a5       	ldd	r25, Y+46	; 0x2e
    510a:	cc 01       	movw	r24, r24
    510c:	a0 e0       	ldi	r26, 0x00	; 0
    510e:	b0 e0       	ldi	r27, 0x00	; 0
    5110:	bc 01       	movw	r22, r24
    5112:	cd 01       	movw	r24, r26
    5114:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <HCLCD_Vid4Bits_DisplayNumber>
    5118:	80 e0       	ldi	r24, 0x00	; 0
    511a:	90 e4       	ldi	r25, 0x40	; 64
    511c:	ac e9       	ldi	r26, 0x9C	; 156
    511e:	b5 e4       	ldi	r27, 0x45	; 69
    5120:	8b 87       	std	Y+11, r24	; 0x0b
    5122:	9c 87       	std	Y+12, r25	; 0x0c
    5124:	ad 87       	std	Y+13, r26	; 0x0d
    5126:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5128:	6b 85       	ldd	r22, Y+11	; 0x0b
    512a:	7c 85       	ldd	r23, Y+12	; 0x0c
    512c:	8d 85       	ldd	r24, Y+13	; 0x0d
    512e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5130:	20 e0       	ldi	r18, 0x00	; 0
    5132:	30 e0       	ldi	r19, 0x00	; 0
    5134:	4a ef       	ldi	r20, 0xFA	; 250
    5136:	54 e4       	ldi	r21, 0x44	; 68
    5138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    513c:	dc 01       	movw	r26, r24
    513e:	cb 01       	movw	r24, r22
    5140:	8f 83       	std	Y+7, r24	; 0x07
    5142:	98 87       	std	Y+8, r25	; 0x08
    5144:	a9 87       	std	Y+9, r26	; 0x09
    5146:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5148:	6f 81       	ldd	r22, Y+7	; 0x07
    514a:	78 85       	ldd	r23, Y+8	; 0x08
    514c:	89 85       	ldd	r24, Y+9	; 0x09
    514e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5150:	20 e0       	ldi	r18, 0x00	; 0
    5152:	30 e0       	ldi	r19, 0x00	; 0
    5154:	40 e8       	ldi	r20, 0x80	; 128
    5156:	5f e3       	ldi	r21, 0x3F	; 63
    5158:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    515c:	88 23       	and	r24, r24
    515e:	2c f4       	brge	.+10     	; 0x516a <ISR+0x2fa>
		__ticks = 1;
    5160:	81 e0       	ldi	r24, 0x01	; 1
    5162:	90 e0       	ldi	r25, 0x00	; 0
    5164:	9e 83       	std	Y+6, r25	; 0x06
    5166:	8d 83       	std	Y+5, r24	; 0x05
    5168:	3f c0       	rjmp	.+126    	; 0x51e8 <ISR+0x378>
	else if (__tmp > 65535)
    516a:	6f 81       	ldd	r22, Y+7	; 0x07
    516c:	78 85       	ldd	r23, Y+8	; 0x08
    516e:	89 85       	ldd	r24, Y+9	; 0x09
    5170:	9a 85       	ldd	r25, Y+10	; 0x0a
    5172:	20 e0       	ldi	r18, 0x00	; 0
    5174:	3f ef       	ldi	r19, 0xFF	; 255
    5176:	4f e7       	ldi	r20, 0x7F	; 127
    5178:	57 e4       	ldi	r21, 0x47	; 71
    517a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    517e:	18 16       	cp	r1, r24
    5180:	4c f5       	brge	.+82     	; 0x51d4 <ISR+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5182:	6b 85       	ldd	r22, Y+11	; 0x0b
    5184:	7c 85       	ldd	r23, Y+12	; 0x0c
    5186:	8d 85       	ldd	r24, Y+13	; 0x0d
    5188:	9e 85       	ldd	r25, Y+14	; 0x0e
    518a:	20 e0       	ldi	r18, 0x00	; 0
    518c:	30 e0       	ldi	r19, 0x00	; 0
    518e:	40 e2       	ldi	r20, 0x20	; 32
    5190:	51 e4       	ldi	r21, 0x41	; 65
    5192:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5196:	dc 01       	movw	r26, r24
    5198:	cb 01       	movw	r24, r22
    519a:	bc 01       	movw	r22, r24
    519c:	cd 01       	movw	r24, r26
    519e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51a2:	dc 01       	movw	r26, r24
    51a4:	cb 01       	movw	r24, r22
    51a6:	9e 83       	std	Y+6, r25	; 0x06
    51a8:	8d 83       	std	Y+5, r24	; 0x05
    51aa:	0f c0       	rjmp	.+30     	; 0x51ca <ISR+0x35a>
    51ac:	88 ec       	ldi	r24, 0xC8	; 200
    51ae:	90 e0       	ldi	r25, 0x00	; 0
    51b0:	9c 83       	std	Y+4, r25	; 0x04
    51b2:	8b 83       	std	Y+3, r24	; 0x03
    51b4:	8b 81       	ldd	r24, Y+3	; 0x03
    51b6:	9c 81       	ldd	r25, Y+4	; 0x04
    51b8:	01 97       	sbiw	r24, 0x01	; 1
    51ba:	f1 f7       	brne	.-4      	; 0x51b8 <ISR+0x348>
    51bc:	9c 83       	std	Y+4, r25	; 0x04
    51be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51c0:	8d 81       	ldd	r24, Y+5	; 0x05
    51c2:	9e 81       	ldd	r25, Y+6	; 0x06
    51c4:	01 97       	sbiw	r24, 0x01	; 1
    51c6:	9e 83       	std	Y+6, r25	; 0x06
    51c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51ca:	8d 81       	ldd	r24, Y+5	; 0x05
    51cc:	9e 81       	ldd	r25, Y+6	; 0x06
    51ce:	00 97       	sbiw	r24, 0x00	; 0
    51d0:	69 f7       	brne	.-38     	; 0x51ac <ISR+0x33c>
    51d2:	29 c0       	rjmp	.+82     	; 0x5226 <ISR+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51d4:	6f 81       	ldd	r22, Y+7	; 0x07
    51d6:	78 85       	ldd	r23, Y+8	; 0x08
    51d8:	89 85       	ldd	r24, Y+9	; 0x09
    51da:	9a 85       	ldd	r25, Y+10	; 0x0a
    51dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51e0:	dc 01       	movw	r26, r24
    51e2:	cb 01       	movw	r24, r22
    51e4:	9e 83       	std	Y+6, r25	; 0x06
    51e6:	8d 83       	std	Y+5, r24	; 0x05
    51e8:	8d 81       	ldd	r24, Y+5	; 0x05
    51ea:	9e 81       	ldd	r25, Y+6	; 0x06
    51ec:	9a 83       	std	Y+2, r25	; 0x02
    51ee:	89 83       	std	Y+1, r24	; 0x01
    51f0:	89 81       	ldd	r24, Y+1	; 0x01
    51f2:	9a 81       	ldd	r25, Y+2	; 0x02
    51f4:	01 97       	sbiw	r24, 0x01	; 1
    51f6:	f1 f7       	brne	.-4      	; 0x51f4 <ISR+0x384>
    51f8:	9a 83       	std	Y+2, r25	; 0x02
    51fa:	89 83       	std	Y+1, r24	; 0x01
    51fc:	14 c0       	rjmp	.+40     	; 0x5226 <ISR+0x3b6>
		_delay_ms(5000);

		while(Local_u8WrongPasswordCounter < 3)
		{
			if(PASSWORD_NUM == 1233)
    51fe:	8d a5       	ldd	r24, Y+45	; 0x2d
    5200:	9e a5       	ldd	r25, Y+46	; 0x2e
    5202:	24 e0       	ldi	r18, 0x04	; 4
    5204:	81 3d       	cpi	r24, 0xD1	; 209
    5206:	92 07       	cpc	r25, r18
    5208:	29 f4       	brne	.+10     	; 0x5214 <ISR+0x3a4>
			{
				TMR_voidTimer1SetCompareMatchValueChannelA(750);
    520a:	8e ee       	ldi	r24, 0xEE	; 238
    520c:	92 e0       	ldi	r25, 0x02	; 2
    520e:	0e 94 95 08 	call	0x112a	; 0x112a <TMR_voidTimer1SetCompareMatchValueChannelA>
    5212:	0c c0       	rjmp	.+24     	; 0x522c <ISR+0x3bc>
				break;
			}
			else
			{
				Local_u8WrongPasswordCounter++;
    5214:	8c a5       	ldd	r24, Y+44	; 0x2c
    5216:	8f 5f       	subi	r24, 0xFF	; 255
    5218:	8c a7       	std	Y+44, r24	; 0x2c
				HCLCD_Vid4Bits_ClearScreen();
    521a:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <HCLCD_Vid4Bits_ClearScreen>
				HCLCD_Vid4Bits_DisplayString((u8*) "WRONG PASSWORD");
    521e:	82 e9       	ldi	r24, 0x92	; 146
    5220:	90 e0       	ldi	r25, 0x00	; 0
    5222:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <HCLCD_Vid4Bits_DisplayString>

		HCLCD_Vid4Bits_ClearScreen();
		HCLCD_Vid4Bits_DisplayNumber(PASSWORD_NUM);
		_delay_ms(5000);

		while(Local_u8WrongPasswordCounter < 3)
    5226:	8c a5       	ldd	r24, Y+44	; 0x2c
    5228:	83 30       	cpi	r24, 0x03	; 3
    522a:	48 f3       	brcs	.-46     	; 0x51fe <ISR+0x38e>
			// turn on buzzer
		}



}
    522c:	e4 96       	adiw	r28, 0x34	; 52
    522e:	0f b6       	in	r0, 0x3f	; 63
    5230:	f8 94       	cli
    5232:	de bf       	out	0x3e, r29	; 62
    5234:	0f be       	out	0x3f, r0	; 63
    5236:	cd bf       	out	0x3d, r28	; 61
    5238:	cf 91       	pop	r28
    523a:	df 91       	pop	r29
    523c:	08 95       	ret

0000523e <__mulsi3>:
    523e:	62 9f       	mul	r22, r18
    5240:	d0 01       	movw	r26, r0
    5242:	73 9f       	mul	r23, r19
    5244:	f0 01       	movw	r30, r0
    5246:	82 9f       	mul	r24, r18
    5248:	e0 0d       	add	r30, r0
    524a:	f1 1d       	adc	r31, r1
    524c:	64 9f       	mul	r22, r20
    524e:	e0 0d       	add	r30, r0
    5250:	f1 1d       	adc	r31, r1
    5252:	92 9f       	mul	r25, r18
    5254:	f0 0d       	add	r31, r0
    5256:	83 9f       	mul	r24, r19
    5258:	f0 0d       	add	r31, r0
    525a:	74 9f       	mul	r23, r20
    525c:	f0 0d       	add	r31, r0
    525e:	65 9f       	mul	r22, r21
    5260:	f0 0d       	add	r31, r0
    5262:	99 27       	eor	r25, r25
    5264:	72 9f       	mul	r23, r18
    5266:	b0 0d       	add	r27, r0
    5268:	e1 1d       	adc	r30, r1
    526a:	f9 1f       	adc	r31, r25
    526c:	63 9f       	mul	r22, r19
    526e:	b0 0d       	add	r27, r0
    5270:	e1 1d       	adc	r30, r1
    5272:	f9 1f       	adc	r31, r25
    5274:	bd 01       	movw	r22, r26
    5276:	cf 01       	movw	r24, r30
    5278:	11 24       	eor	r1, r1
    527a:	08 95       	ret

0000527c <__udivmodhi4>:
    527c:	aa 1b       	sub	r26, r26
    527e:	bb 1b       	sub	r27, r27
    5280:	51 e1       	ldi	r21, 0x11	; 17
    5282:	07 c0       	rjmp	.+14     	; 0x5292 <__udivmodhi4_ep>

00005284 <__udivmodhi4_loop>:
    5284:	aa 1f       	adc	r26, r26
    5286:	bb 1f       	adc	r27, r27
    5288:	a6 17       	cp	r26, r22
    528a:	b7 07       	cpc	r27, r23
    528c:	10 f0       	brcs	.+4      	; 0x5292 <__udivmodhi4_ep>
    528e:	a6 1b       	sub	r26, r22
    5290:	b7 0b       	sbc	r27, r23

00005292 <__udivmodhi4_ep>:
    5292:	88 1f       	adc	r24, r24
    5294:	99 1f       	adc	r25, r25
    5296:	5a 95       	dec	r21
    5298:	a9 f7       	brne	.-22     	; 0x5284 <__udivmodhi4_loop>
    529a:	80 95       	com	r24
    529c:	90 95       	com	r25
    529e:	bc 01       	movw	r22, r24
    52a0:	cd 01       	movw	r24, r26
    52a2:	08 95       	ret

000052a4 <__udivmodsi4>:
    52a4:	a1 e2       	ldi	r26, 0x21	; 33
    52a6:	1a 2e       	mov	r1, r26
    52a8:	aa 1b       	sub	r26, r26
    52aa:	bb 1b       	sub	r27, r27
    52ac:	fd 01       	movw	r30, r26
    52ae:	0d c0       	rjmp	.+26     	; 0x52ca <__udivmodsi4_ep>

000052b0 <__udivmodsi4_loop>:
    52b0:	aa 1f       	adc	r26, r26
    52b2:	bb 1f       	adc	r27, r27
    52b4:	ee 1f       	adc	r30, r30
    52b6:	ff 1f       	adc	r31, r31
    52b8:	a2 17       	cp	r26, r18
    52ba:	b3 07       	cpc	r27, r19
    52bc:	e4 07       	cpc	r30, r20
    52be:	f5 07       	cpc	r31, r21
    52c0:	20 f0       	brcs	.+8      	; 0x52ca <__udivmodsi4_ep>
    52c2:	a2 1b       	sub	r26, r18
    52c4:	b3 0b       	sbc	r27, r19
    52c6:	e4 0b       	sbc	r30, r20
    52c8:	f5 0b       	sbc	r31, r21

000052ca <__udivmodsi4_ep>:
    52ca:	66 1f       	adc	r22, r22
    52cc:	77 1f       	adc	r23, r23
    52ce:	88 1f       	adc	r24, r24
    52d0:	99 1f       	adc	r25, r25
    52d2:	1a 94       	dec	r1
    52d4:	69 f7       	brne	.-38     	; 0x52b0 <__udivmodsi4_loop>
    52d6:	60 95       	com	r22
    52d8:	70 95       	com	r23
    52da:	80 95       	com	r24
    52dc:	90 95       	com	r25
    52de:	9b 01       	movw	r18, r22
    52e0:	ac 01       	movw	r20, r24
    52e2:	bd 01       	movw	r22, r26
    52e4:	cf 01       	movw	r24, r30
    52e6:	08 95       	ret

000052e8 <__prologue_saves__>:
    52e8:	2f 92       	push	r2
    52ea:	3f 92       	push	r3
    52ec:	4f 92       	push	r4
    52ee:	5f 92       	push	r5
    52f0:	6f 92       	push	r6
    52f2:	7f 92       	push	r7
    52f4:	8f 92       	push	r8
    52f6:	9f 92       	push	r9
    52f8:	af 92       	push	r10
    52fa:	bf 92       	push	r11
    52fc:	cf 92       	push	r12
    52fe:	df 92       	push	r13
    5300:	ef 92       	push	r14
    5302:	ff 92       	push	r15
    5304:	0f 93       	push	r16
    5306:	1f 93       	push	r17
    5308:	cf 93       	push	r28
    530a:	df 93       	push	r29
    530c:	cd b7       	in	r28, 0x3d	; 61
    530e:	de b7       	in	r29, 0x3e	; 62
    5310:	ca 1b       	sub	r28, r26
    5312:	db 0b       	sbc	r29, r27
    5314:	0f b6       	in	r0, 0x3f	; 63
    5316:	f8 94       	cli
    5318:	de bf       	out	0x3e, r29	; 62
    531a:	0f be       	out	0x3f, r0	; 63
    531c:	cd bf       	out	0x3d, r28	; 61
    531e:	09 94       	ijmp

00005320 <__epilogue_restores__>:
    5320:	2a 88       	ldd	r2, Y+18	; 0x12
    5322:	39 88       	ldd	r3, Y+17	; 0x11
    5324:	48 88       	ldd	r4, Y+16	; 0x10
    5326:	5f 84       	ldd	r5, Y+15	; 0x0f
    5328:	6e 84       	ldd	r6, Y+14	; 0x0e
    532a:	7d 84       	ldd	r7, Y+13	; 0x0d
    532c:	8c 84       	ldd	r8, Y+12	; 0x0c
    532e:	9b 84       	ldd	r9, Y+11	; 0x0b
    5330:	aa 84       	ldd	r10, Y+10	; 0x0a
    5332:	b9 84       	ldd	r11, Y+9	; 0x09
    5334:	c8 84       	ldd	r12, Y+8	; 0x08
    5336:	df 80       	ldd	r13, Y+7	; 0x07
    5338:	ee 80       	ldd	r14, Y+6	; 0x06
    533a:	fd 80       	ldd	r15, Y+5	; 0x05
    533c:	0c 81       	ldd	r16, Y+4	; 0x04
    533e:	1b 81       	ldd	r17, Y+3	; 0x03
    5340:	aa 81       	ldd	r26, Y+2	; 0x02
    5342:	b9 81       	ldd	r27, Y+1	; 0x01
    5344:	ce 0f       	add	r28, r30
    5346:	d1 1d       	adc	r29, r1
    5348:	0f b6       	in	r0, 0x3f	; 63
    534a:	f8 94       	cli
    534c:	de bf       	out	0x3e, r29	; 62
    534e:	0f be       	out	0x3f, r0	; 63
    5350:	cd bf       	out	0x3d, r28	; 61
    5352:	ed 01       	movw	r28, r26
    5354:	08 95       	ret

00005356 <_exit>:
    5356:	f8 94       	cli

00005358 <__stop_program>:
    5358:	ff cf       	rjmp	.-2      	; 0x5358 <__stop_program>
