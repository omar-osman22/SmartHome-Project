
Temp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004806  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  00004806  0000489a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080009c  0080009c  000048d6  2**0
                  ALLOC
  3 .stab         0000501c  00000000  00000000  000048d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001d16  00000000  00000000  000098f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000b60a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000b74a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000b8ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000d503  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000e3ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000f19c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000f2fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000f589  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000fd57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 bf 08 	jmp	0x117e	; 0x117e <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 4c 07 	jmp	0xe98	; 0xe98 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 1f 07 	jmp	0xe3e	; 0xe3e <__vector_9>
      28:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__vector_10>
      2c:	0c 94 14 06 	jmp	0xc28	; 0xc28 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e0       	ldi	r30, 0x06	; 6
      68:	f8 e4       	ldi	r31, 0x48	; 72
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3a       	cpi	r26, 0xA5	; 165
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 33 20 	call	0x4066	; 0x4066 <main>
      8a:	0c 94 01 24 	jmp	0x4802	; 0x4802 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ca 23 	jmp	0x4794	; 0x4794 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e8       	ldi	r26, 0x83	; 131
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e6 23 	jmp	0x47cc	; 0x47cc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d6 23 	jmp	0x47ac	; 0x47ac <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f2 23 	jmp	0x47e4	; 0x47e4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d6 23 	jmp	0x47ac	; 0x47ac <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f2 23 	jmp	0x47e4	; 0x47e4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ca 23 	jmp	0x4794	; 0x4794 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e8       	ldi	r24, 0x83	; 131
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e6 23 	jmp	0x47cc	; 0x47cc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d6 23 	jmp	0x47ac	; 0x47ac <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f2 23 	jmp	0x47e4	; 0x47e4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d6 23 	jmp	0x47ac	; 0x47ac <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f2 23 	jmp	0x47e4	; 0x47e4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d6 23 	jmp	0x47ac	; 0x47ac <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f2 23 	jmp	0x47e4	; 0x47e4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 da 23 	jmp	0x47b4	; 0x47b4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f6 23 	jmp	0x47ec	; 0x47ec <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MTIMER0_VidInit>:
void (*TIMER1_CallBack)(void);

void (*TIMER1_ICF_CallBack)(void);
/*Timer0 Initialization*/
void MTIMER0_VidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*Select the suitable Prescaler*/
	TCCR0&=0xF8;  //Bit masking
     b4e:	a3 e5       	ldi	r26, 0x53	; 83
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e3 e5       	ldi	r30, 0x53	; 83
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	88 7f       	andi	r24, 0xF8	; 248
     b5a:	8c 93       	st	X, r24
	TCCR0|=TIMER_SET_PRESCALER;
     b5c:	a3 e5       	ldi	r26, 0x53	; 83
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e3 e5       	ldi	r30, 0x53	; 83
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	83 60       	ori	r24, 0x03	; 3
     b68:	8c 93       	st	X, r24

#else
#error      "TIMER0 CTC Mode OC0 PIN is not valid ..."
#endif
#elif TIMER0_SET_MODE == TIMER0_PHASECORRECT_PWM_MODE
	SET_BIT(TCCR0,6);
     b6a:	a3 e5       	ldi	r26, 0x53	; 83
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e3 e5       	ldi	r30, 0x53	; 83
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 64       	ori	r24, 0x40	; 64
     b76:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,3);
     b78:	a3 e5       	ldi	r26, 0x53	; 83
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e3 e5       	ldi	r30, 0x53	; 83
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	87 7f       	andi	r24, 0xF7	; 247
     b84:	8c 93       	st	X, r24
#if   TIMER0_SET_PWM_MODE == TIMER0_NON_INVERTING_PWM
	SET_BIT(TCCR0,5);
     b86:	a3 e5       	ldi	r26, 0x53	; 83
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e3 e5       	ldi	r30, 0x53	; 83
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	80 62       	ori	r24, 0x20	; 32
     b92:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,4);
     b94:	a3 e5       	ldi	r26, 0x53	; 83
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e3 e5       	ldi	r30, 0x53	; 83
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	8f 7e       	andi	r24, 0xEF	; 239
     ba0:	8c 93       	st	X, r24
#endif
#else
#error      "TIMER0 Mode is not valid ..."
#endif

}
     ba2:	cf 91       	pop	r28
     ba4:	df 91       	pop	r29
     ba6:	08 95       	ret

00000ba8 <MTIMER0_VidSetPreload>:

/*Set Preload Function*/
void MTIMER0_VidSetPreload(u8 Copy_u8Preload)
{
     ba8:	df 93       	push	r29
     baa:	cf 93       	push	r28
     bac:	0f 92       	push	r0
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
     bb2:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload;
     bb4:	e2 e5       	ldi	r30, 0x52	; 82
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	89 81       	ldd	r24, Y+1	; 0x01
     bba:	80 83       	st	Z, r24
}
     bbc:	0f 90       	pop	r0
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <MTIMER0_VidSetCTCValue>:
/*Set CTC Value Function*/
void MTIMER0_VidSetCTCValue(u8 Copy_u8CTCValue)
{
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	0f 92       	push	r0
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	89 83       	std	Y+1, r24	; 0x01
	OCR0= Copy_u8CTCValue ;
     bd0:	ec e5       	ldi	r30, 0x5C	; 92
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	80 83       	st	Z, r24
}
     bd8:	0f 90       	pop	r0
     bda:	cf 91       	pop	r28
     bdc:	df 91       	pop	r29
     bde:	08 95       	ret

00000be0 <MTIMER0_VidOVF_SetCallBack>:

void MTIMER0_VidOVF_SetCallBack(void(*Copy_VidCallBack)(void))
{
     be0:	df 93       	push	r29
     be2:	cf 93       	push	r28
     be4:	00 d0       	rcall	.+0      	; 0xbe6 <MTIMER0_VidOVF_SetCallBack+0x6>
     be6:	cd b7       	in	r28, 0x3d	; 61
     be8:	de b7       	in	r29, 0x3e	; 62
     bea:	9a 83       	std	Y+2, r25	; 0x02
     bec:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CallBack =Copy_VidCallBack;
     bee:	89 81       	ldd	r24, Y+1	; 0x01
     bf0:	9a 81       	ldd	r25, Y+2	; 0x02
     bf2:	90 93 9e 00 	sts	0x009E, r25
     bf6:	80 93 9d 00 	sts	0x009D, r24
}
     bfa:	0f 90       	pop	r0
     bfc:	0f 90       	pop	r0
     bfe:	cf 91       	pop	r28
     c00:	df 91       	pop	r29
     c02:	08 95       	ret

00000c04 <MTIMER0_VidCTC_SetCallBack>:
void MTIMER0_VidCTC_SetCallBack(void(*Copy_VidCallBack)(void))
{
     c04:	df 93       	push	r29
     c06:	cf 93       	push	r28
     c08:	00 d0       	rcall	.+0      	; 0xc0a <MTIMER0_VidCTC_SetCallBack+0x6>
     c0a:	cd b7       	in	r28, 0x3d	; 61
     c0c:	de b7       	in	r29, 0x3e	; 62
     c0e:	9a 83       	std	Y+2, r25	; 0x02
     c10:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CallBack =Copy_VidCallBack;
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	9a 81       	ldd	r25, Y+2	; 0x02
     c16:	90 93 9e 00 	sts	0x009E, r25
     c1a:	80 93 9d 00 	sts	0x009D, r24
}
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	cf 91       	pop	r28
     c24:	df 91       	pop	r29
     c26:	08 95       	ret

00000c28 <__vector_11>:
void __vector_11(void)     __attribute__((signal));
void __vector_11(void)
{
     c28:	1f 92       	push	r1
     c2a:	0f 92       	push	r0
     c2c:	0f b6       	in	r0, 0x3f	; 63
     c2e:	0f 92       	push	r0
     c30:	11 24       	eor	r1, r1
     c32:	2f 93       	push	r18
     c34:	3f 93       	push	r19
     c36:	4f 93       	push	r20
     c38:	5f 93       	push	r21
     c3a:	6f 93       	push	r22
     c3c:	7f 93       	push	r23
     c3e:	8f 93       	push	r24
     c40:	9f 93       	push	r25
     c42:	af 93       	push	r26
     c44:	bf 93       	push	r27
     c46:	ef 93       	push	r30
     c48:	ff 93       	push	r31
     c4a:	df 93       	push	r29
     c4c:	cf 93       	push	r28
     c4e:	cd b7       	in	r28, 0x3d	; 61
     c50:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CallBack();
     c52:	e0 91 9d 00 	lds	r30, 0x009D
     c56:	f0 91 9e 00 	lds	r31, 0x009E
     c5a:	09 95       	icall
}
     c5c:	cf 91       	pop	r28
     c5e:	df 91       	pop	r29
     c60:	ff 91       	pop	r31
     c62:	ef 91       	pop	r30
     c64:	bf 91       	pop	r27
     c66:	af 91       	pop	r26
     c68:	9f 91       	pop	r25
     c6a:	8f 91       	pop	r24
     c6c:	7f 91       	pop	r23
     c6e:	6f 91       	pop	r22
     c70:	5f 91       	pop	r21
     c72:	4f 91       	pop	r20
     c74:	3f 91       	pop	r19
     c76:	2f 91       	pop	r18
     c78:	0f 90       	pop	r0
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	0f 90       	pop	r0
     c7e:	1f 90       	pop	r1
     c80:	18 95       	reti

00000c82 <__vector_10>:

void __vector_10(void)     __attribute__((signal));
void __vector_10(void)
{
     c82:	1f 92       	push	r1
     c84:	0f 92       	push	r0
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	0f 92       	push	r0
     c8a:	11 24       	eor	r1, r1
     c8c:	2f 93       	push	r18
     c8e:	3f 93       	push	r19
     c90:	4f 93       	push	r20
     c92:	5f 93       	push	r21
     c94:	6f 93       	push	r22
     c96:	7f 93       	push	r23
     c98:	8f 93       	push	r24
     c9a:	9f 93       	push	r25
     c9c:	af 93       	push	r26
     c9e:	bf 93       	push	r27
     ca0:	ef 93       	push	r30
     ca2:	ff 93       	push	r31
     ca4:	df 93       	push	r29
     ca6:	cf 93       	push	r28
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CallBack();
     cac:	e0 91 9d 00 	lds	r30, 0x009D
     cb0:	f0 91 9e 00 	lds	r31, 0x009E
     cb4:	09 95       	icall
}
     cb6:	cf 91       	pop	r28
     cb8:	df 91       	pop	r29
     cba:	ff 91       	pop	r31
     cbc:	ef 91       	pop	r30
     cbe:	bf 91       	pop	r27
     cc0:	af 91       	pop	r26
     cc2:	9f 91       	pop	r25
     cc4:	8f 91       	pop	r24
     cc6:	7f 91       	pop	r23
     cc8:	6f 91       	pop	r22
     cca:	5f 91       	pop	r21
     ccc:	4f 91       	pop	r20
     cce:	3f 91       	pop	r19
     cd0:	2f 91       	pop	r18
     cd2:	0f 90       	pop	r0
     cd4:	0f be       	out	0x3f, r0	; 63
     cd6:	0f 90       	pop	r0
     cd8:	1f 90       	pop	r1
     cda:	18 95       	reti

00000cdc <MTIMER1_VidInit>:

/***************************************************************TIMER1*******************************************************************************/
/*Timer1 Initialization*/
void MTIMER1_VidInit(void)
{
     cdc:	df 93       	push	r29
     cde:	cf 93       	push	r28
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
	/*Select the suitable Prescaler*/
	TCCR1B&=0xF8;  //Bit masking
     ce4:	ae e4       	ldi	r26, 0x4E	; 78
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	ee e4       	ldi	r30, 0x4E	; 78
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	88 7f       	andi	r24, 0xF8	; 248
     cf0:	8c 93       	st	X, r24
	TCCR1B|=TIMER1_SET_PRESCALER;
     cf2:	ae e4       	ldi	r26, 0x4E	; 78
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	ee e4       	ldi	r30, 0x4E	; 78
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	81 60       	ori	r24, 0x01	; 1
     cfe:	8c 93       	st	X, r24
	/*TIMER OVERFLOW INTERRUPT ENABLLED*/
	SET_BIT(TIMSK,2);

#elif TIMER1_SET_MODE == TIMER1_ICU_MODE
	/*Set Normal mode */
	CLR_BIT(TCCR1B,4);
     d00:	ae e4       	ldi	r26, 0x4E	; 78
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	ee e4       	ldi	r30, 0x4E	; 78
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	8f 7e       	andi	r24, 0xEF	; 239
     d0c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,3);
     d0e:	ae e4       	ldi	r26, 0x4E	; 78
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	ee e4       	ldi	r30, 0x4E	; 78
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	87 7f       	andi	r24, 0xF7	; 247
     d1a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,1);
     d1c:	af e4       	ldi	r26, 0x4F	; 79
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	ef e4       	ldi	r30, 0x4F	; 79
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	8d 7f       	andi	r24, 0xFD	; 253
     d28:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,0);
     d2a:	af e4       	ldi	r26, 0x4F	; 79
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	ef e4       	ldi	r30, 0x4F	; 79
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	8e 7f       	andi	r24, 0xFE	; 254
     d36:	8c 93       	st	X, r24
	/*TIMER OVERFLOW INTERRUPT ENABLLED*/
	SET_BIT(TIMSK,2);
     d38:	a9 e5       	ldi	r26, 0x59	; 89
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	e9 e5       	ldi	r30, 0x59	; 89
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	84 60       	ori	r24, 0x04	; 4
     d44:	8c 93       	st	X, r24
	/*ICU INTERRUPT ENABLLED*/
	SET_BIT(TIMSK,5);
     d46:	a9 e5       	ldi	r26, 0x59	; 89
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e9 e5       	ldi	r30, 0x59	; 89
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	80 62       	ori	r24, 0x20	; 32
     d52:	8c 93       	st	X, r24
	/*ICU Edge Select-->Rising edge*/
#if TIMER1_ICU_EDGE_SELECT == TIMER1_ICU_RISING_EDGE
	SET_BIT(TCCR1B,6);
     d54:	ae e4       	ldi	r26, 0x4E	; 78
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	ee e4       	ldi	r30, 0x4E	; 78
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	80 64       	ori	r24, 0x40	; 64
     d60:	8c 93       	st	X, r24
#endif

#else
#error      "TIMER1 Mode is not valid ..."
#endif
}
     d62:	cf 91       	pop	r28
     d64:	df 91       	pop	r29
     d66:	08 95       	ret

00000d68 <MTIMER1_VidSetPreload>:

/*Set Preload Function*/
void MTIMER1_VidSetPreload(u16 Copy_u16Preload)
{
     d68:	df 93       	push	r29
     d6a:	cf 93       	push	r28
     d6c:	00 d0       	rcall	.+0      	; 0xd6e <MTIMER1_VidSetPreload+0x6>
     d6e:	cd b7       	in	r28, 0x3d	; 61
     d70:	de b7       	in	r29, 0x3e	; 62
     d72:	9a 83       	std	Y+2, r25	; 0x02
     d74:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Preload;
     d76:	ec e4       	ldi	r30, 0x4C	; 76
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
     d7c:	9a 81       	ldd	r25, Y+2	; 0x02
     d7e:	91 83       	std	Z+1, r25	; 0x01
     d80:	80 83       	st	Z, r24
}
     d82:	0f 90       	pop	r0
     d84:	0f 90       	pop	r0
     d86:	cf 91       	pop	r28
     d88:	df 91       	pop	r29
     d8a:	08 95       	ret

00000d8c <MTIMER1_u16GetTCNT1Value>:

/*Get Counter Value In Timer1*/
u16 MTIMER1_u16GetTCNT1Value(void)
{
     d8c:	df 93       	push	r29
     d8e:	cf 93       	push	r28
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
	return TCNT1 ;
     d94:	ec e4       	ldi	r30, 0x4C	; 76
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	91 81       	ldd	r25, Z+1	; 0x01
}
     d9c:	cf 91       	pop	r28
     d9e:	df 91       	pop	r29
     da0:	08 95       	ret

00000da2 <MTIMER1_u16GetICR1Value>:

/*Get Counter Value In ICR1  */
u16 MTIMER1_u16GetICR1Value(void)
{
     da2:	df 93       	push	r29
     da4:	cf 93       	push	r28
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
	return 	ICR1 ;
     daa:	e6 e4       	ldi	r30, 0x46	; 70
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	91 81       	ldd	r25, Z+1	; 0x01
}
     db2:	cf 91       	pop	r28
     db4:	df 91       	pop	r29
     db6:	08 95       	ret

00000db8 <MTIMER1_VidSenseControl>:


/*select sense control Function*/
void MTIMER1_VidSenseControl(u8 Copy_u8SenseControl)
{
     db8:	df 93       	push	r29
     dba:	cf 93       	push	r28
     dbc:	0f 92       	push	r0
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62
     dc2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8SenseControl==MTIMER1_ICU_FALLING_EDGE)
     dc4:	89 81       	ldd	r24, Y+1	; 0x01
     dc6:	88 23       	and	r24, r24
     dc8:	41 f4       	brne	.+16     	; 0xdda <MTIMER1_VidSenseControl+0x22>
	{
		/*ICU Sense with Falling*/

		CLR_BIT(TCCR1B,6);
     dca:	ae e4       	ldi	r26, 0x4E	; 78
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	ee e4       	ldi	r30, 0x4E	; 78
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	8f 7b       	andi	r24, 0xBF	; 191
     dd6:	8c 93       	st	X, r24
     dd8:	0a c0       	rjmp	.+20     	; 0xdee <MTIMER1_VidSenseControl+0x36>
	}
	else if(Copy_u8SenseControl==MTIMER1_ICU_RISING_EDGE)
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	81 30       	cpi	r24, 0x01	; 1
     dde:	39 f4       	brne	.+14     	; 0xdee <MTIMER1_VidSenseControl+0x36>
	{
		/*ICU Sense with Rising*/
		SET_BIT(TCCR1B,6);
     de0:	ae e4       	ldi	r26, 0x4E	; 78
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	ee e4       	ldi	r30, 0x4E	; 78
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	80 64       	ori	r24, 0x40	; 64
     dec:	8c 93       	st	X, r24
	}
	else
	{
		/*Do Nothing*/
	}
}
     dee:	0f 90       	pop	r0
     df0:	cf 91       	pop	r28
     df2:	df 91       	pop	r29
     df4:	08 95       	ret

00000df6 <MTIMER1_VidOVF_SetCallBack>:
void MTIMER1_VidOVF_SetCallBack(void(*Copy_VidCallBack)(void))
{
     df6:	df 93       	push	r29
     df8:	cf 93       	push	r28
     dfa:	00 d0       	rcall	.+0      	; 0xdfc <MTIMER1_VidOVF_SetCallBack+0x6>
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
     e00:	9a 83       	std	Y+2, r25	; 0x02
     e02:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_CallBack =Copy_VidCallBack;
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	9a 81       	ldd	r25, Y+2	; 0x02
     e08:	90 93 a0 00 	sts	0x00A0, r25
     e0c:	80 93 9f 00 	sts	0x009F, r24
}
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	cf 91       	pop	r28
     e16:	df 91       	pop	r29
     e18:	08 95       	ret

00000e1a <MTIMER1_VidICF_SetCallBack>:

void MTIMER1_VidICF_SetCallBack(void(*Copy_VidCallBack)(void))
{
     e1a:	df 93       	push	r29
     e1c:	cf 93       	push	r28
     e1e:	00 d0       	rcall	.+0      	; 0xe20 <MTIMER1_VidICF_SetCallBack+0x6>
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
     e24:	9a 83       	std	Y+2, r25	; 0x02
     e26:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_ICF_CallBack =Copy_VidCallBack;
     e28:	89 81       	ldd	r24, Y+1	; 0x01
     e2a:	9a 81       	ldd	r25, Y+2	; 0x02
     e2c:	90 93 a2 00 	sts	0x00A2, r25
     e30:	80 93 a1 00 	sts	0x00A1, r24
}
     e34:	0f 90       	pop	r0
     e36:	0f 90       	pop	r0
     e38:	cf 91       	pop	r28
     e3a:	df 91       	pop	r29
     e3c:	08 95       	ret

00000e3e <__vector_9>:
/*TIMER1 OFV  ISR*/
void __vector_9(void)      __attribute__((signal));
void __vector_9(void)
{
     e3e:	1f 92       	push	r1
     e40:	0f 92       	push	r0
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	0f 92       	push	r0
     e46:	11 24       	eor	r1, r1
     e48:	2f 93       	push	r18
     e4a:	3f 93       	push	r19
     e4c:	4f 93       	push	r20
     e4e:	5f 93       	push	r21
     e50:	6f 93       	push	r22
     e52:	7f 93       	push	r23
     e54:	8f 93       	push	r24
     e56:	9f 93       	push	r25
     e58:	af 93       	push	r26
     e5a:	bf 93       	push	r27
     e5c:	ef 93       	push	r30
     e5e:	ff 93       	push	r31
     e60:	df 93       	push	r29
     e62:	cf 93       	push	r28
     e64:	cd b7       	in	r28, 0x3d	; 61
     e66:	de b7       	in	r29, 0x3e	; 62
	TIMER1_CallBack();
     e68:	e0 91 9f 00 	lds	r30, 0x009F
     e6c:	f0 91 a0 00 	lds	r31, 0x00A0
     e70:	09 95       	icall
}
     e72:	cf 91       	pop	r28
     e74:	df 91       	pop	r29
     e76:	ff 91       	pop	r31
     e78:	ef 91       	pop	r30
     e7a:	bf 91       	pop	r27
     e7c:	af 91       	pop	r26
     e7e:	9f 91       	pop	r25
     e80:	8f 91       	pop	r24
     e82:	7f 91       	pop	r23
     e84:	6f 91       	pop	r22
     e86:	5f 91       	pop	r21
     e88:	4f 91       	pop	r20
     e8a:	3f 91       	pop	r19
     e8c:	2f 91       	pop	r18
     e8e:	0f 90       	pop	r0
     e90:	0f be       	out	0x3f, r0	; 63
     e92:	0f 90       	pop	r0
     e94:	1f 90       	pop	r1
     e96:	18 95       	reti

00000e98 <__vector_6>:

/*TIMER1 Capture Event ISR*/
void __vector_6(void)      __attribute__((signal));
void __vector_6(void)
{
     e98:	1f 92       	push	r1
     e9a:	0f 92       	push	r0
     e9c:	0f b6       	in	r0, 0x3f	; 63
     e9e:	0f 92       	push	r0
     ea0:	11 24       	eor	r1, r1
     ea2:	2f 93       	push	r18
     ea4:	3f 93       	push	r19
     ea6:	4f 93       	push	r20
     ea8:	5f 93       	push	r21
     eaa:	6f 93       	push	r22
     eac:	7f 93       	push	r23
     eae:	8f 93       	push	r24
     eb0:	9f 93       	push	r25
     eb2:	af 93       	push	r26
     eb4:	bf 93       	push	r27
     eb6:	ef 93       	push	r30
     eb8:	ff 93       	push	r31
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
	TIMER1_ICF_CallBack();
     ec2:	e0 91 a1 00 	lds	r30, 0x00A1
     ec6:	f0 91 a2 00 	lds	r31, 0x00A2
     eca:	09 95       	icall
}
     ecc:	cf 91       	pop	r28
     ece:	df 91       	pop	r29
     ed0:	ff 91       	pop	r31
     ed2:	ef 91       	pop	r30
     ed4:	bf 91       	pop	r27
     ed6:	af 91       	pop	r26
     ed8:	9f 91       	pop	r25
     eda:	8f 91       	pop	r24
     edc:	7f 91       	pop	r23
     ede:	6f 91       	pop	r22
     ee0:	5f 91       	pop	r21
     ee2:	4f 91       	pop	r20
     ee4:	3f 91       	pop	r19
     ee6:	2f 91       	pop	r18
     ee8:	0f 90       	pop	r0
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	0f 90       	pop	r0
     eee:	1f 90       	pop	r1
     ef0:	18 95       	reti

00000ef2 <MGIE_VidEnable>:

#include"MGIE_Private.h"

/*GIE Enable Function*/
void MGIE_VidEnable(void)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
     efa:	af e5       	ldi	r26, 0x5F	; 95
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	ef e5       	ldi	r30, 0x5F	; 95
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	80 68       	ori	r24, 0x80	; 128
     f06:	8c 93       	st	X, r24
}
     f08:	cf 91       	pop	r28
     f0a:	df 91       	pop	r29
     f0c:	08 95       	ret

00000f0e <MGIE_VidDisable>:
/*GIE Disable Function*/
void MGIE_VidDisable(void)
{
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
     f16:	af e5       	ldi	r26, 0x5F	; 95
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	ef e5       	ldi	r30, 0x5F	; 95
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	8f 77       	andi	r24, 0x7F	; 127
     f22:	8c 93       	st	X, r24
}
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	08 95       	ret

00000f2a <MEXTI0_VidInit>:

/*Global Pointer to function for EXTI0*/
void (*EXTI0_CallBack)(void) ;
/* EXTI0 Initialization*/
void MEXTI0_VidInit(void)
{
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,1);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_FALLING_EDGE
	CLR_BIT(MCUCR,0);
	SET_BIT(MCUCR,1);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_RISING_EDGE
	SET_BIT(MCUCR,0);
     f32:	a5 e5       	ldi	r26, 0x55	; 85
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e5 e5       	ldi	r30, 0x55	; 85
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	81 60       	ori	r24, 0x01	; 1
     f3e:	8c 93       	st	X, r24
	SET_BIT(MCUCR,1);
     f40:	a5 e5       	ldi	r26, 0x55	; 85
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e5 e5       	ldi	r30, 0x55	; 85
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	82 60       	ori	r24, 0x02	; 2
     f4c:	8c 93       	st	X, r24
#else
	#error"Sense Control Option is not valid"
#endif
	/*Enable to EXTI0*/
	SET_BIT(GICR,6);
     f4e:	ab e5       	ldi	r26, 0x5B	; 91
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	eb e5       	ldi	r30, 0x5B	; 91
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	80 64       	ori	r24, 0x40	; 64
     f5a:	8c 93       	st	X, r24
}
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	08 95       	ret

00000f62 <MEXTI1_VidInit>:
/* EXTI1 Initialization*/
void MEXTI1_VidInit(void)
{
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,3);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_FALLING_EDGE
	CLR_BIT(MCUCR,2);
	SET_BIT(MCUCR,3);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_RISING_EDGE
	SET_BIT(MCUCR,2);
     f6a:	a5 e5       	ldi	r26, 0x55	; 85
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e5 e5       	ldi	r30, 0x55	; 85
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	84 60       	ori	r24, 0x04	; 4
     f76:	8c 93       	st	X, r24
	SET_BIT(MCUCR,3);
     f78:	a5 e5       	ldi	r26, 0x55	; 85
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e5 e5       	ldi	r30, 0x55	; 85
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	88 60       	ori	r24, 0x08	; 8
     f84:	8c 93       	st	X, r24
#else
	#error"Sense Control Option is not valid"
#endif
	/*Enable to EXTI1*/
	SET_BIT(GICR,7);
     f86:	ab e5       	ldi	r26, 0x5B	; 91
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	eb e5       	ldi	r30, 0x5B	; 91
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	80 68       	ori	r24, 0x80	; 128
     f92:	8c 93       	st	X, r24
}
     f94:	cf 91       	pop	r28
     f96:	df 91       	pop	r29
     f98:	08 95       	ret

00000f9a <MEXTI2_VidInit>:
/* EXTI2 Initialization*/
void MEXTI2_VidInit(void)
{
     f9a:	df 93       	push	r29
     f9c:	cf 93       	push	r28
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
	/*Select Sense Control*/

#if MEXTI_SET_SENSE_CONTROL==MEXTI_FALLING_EDGE
	CLR_BIT(MCUCSR,6);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_RISING_EDGE
	SET_BIT(MCUCSR,6);
     fa2:	a4 e5       	ldi	r26, 0x54	; 84
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e4 e5       	ldi	r30, 0x54	; 84
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	80 64       	ori	r24, 0x40	; 64
     fae:	8c 93       	st	X, r24
#else
	//#error"Sense Control Option is not valid"
#endif
	/*Enable to EXTI2*/
	SET_BIT(GICR,5);
     fb0:	ab e5       	ldi	r26, 0x5B	; 91
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	eb e5       	ldi	r30, 0x5B	; 91
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	80 62       	ori	r24, 0x20	; 32
     fbc:	8c 93       	st	X, r24
}
     fbe:	cf 91       	pop	r28
     fc0:	df 91       	pop	r29
     fc2:	08 95       	ret

00000fc4 <MEXTI_VidSenseControl>:
/*select sense control Function*/
void MEXTI_VidSenseControl(u8 Copy_u8EXTI_ID,u8 Copy_u8SenseControl)
{
     fc4:	df 93       	push	r29
     fc6:	cf 93       	push	r28
     fc8:	00 d0       	rcall	.+0      	; 0xfca <MEXTI_VidSenseControl+0x6>
     fca:	00 d0       	rcall	.+0      	; 0xfcc <MEXTI_VidSenseControl+0x8>
     fcc:	cd b7       	in	r28, 0x3d	; 61
     fce:	de b7       	in	r29, 0x3e	; 62
     fd0:	89 83       	std	Y+1, r24	; 0x01
     fd2:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8EXTI_ID)
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	3c 83       	std	Y+4, r19	; 0x04
     fdc:	2b 83       	std	Y+3, r18	; 0x03
     fde:	8b 81       	ldd	r24, Y+3	; 0x03
     fe0:	9c 81       	ldd	r25, Y+4	; 0x04
     fe2:	81 30       	cpi	r24, 0x01	; 1
     fe4:	91 05       	cpc	r25, r1
     fe6:	09 f4       	brne	.+2      	; 0xfea <MEXTI_VidSenseControl+0x26>
     fe8:	54 c0       	rjmp	.+168    	; 0x1092 <MEXTI_VidSenseControl+0xce>
     fea:	2b 81       	ldd	r18, Y+3	; 0x03
     fec:	3c 81       	ldd	r19, Y+4	; 0x04
     fee:	22 30       	cpi	r18, 0x02	; 2
     ff0:	31 05       	cpc	r19, r1
     ff2:	09 f4       	brne	.+2      	; 0xff6 <MEXTI_VidSenseControl+0x32>
     ff4:	96 c0       	rjmp	.+300    	; 0x1122 <MEXTI_VidSenseControl+0x15e>
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	9c 81       	ldd	r25, Y+4	; 0x04
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	09 f0       	breq	.+2      	; 0x1000 <MEXTI_VidSenseControl+0x3c>
     ffe:	a6 c0       	rjmp	.+332    	; 0x114c <MEXTI_VidSenseControl+0x188>
	{
	case EXTI0:
		if(Copy_u8SenseControl==MEXTI_LOW_LEVEL)
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	88 23       	and	r24, r24
    1004:	79 f4       	brne	.+30     	; 0x1024 <MEXTI_VidSenseControl+0x60>
		{
			CLR_BIT(MCUCR,0);
    1006:	a5 e5       	ldi	r26, 0x55	; 85
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	e5 e5       	ldi	r30, 0x55	; 85
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	8e 7f       	andi	r24, 0xFE	; 254
    1012:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,1);
    1014:	a5 e5       	ldi	r26, 0x55	; 85
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e5 e5       	ldi	r30, 0x55	; 85
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	8d 7f       	andi	r24, 0xFD	; 253
    1020:	8c 93       	st	X, r24
    1022:	94 c0       	rjmp	.+296    	; 0x114c <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_ANY_LOGICAL_CHANGE)
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	81 30       	cpi	r24, 0x01	; 1
    1028:	79 f4       	brne	.+30     	; 0x1048 <MEXTI_VidSenseControl+0x84>
		{
			SET_BIT(MCUCR,0);
    102a:	a5 e5       	ldi	r26, 0x55	; 85
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	e5 e5       	ldi	r30, 0x55	; 85
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	81 60       	ori	r24, 0x01	; 1
    1036:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,1);
    1038:	a5 e5       	ldi	r26, 0x55	; 85
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e5 e5       	ldi	r30, 0x55	; 85
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	8d 7f       	andi	r24, 0xFD	; 253
    1044:	8c 93       	st	X, r24
    1046:	82 c0       	rjmp	.+260    	; 0x114c <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_FALLING_EDGE)
    1048:	8a 81       	ldd	r24, Y+2	; 0x02
    104a:	82 30       	cpi	r24, 0x02	; 2
    104c:	79 f4       	brne	.+30     	; 0x106c <MEXTI_VidSenseControl+0xa8>
		{
			CLR_BIT(MCUCR,0);
    104e:	a5 e5       	ldi	r26, 0x55	; 85
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e5 e5       	ldi	r30, 0x55	; 85
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	8e 7f       	andi	r24, 0xFE	; 254
    105a:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1);
    105c:	a5 e5       	ldi	r26, 0x55	; 85
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e5 e5       	ldi	r30, 0x55	; 85
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	82 60       	ori	r24, 0x02	; 2
    1068:	8c 93       	st	X, r24
    106a:	70 c0       	rjmp	.+224    	; 0x114c <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_RISING_EDGE)
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	83 30       	cpi	r24, 0x03	; 3
    1070:	09 f0       	breq	.+2      	; 0x1074 <MEXTI_VidSenseControl+0xb0>
    1072:	6c c0       	rjmp	.+216    	; 0x114c <MEXTI_VidSenseControl+0x188>
		{
			SET_BIT(MCUCR,0);
    1074:	a5 e5       	ldi	r26, 0x55	; 85
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e5 e5       	ldi	r30, 0x55	; 85
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	81 60       	ori	r24, 0x01	; 1
    1080:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1);
    1082:	a5 e5       	ldi	r26, 0x55	; 85
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e5 e5       	ldi	r30, 0x55	; 85
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	82 60       	ori	r24, 0x02	; 2
    108e:	8c 93       	st	X, r24
    1090:	5d c0       	rjmp	.+186    	; 0x114c <MEXTI_VidSenseControl+0x188>
		{
			/*Do Nothing*/
		}
		break;
	case EXTI1:
		if(Copy_u8SenseControl==MEXTI_LOW_LEVEL)
    1092:	8a 81       	ldd	r24, Y+2	; 0x02
    1094:	88 23       	and	r24, r24
    1096:	79 f4       	brne	.+30     	; 0x10b6 <MEXTI_VidSenseControl+0xf2>
		{
			CLR_BIT(MCUCR,2);
    1098:	a5 e5       	ldi	r26, 0x55	; 85
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e5 e5       	ldi	r30, 0x55	; 85
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	8b 7f       	andi	r24, 0xFB	; 251
    10a4:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,3);
    10a6:	a5 e5       	ldi	r26, 0x55	; 85
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e5 e5       	ldi	r30, 0x55	; 85
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	87 7f       	andi	r24, 0xF7	; 247
    10b2:	8c 93       	st	X, r24
    10b4:	4b c0       	rjmp	.+150    	; 0x114c <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_ANY_LOGICAL_CHANGE)
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	81 30       	cpi	r24, 0x01	; 1
    10ba:	79 f4       	brne	.+30     	; 0x10da <MEXTI_VidSenseControl+0x116>
		{
			SET_BIT(MCUCR,2);
    10bc:	a5 e5       	ldi	r26, 0x55	; 85
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e5 e5       	ldi	r30, 0x55	; 85
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	84 60       	ori	r24, 0x04	; 4
    10c8:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,3);
    10ca:	a5 e5       	ldi	r26, 0x55	; 85
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	e5 e5       	ldi	r30, 0x55	; 85
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	87 7f       	andi	r24, 0xF7	; 247
    10d6:	8c 93       	st	X, r24
    10d8:	39 c0       	rjmp	.+114    	; 0x114c <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_FALLING_EDGE)
    10da:	8a 81       	ldd	r24, Y+2	; 0x02
    10dc:	82 30       	cpi	r24, 0x02	; 2
    10de:	79 f4       	brne	.+30     	; 0x10fe <MEXTI_VidSenseControl+0x13a>
		{
			CLR_BIT(MCUCR,2);
    10e0:	a5 e5       	ldi	r26, 0x55	; 85
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e5 e5       	ldi	r30, 0x55	; 85
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	8b 7f       	andi	r24, 0xFB	; 251
    10ec:	8c 93       	st	X, r24
			SET_BIT(MCUCR,3);
    10ee:	a5 e5       	ldi	r26, 0x55	; 85
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e5 e5       	ldi	r30, 0x55	; 85
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	88 60       	ori	r24, 0x08	; 8
    10fa:	8c 93       	st	X, r24
    10fc:	27 c0       	rjmp	.+78     	; 0x114c <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_RISING_EDGE)
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	83 30       	cpi	r24, 0x03	; 3
    1102:	21 f5       	brne	.+72     	; 0x114c <MEXTI_VidSenseControl+0x188>
		{
			SET_BIT(MCUCR,2);
    1104:	a5 e5       	ldi	r26, 0x55	; 85
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	e5 e5       	ldi	r30, 0x55	; 85
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	84 60       	ori	r24, 0x04	; 4
    1110:	8c 93       	st	X, r24
			SET_BIT(MCUCR,3);
    1112:	a5 e5       	ldi	r26, 0x55	; 85
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	e5 e5       	ldi	r30, 0x55	; 85
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	88 60       	ori	r24, 0x08	; 8
    111e:	8c 93       	st	X, r24
    1120:	15 c0       	rjmp	.+42     	; 0x114c <MEXTI_VidSenseControl+0x188>
		{
			/*Do Nothing*/
		}
		break;
	case EXTI2:
		if(Copy_u8SenseControl==MEXTI_FALLING_EDGE)
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	82 30       	cpi	r24, 0x02	; 2
    1126:	41 f4       	brne	.+16     	; 0x1138 <MEXTI_VidSenseControl+0x174>
		{
			CLR_BIT(MCUCSR,6);
    1128:	a4 e5       	ldi	r26, 0x54	; 84
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e4 e5       	ldi	r30, 0x54	; 84
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	8f 7b       	andi	r24, 0xBF	; 191
    1134:	8c 93       	st	X, r24
    1136:	0a c0       	rjmp	.+20     	; 0x114c <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_RISING_EDGE)
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	83 30       	cpi	r24, 0x03	; 3
    113c:	39 f4       	brne	.+14     	; 0x114c <MEXTI_VidSenseControl+0x188>
		{
			SET_BIT(MCUCSR,6);
    113e:	a4 e5       	ldi	r26, 0x54	; 84
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e4 e5       	ldi	r30, 0x54	; 84
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	80 64       	ori	r24, 0x40	; 64
    114a:	8c 93       	st	X, r24
		{
			/*Do Nothing*/
		}
		break;
	}
}
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	cf 91       	pop	r28
    1156:	df 91       	pop	r29
    1158:	08 95       	ret

0000115a <MEXTI0_Set_CallBackFunction>:

void MEXTI0_Set_CallBackFunction(void(*Copy_VidCallBack)(void))
{
    115a:	df 93       	push	r29
    115c:	cf 93       	push	r28
    115e:	00 d0       	rcall	.+0      	; 0x1160 <MEXTI0_Set_CallBackFunction+0x6>
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	9a 83       	std	Y+2, r25	; 0x02
    1166:	89 83       	std	Y+1, r24	; 0x01
	EXTI0_CallBack = Copy_VidCallBack ;
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	9a 81       	ldd	r25, Y+2	; 0x02
    116c:	90 93 a4 00 	sts	0x00A4, r25
    1170:	80 93 a3 00 	sts	0x00A3, r24
}
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	cf 91       	pop	r28
    117a:	df 91       	pop	r29
    117c:	08 95       	ret

0000117e <__vector_1>:

void __vector_1(void)      __attribute__((signal));
void __vector_1(void)
{
    117e:	1f 92       	push	r1
    1180:	0f 92       	push	r0
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	0f 92       	push	r0
    1186:	11 24       	eor	r1, r1
    1188:	2f 93       	push	r18
    118a:	3f 93       	push	r19
    118c:	4f 93       	push	r20
    118e:	5f 93       	push	r21
    1190:	6f 93       	push	r22
    1192:	7f 93       	push	r23
    1194:	8f 93       	push	r24
    1196:	9f 93       	push	r25
    1198:	af 93       	push	r26
    119a:	bf 93       	push	r27
    119c:	ef 93       	push	r30
    119e:	ff 93       	push	r31
    11a0:	df 93       	push	r29
    11a2:	cf 93       	push	r28
    11a4:	cd b7       	in	r28, 0x3d	; 61
    11a6:	de b7       	in	r29, 0x3e	; 62
	EXTI0_CallBack();
    11a8:	e0 91 a3 00 	lds	r30, 0x00A3
    11ac:	f0 91 a4 00 	lds	r31, 0x00A4
    11b0:	09 95       	icall
}
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	ff 91       	pop	r31
    11b8:	ef 91       	pop	r30
    11ba:	bf 91       	pop	r27
    11bc:	af 91       	pop	r26
    11be:	9f 91       	pop	r25
    11c0:	8f 91       	pop	r24
    11c2:	7f 91       	pop	r23
    11c4:	6f 91       	pop	r22
    11c6:	5f 91       	pop	r21
    11c8:	4f 91       	pop	r20
    11ca:	3f 91       	pop	r19
    11cc:	2f 91       	pop	r18
    11ce:	0f 90       	pop	r0
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	0f 90       	pop	r0
    11d4:	1f 90       	pop	r1
    11d6:	18 95       	reti

000011d8 <MDIO_Error_State_SetPinDirection>:
#include"MDIO_Private.h"
#include"MDIO_Interface.h"

/*Set Pin Direction Function */
Error_State  MDIO_Error_State_SetPinDirection(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8 Copy_u8PinDirection)
{
    11d8:	df 93       	push	r29
    11da:	cf 93       	push	r28
    11dc:	00 d0       	rcall	.+0      	; 0x11de <MDIO_Error_State_SetPinDirection+0x6>
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <MDIO_Error_State_SetPinDirection+0x8>
    11e0:	00 d0       	rcall	.+0      	; 0x11e2 <MDIO_Error_State_SetPinDirection+0xa>
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
    11e6:	8a 83       	std	Y+2, r24	; 0x02
    11e8:	6b 83       	std	Y+3, r22	; 0x03
    11ea:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	88 30       	cpi	r24, 0x08	; 8
    11f4:	08 f0       	brcs	.+2      	; 0x11f8 <MDIO_Error_State_SetPinDirection+0x20>
    11f6:	e8 c0       	rjmp	.+464    	; 0x13c8 <MDIO_Error_State_SetPinDirection+0x1f0>
	{
		switch (Copy_u8PortNumber)
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	28 2f       	mov	r18, r24
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	3e 83       	std	Y+6, r19	; 0x06
    1200:	2d 83       	std	Y+5, r18	; 0x05
    1202:	8d 81       	ldd	r24, Y+5	; 0x05
    1204:	9e 81       	ldd	r25, Y+6	; 0x06
    1206:	81 30       	cpi	r24, 0x01	; 1
    1208:	91 05       	cpc	r25, r1
    120a:	09 f4       	brne	.+2      	; 0x120e <MDIO_Error_State_SetPinDirection+0x36>
    120c:	48 c0       	rjmp	.+144    	; 0x129e <MDIO_Error_State_SetPinDirection+0xc6>
    120e:	2d 81       	ldd	r18, Y+5	; 0x05
    1210:	3e 81       	ldd	r19, Y+6	; 0x06
    1212:	22 30       	cpi	r18, 0x02	; 2
    1214:	31 05       	cpc	r19, r1
    1216:	2c f4       	brge	.+10     	; 0x1222 <MDIO_Error_State_SetPinDirection+0x4a>
    1218:	8d 81       	ldd	r24, Y+5	; 0x05
    121a:	9e 81       	ldd	r25, Y+6	; 0x06
    121c:	00 97       	sbiw	r24, 0x00	; 0
    121e:	71 f0       	breq	.+28     	; 0x123c <MDIO_Error_State_SetPinDirection+0x64>
    1220:	d1 c0       	rjmp	.+418    	; 0x13c4 <MDIO_Error_State_SetPinDirection+0x1ec>
    1222:	2d 81       	ldd	r18, Y+5	; 0x05
    1224:	3e 81       	ldd	r19, Y+6	; 0x06
    1226:	22 30       	cpi	r18, 0x02	; 2
    1228:	31 05       	cpc	r19, r1
    122a:	09 f4       	brne	.+2      	; 0x122e <MDIO_Error_State_SetPinDirection+0x56>
    122c:	69 c0       	rjmp	.+210    	; 0x1300 <MDIO_Error_State_SetPinDirection+0x128>
    122e:	8d 81       	ldd	r24, Y+5	; 0x05
    1230:	9e 81       	ldd	r25, Y+6	; 0x06
    1232:	83 30       	cpi	r24, 0x03	; 3
    1234:	91 05       	cpc	r25, r1
    1236:	09 f4       	brne	.+2      	; 0x123a <MDIO_Error_State_SetPinDirection+0x62>
    1238:	94 c0       	rjmp	.+296    	; 0x1362 <MDIO_Error_State_SetPinDirection+0x18a>
    123a:	c4 c0       	rjmp	.+392    	; 0x13c4 <MDIO_Error_State_SetPinDirection+0x1ec>
		{

		case  MDIO_PORTA:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    123c:	8c 81       	ldd	r24, Y+4	; 0x04
    123e:	81 30       	cpi	r24, 0x01	; 1
    1240:	a1 f4       	brne	.+40     	; 0x126a <MDIO_Error_State_SetPinDirection+0x92>
			{
				SET_BIT(DDRA,Copy_u8PinNumber);
    1242:	aa e3       	ldi	r26, 0x3A	; 58
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	ea e3       	ldi	r30, 0x3A	; 58
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	48 2f       	mov	r20, r24
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	02 2e       	mov	r0, r18
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <MDIO_Error_State_SetPinDirection+0x88>
    125c:	88 0f       	add	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	0a 94       	dec	r0
    1262:	e2 f7       	brpl	.-8      	; 0x125c <MDIO_Error_State_SetPinDirection+0x84>
    1264:	84 2b       	or	r24, r20
    1266:	8c 93       	st	X, r24
    1268:	b0 c0       	rjmp	.+352    	; 0x13ca <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    126a:	8c 81       	ldd	r24, Y+4	; 0x04
    126c:	88 23       	and	r24, r24
    126e:	a9 f4       	brne	.+42     	; 0x129a <MDIO_Error_State_SetPinDirection+0xc2>
			{
				CLR_BIT(DDRA,Copy_u8PinNumber);
    1270:	aa e3       	ldi	r26, 0x3A	; 58
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	ea e3       	ldi	r30, 0x3A	; 58
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	48 2f       	mov	r20, r24
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	02 2e       	mov	r0, r18
    1288:	02 c0       	rjmp	.+4      	; 0x128e <MDIO_Error_State_SetPinDirection+0xb6>
    128a:	88 0f       	add	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	0a 94       	dec	r0
    1290:	e2 f7       	brpl	.-8      	; 0x128a <MDIO_Error_State_SetPinDirection+0xb2>
    1292:	80 95       	com	r24
    1294:	84 23       	and	r24, r20
    1296:	8c 93       	st	X, r24
    1298:	98 c0       	rjmp	.+304    	; 0x13ca <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    129a:	19 82       	std	Y+1, r1	; 0x01
    129c:	96 c0       	rjmp	.+300    	; 0x13ca <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		case  MDIO_PORTB:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    129e:	8c 81       	ldd	r24, Y+4	; 0x04
    12a0:	81 30       	cpi	r24, 0x01	; 1
    12a2:	a1 f4       	brne	.+40     	; 0x12cc <MDIO_Error_State_SetPinDirection+0xf4>
			{
				SET_BIT(DDRB,Copy_u8PinNumber);
    12a4:	a7 e3       	ldi	r26, 0x37	; 55
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e7 e3       	ldi	r30, 0x37	; 55
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	48 2f       	mov	r20, r24
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	02 2e       	mov	r0, r18
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <MDIO_Error_State_SetPinDirection+0xea>
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	0a 94       	dec	r0
    12c4:	e2 f7       	brpl	.-8      	; 0x12be <MDIO_Error_State_SetPinDirection+0xe6>
    12c6:	84 2b       	or	r24, r20
    12c8:	8c 93       	st	X, r24
    12ca:	7f c0       	rjmp	.+254    	; 0x13ca <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    12cc:	8c 81       	ldd	r24, Y+4	; 0x04
    12ce:	88 23       	and	r24, r24
    12d0:	a9 f4       	brne	.+42     	; 0x12fc <MDIO_Error_State_SetPinDirection+0x124>
			{
				CLR_BIT(DDRB,Copy_u8PinNumber);
    12d2:	a7 e3       	ldi	r26, 0x37	; 55
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	e7 e3       	ldi	r30, 0x37	; 55
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	48 2f       	mov	r20, r24
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	02 2e       	mov	r0, r18
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <MDIO_Error_State_SetPinDirection+0x118>
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	0a 94       	dec	r0
    12f2:	e2 f7       	brpl	.-8      	; 0x12ec <MDIO_Error_State_SetPinDirection+0x114>
    12f4:	80 95       	com	r24
    12f6:	84 23       	and	r24, r20
    12f8:	8c 93       	st	X, r24
    12fa:	67 c0       	rjmp	.+206    	; 0x13ca <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    12fc:	19 82       	std	Y+1, r1	; 0x01
    12fe:	65 c0       	rjmp	.+202    	; 0x13ca <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		case  MDIO_PORTC:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    1300:	8c 81       	ldd	r24, Y+4	; 0x04
    1302:	81 30       	cpi	r24, 0x01	; 1
    1304:	a1 f4       	brne	.+40     	; 0x132e <MDIO_Error_State_SetPinDirection+0x156>
			{
				SET_BIT(DDRC,Copy_u8PinNumber);
    1306:	a4 e3       	ldi	r26, 0x34	; 52
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	e4 e3       	ldi	r30, 0x34	; 52
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	48 2f       	mov	r20, r24
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	28 2f       	mov	r18, r24
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	02 2e       	mov	r0, r18
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <MDIO_Error_State_SetPinDirection+0x14c>
    1320:	88 0f       	add	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	0a 94       	dec	r0
    1326:	e2 f7       	brpl	.-8      	; 0x1320 <MDIO_Error_State_SetPinDirection+0x148>
    1328:	84 2b       	or	r24, r20
    132a:	8c 93       	st	X, r24
    132c:	4e c0       	rjmp	.+156    	; 0x13ca <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    132e:	8c 81       	ldd	r24, Y+4	; 0x04
    1330:	88 23       	and	r24, r24
    1332:	a9 f4       	brne	.+42     	; 0x135e <MDIO_Error_State_SetPinDirection+0x186>
			{
				CLR_BIT(DDRC,Copy_u8PinNumber);
    1334:	a4 e3       	ldi	r26, 0x34	; 52
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	e4 e3       	ldi	r30, 0x34	; 52
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	48 2f       	mov	r20, r24
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	02 2e       	mov	r0, r18
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <MDIO_Error_State_SetPinDirection+0x17a>
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	0a 94       	dec	r0
    1354:	e2 f7       	brpl	.-8      	; 0x134e <MDIO_Error_State_SetPinDirection+0x176>
    1356:	80 95       	com	r24
    1358:	84 23       	and	r24, r20
    135a:	8c 93       	st	X, r24
    135c:	36 c0       	rjmp	.+108    	; 0x13ca <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    135e:	19 82       	std	Y+1, r1	; 0x01
    1360:	34 c0       	rjmp	.+104    	; 0x13ca <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;
		case  MDIO_PORTD:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    1362:	8c 81       	ldd	r24, Y+4	; 0x04
    1364:	81 30       	cpi	r24, 0x01	; 1
    1366:	a1 f4       	brne	.+40     	; 0x1390 <MDIO_Error_State_SetPinDirection+0x1b8>
			{
				SET_BIT(DDRD,Copy_u8PinNumber);
    1368:	a1 e3       	ldi	r26, 0x31	; 49
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	e1 e3       	ldi	r30, 0x31	; 49
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	48 2f       	mov	r20, r24
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	02 2e       	mov	r0, r18
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <MDIO_Error_State_SetPinDirection+0x1ae>
    1382:	88 0f       	add	r24, r24
    1384:	99 1f       	adc	r25, r25
    1386:	0a 94       	dec	r0
    1388:	e2 f7       	brpl	.-8      	; 0x1382 <MDIO_Error_State_SetPinDirection+0x1aa>
    138a:	84 2b       	or	r24, r20
    138c:	8c 93       	st	X, r24
    138e:	1d c0       	rjmp	.+58     	; 0x13ca <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    1390:	8c 81       	ldd	r24, Y+4	; 0x04
    1392:	88 23       	and	r24, r24
    1394:	a9 f4       	brne	.+42     	; 0x13c0 <MDIO_Error_State_SetPinDirection+0x1e8>
			{
				CLR_BIT(DDRD,Copy_u8PinNumber);
    1396:	a1 e3       	ldi	r26, 0x31	; 49
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e1 e3       	ldi	r30, 0x31	; 49
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	48 2f       	mov	r20, r24
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	02 2e       	mov	r0, r18
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <MDIO_Error_State_SetPinDirection+0x1dc>
    13b0:	88 0f       	add	r24, r24
    13b2:	99 1f       	adc	r25, r25
    13b4:	0a 94       	dec	r0
    13b6:	e2 f7       	brpl	.-8      	; 0x13b0 <MDIO_Error_State_SetPinDirection+0x1d8>
    13b8:	80 95       	com	r24
    13ba:	84 23       	and	r24, r20
    13bc:	8c 93       	st	X, r24
    13be:	05 c0       	rjmp	.+10     	; 0x13ca <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    13c0:	19 82       	std	Y+1, r1	; 0x01
    13c2:	03 c0       	rjmp	.+6      	; 0x13ca <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		default:
			LOC_Error_State_ReturnState = NOK;
    13c4:	19 82       	std	Y+1, r1	; 0x01
    13c6:	01 c0       	rjmp	.+2      	; 0x13ca <MDIO_Error_State_SetPinDirection+0x1f2>
			break ;
		}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
    13c8:	19 82       	std	Y+1, r1	; 0x01
	}
	return  LOC_Error_State_ReturnState ;
    13ca:	89 81       	ldd	r24, Y+1	; 0x01

}
    13cc:	26 96       	adiw	r28, 0x06	; 6
    13ce:	0f b6       	in	r0, 0x3f	; 63
    13d0:	f8 94       	cli
    13d2:	de bf       	out	0x3e, r29	; 62
    13d4:	0f be       	out	0x3f, r0	; 63
    13d6:	cd bf       	out	0x3d, r28	; 61
    13d8:	cf 91       	pop	r28
    13da:	df 91       	pop	r29
    13dc:	08 95       	ret

000013de <MDIO_Error_State_SetPortDirection>:

/*Set Port Direction Function */
Error_State  MDIO_Error_State_SetPortDirection(u8 Copy_u8PortNumber,u8 Copy_u8PortDirection)
{
    13de:	df 93       	push	r29
    13e0:	cf 93       	push	r28
    13e2:	00 d0       	rcall	.+0      	; 0x13e4 <MDIO_Error_State_SetPortDirection+0x6>
    13e4:	00 d0       	rcall	.+0      	; 0x13e6 <MDIO_Error_State_SetPortDirection+0x8>
    13e6:	0f 92       	push	r0
    13e8:	cd b7       	in	r28, 0x3d	; 61
    13ea:	de b7       	in	r29, 0x3e	; 62
    13ec:	8a 83       	std	Y+2, r24	; 0x02
    13ee:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState = OK;
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8PortDirection==PORT_OUTPUT)||(Copy_u8PortDirection==PORT_INPUT))
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	8f 3f       	cpi	r24, 0xFF	; 255
    13f8:	19 f0       	breq	.+6      	; 0x1400 <MDIO_Error_State_SetPortDirection+0x22>
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	88 23       	and	r24, r24
    13fe:	a9 f5       	brne	.+106    	; 0x146a <MDIO_Error_State_SetPortDirection+0x8c>
	{
		switch(Copy_u8PortNumber)
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	3d 83       	std	Y+5, r19	; 0x05
    1408:	2c 83       	std	Y+4, r18	; 0x04
    140a:	8c 81       	ldd	r24, Y+4	; 0x04
    140c:	9d 81       	ldd	r25, Y+5	; 0x05
    140e:	81 30       	cpi	r24, 0x01	; 1
    1410:	91 05       	cpc	r25, r1
    1412:	d1 f0       	breq	.+52     	; 0x1448 <MDIO_Error_State_SetPortDirection+0x6a>
    1414:	2c 81       	ldd	r18, Y+4	; 0x04
    1416:	3d 81       	ldd	r19, Y+5	; 0x05
    1418:	22 30       	cpi	r18, 0x02	; 2
    141a:	31 05       	cpc	r19, r1
    141c:	2c f4       	brge	.+10     	; 0x1428 <MDIO_Error_State_SetPortDirection+0x4a>
    141e:	8c 81       	ldd	r24, Y+4	; 0x04
    1420:	9d 81       	ldd	r25, Y+5	; 0x05
    1422:	00 97       	sbiw	r24, 0x00	; 0
    1424:	61 f0       	breq	.+24     	; 0x143e <MDIO_Error_State_SetPortDirection+0x60>
    1426:	1f c0       	rjmp	.+62     	; 0x1466 <MDIO_Error_State_SetPortDirection+0x88>
    1428:	2c 81       	ldd	r18, Y+4	; 0x04
    142a:	3d 81       	ldd	r19, Y+5	; 0x05
    142c:	22 30       	cpi	r18, 0x02	; 2
    142e:	31 05       	cpc	r19, r1
    1430:	81 f0       	breq	.+32     	; 0x1452 <MDIO_Error_State_SetPortDirection+0x74>
    1432:	8c 81       	ldd	r24, Y+4	; 0x04
    1434:	9d 81       	ldd	r25, Y+5	; 0x05
    1436:	83 30       	cpi	r24, 0x03	; 3
    1438:	91 05       	cpc	r25, r1
    143a:	81 f0       	breq	.+32     	; 0x145c <MDIO_Error_State_SetPortDirection+0x7e>
    143c:	14 c0       	rjmp	.+40     	; 0x1466 <MDIO_Error_State_SetPortDirection+0x88>
		{
		case MDIO_PORTA:
			DDRA = Copy_u8PortDirection;
    143e:	ea e3       	ldi	r30, 0x3A	; 58
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	80 83       	st	Z, r24
    1446:	12 c0       	rjmp	.+36     	; 0x146c <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTB:
			DDRB = Copy_u8PortDirection;
    1448:	e7 e3       	ldi	r30, 0x37	; 55
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	80 83       	st	Z, r24
    1450:	0d c0       	rjmp	.+26     	; 0x146c <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTC:
			DDRC = Copy_u8PortDirection;
    1452:	e4 e3       	ldi	r30, 0x34	; 52
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	8b 81       	ldd	r24, Y+3	; 0x03
    1458:	80 83       	st	Z, r24
    145a:	08 c0       	rjmp	.+16     	; 0x146c <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTD:
			DDRD = Copy_u8PortDirection;
    145c:	e1 e3       	ldi	r30, 0x31	; 49
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	80 83       	st	Z, r24
    1464:	03 c0       	rjmp	.+6      	; 0x146c <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		default:
			LOC_Error_State_ReturnState = NOK;
    1466:	19 82       	std	Y+1, r1	; 0x01
    1468:	01 c0       	rjmp	.+2      	; 0x146c <MDIO_Error_State_SetPortDirection+0x8e>
			break ;
		}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
    146a:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState ;
    146c:	89 81       	ldd	r24, Y+1	; 0x01
}
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	cf 91       	pop	r28
    147a:	df 91       	pop	r29
    147c:	08 95       	ret

0000147e <MDIO_Error_State_SetPinValue>:

/*Set Pin Value Function */
Error_State  MDIO_Error_State_SetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8 Copy_u8PinValue)
{
    147e:	df 93       	push	r29
    1480:	cf 93       	push	r28
    1482:	00 d0       	rcall	.+0      	; 0x1484 <MDIO_Error_State_SetPinValue+0x6>
    1484:	00 d0       	rcall	.+0      	; 0x1486 <MDIO_Error_State_SetPinValue+0x8>
    1486:	00 d0       	rcall	.+0      	; 0x1488 <MDIO_Error_State_SetPinValue+0xa>
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
    148c:	8a 83       	std	Y+2, r24	; 0x02
    148e:	6b 83       	std	Y+3, r22	; 0x03
    1490:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	89 83       	std	Y+1, r24	; 0x01
		if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
    1496:	8a 81       	ldd	r24, Y+2	; 0x02
    1498:	88 30       	cpi	r24, 0x08	; 8
    149a:	08 f0       	brcs	.+2      	; 0x149e <MDIO_Error_State_SetPinValue+0x20>
    149c:	e8 c0       	rjmp	.+464    	; 0x166e <MDIO_Error_State_SetPinValue+0x1f0>
		{
			switch (Copy_u8PortNumber)
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	3e 83       	std	Y+6, r19	; 0x06
    14a6:	2d 83       	std	Y+5, r18	; 0x05
    14a8:	8d 81       	ldd	r24, Y+5	; 0x05
    14aa:	9e 81       	ldd	r25, Y+6	; 0x06
    14ac:	81 30       	cpi	r24, 0x01	; 1
    14ae:	91 05       	cpc	r25, r1
    14b0:	09 f4       	brne	.+2      	; 0x14b4 <MDIO_Error_State_SetPinValue+0x36>
    14b2:	48 c0       	rjmp	.+144    	; 0x1544 <MDIO_Error_State_SetPinValue+0xc6>
    14b4:	2d 81       	ldd	r18, Y+5	; 0x05
    14b6:	3e 81       	ldd	r19, Y+6	; 0x06
    14b8:	22 30       	cpi	r18, 0x02	; 2
    14ba:	31 05       	cpc	r19, r1
    14bc:	2c f4       	brge	.+10     	; 0x14c8 <MDIO_Error_State_SetPinValue+0x4a>
    14be:	8d 81       	ldd	r24, Y+5	; 0x05
    14c0:	9e 81       	ldd	r25, Y+6	; 0x06
    14c2:	00 97       	sbiw	r24, 0x00	; 0
    14c4:	71 f0       	breq	.+28     	; 0x14e2 <MDIO_Error_State_SetPinValue+0x64>
    14c6:	d1 c0       	rjmp	.+418    	; 0x166a <MDIO_Error_State_SetPinValue+0x1ec>
    14c8:	2d 81       	ldd	r18, Y+5	; 0x05
    14ca:	3e 81       	ldd	r19, Y+6	; 0x06
    14cc:	22 30       	cpi	r18, 0x02	; 2
    14ce:	31 05       	cpc	r19, r1
    14d0:	09 f4       	brne	.+2      	; 0x14d4 <MDIO_Error_State_SetPinValue+0x56>
    14d2:	69 c0       	rjmp	.+210    	; 0x15a6 <MDIO_Error_State_SetPinValue+0x128>
    14d4:	8d 81       	ldd	r24, Y+5	; 0x05
    14d6:	9e 81       	ldd	r25, Y+6	; 0x06
    14d8:	83 30       	cpi	r24, 0x03	; 3
    14da:	91 05       	cpc	r25, r1
    14dc:	09 f4       	brne	.+2      	; 0x14e0 <MDIO_Error_State_SetPinValue+0x62>
    14de:	94 c0       	rjmp	.+296    	; 0x1608 <MDIO_Error_State_SetPinValue+0x18a>
    14e0:	c4 c0       	rjmp	.+392    	; 0x166a <MDIO_Error_State_SetPinValue+0x1ec>
			{

			case  MDIO_PORTA:
				if(Copy_u8PinValue==PIN_HIGH)
    14e2:	8c 81       	ldd	r24, Y+4	; 0x04
    14e4:	81 30       	cpi	r24, 0x01	; 1
    14e6:	a1 f4       	brne	.+40     	; 0x1510 <MDIO_Error_State_SetPinValue+0x92>
				{
					SET_BIT(PORTA,Copy_u8PinNumber);
    14e8:	ab e3       	ldi	r26, 0x3B	; 59
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	eb e3       	ldi	r30, 0x3B	; 59
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	48 2f       	mov	r20, r24
    14f4:	8a 81       	ldd	r24, Y+2	; 0x02
    14f6:	28 2f       	mov	r18, r24
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	02 2e       	mov	r0, r18
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <MDIO_Error_State_SetPinValue+0x88>
    1502:	88 0f       	add	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	0a 94       	dec	r0
    1508:	e2 f7       	brpl	.-8      	; 0x1502 <MDIO_Error_State_SetPinValue+0x84>
    150a:	84 2b       	or	r24, r20
    150c:	8c 93       	st	X, r24
    150e:	b0 c0       	rjmp	.+352    	; 0x1670 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    1510:	8c 81       	ldd	r24, Y+4	; 0x04
    1512:	88 23       	and	r24, r24
    1514:	a9 f4       	brne	.+42     	; 0x1540 <MDIO_Error_State_SetPinValue+0xc2>
				{
					CLR_BIT(PORTA,Copy_u8PinNumber);
    1516:	ab e3       	ldi	r26, 0x3B	; 59
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	eb e3       	ldi	r30, 0x3B	; 59
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	48 2f       	mov	r20, r24
    1522:	8a 81       	ldd	r24, Y+2	; 0x02
    1524:	28 2f       	mov	r18, r24
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	02 2e       	mov	r0, r18
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <MDIO_Error_State_SetPinValue+0xb6>
    1530:	88 0f       	add	r24, r24
    1532:	99 1f       	adc	r25, r25
    1534:	0a 94       	dec	r0
    1536:	e2 f7       	brpl	.-8      	; 0x1530 <MDIO_Error_State_SetPinValue+0xb2>
    1538:	80 95       	com	r24
    153a:	84 23       	and	r24, r20
    153c:	8c 93       	st	X, r24
    153e:	98 c0       	rjmp	.+304    	; 0x1670 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    1540:	19 82       	std	Y+1, r1	; 0x01
    1542:	96 c0       	rjmp	.+300    	; 0x1670 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			case  MDIO_PORTB:
				if(Copy_u8PinValue==PIN_HIGH)
    1544:	8c 81       	ldd	r24, Y+4	; 0x04
    1546:	81 30       	cpi	r24, 0x01	; 1
    1548:	a1 f4       	brne	.+40     	; 0x1572 <MDIO_Error_State_SetPinValue+0xf4>
				{
					SET_BIT(PORTB,Copy_u8PinNumber);
    154a:	a8 e3       	ldi	r26, 0x38	; 56
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	e8 e3       	ldi	r30, 0x38	; 56
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	48 2f       	mov	r20, r24
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	02 2e       	mov	r0, r18
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <MDIO_Error_State_SetPinValue+0xea>
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	0a 94       	dec	r0
    156a:	e2 f7       	brpl	.-8      	; 0x1564 <MDIO_Error_State_SetPinValue+0xe6>
    156c:	84 2b       	or	r24, r20
    156e:	8c 93       	st	X, r24
    1570:	7f c0       	rjmp	.+254    	; 0x1670 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    1572:	8c 81       	ldd	r24, Y+4	; 0x04
    1574:	88 23       	and	r24, r24
    1576:	a9 f4       	brne	.+42     	; 0x15a2 <MDIO_Error_State_SetPinValue+0x124>
				{
					CLR_BIT(PORTB,Copy_u8PinNumber);
    1578:	a8 e3       	ldi	r26, 0x38	; 56
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e8 e3       	ldi	r30, 0x38	; 56
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	48 2f       	mov	r20, r24
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	28 2f       	mov	r18, r24
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	02 2e       	mov	r0, r18
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <MDIO_Error_State_SetPinValue+0x118>
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	0a 94       	dec	r0
    1598:	e2 f7       	brpl	.-8      	; 0x1592 <MDIO_Error_State_SetPinValue+0x114>
    159a:	80 95       	com	r24
    159c:	84 23       	and	r24, r20
    159e:	8c 93       	st	X, r24
    15a0:	67 c0       	rjmp	.+206    	; 0x1670 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    15a2:	19 82       	std	Y+1, r1	; 0x01
    15a4:	65 c0       	rjmp	.+202    	; 0x1670 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			case  MDIO_PORTC:
				if(Copy_u8PinValue==PIN_HIGH)
    15a6:	8c 81       	ldd	r24, Y+4	; 0x04
    15a8:	81 30       	cpi	r24, 0x01	; 1
    15aa:	a1 f4       	brne	.+40     	; 0x15d4 <MDIO_Error_State_SetPinValue+0x156>
				{
					SET_BIT(PORTC,Copy_u8PinNumber);
    15ac:	a5 e3       	ldi	r26, 0x35	; 53
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	e5 e3       	ldi	r30, 0x35	; 53
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	48 2f       	mov	r20, r24
    15b8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ba:	28 2f       	mov	r18, r24
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	02 2e       	mov	r0, r18
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <MDIO_Error_State_SetPinValue+0x14c>
    15c6:	88 0f       	add	r24, r24
    15c8:	99 1f       	adc	r25, r25
    15ca:	0a 94       	dec	r0
    15cc:	e2 f7       	brpl	.-8      	; 0x15c6 <MDIO_Error_State_SetPinValue+0x148>
    15ce:	84 2b       	or	r24, r20
    15d0:	8c 93       	st	X, r24
    15d2:	4e c0       	rjmp	.+156    	; 0x1670 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    15d4:	8c 81       	ldd	r24, Y+4	; 0x04
    15d6:	88 23       	and	r24, r24
    15d8:	a9 f4       	brne	.+42     	; 0x1604 <MDIO_Error_State_SetPinValue+0x186>
				{
					CLR_BIT(PORTC,Copy_u8PinNumber);
    15da:	a5 e3       	ldi	r26, 0x35	; 53
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	e5 e3       	ldi	r30, 0x35	; 53
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	48 2f       	mov	r20, r24
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	28 2f       	mov	r18, r24
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	02 2e       	mov	r0, r18
    15f2:	02 c0       	rjmp	.+4      	; 0x15f8 <MDIO_Error_State_SetPinValue+0x17a>
    15f4:	88 0f       	add	r24, r24
    15f6:	99 1f       	adc	r25, r25
    15f8:	0a 94       	dec	r0
    15fa:	e2 f7       	brpl	.-8      	; 0x15f4 <MDIO_Error_State_SetPinValue+0x176>
    15fc:	80 95       	com	r24
    15fe:	84 23       	and	r24, r20
    1600:	8c 93       	st	X, r24
    1602:	36 c0       	rjmp	.+108    	; 0x1670 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    1604:	19 82       	std	Y+1, r1	; 0x01
    1606:	34 c0       	rjmp	.+104    	; 0x1670 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break;
			case  MDIO_PORTD:
				if(Copy_u8PinValue==PIN_HIGH)
    1608:	8c 81       	ldd	r24, Y+4	; 0x04
    160a:	81 30       	cpi	r24, 0x01	; 1
    160c:	a1 f4       	brne	.+40     	; 0x1636 <MDIO_Error_State_SetPinValue+0x1b8>
				{
					SET_BIT(PORTD,Copy_u8PinNumber);
    160e:	a2 e3       	ldi	r26, 0x32	; 50
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	e2 e3       	ldi	r30, 0x32	; 50
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	48 2f       	mov	r20, r24
    161a:	8a 81       	ldd	r24, Y+2	; 0x02
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	02 2e       	mov	r0, r18
    1626:	02 c0       	rjmp	.+4      	; 0x162c <MDIO_Error_State_SetPinValue+0x1ae>
    1628:	88 0f       	add	r24, r24
    162a:	99 1f       	adc	r25, r25
    162c:	0a 94       	dec	r0
    162e:	e2 f7       	brpl	.-8      	; 0x1628 <MDIO_Error_State_SetPinValue+0x1aa>
    1630:	84 2b       	or	r24, r20
    1632:	8c 93       	st	X, r24
    1634:	1d c0       	rjmp	.+58     	; 0x1670 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    1636:	8c 81       	ldd	r24, Y+4	; 0x04
    1638:	88 23       	and	r24, r24
    163a:	a9 f4       	brne	.+42     	; 0x1666 <MDIO_Error_State_SetPinValue+0x1e8>
				{
					CLR_BIT(PORTD,Copy_u8PinNumber);
    163c:	a2 e3       	ldi	r26, 0x32	; 50
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	e2 e3       	ldi	r30, 0x32	; 50
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	48 2f       	mov	r20, r24
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	28 2f       	mov	r18, r24
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	02 2e       	mov	r0, r18
    1654:	02 c0       	rjmp	.+4      	; 0x165a <MDIO_Error_State_SetPinValue+0x1dc>
    1656:	88 0f       	add	r24, r24
    1658:	99 1f       	adc	r25, r25
    165a:	0a 94       	dec	r0
    165c:	e2 f7       	brpl	.-8      	; 0x1656 <MDIO_Error_State_SetPinValue+0x1d8>
    165e:	80 95       	com	r24
    1660:	84 23       	and	r24, r20
    1662:	8c 93       	st	X, r24
    1664:	05 c0       	rjmp	.+10     	; 0x1670 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    1666:	19 82       	std	Y+1, r1	; 0x01
    1668:	03 c0       	rjmp	.+6      	; 0x1670 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			default:
				LOC_Error_State_ReturnState = NOK;
    166a:	19 82       	std	Y+1, r1	; 0x01
    166c:	01 c0       	rjmp	.+2      	; 0x1670 <MDIO_Error_State_SetPinValue+0x1f2>
				break ;
			}
		}
		else
		{
			LOC_Error_State_ReturnState = NOK;
    166e:	19 82       	std	Y+1, r1	; 0x01
		}
		return  LOC_Error_State_ReturnState ;
    1670:	89 81       	ldd	r24, Y+1	; 0x01

}
    1672:	26 96       	adiw	r28, 0x06	; 6
    1674:	0f b6       	in	r0, 0x3f	; 63
    1676:	f8 94       	cli
    1678:	de bf       	out	0x3e, r29	; 62
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	cd bf       	out	0x3d, r28	; 61
    167e:	cf 91       	pop	r28
    1680:	df 91       	pop	r29
    1682:	08 95       	ret

00001684 <MDIO_Error_State_SetPortValue>:
/*Set Port Value Function */
Error_State  MDIO_Error_State_SetPortValue(u8 Copy_u8PortNumber,u8 Copy_u8PortValue)
{
    1684:	df 93       	push	r29
    1686:	cf 93       	push	r28
    1688:	00 d0       	rcall	.+0      	; 0x168a <MDIO_Error_State_SetPortValue+0x6>
    168a:	00 d0       	rcall	.+0      	; 0x168c <MDIO_Error_State_SetPortValue+0x8>
    168c:	0f 92       	push	r0
    168e:	cd b7       	in	r28, 0x3d	; 61
    1690:	de b7       	in	r29, 0x3e	; 62
    1692:	8a 83       	std	Y+2, r24	; 0x02
    1694:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState = OK;
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	89 83       	std	Y+1, r24	; 0x01

			switch(Copy_u8PortNumber)
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	28 2f       	mov	r18, r24
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	3d 83       	std	Y+5, r19	; 0x05
    16a2:	2c 83       	std	Y+4, r18	; 0x04
    16a4:	8c 81       	ldd	r24, Y+4	; 0x04
    16a6:	9d 81       	ldd	r25, Y+5	; 0x05
    16a8:	81 30       	cpi	r24, 0x01	; 1
    16aa:	91 05       	cpc	r25, r1
    16ac:	d1 f0       	breq	.+52     	; 0x16e2 <MDIO_Error_State_SetPortValue+0x5e>
    16ae:	2c 81       	ldd	r18, Y+4	; 0x04
    16b0:	3d 81       	ldd	r19, Y+5	; 0x05
    16b2:	22 30       	cpi	r18, 0x02	; 2
    16b4:	31 05       	cpc	r19, r1
    16b6:	2c f4       	brge	.+10     	; 0x16c2 <MDIO_Error_State_SetPortValue+0x3e>
    16b8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ba:	9d 81       	ldd	r25, Y+5	; 0x05
    16bc:	00 97       	sbiw	r24, 0x00	; 0
    16be:	61 f0       	breq	.+24     	; 0x16d8 <MDIO_Error_State_SetPortValue+0x54>
    16c0:	1f c0       	rjmp	.+62     	; 0x1700 <MDIO_Error_State_SetPortValue+0x7c>
    16c2:	2c 81       	ldd	r18, Y+4	; 0x04
    16c4:	3d 81       	ldd	r19, Y+5	; 0x05
    16c6:	22 30       	cpi	r18, 0x02	; 2
    16c8:	31 05       	cpc	r19, r1
    16ca:	81 f0       	breq	.+32     	; 0x16ec <MDIO_Error_State_SetPortValue+0x68>
    16cc:	8c 81       	ldd	r24, Y+4	; 0x04
    16ce:	9d 81       	ldd	r25, Y+5	; 0x05
    16d0:	83 30       	cpi	r24, 0x03	; 3
    16d2:	91 05       	cpc	r25, r1
    16d4:	81 f0       	breq	.+32     	; 0x16f6 <MDIO_Error_State_SetPortValue+0x72>
    16d6:	14 c0       	rjmp	.+40     	; 0x1700 <MDIO_Error_State_SetPortValue+0x7c>
			{
			case MDIO_PORTA:
				PORTA = Copy_u8PortValue;
    16d8:	eb e3       	ldi	r30, 0x3B	; 59
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	80 83       	st	Z, r24
    16e0:	10 c0       	rjmp	.+32     	; 0x1702 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTB:
				PORTB = Copy_u8PortValue;
    16e2:	e8 e3       	ldi	r30, 0x38	; 56
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	8b 81       	ldd	r24, Y+3	; 0x03
    16e8:	80 83       	st	Z, r24
    16ea:	0b c0       	rjmp	.+22     	; 0x1702 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTC:
				PORTC = Copy_u8PortValue;
    16ec:	e5 e3       	ldi	r30, 0x35	; 53
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	8b 81       	ldd	r24, Y+3	; 0x03
    16f2:	80 83       	st	Z, r24
    16f4:	06 c0       	rjmp	.+12     	; 0x1702 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTD:
				PORTD = Copy_u8PortValue;
    16f6:	e2 e3       	ldi	r30, 0x32	; 50
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	8b 81       	ldd	r24, Y+3	; 0x03
    16fc:	80 83       	st	Z, r24
    16fe:	01 c0       	rjmp	.+2      	; 0x1702 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			default:
				LOC_Error_State_ReturnState = NOK;
    1700:	19 82       	std	Y+1, r1	; 0x01
				break ;
			}

		return LOC_Error_State_ReturnState ;
    1702:	89 81       	ldd	r24, Y+1	; 0x01
}
    1704:	0f 90       	pop	r0
    1706:	0f 90       	pop	r0
    1708:	0f 90       	pop	r0
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	cf 91       	pop	r28
    1710:	df 91       	pop	r29
    1712:	08 95       	ret

00001714 <MDIO_Error_State_GetPinValue>:
/*Get Pin Value Function */
Error_State  MDIO_Error_State_GetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8* P_u8PinValue)
{
    1714:	df 93       	push	r29
    1716:	cf 93       	push	r28
    1718:	cd b7       	in	r28, 0x3d	; 61
    171a:	de b7       	in	r29, 0x3e	; 62
    171c:	27 97       	sbiw	r28, 0x07	; 7
    171e:	0f b6       	in	r0, 0x3f	; 63
    1720:	f8 94       	cli
    1722:	de bf       	out	0x3e, r29	; 62
    1724:	0f be       	out	0x3f, r0	; 63
    1726:	cd bf       	out	0x3d, r28	; 61
    1728:	8a 83       	std	Y+2, r24	; 0x02
    172a:	6b 83       	std	Y+3, r22	; 0x03
    172c:	5d 83       	std	Y+5, r21	; 0x05
    172e:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	89 83       	std	Y+1, r24	; 0x01

	if(((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))&&(P_u8PinValue !=(u8*)NULL_POINTER))
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	88 30       	cpi	r24, 0x08	; 8
    1738:	08 f0       	brcs	.+2      	; 0x173c <MDIO_Error_State_GetPinValue+0x28>
    173a:	79 c0       	rjmp	.+242    	; 0x182e <MDIO_Error_State_GetPinValue+0x11a>
    173c:	8c 81       	ldd	r24, Y+4	; 0x04
    173e:	9d 81       	ldd	r25, Y+5	; 0x05
    1740:	81 30       	cpi	r24, 0x01	; 1
    1742:	91 05       	cpc	r25, r1
    1744:	09 f4       	brne	.+2      	; 0x1748 <MDIO_Error_State_GetPinValue+0x34>
    1746:	73 c0       	rjmp	.+230    	; 0x182e <MDIO_Error_State_GetPinValue+0x11a>
	{
	switch(Copy_u8PortNumber)
    1748:	8b 81       	ldd	r24, Y+3	; 0x03
    174a:	28 2f       	mov	r18, r24
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	3f 83       	std	Y+7, r19	; 0x07
    1750:	2e 83       	std	Y+6, r18	; 0x06
    1752:	4e 81       	ldd	r20, Y+6	; 0x06
    1754:	5f 81       	ldd	r21, Y+7	; 0x07
    1756:	41 30       	cpi	r20, 0x01	; 1
    1758:	51 05       	cpc	r21, r1
    175a:	59 f1       	breq	.+86     	; 0x17b2 <MDIO_Error_State_GetPinValue+0x9e>
    175c:	8e 81       	ldd	r24, Y+6	; 0x06
    175e:	9f 81       	ldd	r25, Y+7	; 0x07
    1760:	82 30       	cpi	r24, 0x02	; 2
    1762:	91 05       	cpc	r25, r1
    1764:	34 f4       	brge	.+12     	; 0x1772 <MDIO_Error_State_GetPinValue+0x5e>
    1766:	2e 81       	ldd	r18, Y+6	; 0x06
    1768:	3f 81       	ldd	r19, Y+7	; 0x07
    176a:	21 15       	cp	r18, r1
    176c:	31 05       	cpc	r19, r1
    176e:	69 f0       	breq	.+26     	; 0x178a <MDIO_Error_State_GetPinValue+0x76>
    1770:	5c c0       	rjmp	.+184    	; 0x182a <MDIO_Error_State_GetPinValue+0x116>
    1772:	4e 81       	ldd	r20, Y+6	; 0x06
    1774:	5f 81       	ldd	r21, Y+7	; 0x07
    1776:	42 30       	cpi	r20, 0x02	; 2
    1778:	51 05       	cpc	r21, r1
    177a:	79 f1       	breq	.+94     	; 0x17da <MDIO_Error_State_GetPinValue+0xc6>
    177c:	8e 81       	ldd	r24, Y+6	; 0x06
    177e:	9f 81       	ldd	r25, Y+7	; 0x07
    1780:	83 30       	cpi	r24, 0x03	; 3
    1782:	91 05       	cpc	r25, r1
    1784:	09 f4       	brne	.+2      	; 0x1788 <MDIO_Error_State_GetPinValue+0x74>
    1786:	3d c0       	rjmp	.+122    	; 0x1802 <MDIO_Error_State_GetPinValue+0xee>
    1788:	50 c0       	rjmp	.+160    	; 0x182a <MDIO_Error_State_GetPinValue+0x116>
				{
				case MDIO_PORTA:
					*P_u8PinValue= GET_BIT(PINA,Copy_u8PinNumber);
    178a:	e9 e3       	ldi	r30, 0x39	; 57
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	88 2f       	mov	r24, r24
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	a9 01       	movw	r20, r18
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <MDIO_Error_State_GetPinValue+0x8e>
    179e:	55 95       	asr	r21
    17a0:	47 95       	ror	r20
    17a2:	8a 95       	dec	r24
    17a4:	e2 f7       	brpl	.-8      	; 0x179e <MDIO_Error_State_GetPinValue+0x8a>
    17a6:	ca 01       	movw	r24, r20
    17a8:	81 70       	andi	r24, 0x01	; 1
    17aa:	ec 81       	ldd	r30, Y+4	; 0x04
    17ac:	fd 81       	ldd	r31, Y+5	; 0x05
    17ae:	80 83       	st	Z, r24
    17b0:	3f c0       	rjmp	.+126    	; 0x1830 <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTB:
					*P_u8PinValue= GET_BIT(PINB,Copy_u8PinNumber);
    17b2:	e6 e3       	ldi	r30, 0x36	; 54
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	28 2f       	mov	r18, r24
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	8a 81       	ldd	r24, Y+2	; 0x02
    17be:	88 2f       	mov	r24, r24
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	a9 01       	movw	r20, r18
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <MDIO_Error_State_GetPinValue+0xb6>
    17c6:	55 95       	asr	r21
    17c8:	47 95       	ror	r20
    17ca:	8a 95       	dec	r24
    17cc:	e2 f7       	brpl	.-8      	; 0x17c6 <MDIO_Error_State_GetPinValue+0xb2>
    17ce:	ca 01       	movw	r24, r20
    17d0:	81 70       	andi	r24, 0x01	; 1
    17d2:	ec 81       	ldd	r30, Y+4	; 0x04
    17d4:	fd 81       	ldd	r31, Y+5	; 0x05
    17d6:	80 83       	st	Z, r24
    17d8:	2b c0       	rjmp	.+86     	; 0x1830 <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTC:
					*P_u8PinValue= GET_BIT(PINC,Copy_u8PinNumber);
    17da:	e3 e3       	ldi	r30, 0x33	; 51
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	28 2f       	mov	r18, r24
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	8a 81       	ldd	r24, Y+2	; 0x02
    17e6:	88 2f       	mov	r24, r24
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	a9 01       	movw	r20, r18
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <MDIO_Error_State_GetPinValue+0xde>
    17ee:	55 95       	asr	r21
    17f0:	47 95       	ror	r20
    17f2:	8a 95       	dec	r24
    17f4:	e2 f7       	brpl	.-8      	; 0x17ee <MDIO_Error_State_GetPinValue+0xda>
    17f6:	ca 01       	movw	r24, r20
    17f8:	81 70       	andi	r24, 0x01	; 1
    17fa:	ec 81       	ldd	r30, Y+4	; 0x04
    17fc:	fd 81       	ldd	r31, Y+5	; 0x05
    17fe:	80 83       	st	Z, r24
    1800:	17 c0       	rjmp	.+46     	; 0x1830 <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTD:
					*P_u8PinValue= GET_BIT(PIND,Copy_u8PinNumber);
    1802:	e0 e3       	ldi	r30, 0x30	; 48
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	8a 81       	ldd	r24, Y+2	; 0x02
    180e:	88 2f       	mov	r24, r24
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	a9 01       	movw	r20, r18
    1814:	02 c0       	rjmp	.+4      	; 0x181a <MDIO_Error_State_GetPinValue+0x106>
    1816:	55 95       	asr	r21
    1818:	47 95       	ror	r20
    181a:	8a 95       	dec	r24
    181c:	e2 f7       	brpl	.-8      	; 0x1816 <MDIO_Error_State_GetPinValue+0x102>
    181e:	ca 01       	movw	r24, r20
    1820:	81 70       	andi	r24, 0x01	; 1
    1822:	ec 81       	ldd	r30, Y+4	; 0x04
    1824:	fd 81       	ldd	r31, Y+5	; 0x05
    1826:	80 83       	st	Z, r24
    1828:	03 c0       	rjmp	.+6      	; 0x1830 <MDIO_Error_State_GetPinValue+0x11c>
					break;
				default:
					LOC_Error_State_ReturnState = NOK;
    182a:	19 82       	std	Y+1, r1	; 0x01
    182c:	01 c0       	rjmp	.+2      	; 0x1830 <MDIO_Error_State_GetPinValue+0x11c>
					break ;
				}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
    182e:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_Error_State_ReturnState ;
    1830:	89 81       	ldd	r24, Y+1	; 0x01

}
    1832:	27 96       	adiw	r28, 0x07	; 7
    1834:	0f b6       	in	r0, 0x3f	; 63
    1836:	f8 94       	cli
    1838:	de bf       	out	0x3e, r29	; 62
    183a:	0f be       	out	0x3f, r0	; 63
    183c:	cd bf       	out	0x3d, r28	; 61
    183e:	cf 91       	pop	r28
    1840:	df 91       	pop	r29
    1842:	08 95       	ret

00001844 <MDIO_Error_State_SetNippleValue>:

/*Set Nipple Direction Function */

/*Set Nipple Values Function */
Error_State MDIO_Error_State_SetNippleValue(u8 Copy_u8PinStart,u8 Copy_u8PortNumber,u8 Copy_u8Value)
{
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	00 d0       	rcall	.+0      	; 0x184a <MDIO_Error_State_SetNippleValue+0x6>
    184a:	00 d0       	rcall	.+0      	; 0x184c <MDIO_Error_State_SetNippleValue+0x8>
    184c:	00 d0       	rcall	.+0      	; 0x184e <MDIO_Error_State_SetNippleValue+0xa>
    184e:	cd b7       	in	r28, 0x3d	; 61
    1850:	de b7       	in	r29, 0x3e	; 62
    1852:	8a 83       	std	Y+2, r24	; 0x02
    1854:	6b 83       	std	Y+3, r22	; 0x03
    1856:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState=OK;
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinStart<=4)
    185c:	8a 81       	ldd	r24, Y+2	; 0x02
    185e:	85 30       	cpi	r24, 0x05	; 5
    1860:	08 f0       	brcs	.+2      	; 0x1864 <MDIO_Error_State_SetNippleValue+0x20>
    1862:	c9 c0       	rjmp	.+402    	; 0x19f6 <MDIO_Error_State_SetNippleValue+0x1b2>
	{
		switch(Copy_u8PortNumber)
    1864:	8b 81       	ldd	r24, Y+3	; 0x03
    1866:	28 2f       	mov	r18, r24
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	3e 83       	std	Y+6, r19	; 0x06
    186c:	2d 83       	std	Y+5, r18	; 0x05
    186e:	6d 81       	ldd	r22, Y+5	; 0x05
    1870:	7e 81       	ldd	r23, Y+6	; 0x06
    1872:	61 30       	cpi	r22, 0x01	; 1
    1874:	71 05       	cpc	r23, r1
    1876:	09 f4       	brne	.+2      	; 0x187a <MDIO_Error_State_SetNippleValue+0x36>
    1878:	41 c0       	rjmp	.+130    	; 0x18fc <MDIO_Error_State_SetNippleValue+0xb8>
    187a:	8d 81       	ldd	r24, Y+5	; 0x05
    187c:	9e 81       	ldd	r25, Y+6	; 0x06
    187e:	82 30       	cpi	r24, 0x02	; 2
    1880:	91 05       	cpc	r25, r1
    1882:	34 f4       	brge	.+12     	; 0x1890 <MDIO_Error_State_SetNippleValue+0x4c>
    1884:	2d 81       	ldd	r18, Y+5	; 0x05
    1886:	3e 81       	ldd	r19, Y+6	; 0x06
    1888:	21 15       	cp	r18, r1
    188a:	31 05       	cpc	r19, r1
    188c:	71 f0       	breq	.+28     	; 0x18aa <MDIO_Error_State_SetNippleValue+0x66>
    188e:	b1 c0       	rjmp	.+354    	; 0x19f2 <MDIO_Error_State_SetNippleValue+0x1ae>
    1890:	6d 81       	ldd	r22, Y+5	; 0x05
    1892:	7e 81       	ldd	r23, Y+6	; 0x06
    1894:	62 30       	cpi	r22, 0x02	; 2
    1896:	71 05       	cpc	r23, r1
    1898:	09 f4       	brne	.+2      	; 0x189c <MDIO_Error_State_SetNippleValue+0x58>
    189a:	59 c0       	rjmp	.+178    	; 0x194e <MDIO_Error_State_SetNippleValue+0x10a>
    189c:	8d 81       	ldd	r24, Y+5	; 0x05
    189e:	9e 81       	ldd	r25, Y+6	; 0x06
    18a0:	83 30       	cpi	r24, 0x03	; 3
    18a2:	91 05       	cpc	r25, r1
    18a4:	09 f4       	brne	.+2      	; 0x18a8 <MDIO_Error_State_SetNippleValue+0x64>
    18a6:	7c c0       	rjmp	.+248    	; 0x19a0 <MDIO_Error_State_SetNippleValue+0x15c>
    18a8:	a4 c0       	rjmp	.+328    	; 0x19f2 <MDIO_Error_State_SetNippleValue+0x1ae>
		{
		case MDIO_PORTA:
			PORTA&=(~(0x0F<<Copy_u8PinStart));
    18aa:	ab e3       	ldi	r26, 0x3B	; 59
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	eb e3       	ldi	r30, 0x3B	; 59
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	48 2f       	mov	r20, r24
    18b6:	8a 81       	ldd	r24, Y+2	; 0x02
    18b8:	28 2f       	mov	r18, r24
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	8f e0       	ldi	r24, 0x0F	; 15
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <MDIO_Error_State_SetNippleValue+0x82>
    18c2:	88 0f       	add	r24, r24
    18c4:	99 1f       	adc	r25, r25
    18c6:	2a 95       	dec	r18
    18c8:	e2 f7       	brpl	.-8      	; 0x18c2 <MDIO_Error_State_SetNippleValue+0x7e>
    18ca:	80 95       	com	r24
    18cc:	84 23       	and	r24, r20
    18ce:	8c 93       	st	X, r24
			PORTA|=(Copy_u8Value<<Copy_u8PinStart);
    18d0:	ab e3       	ldi	r26, 0x3B	; 59
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	eb e3       	ldi	r30, 0x3B	; 59
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	48 2f       	mov	r20, r24
    18dc:	8c 81       	ldd	r24, Y+4	; 0x04
    18de:	28 2f       	mov	r18, r24
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	8a 81       	ldd	r24, Y+2	; 0x02
    18e4:	88 2f       	mov	r24, r24
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	b9 01       	movw	r22, r18
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <MDIO_Error_State_SetNippleValue+0xac>
    18ec:	66 0f       	add	r22, r22
    18ee:	77 1f       	adc	r23, r23
    18f0:	8a 95       	dec	r24
    18f2:	e2 f7       	brpl	.-8      	; 0x18ec <MDIO_Error_State_SetNippleValue+0xa8>
    18f4:	cb 01       	movw	r24, r22
    18f6:	84 2b       	or	r24, r20
    18f8:	8c 93       	st	X, r24
    18fa:	7e c0       	rjmp	.+252    	; 0x19f8 <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTB:
			PORTB&=(~(0x0F<<Copy_u8PinStart));
    18fc:	a8 e3       	ldi	r26, 0x38	; 56
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	e8 e3       	ldi	r30, 0x38	; 56
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	48 2f       	mov	r20, r24
    1908:	8a 81       	ldd	r24, Y+2	; 0x02
    190a:	28 2f       	mov	r18, r24
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	8f e0       	ldi	r24, 0x0F	; 15
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <MDIO_Error_State_SetNippleValue+0xd4>
    1914:	88 0f       	add	r24, r24
    1916:	99 1f       	adc	r25, r25
    1918:	2a 95       	dec	r18
    191a:	e2 f7       	brpl	.-8      	; 0x1914 <MDIO_Error_State_SetNippleValue+0xd0>
    191c:	80 95       	com	r24
    191e:	84 23       	and	r24, r20
    1920:	8c 93       	st	X, r24
			PORTB|=(Copy_u8Value<<Copy_u8PinStart);
    1922:	a8 e3       	ldi	r26, 0x38	; 56
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	e8 e3       	ldi	r30, 0x38	; 56
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	48 2f       	mov	r20, r24
    192e:	8c 81       	ldd	r24, Y+4	; 0x04
    1930:	28 2f       	mov	r18, r24
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	8a 81       	ldd	r24, Y+2	; 0x02
    1936:	88 2f       	mov	r24, r24
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	b9 01       	movw	r22, r18
    193c:	02 c0       	rjmp	.+4      	; 0x1942 <MDIO_Error_State_SetNippleValue+0xfe>
    193e:	66 0f       	add	r22, r22
    1940:	77 1f       	adc	r23, r23
    1942:	8a 95       	dec	r24
    1944:	e2 f7       	brpl	.-8      	; 0x193e <MDIO_Error_State_SetNippleValue+0xfa>
    1946:	cb 01       	movw	r24, r22
    1948:	84 2b       	or	r24, r20
    194a:	8c 93       	st	X, r24
    194c:	55 c0       	rjmp	.+170    	; 0x19f8 <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTC:
			PORTC&=(~(0x0F<<Copy_u8PinStart));
    194e:	a5 e3       	ldi	r26, 0x35	; 53
    1950:	b0 e0       	ldi	r27, 0x00	; 0
    1952:	e5 e3       	ldi	r30, 0x35	; 53
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	48 2f       	mov	r20, r24
    195a:	8a 81       	ldd	r24, Y+2	; 0x02
    195c:	28 2f       	mov	r18, r24
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	8f e0       	ldi	r24, 0x0F	; 15
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	02 c0       	rjmp	.+4      	; 0x196a <MDIO_Error_State_SetNippleValue+0x126>
    1966:	88 0f       	add	r24, r24
    1968:	99 1f       	adc	r25, r25
    196a:	2a 95       	dec	r18
    196c:	e2 f7       	brpl	.-8      	; 0x1966 <MDIO_Error_State_SetNippleValue+0x122>
    196e:	80 95       	com	r24
    1970:	84 23       	and	r24, r20
    1972:	8c 93       	st	X, r24
			PORTC|=(Copy_u8Value<<Copy_u8PinStart);
    1974:	a5 e3       	ldi	r26, 0x35	; 53
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	e5 e3       	ldi	r30, 0x35	; 53
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
    197e:	48 2f       	mov	r20, r24
    1980:	8c 81       	ldd	r24, Y+4	; 0x04
    1982:	28 2f       	mov	r18, r24
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	8a 81       	ldd	r24, Y+2	; 0x02
    1988:	88 2f       	mov	r24, r24
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	b9 01       	movw	r22, r18
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <MDIO_Error_State_SetNippleValue+0x150>
    1990:	66 0f       	add	r22, r22
    1992:	77 1f       	adc	r23, r23
    1994:	8a 95       	dec	r24
    1996:	e2 f7       	brpl	.-8      	; 0x1990 <MDIO_Error_State_SetNippleValue+0x14c>
    1998:	cb 01       	movw	r24, r22
    199a:	84 2b       	or	r24, r20
    199c:	8c 93       	st	X, r24
    199e:	2c c0       	rjmp	.+88     	; 0x19f8 <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTD:

			PORTD&=(~(0x0F<<Copy_u8PinStart));
    19a0:	a2 e3       	ldi	r26, 0x32	; 50
    19a2:	b0 e0       	ldi	r27, 0x00	; 0
    19a4:	e2 e3       	ldi	r30, 0x32	; 50
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	48 2f       	mov	r20, r24
    19ac:	8a 81       	ldd	r24, Y+2	; 0x02
    19ae:	28 2f       	mov	r18, r24
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	8f e0       	ldi	r24, 0x0F	; 15
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <MDIO_Error_State_SetNippleValue+0x178>
    19b8:	88 0f       	add	r24, r24
    19ba:	99 1f       	adc	r25, r25
    19bc:	2a 95       	dec	r18
    19be:	e2 f7       	brpl	.-8      	; 0x19b8 <MDIO_Error_State_SetNippleValue+0x174>
    19c0:	80 95       	com	r24
    19c2:	84 23       	and	r24, r20
    19c4:	8c 93       	st	X, r24
			PORTD|=(Copy_u8Value<<Copy_u8PinStart);
    19c6:	a2 e3       	ldi	r26, 0x32	; 50
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	e2 e3       	ldi	r30, 0x32	; 50
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	48 2f       	mov	r20, r24
    19d2:	8c 81       	ldd	r24, Y+4	; 0x04
    19d4:	28 2f       	mov	r18, r24
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	88 2f       	mov	r24, r24
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	b9 01       	movw	r22, r18
    19e0:	02 c0       	rjmp	.+4      	; 0x19e6 <MDIO_Error_State_SetNippleValue+0x1a2>
    19e2:	66 0f       	add	r22, r22
    19e4:	77 1f       	adc	r23, r23
    19e6:	8a 95       	dec	r24
    19e8:	e2 f7       	brpl	.-8      	; 0x19e2 <MDIO_Error_State_SetNippleValue+0x19e>
    19ea:	cb 01       	movw	r24, r22
    19ec:	84 2b       	or	r24, r20
    19ee:	8c 93       	st	X, r24
    19f0:	03 c0       	rjmp	.+6      	; 0x19f8 <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
    19f2:	19 82       	std	Y+1, r1	; 0x01
    19f4:	01 c0       	rjmp	.+2      	; 0x19f8 <MDIO_Error_State_SetNippleValue+0x1b4>
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
    19f6:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState;
    19f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    19fa:	26 96       	adiw	r28, 0x06	; 6
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	f8 94       	cli
    1a00:	de bf       	out	0x3e, r29	; 62
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	cd bf       	out	0x3d, r28	; 61
    1a06:	cf 91       	pop	r28
    1a08:	df 91       	pop	r29
    1a0a:	08 95       	ret

00001a0c <MDIO_VidActivePullUP>:

/*Active Pull Up Resistor Function */
void  MDIO_VidActivePullUP(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber)
{
    1a0c:	df 93       	push	r29
    1a0e:	cf 93       	push	r28
    1a10:	00 d0       	rcall	.+0      	; 0x1a12 <MDIO_VidActivePullUP+0x6>
    1a12:	cd b7       	in	r28, 0x3d	; 61
    1a14:	de b7       	in	r29, 0x3e	; 62
    1a16:	89 83       	std	Y+1, r24	; 0x01
    1a18:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_Error_State_SetPinDirection(Copy_u8PinNumber,Copy_u8PortNumber,PIN_INPUT);
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	6a 81       	ldd	r22, Y+2	; 0x02
    1a1e:	40 e0       	ldi	r20, 0x00	; 0
    1a20:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <MDIO_Error_State_SetPinDirection>
    MDIO_Error_State_SetPinValue( Copy_u8PinNumber, Copy_u8PortNumber,PIN_HIGH);
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
    1a26:	6a 81       	ldd	r22, Y+2	; 0x02
    1a28:	41 e0       	ldi	r20, 0x01	; 1
    1a2a:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>

}
    1a2e:	0f 90       	pop	r0
    1a30:	0f 90       	pop	r0
    1a32:	cf 91       	pop	r28
    1a34:	df 91       	pop	r29
    1a36:	08 95       	ret

00001a38 <MADC_VidInit>:
#include"MADC_Private.h"
#include"MADC_Interface.h"

/*ADC Initialization*/
void MADC_VidInit(void)
{
    1a38:	df 93       	push	r29
    1a3a:	cf 93       	push	r28
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
	/*Select Reference Voltage*/
#if MADC_SET_REFERENCEVOLATGE == MADC_AVCC_REFERENCEVOLATGE
	SET_BIT(ADMUX,6);
    1a40:	a7 e2       	ldi	r26, 0x27	; 39
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	e7 e2       	ldi	r30, 0x27	; 39
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	80 64       	ori	r24, 0x40	; 64
    1a4c:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,7);
    1a4e:	a7 e2       	ldi	r26, 0x27	; 39
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	e7 e2       	ldi	r30, 0x27	; 39
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	8f 77       	andi	r24, 0x7F	; 127
    1a5a:	8c 93       	st	X, r24
	SET_BIT(ADMUX,7);
#else
#error"ADC Reference Voltage Option I s not valid.... "
#endif
/*Set Prescaler*/
ADCSRA&=MADC_BIT_MASKING_PRESCALER;
    1a5c:	a6 e2       	ldi	r26, 0x26	; 38
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	e6 e2       	ldi	r30, 0x26	; 38
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	88 7f       	andi	r24, 0xF8	; 248
    1a68:	8c 93       	st	X, r24
ADCSRA|=MADC_SET_PRESCALER;
    1a6a:	a6 e2       	ldi	r26, 0x26	; 38
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	e6 e2       	ldi	r30, 0x26	; 38
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	81 60       	ori	r24, 0x01	; 1
    1a76:	8c 93       	st	X, r24

#if MADC_SET_ADJUST == MADC_LEFT_ADJUST
	SET_BIT(ADMUX,5);
#elif MADC_SET_ADJUST == MADC_RIGHT_ADJUST
	CLR_BIT(ADMUX,5);
    1a78:	a7 e2       	ldi	r26, 0x27	; 39
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	e7 e2       	ldi	r30, 0x27	; 39
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	8f 7d       	andi	r24, 0xDF	; 223
    1a84:	8c 93       	st	X, r24
#else
#error"ADC Left adjust option is not valid...."
#endif
/*Enable To ADC*/
SET_BIT(ADCSRA,7);
    1a86:	a6 e2       	ldi	r26, 0x26	; 38
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	e6 e2       	ldi	r30, 0x26	; 38
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	80 68       	ori	r24, 0x80	; 128
    1a92:	8c 93       	st	X, r24
}
    1a94:	cf 91       	pop	r28
    1a96:	df 91       	pop	r29
    1a98:	08 95       	ret

00001a9a <MADC_u16ADC_StartConversion>:
/*ADC Start Conversion-->Polling , Return ADC Value*/
u16 MADC_u16ADC_StartConversion(u8 Copy_u8Channel)
{
    1a9a:	df 93       	push	r29
    1a9c:	cf 93       	push	r28
    1a9e:	0f 92       	push	r0
    1aa0:	cd b7       	in	r28, 0x3d	; 61
    1aa2:	de b7       	in	r29, 0x3e	; 62
    1aa4:	89 83       	std	Y+1, r24	; 0x01
	/*Select Channel*/
	Copy_u8Channel&=MADC_BIT_MASKING_CHANNEL;
    1aa6:	89 81       	ldd	r24, Y+1	; 0x01
    1aa8:	87 70       	andi	r24, 0x07	; 7
    1aaa:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=MADC_BIT_MASKING_REG_CHANNEL;
    1aac:	a7 e2       	ldi	r26, 0x27	; 39
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	e7 e2       	ldi	r30, 0x27	; 39
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	80 7e       	andi	r24, 0xE0	; 224
    1ab8:	8c 93       	st	X, r24
	ADMUX|=Copy_u8Channel;
    1aba:	a7 e2       	ldi	r26, 0x27	; 39
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	e7 e2       	ldi	r30, 0x27	; 39
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	90 81       	ld	r25, Z
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
    1ac6:	89 2b       	or	r24, r25
    1ac8:	8c 93       	st	X, r24
   /*send Start Conversion*/
	SET_BIT(ADCSRA,6);
    1aca:	a6 e2       	ldi	r26, 0x26	; 38
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	e6 e2       	ldi	r30, 0x26	; 38
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	80 64       	ori	r24, 0x40	; 64
    1ad6:	8c 93       	st	X, r24
	/*Wait On ADC Conversion Completed Flag is set to one */
	while(GET_BIT(ADCSRA,4)==0);
    1ad8:	e6 e2       	ldi	r30, 0x26	; 38
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	82 95       	swap	r24
    1ae0:	8f 70       	andi	r24, 0x0F	; 15
    1ae2:	88 2f       	mov	r24, r24
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	81 70       	andi	r24, 0x01	; 1
    1ae8:	90 70       	andi	r25, 0x00	; 0
    1aea:	00 97       	sbiw	r24, 0x00	; 0
    1aec:	a9 f3       	breq	.-22     	; 0x1ad8 <MADC_u16ADC_StartConversion+0x3e>

	return ADC;
    1aee:	e4 e2       	ldi	r30, 0x24	; 36
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	91 81       	ldd	r25, Z+1	; 0x01
}
    1af6:	0f 90       	pop	r0
    1af8:	cf 91       	pop	r28
    1afa:	df 91       	pop	r29
    1afc:	08 95       	ret

00001afe <HSWITCH_VidInit_PullUP>:
 */

#include"../../MCAL/MDIO/MDIO_Interface.h"
#include"HSWITCH_Interface.h"
void HSWITCH_VidInit_PullUP(SWITCH_t *Copy_SWITCH_tSwitch)
{
    1afe:	df 93       	push	r29
    1b00:	cf 93       	push	r28
    1b02:	00 d0       	rcall	.+0      	; 0x1b04 <HSWITCH_VidInit_PullUP+0x6>
    1b04:	cd b7       	in	r28, 0x3d	; 61
    1b06:	de b7       	in	r29, 0x3e	; 62
    1b08:	9a 83       	std	Y+2, r25	; 0x02
    1b0a:	89 83       	std	Y+1, r24	; 0x01
 /*Set pin direction*/
  /*Active Pull up resistor*/
  MDIO_VidActivePullUP(Copy_SWITCH_tSwitch->Copy_u8PinNumber, Copy_SWITCH_tSwitch->Copy_u8PortNumber);
    1b0c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b0e:	fa 81       	ldd	r31, Y+2	; 0x02
    1b10:	81 81       	ldd	r24, Z+1	; 0x01
    1b12:	e9 81       	ldd	r30, Y+1	; 0x01
    1b14:	fa 81       	ldd	r31, Y+2	; 0x02
    1b16:	90 81       	ld	r25, Z
    1b18:	69 2f       	mov	r22, r25
    1b1a:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <MDIO_VidActivePullUP>
}
    1b1e:	0f 90       	pop	r0
    1b20:	0f 90       	pop	r0
    1b22:	cf 91       	pop	r28
    1b24:	df 91       	pop	r29
    1b26:	08 95       	ret

00001b28 <HSWITCH_u8SwitchState>:

/*get Switch Value*/
u8 HSWITCH_u8SwitchState(SWITCH_t *Copy_SWITCH_tSwitch)
{
    1b28:	df 93       	push	r29
    1b2a:	cf 93       	push	r28
    1b2c:	00 d0       	rcall	.+0      	; 0x1b2e <HSWITCH_u8SwitchState+0x6>
    1b2e:	0f 92       	push	r0
    1b30:	cd b7       	in	r28, 0x3d	; 61
    1b32:	de b7       	in	r29, 0x3e	; 62
    1b34:	9b 83       	std	Y+3, r25	; 0x03
    1b36:	8a 83       	std	Y+2, r24	; 0x02
       /*Default state for Switch NOT_PRESSED = 1 IN PULL UP RESISTANCE*/
     u8 Copy_u8Pinvalue = 1 ;
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	89 83       	std	Y+1, r24	; 0x01

	MDIO_Error_State_GetPinValue(Copy_SWITCH_tSwitch->Copy_u8PinNumber, Copy_SWITCH_tSwitch->Copy_u8PortNumber,&Copy_u8Pinvalue);
    1b3c:	ea 81       	ldd	r30, Y+2	; 0x02
    1b3e:	fb 81       	ldd	r31, Y+3	; 0x03
    1b40:	81 81       	ldd	r24, Z+1	; 0x01
    1b42:	ea 81       	ldd	r30, Y+2	; 0x02
    1b44:	fb 81       	ldd	r31, Y+3	; 0x03
    1b46:	90 81       	ld	r25, Z
    1b48:	69 2f       	mov	r22, r25
    1b4a:	9e 01       	movw	r18, r28
    1b4c:	2f 5f       	subi	r18, 0xFF	; 255
    1b4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b50:	a9 01       	movw	r20, r18
    1b52:	0e 94 8a 0b 	call	0x1714	; 0x1714 <MDIO_Error_State_GetPinValue>


return Copy_u8Pinvalue ;
    1b56:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b58:	0f 90       	pop	r0
    1b5a:	0f 90       	pop	r0
    1b5c:	0f 90       	pop	r0
    1b5e:	cf 91       	pop	r28
    1b60:	df 91       	pop	r29
    1b62:	08 95       	ret

00001b64 <HSEVEN_SEGMENT_VidInit>:



/*Seven Segment initialization*/
void HSEVEN_SEGMENT_VidInit(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG)
{
    1b64:	df 93       	push	r29
    1b66:	cf 93       	push	r28
    1b68:	00 d0       	rcall	.+0      	; 0x1b6a <HSEVEN_SEGMENT_VidInit+0x6>
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
    1b6e:	9a 83       	std	Y+2, r25	; 0x02
    1b70:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPortDirection(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,PORT_OUTPUT);
    1b72:	e9 81       	ldd	r30, Y+1	; 0x01
    1b74:	fa 81       	ldd	r31, Y+2	; 0x02
    1b76:	80 81       	ld	r24, Z
    1b78:	6f ef       	ldi	r22, 0xFF	; 255
    1b7a:	0e 94 ef 09 	call	0x13de	; 0x13de <MDIO_Error_State_SetPortDirection>
}
    1b7e:	0f 90       	pop	r0
    1b80:	0f 90       	pop	r0
    1b82:	cf 91       	pop	r28
    1b84:	df 91       	pop	r29
    1b86:	08 95       	ret

00001b88 <HSEVEN_SEGMENT_VidOff>:

/*Seven Segment OFF*/
void HSEVEN_SEGMENT_VidOff(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG,u8 Copy_u8Off)
{
    1b88:	df 93       	push	r29
    1b8a:	cf 93       	push	r28
    1b8c:	00 d0       	rcall	.+0      	; 0x1b8e <HSEVEN_SEGMENT_VidOff+0x6>
    1b8e:	0f 92       	push	r0
    1b90:	cd b7       	in	r28, 0x3d	; 61
    1b92:	de b7       	in	r29, 0x3e	; 62
    1b94:	9a 83       	std	Y+2, r25	; 0x02
    1b96:	89 83       	std	Y+1, r24	; 0x01
    1b98:	6b 83       	std	Y+3, r22	; 0x03
	if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_CATHODE)
    1b9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b9e:	81 81       	ldd	r24, Z+1	; 0x01
    1ba0:	81 30       	cpi	r24, 0x01	; 1
    1ba2:	31 f4       	brne	.+12     	; 0x1bb0 <HSEVEN_SEGMENT_VidOff+0x28>
	{
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,Copy_u8Off);
    1ba4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ba6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ba8:	80 81       	ld	r24, Z
    1baa:	6b 81       	ldd	r22, Y+3	; 0x03
    1bac:	0e 94 42 0b 	call	0x1684	; 0x1684 <MDIO_Error_State_SetPortValue>
	}
	if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_ANODE)
    1bb0:	e9 81       	ldd	r30, Y+1	; 0x01
    1bb2:	fa 81       	ldd	r31, Y+2	; 0x02
    1bb4:	81 81       	ldd	r24, Z+1	; 0x01
    1bb6:	88 23       	and	r24, r24
    1bb8:	51 f4       	brne	.+20     	; 0x1bce <HSEVEN_SEGMENT_VidOff+0x46>
	{
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~Copy_u8Off);
    1bba:	e9 81       	ldd	r30, Y+1	; 0x01
    1bbc:	fa 81       	ldd	r31, Y+2	; 0x02
    1bbe:	20 81       	ld	r18, Z
    1bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc2:	98 2f       	mov	r25, r24
    1bc4:	90 95       	com	r25
    1bc6:	82 2f       	mov	r24, r18
    1bc8:	69 2f       	mov	r22, r25
    1bca:	0e 94 42 0b 	call	0x1684	; 0x1684 <MDIO_Error_State_SetPortValue>
	}
}
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	cf 91       	pop	r28
    1bd6:	df 91       	pop	r29
    1bd8:	08 95       	ret

00001bda <HSEVEN_SEGMENT_VidDisplayNumber>:



/*Display a Number */
void HSEVEN_SEGMENT_VidDisplayNumber(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG,u8 Copy_u8Number)
{
    1bda:	df 93       	push	r29
    1bdc:	cf 93       	push	r28
    1bde:	cd b7       	in	r28, 0x3d	; 61
    1be0:	de b7       	in	r29, 0x3e	; 62
    1be2:	27 97       	sbiw	r28, 0x07	; 7
    1be4:	0f b6       	in	r0, 0x3f	; 63
    1be6:	f8 94       	cli
    1be8:	de bf       	out	0x3e, r29	; 62
    1bea:	0f be       	out	0x3f, r0	; 63
    1bec:	cd bf       	out	0x3d, r28	; 61
    1bee:	9a 83       	std	Y+2, r25	; 0x02
    1bf0:	89 83       	std	Y+1, r24	; 0x01
    1bf2:	6b 83       	std	Y+3, r22	; 0x03
if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_CATHODE)
    1bf4:	e9 81       	ldd	r30, Y+1	; 0x01
    1bf6:	fa 81       	ldd	r31, Y+2	; 0x02
    1bf8:	81 81       	ldd	r24, Z+1	; 0x01
    1bfa:	81 30       	cpi	r24, 0x01	; 1
    1bfc:	09 f0       	breq	.+2      	; 0x1c00 <HSEVEN_SEGMENT_VidDisplayNumber+0x26>
    1bfe:	9b c0       	rjmp	.+310    	; 0x1d36 <HSEVEN_SEGMENT_VidDisplayNumber+0x15c>
{
	switch(Copy_u8Number)
    1c00:	8b 81       	ldd	r24, Y+3	; 0x03
    1c02:	28 2f       	mov	r18, r24
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	3f 83       	std	Y+7, r19	; 0x07
    1c08:	2e 83       	std	Y+6, r18	; 0x06
    1c0a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c0c:	9f 81       	ldd	r25, Y+7	; 0x07
    1c0e:	84 30       	cpi	r24, 0x04	; 4
    1c10:	91 05       	cpc	r25, r1
    1c12:	09 f4       	brne	.+2      	; 0x1c16 <HSEVEN_SEGMENT_VidDisplayNumber+0x3c>
    1c14:	5f c0       	rjmp	.+190    	; 0x1cd4 <HSEVEN_SEGMENT_VidDisplayNumber+0xfa>
    1c16:	2e 81       	ldd	r18, Y+6	; 0x06
    1c18:	3f 81       	ldd	r19, Y+7	; 0x07
    1c1a:	25 30       	cpi	r18, 0x05	; 5
    1c1c:	31 05       	cpc	r19, r1
    1c1e:	dc f4       	brge	.+54     	; 0x1c56 <HSEVEN_SEGMENT_VidDisplayNumber+0x7c>
    1c20:	8e 81       	ldd	r24, Y+6	; 0x06
    1c22:	9f 81       	ldd	r25, Y+7	; 0x07
    1c24:	81 30       	cpi	r24, 0x01	; 1
    1c26:	91 05       	cpc	r25, r1
    1c28:	09 f4       	brne	.+2      	; 0x1c2c <HSEVEN_SEGMENT_VidDisplayNumber+0x52>
    1c2a:	3f c0       	rjmp	.+126    	; 0x1caa <HSEVEN_SEGMENT_VidDisplayNumber+0xd0>
    1c2c:	2e 81       	ldd	r18, Y+6	; 0x06
    1c2e:	3f 81       	ldd	r19, Y+7	; 0x07
    1c30:	22 30       	cpi	r18, 0x02	; 2
    1c32:	31 05       	cpc	r19, r1
    1c34:	2c f4       	brge	.+10     	; 0x1c40 <HSEVEN_SEGMENT_VidDisplayNumber+0x66>
    1c36:	8e 81       	ldd	r24, Y+6	; 0x06
    1c38:	9f 81       	ldd	r25, Y+7	; 0x07
    1c3a:	00 97       	sbiw	r24, 0x00	; 0
    1c3c:	79 f1       	breq	.+94     	; 0x1c9c <HSEVEN_SEGMENT_VidDisplayNumber+0xc2>
    1c3e:	74 c0       	rjmp	.+232    	; 0x1d28 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    1c40:	2e 81       	ldd	r18, Y+6	; 0x06
    1c42:	3f 81       	ldd	r19, Y+7	; 0x07
    1c44:	22 30       	cpi	r18, 0x02	; 2
    1c46:	31 05       	cpc	r19, r1
    1c48:	b9 f1       	breq	.+110    	; 0x1cb8 <HSEVEN_SEGMENT_VidDisplayNumber+0xde>
    1c4a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c4c:	9f 81       	ldd	r25, Y+7	; 0x07
    1c4e:	83 30       	cpi	r24, 0x03	; 3
    1c50:	91 05       	cpc	r25, r1
    1c52:	c9 f1       	breq	.+114    	; 0x1cc6 <HSEVEN_SEGMENT_VidDisplayNumber+0xec>
    1c54:	69 c0       	rjmp	.+210    	; 0x1d28 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    1c56:	2e 81       	ldd	r18, Y+6	; 0x06
    1c58:	3f 81       	ldd	r19, Y+7	; 0x07
    1c5a:	27 30       	cpi	r18, 0x07	; 7
    1c5c:	31 05       	cpc	r19, r1
    1c5e:	09 f4       	brne	.+2      	; 0x1c62 <HSEVEN_SEGMENT_VidDisplayNumber+0x88>
    1c60:	4e c0       	rjmp	.+156    	; 0x1cfe <HSEVEN_SEGMENT_VidDisplayNumber+0x124>
    1c62:	8e 81       	ldd	r24, Y+6	; 0x06
    1c64:	9f 81       	ldd	r25, Y+7	; 0x07
    1c66:	88 30       	cpi	r24, 0x08	; 8
    1c68:	91 05       	cpc	r25, r1
    1c6a:	5c f4       	brge	.+22     	; 0x1c82 <HSEVEN_SEGMENT_VidDisplayNumber+0xa8>
    1c6c:	2e 81       	ldd	r18, Y+6	; 0x06
    1c6e:	3f 81       	ldd	r19, Y+7	; 0x07
    1c70:	25 30       	cpi	r18, 0x05	; 5
    1c72:	31 05       	cpc	r19, r1
    1c74:	b1 f1       	breq	.+108    	; 0x1ce2 <HSEVEN_SEGMENT_VidDisplayNumber+0x108>
    1c76:	8e 81       	ldd	r24, Y+6	; 0x06
    1c78:	9f 81       	ldd	r25, Y+7	; 0x07
    1c7a:	86 30       	cpi	r24, 0x06	; 6
    1c7c:	91 05       	cpc	r25, r1
    1c7e:	c1 f1       	breq	.+112    	; 0x1cf0 <HSEVEN_SEGMENT_VidDisplayNumber+0x116>
    1c80:	53 c0       	rjmp	.+166    	; 0x1d28 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    1c82:	2e 81       	ldd	r18, Y+6	; 0x06
    1c84:	3f 81       	ldd	r19, Y+7	; 0x07
    1c86:	28 30       	cpi	r18, 0x08	; 8
    1c88:	31 05       	cpc	r19, r1
    1c8a:	09 f4       	brne	.+2      	; 0x1c8e <HSEVEN_SEGMENT_VidDisplayNumber+0xb4>
    1c8c:	3f c0       	rjmp	.+126    	; 0x1d0c <HSEVEN_SEGMENT_VidDisplayNumber+0x132>
    1c8e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c90:	9f 81       	ldd	r25, Y+7	; 0x07
    1c92:	89 30       	cpi	r24, 0x09	; 9
    1c94:	91 05       	cpc	r25, r1
    1c96:	09 f4       	brne	.+2      	; 0x1c9a <HSEVEN_SEGMENT_VidDisplayNumber+0xc0>
    1c98:	40 c0       	rjmp	.+128    	; 0x1d1a <HSEVEN_SEGMENT_VidDisplayNumber+0x140>
    1c9a:	46 c0       	rjmp	.+140    	; 0x1d28 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
	{
	case 0:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ZERO);
    1c9c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c9e:	fa 81       	ldd	r31, Y+2	; 0x02
    1ca0:	80 81       	ld	r24, Z
    1ca2:	6f e3       	ldi	r22, 0x3F	; 63
    1ca4:	0e 94 42 0b 	call	0x1684	; 0x1684 <MDIO_Error_State_SetPortValue>
    1ca8:	e6 c0       	rjmp	.+460    	; 0x1e76 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 1:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ONE);
    1caa:	e9 81       	ldd	r30, Y+1	; 0x01
    1cac:	fa 81       	ldd	r31, Y+2	; 0x02
    1cae:	80 81       	ld	r24, Z
    1cb0:	66 e0       	ldi	r22, 0x06	; 6
    1cb2:	0e 94 42 0b 	call	0x1684	; 0x1684 <MDIO_Error_State_SetPortValue>
    1cb6:	df c0       	rjmp	.+446    	; 0x1e76 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 2:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,TWO);
    1cb8:	e9 81       	ldd	r30, Y+1	; 0x01
    1cba:	fa 81       	ldd	r31, Y+2	; 0x02
    1cbc:	80 81       	ld	r24, Z
    1cbe:	6b e5       	ldi	r22, 0x5B	; 91
    1cc0:	0e 94 42 0b 	call	0x1684	; 0x1684 <MDIO_Error_State_SetPortValue>
    1cc4:	d8 c0       	rjmp	.+432    	; 0x1e76 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 3:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,THREE);
    1cc6:	e9 81       	ldd	r30, Y+1	; 0x01
    1cc8:	fa 81       	ldd	r31, Y+2	; 0x02
    1cca:	80 81       	ld	r24, Z
    1ccc:	6f e4       	ldi	r22, 0x4F	; 79
    1cce:	0e 94 42 0b 	call	0x1684	; 0x1684 <MDIO_Error_State_SetPortValue>
    1cd2:	d1 c0       	rjmp	.+418    	; 0x1e76 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 4:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,FOUR);
    1cd4:	e9 81       	ldd	r30, Y+1	; 0x01
    1cd6:	fa 81       	ldd	r31, Y+2	; 0x02
    1cd8:	80 81       	ld	r24, Z
    1cda:	66 e6       	ldi	r22, 0x66	; 102
    1cdc:	0e 94 42 0b 	call	0x1684	; 0x1684 <MDIO_Error_State_SetPortValue>
    1ce0:	ca c0       	rjmp	.+404    	; 0x1e76 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 5:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,FIVE);
    1ce2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ce4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ce6:	80 81       	ld	r24, Z
    1ce8:	6d e6       	ldi	r22, 0x6D	; 109
    1cea:	0e 94 42 0b 	call	0x1684	; 0x1684 <MDIO_Error_State_SetPortValue>
    1cee:	c3 c0       	rjmp	.+390    	; 0x1e76 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 6:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,SIX);
    1cf0:	e9 81       	ldd	r30, Y+1	; 0x01
    1cf2:	fa 81       	ldd	r31, Y+2	; 0x02
    1cf4:	80 81       	ld	r24, Z
    1cf6:	6d e7       	ldi	r22, 0x7D	; 125
    1cf8:	0e 94 42 0b 	call	0x1684	; 0x1684 <MDIO_Error_State_SetPortValue>
    1cfc:	bc c0       	rjmp	.+376    	; 0x1e76 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 7:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,SEVEN);
    1cfe:	e9 81       	ldd	r30, Y+1	; 0x01
    1d00:	fa 81       	ldd	r31, Y+2	; 0x02
    1d02:	80 81       	ld	r24, Z
    1d04:	67 e0       	ldi	r22, 0x07	; 7
    1d06:	0e 94 42 0b 	call	0x1684	; 0x1684 <MDIO_Error_State_SetPortValue>
    1d0a:	b5 c0       	rjmp	.+362    	; 0x1e76 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 8:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,EIGHT);
    1d0c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d0e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d10:	80 81       	ld	r24, Z
    1d12:	6f e7       	ldi	r22, 0x7F	; 127
    1d14:	0e 94 42 0b 	call	0x1684	; 0x1684 <MDIO_Error_State_SetPortValue>
    1d18:	ae c0       	rjmp	.+348    	; 0x1e76 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 9:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,NINE);
    1d1a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d1c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d1e:	80 81       	ld	r24, Z
    1d20:	6f e6       	ldi	r22, 0x6F	; 111
    1d22:	0e 94 42 0b 	call	0x1684	; 0x1684 <MDIO_Error_State_SetPortValue>
    1d26:	a7 c0       	rjmp	.+334    	; 0x1e76 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	default:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ERROR);
    1d28:	e9 81       	ldd	r30, Y+1	; 0x01
    1d2a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d2c:	80 81       	ld	r24, Z
    1d2e:	69 e7       	ldi	r22, 0x79	; 121
    1d30:	0e 94 42 0b 	call	0x1684	; 0x1684 <MDIO_Error_State_SetPortValue>
    1d34:	a0 c0       	rjmp	.+320    	; 0x1e76 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
	}
}
else if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration==COMMON_ANODE)
    1d36:	e9 81       	ldd	r30, Y+1	; 0x01
    1d38:	fa 81       	ldd	r31, Y+2	; 0x02
    1d3a:	81 81       	ldd	r24, Z+1	; 0x01
    1d3c:	88 23       	and	r24, r24
    1d3e:	09 f0       	breq	.+2      	; 0x1d42 <HSEVEN_SEGMENT_VidDisplayNumber+0x168>
    1d40:	9a c0       	rjmp	.+308    	; 0x1e76 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
{
	switch(Copy_u8Number)
    1d42:	8b 81       	ldd	r24, Y+3	; 0x03
    1d44:	28 2f       	mov	r18, r24
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	3d 83       	std	Y+5, r19	; 0x05
    1d4a:	2c 83       	std	Y+4, r18	; 0x04
    1d4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d50:	84 30       	cpi	r24, 0x04	; 4
    1d52:	91 05       	cpc	r25, r1
    1d54:	09 f4       	brne	.+2      	; 0x1d58 <HSEVEN_SEGMENT_VidDisplayNumber+0x17e>
    1d56:	5f c0       	rjmp	.+190    	; 0x1e16 <HSEVEN_SEGMENT_VidDisplayNumber+0x23c>
    1d58:	2c 81       	ldd	r18, Y+4	; 0x04
    1d5a:	3d 81       	ldd	r19, Y+5	; 0x05
    1d5c:	25 30       	cpi	r18, 0x05	; 5
    1d5e:	31 05       	cpc	r19, r1
    1d60:	dc f4       	brge	.+54     	; 0x1d98 <HSEVEN_SEGMENT_VidDisplayNumber+0x1be>
    1d62:	8c 81       	ldd	r24, Y+4	; 0x04
    1d64:	9d 81       	ldd	r25, Y+5	; 0x05
    1d66:	81 30       	cpi	r24, 0x01	; 1
    1d68:	91 05       	cpc	r25, r1
    1d6a:	09 f4       	brne	.+2      	; 0x1d6e <HSEVEN_SEGMENT_VidDisplayNumber+0x194>
    1d6c:	3f c0       	rjmp	.+126    	; 0x1dec <HSEVEN_SEGMENT_VidDisplayNumber+0x212>
    1d6e:	2c 81       	ldd	r18, Y+4	; 0x04
    1d70:	3d 81       	ldd	r19, Y+5	; 0x05
    1d72:	22 30       	cpi	r18, 0x02	; 2
    1d74:	31 05       	cpc	r19, r1
    1d76:	2c f4       	brge	.+10     	; 0x1d82 <HSEVEN_SEGMENT_VidDisplayNumber+0x1a8>
    1d78:	8c 81       	ldd	r24, Y+4	; 0x04
    1d7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d7c:	00 97       	sbiw	r24, 0x00	; 0
    1d7e:	79 f1       	breq	.+94     	; 0x1dde <HSEVEN_SEGMENT_VidDisplayNumber+0x204>
    1d80:	74 c0       	rjmp	.+232    	; 0x1e6a <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    1d82:	2c 81       	ldd	r18, Y+4	; 0x04
    1d84:	3d 81       	ldd	r19, Y+5	; 0x05
    1d86:	22 30       	cpi	r18, 0x02	; 2
    1d88:	31 05       	cpc	r19, r1
    1d8a:	b9 f1       	breq	.+110    	; 0x1dfa <HSEVEN_SEGMENT_VidDisplayNumber+0x220>
    1d8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d90:	83 30       	cpi	r24, 0x03	; 3
    1d92:	91 05       	cpc	r25, r1
    1d94:	c9 f1       	breq	.+114    	; 0x1e08 <HSEVEN_SEGMENT_VidDisplayNumber+0x22e>
    1d96:	69 c0       	rjmp	.+210    	; 0x1e6a <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    1d98:	2c 81       	ldd	r18, Y+4	; 0x04
    1d9a:	3d 81       	ldd	r19, Y+5	; 0x05
    1d9c:	27 30       	cpi	r18, 0x07	; 7
    1d9e:	31 05       	cpc	r19, r1
    1da0:	09 f4       	brne	.+2      	; 0x1da4 <HSEVEN_SEGMENT_VidDisplayNumber+0x1ca>
    1da2:	4e c0       	rjmp	.+156    	; 0x1e40 <HSEVEN_SEGMENT_VidDisplayNumber+0x266>
    1da4:	8c 81       	ldd	r24, Y+4	; 0x04
    1da6:	9d 81       	ldd	r25, Y+5	; 0x05
    1da8:	88 30       	cpi	r24, 0x08	; 8
    1daa:	91 05       	cpc	r25, r1
    1dac:	5c f4       	brge	.+22     	; 0x1dc4 <HSEVEN_SEGMENT_VidDisplayNumber+0x1ea>
    1dae:	2c 81       	ldd	r18, Y+4	; 0x04
    1db0:	3d 81       	ldd	r19, Y+5	; 0x05
    1db2:	25 30       	cpi	r18, 0x05	; 5
    1db4:	31 05       	cpc	r19, r1
    1db6:	b1 f1       	breq	.+108    	; 0x1e24 <HSEVEN_SEGMENT_VidDisplayNumber+0x24a>
    1db8:	8c 81       	ldd	r24, Y+4	; 0x04
    1dba:	9d 81       	ldd	r25, Y+5	; 0x05
    1dbc:	86 30       	cpi	r24, 0x06	; 6
    1dbe:	91 05       	cpc	r25, r1
    1dc0:	c1 f1       	breq	.+112    	; 0x1e32 <HSEVEN_SEGMENT_VidDisplayNumber+0x258>
    1dc2:	53 c0       	rjmp	.+166    	; 0x1e6a <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    1dc4:	2c 81       	ldd	r18, Y+4	; 0x04
    1dc6:	3d 81       	ldd	r19, Y+5	; 0x05
    1dc8:	28 30       	cpi	r18, 0x08	; 8
    1dca:	31 05       	cpc	r19, r1
    1dcc:	09 f4       	brne	.+2      	; 0x1dd0 <HSEVEN_SEGMENT_VidDisplayNumber+0x1f6>
    1dce:	3f c0       	rjmp	.+126    	; 0x1e4e <HSEVEN_SEGMENT_VidDisplayNumber+0x274>
    1dd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd2:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd4:	89 30       	cpi	r24, 0x09	; 9
    1dd6:	91 05       	cpc	r25, r1
    1dd8:	09 f4       	brne	.+2      	; 0x1ddc <HSEVEN_SEGMENT_VidDisplayNumber+0x202>
    1dda:	40 c0       	rjmp	.+128    	; 0x1e5c <HSEVEN_SEGMENT_VidDisplayNumber+0x282>
    1ddc:	46 c0       	rjmp	.+140    	; 0x1e6a <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
	{
	case 0:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ZERO);
    1dde:	e9 81       	ldd	r30, Y+1	; 0x01
    1de0:	fa 81       	ldd	r31, Y+2	; 0x02
    1de2:	80 81       	ld	r24, Z
    1de4:	60 ec       	ldi	r22, 0xC0	; 192
    1de6:	0e 94 42 0b 	call	0x1684	; 0x1684 <MDIO_Error_State_SetPortValue>
    1dea:	45 c0       	rjmp	.+138    	; 0x1e76 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 1:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ONE);
    1dec:	e9 81       	ldd	r30, Y+1	; 0x01
    1dee:	fa 81       	ldd	r31, Y+2	; 0x02
    1df0:	80 81       	ld	r24, Z
    1df2:	69 ef       	ldi	r22, 0xF9	; 249
    1df4:	0e 94 42 0b 	call	0x1684	; 0x1684 <MDIO_Error_State_SetPortValue>
    1df8:	3e c0       	rjmp	.+124    	; 0x1e76 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 2:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~TWO);
    1dfa:	e9 81       	ldd	r30, Y+1	; 0x01
    1dfc:	fa 81       	ldd	r31, Y+2	; 0x02
    1dfe:	80 81       	ld	r24, Z
    1e00:	64 ea       	ldi	r22, 0xA4	; 164
    1e02:	0e 94 42 0b 	call	0x1684	; 0x1684 <MDIO_Error_State_SetPortValue>
    1e06:	37 c0       	rjmp	.+110    	; 0x1e76 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 3:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~THREE);
    1e08:	e9 81       	ldd	r30, Y+1	; 0x01
    1e0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e0c:	80 81       	ld	r24, Z
    1e0e:	60 eb       	ldi	r22, 0xB0	; 176
    1e10:	0e 94 42 0b 	call	0x1684	; 0x1684 <MDIO_Error_State_SetPortValue>
    1e14:	30 c0       	rjmp	.+96     	; 0x1e76 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 4:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~FOUR);
    1e16:	e9 81       	ldd	r30, Y+1	; 0x01
    1e18:	fa 81       	ldd	r31, Y+2	; 0x02
    1e1a:	80 81       	ld	r24, Z
    1e1c:	69 e9       	ldi	r22, 0x99	; 153
    1e1e:	0e 94 42 0b 	call	0x1684	; 0x1684 <MDIO_Error_State_SetPortValue>
    1e22:	29 c0       	rjmp	.+82     	; 0x1e76 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 5:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~FIVE);
    1e24:	e9 81       	ldd	r30, Y+1	; 0x01
    1e26:	fa 81       	ldd	r31, Y+2	; 0x02
    1e28:	80 81       	ld	r24, Z
    1e2a:	62 e9       	ldi	r22, 0x92	; 146
    1e2c:	0e 94 42 0b 	call	0x1684	; 0x1684 <MDIO_Error_State_SetPortValue>
    1e30:	22 c0       	rjmp	.+68     	; 0x1e76 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 6:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~SIX);
    1e32:	e9 81       	ldd	r30, Y+1	; 0x01
    1e34:	fa 81       	ldd	r31, Y+2	; 0x02
    1e36:	80 81       	ld	r24, Z
    1e38:	62 e8       	ldi	r22, 0x82	; 130
    1e3a:	0e 94 42 0b 	call	0x1684	; 0x1684 <MDIO_Error_State_SetPortValue>
    1e3e:	1b c0       	rjmp	.+54     	; 0x1e76 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 7:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~SEVEN);
    1e40:	e9 81       	ldd	r30, Y+1	; 0x01
    1e42:	fa 81       	ldd	r31, Y+2	; 0x02
    1e44:	80 81       	ld	r24, Z
    1e46:	68 ef       	ldi	r22, 0xF8	; 248
    1e48:	0e 94 42 0b 	call	0x1684	; 0x1684 <MDIO_Error_State_SetPortValue>
    1e4c:	14 c0       	rjmp	.+40     	; 0x1e76 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 8:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~EIGHT);
    1e4e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e50:	fa 81       	ldd	r31, Y+2	; 0x02
    1e52:	80 81       	ld	r24, Z
    1e54:	60 e8       	ldi	r22, 0x80	; 128
    1e56:	0e 94 42 0b 	call	0x1684	; 0x1684 <MDIO_Error_State_SetPortValue>
    1e5a:	0d c0       	rjmp	.+26     	; 0x1e76 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 9:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~NINE);
    1e5c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e5e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e60:	80 81       	ld	r24, Z
    1e62:	60 e9       	ldi	r22, 0x90	; 144
    1e64:	0e 94 42 0b 	call	0x1684	; 0x1684 <MDIO_Error_State_SetPortValue>
    1e68:	06 c0       	rjmp	.+12     	; 0x1e76 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	default:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ERROR);
    1e6a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e6c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e6e:	80 81       	ld	r24, Z
    1e70:	66 e8       	ldi	r22, 0x86	; 134
    1e72:	0e 94 42 0b 	call	0x1684	; 0x1684 <MDIO_Error_State_SetPortValue>
	}
}
}
    1e76:	27 96       	adiw	r28, 0x07	; 7
    1e78:	0f b6       	in	r0, 0x3f	; 63
    1e7a:	f8 94       	cli
    1e7c:	de bf       	out	0x3e, r29	; 62
    1e7e:	0f be       	out	0x3f, r0	; 63
    1e80:	cd bf       	out	0x3d, r28	; 61
    1e82:	cf 91       	pop	r28
    1e84:	df 91       	pop	r29
    1e86:	08 95       	ret

00001e88 <HLED_VidInit>:
       "/"*Fill This Function*"/"
}
 */
///by using struct
void HLED_VidInit(LED_t *Copy_Led)
{
    1e88:	df 93       	push	r29
    1e8a:	cf 93       	push	r28
    1e8c:	00 d0       	rcall	.+0      	; 0x1e8e <HLED_VidInit+0x6>
    1e8e:	cd b7       	in	r28, 0x3d	; 61
    1e90:	de b7       	in	r29, 0x3e	; 62
    1e92:	9a 83       	std	Y+2, r25	; 0x02
    1e94:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinDirection(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_OUTPUT);
    1e96:	e9 81       	ldd	r30, Y+1	; 0x01
    1e98:	fa 81       	ldd	r31, Y+2	; 0x02
    1e9a:	81 81       	ldd	r24, Z+1	; 0x01
    1e9c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e9e:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea0:	90 81       	ld	r25, Z
    1ea2:	69 2f       	mov	r22, r25
    1ea4:	41 e0       	ldi	r20, 0x01	; 1
    1ea6:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <MDIO_Error_State_SetPinDirection>
}
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	cf 91       	pop	r28
    1eb0:	df 91       	pop	r29
    1eb2:	08 95       	ret

00001eb4 <HLED_VidLed_On>:

void HLED_VidLed_On(LED_t *Copy_Led)
{
    1eb4:	df 93       	push	r29
    1eb6:	cf 93       	push	r28
    1eb8:	00 d0       	rcall	.+0      	; 0x1eba <HLED_VidLed_On+0x6>
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
    1ebe:	9a 83       	std	Y+2, r25	; 0x02
    1ec0:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_HIGH);
    1ec2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ec4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ec6:	81 81       	ldd	r24, Z+1	; 0x01
    1ec8:	e9 81       	ldd	r30, Y+1	; 0x01
    1eca:	fa 81       	ldd	r31, Y+2	; 0x02
    1ecc:	90 81       	ld	r25, Z
    1ece:	69 2f       	mov	r22, r25
    1ed0:	41 e0       	ldi	r20, 0x01	; 1
    1ed2:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
}
    1ed6:	0f 90       	pop	r0
    1ed8:	0f 90       	pop	r0
    1eda:	cf 91       	pop	r28
    1edc:	df 91       	pop	r29
    1ede:	08 95       	ret

00001ee0 <HLED_VidLed_Off>:

void HLED_VidLed_Off(LED_t *Copy_Led)
{
    1ee0:	df 93       	push	r29
    1ee2:	cf 93       	push	r28
    1ee4:	00 d0       	rcall	.+0      	; 0x1ee6 <HLED_VidLed_Off+0x6>
    1ee6:	cd b7       	in	r28, 0x3d	; 61
    1ee8:	de b7       	in	r29, 0x3e	; 62
    1eea:	9a 83       	std	Y+2, r25	; 0x02
    1eec:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_LOW);
    1eee:	e9 81       	ldd	r30, Y+1	; 0x01
    1ef0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ef2:	81 81       	ldd	r24, Z+1	; 0x01
    1ef4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ef6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ef8:	90 81       	ld	r25, Z
    1efa:	69 2f       	mov	r22, r25
    1efc:	40 e0       	ldi	r20, 0x00	; 0
    1efe:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
}
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	cf 91       	pop	r28
    1f08:	df 91       	pop	r29
    1f0a:	08 95       	ret

00001f0c <HLED_VidLed_Toggle>:
void HLED_VidLed_Toggle(LED_t *Copy_Led)
{
    1f0c:	df 93       	push	r29
    1f0e:	cf 93       	push	r28
    1f10:	00 d0       	rcall	.+0      	; 0x1f12 <HLED_VidLed_Toggle+0x6>
    1f12:	cd b7       	in	r28, 0x3d	; 61
    1f14:	de b7       	in	r29, 0x3e	; 62
    1f16:	9a 83       	std	Y+2, r25	; 0x02
    1f18:	89 83       	std	Y+1, r24	; 0x01
	          /*Fill This Function*/
	/*Toggle Function*/
	static u8 Flag=0;
	if(Flag==0)
    1f1a:	80 91 9c 00 	lds	r24, 0x009C
    1f1e:	88 23       	and	r24, r24
    1f20:	71 f4       	brne	.+28     	; 0x1f3e <HLED_VidLed_Toggle+0x32>
	{
		MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_HIGH);
    1f22:	e9 81       	ldd	r30, Y+1	; 0x01
    1f24:	fa 81       	ldd	r31, Y+2	; 0x02
    1f26:	81 81       	ldd	r24, Z+1	; 0x01
    1f28:	e9 81       	ldd	r30, Y+1	; 0x01
    1f2a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f2c:	90 81       	ld	r25, Z
    1f2e:	69 2f       	mov	r22, r25
    1f30:	41 e0       	ldi	r20, 0x01	; 1
    1f32:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
		Flag=1;
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	80 93 9c 00 	sts	0x009C, r24
    1f3c:	0c c0       	rjmp	.+24     	; 0x1f56 <HLED_VidLed_Toggle+0x4a>
	}
	else
	{
		MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_LOW);
    1f3e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f40:	fa 81       	ldd	r31, Y+2	; 0x02
    1f42:	81 81       	ldd	r24, Z+1	; 0x01
    1f44:	e9 81       	ldd	r30, Y+1	; 0x01
    1f46:	fa 81       	ldd	r31, Y+2	; 0x02
    1f48:	90 81       	ld	r25, Z
    1f4a:	69 2f       	mov	r22, r25
    1f4c:	40 e0       	ldi	r20, 0x00	; 0
    1f4e:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
		Flag=0;
    1f52:	10 92 9c 00 	sts	0x009C, r1
	}
}
    1f56:	0f 90       	pop	r0
    1f58:	0f 90       	pop	r0
    1f5a:	cf 91       	pop	r28
    1f5c:	df 91       	pop	r29
    1f5e:	08 95       	ret

00001f60 <HKPD_VidInit>:
		},
};
/*KPD INIT*/

void HKPD_VidInit(void)
{
    1f60:	df 93       	push	r29
    1f62:	cf 93       	push	r28
    1f64:	cd b7       	in	r28, 0x3d	; 61
    1f66:	de b7       	in	r29, 0x3e	; 62
	/* Set Row Pins as an Input */
	MDIO_Error_State_SetPinDirection(ROW_PIN0,ROW_PORT,PIN_INPUT);
    1f68:	80 e0       	ldi	r24, 0x00	; 0
    1f6a:	62 e0       	ldi	r22, 0x02	; 2
    1f6c:	40 e0       	ldi	r20, 0x00	; 0
    1f6e:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(ROW_PIN1,ROW_PORT,PIN_INPUT);
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	62 e0       	ldi	r22, 0x02	; 2
    1f76:	40 e0       	ldi	r20, 0x00	; 0
    1f78:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(ROW_PIN2,ROW_PORT,PIN_INPUT);
    1f7c:	82 e0       	ldi	r24, 0x02	; 2
    1f7e:	62 e0       	ldi	r22, 0x02	; 2
    1f80:	40 e0       	ldi	r20, 0x00	; 0
    1f82:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(ROW_PIN3,ROW_PORT,PIN_INPUT);
    1f86:	83 e0       	ldi	r24, 0x03	; 3
    1f88:	62 e0       	ldi	r22, 0x02	; 2
    1f8a:	40 e0       	ldi	r20, 0x00	; 0
    1f8c:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <MDIO_Error_State_SetPinDirection>
	/* Set Column Pins as an Output */
	MDIO_Error_State_SetPinDirection(COL_PIN0,COL_PORT,PIN_OUTPUT);
    1f90:	84 e0       	ldi	r24, 0x04	; 4
    1f92:	62 e0       	ldi	r22, 0x02	; 2
    1f94:	41 e0       	ldi	r20, 0x01	; 1
    1f96:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(COL_PIN1,COL_PORT,PIN_OUTPUT);
    1f9a:	85 e0       	ldi	r24, 0x05	; 5
    1f9c:	62 e0       	ldi	r22, 0x02	; 2
    1f9e:	41 e0       	ldi	r20, 0x01	; 1
    1fa0:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(COL_PIN2,COL_PORT,PIN_OUTPUT);
    1fa4:	86 e0       	ldi	r24, 0x06	; 6
    1fa6:	62 e0       	ldi	r22, 0x02	; 2
    1fa8:	41 e0       	ldi	r20, 0x01	; 1
    1faa:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(COL_PIN3,COL_PORT,PIN_OUTPUT);
    1fae:	87 e0       	ldi	r24, 0x07	; 7
    1fb0:	62 e0       	ldi	r22, 0x02	; 2
    1fb2:	41 e0       	ldi	r20, 0x01	; 1
    1fb4:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <MDIO_Error_State_SetPinDirection>
	/* Active Pull Up Resistor For Row Pins */
	MDIO_Error_State_SetPinValue(ROW_PIN0,ROW_PORT,PIN_HIGH);
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	62 e0       	ldi	r22, 0x02	; 2
    1fbc:	41 e0       	ldi	r20, 0x01	; 1
    1fbe:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(ROW_PIN1,ROW_PORT,PIN_HIGH);
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	62 e0       	ldi	r22, 0x02	; 2
    1fc6:	41 e0       	ldi	r20, 0x01	; 1
    1fc8:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(ROW_PIN2,ROW_PORT,PIN_HIGH);
    1fcc:	82 e0       	ldi	r24, 0x02	; 2
    1fce:	62 e0       	ldi	r22, 0x02	; 2
    1fd0:	41 e0       	ldi	r20, 0x01	; 1
    1fd2:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(ROW_PIN3,ROW_PORT,PIN_HIGH);
    1fd6:	83 e0       	ldi	r24, 0x03	; 3
    1fd8:	62 e0       	ldi	r22, 0x02	; 2
    1fda:	41 e0       	ldi	r20, 0x01	; 1
    1fdc:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
	/* Initialize 4 Column Pins By Ones */
	MDIO_Error_State_SetPinValue(COL_PIN0,COL_PORT,PIN_HIGH);
    1fe0:	84 e0       	ldi	r24, 0x04	; 4
    1fe2:	62 e0       	ldi	r22, 0x02	; 2
    1fe4:	41 e0       	ldi	r20, 0x01	; 1
    1fe6:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(COL_PIN1,COL_PORT,PIN_HIGH);
    1fea:	85 e0       	ldi	r24, 0x05	; 5
    1fec:	62 e0       	ldi	r22, 0x02	; 2
    1fee:	41 e0       	ldi	r20, 0x01	; 1
    1ff0:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(COL_PIN2,COL_PORT,PIN_HIGH);
    1ff4:	86 e0       	ldi	r24, 0x06	; 6
    1ff6:	62 e0       	ldi	r22, 0x02	; 2
    1ff8:	41 e0       	ldi	r20, 0x01	; 1
    1ffa:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(COL_PIN3,COL_PORT,PIN_HIGH);
    1ffe:	87 e0       	ldi	r24, 0x07	; 7
    2000:	62 e0       	ldi	r22, 0x02	; 2
    2002:	41 e0       	ldi	r20, 0x01	; 1
    2004:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>

}
    2008:	cf 91       	pop	r28
    200a:	df 91       	pop	r29
    200c:	08 95       	ret

0000200e <HKPD_U8GetKeyPressed>:
/*KPD Get Pressed*/
u8 HKPD_U8GetKeyPressed(void)
{
    200e:	df 93       	push	r29
    2010:	cf 93       	push	r28
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62
    2016:	62 97       	sbiw	r28, 0x12	; 18
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	f8 94       	cli
    201c:	de bf       	out	0x3e, r29	; 62
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	cd bf       	out	0x3d, r28	; 61
	u8 LOC_U8RowCount;
	u8 LOC_U8ColCount;
	/*Initialize the switch status to NOT PRESSED*/
	u8 LOC_U8ReturnValue=NOT_PRESSED;
    2022:	8f ef       	ldi	r24, 0xFF	; 255
    2024:	8f 87       	std	Y+15, r24	; 0x0f
	u8 LOC_U8PinState;
	while(1){
		/*Looping on columns of the keypad*/
		for(LOC_U8ColCount=COL_INIT;LOC_U8ColCount<COL_END;LOC_U8ColCount++)
    2026:	84 e0       	ldi	r24, 0x04	; 4
    2028:	88 8b       	std	Y+16, r24	; 0x10
    202a:	b5 c0       	rjmp	.+362    	; 0x2196 <HKPD_U8GetKeyPressed+0x188>
		{
			/*Active the Column */
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_LOW);
    202c:	88 89       	ldd	r24, Y+16	; 0x10
    202e:	62 e0       	ldi	r22, 0x02	; 2
    2030:	40 e0       	ldi	r20, 0x00	; 0
    2032:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			/*Loop to read the all row pins*/
			for(LOC_U8RowCount=ROW_INIT;LOC_U8RowCount<ROW_END;LOC_U8RowCount++)
    2036:	19 8a       	std	Y+17, r1	; 0x11
    2038:	a2 c0       	rjmp	.+324    	; 0x217e <HKPD_U8GetKeyPressed+0x170>
			{
				/*check the status of the switch*/
				MDIO_Error_State_GetPinValue(LOC_U8RowCount,ROW_PORT,&LOC_U8PinState);
    203a:	9e 01       	movw	r18, r28
    203c:	2e 5e       	subi	r18, 0xEE	; 238
    203e:	3f 4f       	sbci	r19, 0xFF	; 255
    2040:	89 89       	ldd	r24, Y+17	; 0x11
    2042:	62 e0       	ldi	r22, 0x02	; 2
    2044:	a9 01       	movw	r20, r18
    2046:	0e 94 8a 0b 	call	0x1714	; 0x1714 <MDIO_Error_State_GetPinValue>
				if(LOC_U8PinState==0)
    204a:	8a 89       	ldd	r24, Y+18	; 0x12
    204c:	88 23       	and	r24, r24
    204e:	09 f0       	breq	.+2      	; 0x2052 <HKPD_U8GetKeyPressed+0x44>
    2050:	93 c0       	rjmp	.+294    	; 0x2178 <HKPD_U8GetKeyPressed+0x16a>
				{
					/*Get the Value of the current pressed switch*/
					LOC_U8ReturnValue=KPD_u8SwitchVal[LOC_U8ColCount-COL_INIT][LOC_U8RowCount-ROW_INIT];
    2052:	88 89       	ldd	r24, Y+16	; 0x10
    2054:	88 2f       	mov	r24, r24
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	ac 01       	movw	r20, r24
    205a:	44 50       	subi	r20, 0x04	; 4
    205c:	50 40       	sbci	r21, 0x00	; 0
    205e:	89 89       	ldd	r24, Y+17	; 0x11
    2060:	28 2f       	mov	r18, r24
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	ca 01       	movw	r24, r20
    2066:	88 0f       	add	r24, r24
    2068:	99 1f       	adc	r25, r25
    206a:	88 0f       	add	r24, r24
    206c:	99 1f       	adc	r25, r25
    206e:	82 0f       	add	r24, r18
    2070:	93 1f       	adc	r25, r19
    2072:	fc 01       	movw	r30, r24
    2074:	e5 57       	subi	r30, 0x75	; 117
    2076:	ff 4f       	sbci	r31, 0xFF	; 255
    2078:	80 81       	ld	r24, Z
    207a:	8f 87       	std	Y+15, r24	; 0x0f
    207c:	08 c0       	rjmp	.+16     	; 0x208e <HKPD_U8GetKeyPressed+0x80>
					/*wait until the switch is released(Single Press)*/
					while(LOC_U8PinState==0)
					{
						MDIO_Error_State_GetPinValue(LOC_U8RowCount,ROW_PORT,&LOC_U8PinState);
    207e:	9e 01       	movw	r18, r28
    2080:	2e 5e       	subi	r18, 0xEE	; 238
    2082:	3f 4f       	sbci	r19, 0xFF	; 255
    2084:	89 89       	ldd	r24, Y+17	; 0x11
    2086:	62 e0       	ldi	r22, 0x02	; 2
    2088:	a9 01       	movw	r20, r18
    208a:	0e 94 8a 0b 	call	0x1714	; 0x1714 <MDIO_Error_State_GetPinValue>
				if(LOC_U8PinState==0)
				{
					/*Get the Value of the current pressed switch*/
					LOC_U8ReturnValue=KPD_u8SwitchVal[LOC_U8ColCount-COL_INIT][LOC_U8RowCount-ROW_INIT];
					/*wait until the switch is released(Single Press)*/
					while(LOC_U8PinState==0)
    208e:	8a 89       	ldd	r24, Y+18	; 0x12
    2090:	88 23       	and	r24, r24
    2092:	a9 f3       	breq	.-22     	; 0x207e <HKPD_U8GetKeyPressed+0x70>
    2094:	80 e0       	ldi	r24, 0x00	; 0
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	a0 e2       	ldi	r26, 0x20	; 32
    209a:	b1 e4       	ldi	r27, 0x41	; 65
    209c:	8b 87       	std	Y+11, r24	; 0x0b
    209e:	9c 87       	std	Y+12, r25	; 0x0c
    20a0:	ad 87       	std	Y+13, r26	; 0x0d
    20a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    20a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    20a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    20aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	4a ef       	ldi	r20, 0xFA	; 250
    20b2:	54 e4       	ldi	r21, 0x44	; 68
    20b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	8f 83       	std	Y+7, r24	; 0x07
    20be:	98 87       	std	Y+8, r25	; 0x08
    20c0:	a9 87       	std	Y+9, r26	; 0x09
    20c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20c4:	6f 81       	ldd	r22, Y+7	; 0x07
    20c6:	78 85       	ldd	r23, Y+8	; 0x08
    20c8:	89 85       	ldd	r24, Y+9	; 0x09
    20ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	40 e8       	ldi	r20, 0x80	; 128
    20d2:	5f e3       	ldi	r21, 0x3F	; 63
    20d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20d8:	88 23       	and	r24, r24
    20da:	2c f4       	brge	.+10     	; 0x20e6 <HKPD_U8GetKeyPressed+0xd8>
		__ticks = 1;
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	9e 83       	std	Y+6, r25	; 0x06
    20e2:	8d 83       	std	Y+5, r24	; 0x05
    20e4:	3f c0       	rjmp	.+126    	; 0x2164 <HKPD_U8GetKeyPressed+0x156>
	else if (__tmp > 65535)
    20e6:	6f 81       	ldd	r22, Y+7	; 0x07
    20e8:	78 85       	ldd	r23, Y+8	; 0x08
    20ea:	89 85       	ldd	r24, Y+9	; 0x09
    20ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	3f ef       	ldi	r19, 0xFF	; 255
    20f2:	4f e7       	ldi	r20, 0x7F	; 127
    20f4:	57 e4       	ldi	r21, 0x47	; 71
    20f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20fa:	18 16       	cp	r1, r24
    20fc:	4c f5       	brge	.+82     	; 0x2150 <HKPD_U8GetKeyPressed+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2100:	7c 85       	ldd	r23, Y+12	; 0x0c
    2102:	8d 85       	ldd	r24, Y+13	; 0x0d
    2104:	9e 85       	ldd	r25, Y+14	; 0x0e
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	40 e2       	ldi	r20, 0x20	; 32
    210c:	51 e4       	ldi	r21, 0x41	; 65
    210e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	bc 01       	movw	r22, r24
    2118:	cd 01       	movw	r24, r26
    211a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211e:	dc 01       	movw	r26, r24
    2120:	cb 01       	movw	r24, r22
    2122:	9e 83       	std	Y+6, r25	; 0x06
    2124:	8d 83       	std	Y+5, r24	; 0x05
    2126:	0f c0       	rjmp	.+30     	; 0x2146 <HKPD_U8GetKeyPressed+0x138>
    2128:	88 ec       	ldi	r24, 0xC8	; 200
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	9c 83       	std	Y+4, r25	; 0x04
    212e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2130:	8b 81       	ldd	r24, Y+3	; 0x03
    2132:	9c 81       	ldd	r25, Y+4	; 0x04
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	f1 f7       	brne	.-4      	; 0x2134 <HKPD_U8GetKeyPressed+0x126>
    2138:	9c 83       	std	Y+4, r25	; 0x04
    213a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    213c:	8d 81       	ldd	r24, Y+5	; 0x05
    213e:	9e 81       	ldd	r25, Y+6	; 0x06
    2140:	01 97       	sbiw	r24, 0x01	; 1
    2142:	9e 83       	std	Y+6, r25	; 0x06
    2144:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2146:	8d 81       	ldd	r24, Y+5	; 0x05
    2148:	9e 81       	ldd	r25, Y+6	; 0x06
    214a:	00 97       	sbiw	r24, 0x00	; 0
    214c:	69 f7       	brne	.-38     	; 0x2128 <HKPD_U8GetKeyPressed+0x11a>
    214e:	14 c0       	rjmp	.+40     	; 0x2178 <HKPD_U8GetKeyPressed+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2150:	6f 81       	ldd	r22, Y+7	; 0x07
    2152:	78 85       	ldd	r23, Y+8	; 0x08
    2154:	89 85       	ldd	r24, Y+9	; 0x09
    2156:	9a 85       	ldd	r25, Y+10	; 0x0a
    2158:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	9e 83       	std	Y+6, r25	; 0x06
    2162:	8d 83       	std	Y+5, r24	; 0x05
    2164:	8d 81       	ldd	r24, Y+5	; 0x05
    2166:	9e 81       	ldd	r25, Y+6	; 0x06
    2168:	9a 83       	std	Y+2, r25	; 0x02
    216a:	89 83       	std	Y+1, r24	; 0x01
    216c:	89 81       	ldd	r24, Y+1	; 0x01
    216e:	9a 81       	ldd	r25, Y+2	; 0x02
    2170:	01 97       	sbiw	r24, 0x01	; 1
    2172:	f1 f7       	brne	.-4      	; 0x2170 <HKPD_U8GetKeyPressed+0x162>
    2174:	9a 83       	std	Y+2, r25	; 0x02
    2176:	89 83       	std	Y+1, r24	; 0x01
		for(LOC_U8ColCount=COL_INIT;LOC_U8ColCount<COL_END;LOC_U8ColCount++)
		{
			/*Active the Column */
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_LOW);
			/*Loop to read the all row pins*/
			for(LOC_U8RowCount=ROW_INIT;LOC_U8RowCount<ROW_END;LOC_U8RowCount++)
    2178:	89 89       	ldd	r24, Y+17	; 0x11
    217a:	8f 5f       	subi	r24, 0xFF	; 255
    217c:	89 8b       	std	Y+17, r24	; 0x11
    217e:	89 89       	ldd	r24, Y+17	; 0x11
    2180:	84 30       	cpi	r24, 0x04	; 4
    2182:	08 f4       	brcc	.+2      	; 0x2186 <HKPD_U8GetKeyPressed+0x178>
    2184:	5a cf       	rjmp	.-332    	; 0x203a <HKPD_U8GetKeyPressed+0x2c>
				{
					/*Do Nothing*/
				}
			}
			/*Deactivate the Column*/
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_HIGH);
    2186:	88 89       	ldd	r24, Y+16	; 0x10
    2188:	62 e0       	ldi	r22, 0x02	; 2
    218a:	41 e0       	ldi	r20, 0x01	; 1
    218c:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
	/*Initialize the switch status to NOT PRESSED*/
	u8 LOC_U8ReturnValue=NOT_PRESSED;
	u8 LOC_U8PinState;
	while(1){
		/*Looping on columns of the keypad*/
		for(LOC_U8ColCount=COL_INIT;LOC_U8ColCount<COL_END;LOC_U8ColCount++)
    2190:	88 89       	ldd	r24, Y+16	; 0x10
    2192:	8f 5f       	subi	r24, 0xFF	; 255
    2194:	88 8b       	std	Y+16, r24	; 0x10
    2196:	88 89       	ldd	r24, Y+16	; 0x10
    2198:	88 30       	cpi	r24, 0x08	; 8
    219a:	08 f4       	brcc	.+2      	; 0x219e <HKPD_U8GetKeyPressed+0x190>
    219c:	47 cf       	rjmp	.-370    	; 0x202c <HKPD_U8GetKeyPressed+0x1e>
				}
			}
			/*Deactivate the Column*/
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_HIGH);
		}
	if(LOC_U8ReturnValue!=255)
    219e:	8f 85       	ldd	r24, Y+15	; 0x0f
    21a0:	8f 3f       	cpi	r24, 0xFF	; 255
    21a2:	09 f4       	brne	.+2      	; 0x21a6 <HKPD_U8GetKeyPressed+0x198>
    21a4:	40 cf       	rjmp	.-384    	; 0x2026 <HKPD_U8GetKeyPressed+0x18>
		return LOC_U8ReturnValue;
    21a6:	8f 85       	ldd	r24, Y+15	; 0x0f
	}



}
    21a8:	62 96       	adiw	r28, 0x12	; 18
    21aa:	0f b6       	in	r0, 0x3f	; 63
    21ac:	f8 94       	cli
    21ae:	de bf       	out	0x3e, r29	; 62
    21b0:	0f be       	out	0x3f, r0	; 63
    21b2:	cd bf       	out	0x3d, r28	; 61
    21b4:	cf 91       	pop	r28
    21b6:	df 91       	pop	r29
    21b8:	08 95       	ret

000021ba <HCLCD_Vid8Bits_SendCommand>:


/*Send Command 8 Bits*/

void HCLCD_Vid8Bits_SendCommand(u8 Copy_u8Command)
{
    21ba:	df 93       	push	r29
    21bc:	cf 93       	push	r28
    21be:	cd b7       	in	r28, 0x3d	; 61
    21c0:	de b7       	in	r29, 0x3e	; 62
    21c2:	6d 97       	sbiw	r28, 0x1d	; 29
    21c4:	0f b6       	in	r0, 0x3f	; 63
    21c6:	f8 94       	cli
    21c8:	de bf       	out	0x3e, r29	; 62
    21ca:	0f be       	out	0x3f, r0	; 63
    21cc:	cd bf       	out	0x3d, r28	; 61
    21ce:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Select command register-->Write zero on RS Pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_LOW);
    21d0:	80 e0       	ldi	r24, 0x00	; 0
    21d2:	62 e0       	ldi	r22, 0x02	; 2
    21d4:	40 e0       	ldi	r20, 0x00	; 0
    21d6:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
	/**select Write mode--> Write zero on RW Pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	62 e0       	ldi	r22, 0x02	; 2
    21de:	40 e0       	ldi	r20, 0x00	; 0
    21e0:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
	/*Send Command ON port Data*/
	MDIO_Error_State_SetPortValue(DATA_PORT,Copy_u8Command);
    21e4:	82 e0       	ldi	r24, 0x02	; 2
    21e6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    21e8:	0e 94 42 0b 	call	0x1684	; 0x1684 <MDIO_Error_State_SetPortValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    21ec:	82 e0       	ldi	r24, 0x02	; 2
    21ee:	62 e0       	ldi	r22, 0x02	; 2
    21f0:	41 e0       	ldi	r20, 0x01	; 1
    21f2:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
    21f6:	80 e0       	ldi	r24, 0x00	; 0
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	a0 e0       	ldi	r26, 0x00	; 0
    21fc:	b0 e4       	ldi	r27, 0x40	; 64
    21fe:	89 8f       	std	Y+25, r24	; 0x19
    2200:	9a 8f       	std	Y+26, r25	; 0x1a
    2202:	ab 8f       	std	Y+27, r26	; 0x1b
    2204:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2206:	69 8d       	ldd	r22, Y+25	; 0x19
    2208:	7a 8d       	ldd	r23, Y+26	; 0x1a
    220a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    220c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	4a ef       	ldi	r20, 0xFA	; 250
    2214:	54 e4       	ldi	r21, 0x44	; 68
    2216:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	8d 8b       	std	Y+21, r24	; 0x15
    2220:	9e 8b       	std	Y+22, r25	; 0x16
    2222:	af 8b       	std	Y+23, r26	; 0x17
    2224:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2226:	6d 89       	ldd	r22, Y+21	; 0x15
    2228:	7e 89       	ldd	r23, Y+22	; 0x16
    222a:	8f 89       	ldd	r24, Y+23	; 0x17
    222c:	98 8d       	ldd	r25, Y+24	; 0x18
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	40 e8       	ldi	r20, 0x80	; 128
    2234:	5f e3       	ldi	r21, 0x3F	; 63
    2236:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    223a:	88 23       	and	r24, r24
    223c:	2c f4       	brge	.+10     	; 0x2248 <HCLCD_Vid8Bits_SendCommand+0x8e>
		__ticks = 1;
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	9c 8b       	std	Y+20, r25	; 0x14
    2244:	8b 8b       	std	Y+19, r24	; 0x13
    2246:	3f c0       	rjmp	.+126    	; 0x22c6 <HCLCD_Vid8Bits_SendCommand+0x10c>
	else if (__tmp > 65535)
    2248:	6d 89       	ldd	r22, Y+21	; 0x15
    224a:	7e 89       	ldd	r23, Y+22	; 0x16
    224c:	8f 89       	ldd	r24, Y+23	; 0x17
    224e:	98 8d       	ldd	r25, Y+24	; 0x18
    2250:	20 e0       	ldi	r18, 0x00	; 0
    2252:	3f ef       	ldi	r19, 0xFF	; 255
    2254:	4f e7       	ldi	r20, 0x7F	; 127
    2256:	57 e4       	ldi	r21, 0x47	; 71
    2258:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    225c:	18 16       	cp	r1, r24
    225e:	4c f5       	brge	.+82     	; 0x22b2 <HCLCD_Vid8Bits_SendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2260:	69 8d       	ldd	r22, Y+25	; 0x19
    2262:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2264:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2266:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2268:	20 e0       	ldi	r18, 0x00	; 0
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	40 e2       	ldi	r20, 0x20	; 32
    226e:	51 e4       	ldi	r21, 0x41	; 65
    2270:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	bc 01       	movw	r22, r24
    227a:	cd 01       	movw	r24, r26
    227c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	9c 8b       	std	Y+20, r25	; 0x14
    2286:	8b 8b       	std	Y+19, r24	; 0x13
    2288:	0f c0       	rjmp	.+30     	; 0x22a8 <HCLCD_Vid8Bits_SendCommand+0xee>
    228a:	88 ec       	ldi	r24, 0xC8	; 200
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	9a 8b       	std	Y+18, r25	; 0x12
    2290:	89 8b       	std	Y+17, r24	; 0x11
    2292:	89 89       	ldd	r24, Y+17	; 0x11
    2294:	9a 89       	ldd	r25, Y+18	; 0x12
    2296:	01 97       	sbiw	r24, 0x01	; 1
    2298:	f1 f7       	brne	.-4      	; 0x2296 <HCLCD_Vid8Bits_SendCommand+0xdc>
    229a:	9a 8b       	std	Y+18, r25	; 0x12
    229c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    229e:	8b 89       	ldd	r24, Y+19	; 0x13
    22a0:	9c 89       	ldd	r25, Y+20	; 0x14
    22a2:	01 97       	sbiw	r24, 0x01	; 1
    22a4:	9c 8b       	std	Y+20, r25	; 0x14
    22a6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a8:	8b 89       	ldd	r24, Y+19	; 0x13
    22aa:	9c 89       	ldd	r25, Y+20	; 0x14
    22ac:	00 97       	sbiw	r24, 0x00	; 0
    22ae:	69 f7       	brne	.-38     	; 0x228a <HCLCD_Vid8Bits_SendCommand+0xd0>
    22b0:	14 c0       	rjmp	.+40     	; 0x22da <HCLCD_Vid8Bits_SendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b2:	6d 89       	ldd	r22, Y+21	; 0x15
    22b4:	7e 89       	ldd	r23, Y+22	; 0x16
    22b6:	8f 89       	ldd	r24, Y+23	; 0x17
    22b8:	98 8d       	ldd	r25, Y+24	; 0x18
    22ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22be:	dc 01       	movw	r26, r24
    22c0:	cb 01       	movw	r24, r22
    22c2:	9c 8b       	std	Y+20, r25	; 0x14
    22c4:	8b 8b       	std	Y+19, r24	; 0x13
    22c6:	8b 89       	ldd	r24, Y+19	; 0x13
    22c8:	9c 89       	ldd	r25, Y+20	; 0x14
    22ca:	98 8b       	std	Y+16, r25	; 0x10
    22cc:	8f 87       	std	Y+15, r24	; 0x0f
    22ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    22d0:	98 89       	ldd	r25, Y+16	; 0x10
    22d2:	01 97       	sbiw	r24, 0x01	; 1
    22d4:	f1 f7       	brne	.-4      	; 0x22d2 <HCLCD_Vid8Bits_SendCommand+0x118>
    22d6:	98 8b       	std	Y+16, r25	; 0x10
    22d8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    22da:	82 e0       	ldi	r24, 0x02	; 2
    22dc:	62 e0       	ldi	r22, 0x02	; 2
    22de:	40 e0       	ldi	r20, 0x00	; 0
    22e0:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
    22e4:	80 e0       	ldi	r24, 0x00	; 0
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	a0 e0       	ldi	r26, 0x00	; 0
    22ea:	b0 e4       	ldi	r27, 0x40	; 64
    22ec:	8b 87       	std	Y+11, r24	; 0x0b
    22ee:	9c 87       	std	Y+12, r25	; 0x0c
    22f0:	ad 87       	std	Y+13, r26	; 0x0d
    22f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	4a ef       	ldi	r20, 0xFA	; 250
    2302:	54 e4       	ldi	r21, 0x44	; 68
    2304:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2308:	dc 01       	movw	r26, r24
    230a:	cb 01       	movw	r24, r22
    230c:	8f 83       	std	Y+7, r24	; 0x07
    230e:	98 87       	std	Y+8, r25	; 0x08
    2310:	a9 87       	std	Y+9, r26	; 0x09
    2312:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2314:	6f 81       	ldd	r22, Y+7	; 0x07
    2316:	78 85       	ldd	r23, Y+8	; 0x08
    2318:	89 85       	ldd	r24, Y+9	; 0x09
    231a:	9a 85       	ldd	r25, Y+10	; 0x0a
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	40 e8       	ldi	r20, 0x80	; 128
    2322:	5f e3       	ldi	r21, 0x3F	; 63
    2324:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2328:	88 23       	and	r24, r24
    232a:	2c f4       	brge	.+10     	; 0x2336 <HCLCD_Vid8Bits_SendCommand+0x17c>
		__ticks = 1;
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	9e 83       	std	Y+6, r25	; 0x06
    2332:	8d 83       	std	Y+5, r24	; 0x05
    2334:	3f c0       	rjmp	.+126    	; 0x23b4 <HCLCD_Vid8Bits_SendCommand+0x1fa>
	else if (__tmp > 65535)
    2336:	6f 81       	ldd	r22, Y+7	; 0x07
    2338:	78 85       	ldd	r23, Y+8	; 0x08
    233a:	89 85       	ldd	r24, Y+9	; 0x09
    233c:	9a 85       	ldd	r25, Y+10	; 0x0a
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	3f ef       	ldi	r19, 0xFF	; 255
    2342:	4f e7       	ldi	r20, 0x7F	; 127
    2344:	57 e4       	ldi	r21, 0x47	; 71
    2346:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    234a:	18 16       	cp	r1, r24
    234c:	4c f5       	brge	.+82     	; 0x23a0 <HCLCD_Vid8Bits_SendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    234e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2350:	7c 85       	ldd	r23, Y+12	; 0x0c
    2352:	8d 85       	ldd	r24, Y+13	; 0x0d
    2354:	9e 85       	ldd	r25, Y+14	; 0x0e
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	40 e2       	ldi	r20, 0x20	; 32
    235c:	51 e4       	ldi	r21, 0x41	; 65
    235e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	bc 01       	movw	r22, r24
    2368:	cd 01       	movw	r24, r26
    236a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	9e 83       	std	Y+6, r25	; 0x06
    2374:	8d 83       	std	Y+5, r24	; 0x05
    2376:	0f c0       	rjmp	.+30     	; 0x2396 <HCLCD_Vid8Bits_SendCommand+0x1dc>
    2378:	88 ec       	ldi	r24, 0xC8	; 200
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	9c 83       	std	Y+4, r25	; 0x04
    237e:	8b 83       	std	Y+3, r24	; 0x03
    2380:	8b 81       	ldd	r24, Y+3	; 0x03
    2382:	9c 81       	ldd	r25, Y+4	; 0x04
    2384:	01 97       	sbiw	r24, 0x01	; 1
    2386:	f1 f7       	brne	.-4      	; 0x2384 <HCLCD_Vid8Bits_SendCommand+0x1ca>
    2388:	9c 83       	std	Y+4, r25	; 0x04
    238a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    238c:	8d 81       	ldd	r24, Y+5	; 0x05
    238e:	9e 81       	ldd	r25, Y+6	; 0x06
    2390:	01 97       	sbiw	r24, 0x01	; 1
    2392:	9e 83       	std	Y+6, r25	; 0x06
    2394:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2396:	8d 81       	ldd	r24, Y+5	; 0x05
    2398:	9e 81       	ldd	r25, Y+6	; 0x06
    239a:	00 97       	sbiw	r24, 0x00	; 0
    239c:	69 f7       	brne	.-38     	; 0x2378 <HCLCD_Vid8Bits_SendCommand+0x1be>
    239e:	14 c0       	rjmp	.+40     	; 0x23c8 <HCLCD_Vid8Bits_SendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a0:	6f 81       	ldd	r22, Y+7	; 0x07
    23a2:	78 85       	ldd	r23, Y+8	; 0x08
    23a4:	89 85       	ldd	r24, Y+9	; 0x09
    23a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	9e 83       	std	Y+6, r25	; 0x06
    23b2:	8d 83       	std	Y+5, r24	; 0x05
    23b4:	8d 81       	ldd	r24, Y+5	; 0x05
    23b6:	9e 81       	ldd	r25, Y+6	; 0x06
    23b8:	9a 83       	std	Y+2, r25	; 0x02
    23ba:	89 83       	std	Y+1, r24	; 0x01
    23bc:	89 81       	ldd	r24, Y+1	; 0x01
    23be:	9a 81       	ldd	r25, Y+2	; 0x02
    23c0:	01 97       	sbiw	r24, 0x01	; 1
    23c2:	f1 f7       	brne	.-4      	; 0x23c0 <HCLCD_Vid8Bits_SendCommand+0x206>
    23c4:	9a 83       	std	Y+2, r25	; 0x02
    23c6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    23c8:	82 e0       	ldi	r24, 0x02	; 2
    23ca:	62 e0       	ldi	r22, 0x02	; 2
    23cc:	41 e0       	ldi	r20, 0x01	; 1
    23ce:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
}
    23d2:	6d 96       	adiw	r28, 0x1d	; 29
    23d4:	0f b6       	in	r0, 0x3f	; 63
    23d6:	f8 94       	cli
    23d8:	de bf       	out	0x3e, r29	; 62
    23da:	0f be       	out	0x3f, r0	; 63
    23dc:	cd bf       	out	0x3d, r28	; 61
    23de:	cf 91       	pop	r28
    23e0:	df 91       	pop	r29
    23e2:	08 95       	ret

000023e4 <HCLCD_Vid8Bits_Init>:

/*LCD 8 Bits Initialization*/
void HCLCD_Vid8Bits_Init(void)
{
    23e4:	df 93       	push	r29
    23e6:	cf 93       	push	r28
    23e8:	cd b7       	in	r28, 0x3d	; 61
    23ea:	de b7       	in	r29, 0x3e	; 62
    23ec:	e8 97       	sbiw	r28, 0x38	; 56
    23ee:	0f b6       	in	r0, 0x3f	; 63
    23f0:	f8 94       	cli
    23f2:	de bf       	out	0x3e, r29	; 62
    23f4:	0f be       	out	0x3f, r0	; 63
    23f6:	cd bf       	out	0x3d, r28	; 61
	/*LCD Data and Control Port Initialization*/
	MDIO_Error_State_SetPortDirection(DATA_PORT,PORT_OUTPUT);
    23f8:	82 e0       	ldi	r24, 0x02	; 2
    23fa:	6f ef       	ldi	r22, 0xFF	; 255
    23fc:	0e 94 ef 09 	call	0x13de	; 0x13de <MDIO_Error_State_SetPortDirection>
	MDIO_Error_State_SetPinDirection(RS,CONTROL_PORT,PIN_OUTPUT);
    2400:	80 e0       	ldi	r24, 0x00	; 0
    2402:	62 e0       	ldi	r22, 0x02	; 2
    2404:	41 e0       	ldi	r20, 0x01	; 1
    2406:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(RW,CONTROL_PORT,PIN_OUTPUT);
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	62 e0       	ldi	r22, 0x02	; 2
    240e:	41 e0       	ldi	r20, 0x01	; 1
    2410:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(E,CONTROL_PORT,PIN_OUTPUT);
    2414:	82 e0       	ldi	r24, 0x02	; 2
    2416:	62 e0       	ldi	r22, 0x02	; 2
    2418:	41 e0       	ldi	r20, 0x01	; 1
    241a:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <MDIO_Error_State_SetPinDirection>
    241e:	80 e0       	ldi	r24, 0x00	; 0
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	a0 ef       	ldi	r26, 0xF0	; 240
    2424:	b1 e4       	ldi	r27, 0x41	; 65
    2426:	8d ab       	std	Y+53, r24	; 0x35
    2428:	9e ab       	std	Y+54, r25	; 0x36
    242a:	af ab       	std	Y+55, r26	; 0x37
    242c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    242e:	6d a9       	ldd	r22, Y+53	; 0x35
    2430:	7e a9       	ldd	r23, Y+54	; 0x36
    2432:	8f a9       	ldd	r24, Y+55	; 0x37
    2434:	98 ad       	ldd	r25, Y+56	; 0x38
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	4a ef       	ldi	r20, 0xFA	; 250
    243c:	54 e4       	ldi	r21, 0x44	; 68
    243e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	89 ab       	std	Y+49, r24	; 0x31
    2448:	9a ab       	std	Y+50, r25	; 0x32
    244a:	ab ab       	std	Y+51, r26	; 0x33
    244c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    244e:	69 a9       	ldd	r22, Y+49	; 0x31
    2450:	7a a9       	ldd	r23, Y+50	; 0x32
    2452:	8b a9       	ldd	r24, Y+51	; 0x33
    2454:	9c a9       	ldd	r25, Y+52	; 0x34
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	40 e8       	ldi	r20, 0x80	; 128
    245c:	5f e3       	ldi	r21, 0x3F	; 63
    245e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2462:	88 23       	and	r24, r24
    2464:	2c f4       	brge	.+10     	; 0x2470 <HCLCD_Vid8Bits_Init+0x8c>
		__ticks = 1;
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	98 ab       	std	Y+48, r25	; 0x30
    246c:	8f a7       	std	Y+47, r24	; 0x2f
    246e:	3f c0       	rjmp	.+126    	; 0x24ee <HCLCD_Vid8Bits_Init+0x10a>
	else if (__tmp > 65535)
    2470:	69 a9       	ldd	r22, Y+49	; 0x31
    2472:	7a a9       	ldd	r23, Y+50	; 0x32
    2474:	8b a9       	ldd	r24, Y+51	; 0x33
    2476:	9c a9       	ldd	r25, Y+52	; 0x34
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	3f ef       	ldi	r19, 0xFF	; 255
    247c:	4f e7       	ldi	r20, 0x7F	; 127
    247e:	57 e4       	ldi	r21, 0x47	; 71
    2480:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2484:	18 16       	cp	r1, r24
    2486:	4c f5       	brge	.+82     	; 0x24da <HCLCD_Vid8Bits_Init+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2488:	6d a9       	ldd	r22, Y+53	; 0x35
    248a:	7e a9       	ldd	r23, Y+54	; 0x36
    248c:	8f a9       	ldd	r24, Y+55	; 0x37
    248e:	98 ad       	ldd	r25, Y+56	; 0x38
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	40 e2       	ldi	r20, 0x20	; 32
    2496:	51 e4       	ldi	r21, 0x41	; 65
    2498:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	bc 01       	movw	r22, r24
    24a2:	cd 01       	movw	r24, r26
    24a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a8:	dc 01       	movw	r26, r24
    24aa:	cb 01       	movw	r24, r22
    24ac:	98 ab       	std	Y+48, r25	; 0x30
    24ae:	8f a7       	std	Y+47, r24	; 0x2f
    24b0:	0f c0       	rjmp	.+30     	; 0x24d0 <HCLCD_Vid8Bits_Init+0xec>
    24b2:	88 ec       	ldi	r24, 0xC8	; 200
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	9e a7       	std	Y+46, r25	; 0x2e
    24b8:	8d a7       	std	Y+45, r24	; 0x2d
    24ba:	8d a5       	ldd	r24, Y+45	; 0x2d
    24bc:	9e a5       	ldd	r25, Y+46	; 0x2e
    24be:	01 97       	sbiw	r24, 0x01	; 1
    24c0:	f1 f7       	brne	.-4      	; 0x24be <HCLCD_Vid8Bits_Init+0xda>
    24c2:	9e a7       	std	Y+46, r25	; 0x2e
    24c4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    24c8:	98 a9       	ldd	r25, Y+48	; 0x30
    24ca:	01 97       	sbiw	r24, 0x01	; 1
    24cc:	98 ab       	std	Y+48, r25	; 0x30
    24ce:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    24d2:	98 a9       	ldd	r25, Y+48	; 0x30
    24d4:	00 97       	sbiw	r24, 0x00	; 0
    24d6:	69 f7       	brne	.-38     	; 0x24b2 <HCLCD_Vid8Bits_Init+0xce>
    24d8:	14 c0       	rjmp	.+40     	; 0x2502 <HCLCD_Vid8Bits_Init+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24da:	69 a9       	ldd	r22, Y+49	; 0x31
    24dc:	7a a9       	ldd	r23, Y+50	; 0x32
    24de:	8b a9       	ldd	r24, Y+51	; 0x33
    24e0:	9c a9       	ldd	r25, Y+52	; 0x34
    24e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e6:	dc 01       	movw	r26, r24
    24e8:	cb 01       	movw	r24, r22
    24ea:	98 ab       	std	Y+48, r25	; 0x30
    24ec:	8f a7       	std	Y+47, r24	; 0x2f
    24ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    24f0:	98 a9       	ldd	r25, Y+48	; 0x30
    24f2:	9c a7       	std	Y+44, r25	; 0x2c
    24f4:	8b a7       	std	Y+43, r24	; 0x2b
    24f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    24f8:	9c a5       	ldd	r25, Y+44	; 0x2c
    24fa:	01 97       	sbiw	r24, 0x01	; 1
    24fc:	f1 f7       	brne	.-4      	; 0x24fa <HCLCD_Vid8Bits_Init+0x116>
    24fe:	9c a7       	std	Y+44, r25	; 0x2c
    2500:	8b a7       	std	Y+43, r24	; 0x2b
	/*wait to 30 ms*/
	_delay_ms(30);
	/*Send function Send Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_FUNCTION_SET);
    2502:	88 e2       	ldi	r24, 0x28	; 40
    2504:	0e 94 dd 10 	call	0x21ba	; 0x21ba <HCLCD_Vid8Bits_SendCommand>
    2508:	80 e0       	ldi	r24, 0x00	; 0
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	a0 e8       	ldi	r26, 0x80	; 128
    250e:	bf e3       	ldi	r27, 0x3F	; 63
    2510:	8f a3       	std	Y+39, r24	; 0x27
    2512:	98 a7       	std	Y+40, r25	; 0x28
    2514:	a9 a7       	std	Y+41, r26	; 0x29
    2516:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2518:	6f a1       	ldd	r22, Y+39	; 0x27
    251a:	78 a5       	ldd	r23, Y+40	; 0x28
    251c:	89 a5       	ldd	r24, Y+41	; 0x29
    251e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	4a ef       	ldi	r20, 0xFA	; 250
    2526:	54 e4       	ldi	r21, 0x44	; 68
    2528:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    252c:	dc 01       	movw	r26, r24
    252e:	cb 01       	movw	r24, r22
    2530:	8b a3       	std	Y+35, r24	; 0x23
    2532:	9c a3       	std	Y+36, r25	; 0x24
    2534:	ad a3       	std	Y+37, r26	; 0x25
    2536:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2538:	6b a1       	ldd	r22, Y+35	; 0x23
    253a:	7c a1       	ldd	r23, Y+36	; 0x24
    253c:	8d a1       	ldd	r24, Y+37	; 0x25
    253e:	9e a1       	ldd	r25, Y+38	; 0x26
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	40 e8       	ldi	r20, 0x80	; 128
    2546:	5f e3       	ldi	r21, 0x3F	; 63
    2548:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    254c:	88 23       	and	r24, r24
    254e:	2c f4       	brge	.+10     	; 0x255a <HCLCD_Vid8Bits_Init+0x176>
		__ticks = 1;
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	9a a3       	std	Y+34, r25	; 0x22
    2556:	89 a3       	std	Y+33, r24	; 0x21
    2558:	3f c0       	rjmp	.+126    	; 0x25d8 <HCLCD_Vid8Bits_Init+0x1f4>
	else if (__tmp > 65535)
    255a:	6b a1       	ldd	r22, Y+35	; 0x23
    255c:	7c a1       	ldd	r23, Y+36	; 0x24
    255e:	8d a1       	ldd	r24, Y+37	; 0x25
    2560:	9e a1       	ldd	r25, Y+38	; 0x26
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	3f ef       	ldi	r19, 0xFF	; 255
    2566:	4f e7       	ldi	r20, 0x7F	; 127
    2568:	57 e4       	ldi	r21, 0x47	; 71
    256a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    256e:	18 16       	cp	r1, r24
    2570:	4c f5       	brge	.+82     	; 0x25c4 <HCLCD_Vid8Bits_Init+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2572:	6f a1       	ldd	r22, Y+39	; 0x27
    2574:	78 a5       	ldd	r23, Y+40	; 0x28
    2576:	89 a5       	ldd	r24, Y+41	; 0x29
    2578:	9a a5       	ldd	r25, Y+42	; 0x2a
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	40 e2       	ldi	r20, 0x20	; 32
    2580:	51 e4       	ldi	r21, 0x41	; 65
    2582:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	bc 01       	movw	r22, r24
    258c:	cd 01       	movw	r24, r26
    258e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	9a a3       	std	Y+34, r25	; 0x22
    2598:	89 a3       	std	Y+33, r24	; 0x21
    259a:	0f c0       	rjmp	.+30     	; 0x25ba <HCLCD_Vid8Bits_Init+0x1d6>
    259c:	88 ec       	ldi	r24, 0xC8	; 200
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	98 a3       	std	Y+32, r25	; 0x20
    25a2:	8f 8f       	std	Y+31, r24	; 0x1f
    25a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25a6:	98 a1       	ldd	r25, Y+32	; 0x20
    25a8:	01 97       	sbiw	r24, 0x01	; 1
    25aa:	f1 f7       	brne	.-4      	; 0x25a8 <HCLCD_Vid8Bits_Init+0x1c4>
    25ac:	98 a3       	std	Y+32, r25	; 0x20
    25ae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b0:	89 a1       	ldd	r24, Y+33	; 0x21
    25b2:	9a a1       	ldd	r25, Y+34	; 0x22
    25b4:	01 97       	sbiw	r24, 0x01	; 1
    25b6:	9a a3       	std	Y+34, r25	; 0x22
    25b8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ba:	89 a1       	ldd	r24, Y+33	; 0x21
    25bc:	9a a1       	ldd	r25, Y+34	; 0x22
    25be:	00 97       	sbiw	r24, 0x00	; 0
    25c0:	69 f7       	brne	.-38     	; 0x259c <HCLCD_Vid8Bits_Init+0x1b8>
    25c2:	14 c0       	rjmp	.+40     	; 0x25ec <HCLCD_Vid8Bits_Init+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c4:	6b a1       	ldd	r22, Y+35	; 0x23
    25c6:	7c a1       	ldd	r23, Y+36	; 0x24
    25c8:	8d a1       	ldd	r24, Y+37	; 0x25
    25ca:	9e a1       	ldd	r25, Y+38	; 0x26
    25cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d0:	dc 01       	movw	r26, r24
    25d2:	cb 01       	movw	r24, r22
    25d4:	9a a3       	std	Y+34, r25	; 0x22
    25d6:	89 a3       	std	Y+33, r24	; 0x21
    25d8:	89 a1       	ldd	r24, Y+33	; 0x21
    25da:	9a a1       	ldd	r25, Y+34	; 0x22
    25dc:	9e 8f       	std	Y+30, r25	; 0x1e
    25de:	8d 8f       	std	Y+29, r24	; 0x1d
    25e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25e4:	01 97       	sbiw	r24, 0x01	; 1
    25e6:	f1 f7       	brne	.-4      	; 0x25e4 <HCLCD_Vid8Bits_Init+0x200>
    25e8:	9e 8f       	std	Y+30, r25	; 0x1e
    25ea:	8d 8f       	std	Y+29, r24	; 0x1d
	/*wait to 30 ms*/
	_delay_ms(1);
	/*Send  Display on/off Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_DISPLAY_ON_OFF);
    25ec:	8c e0       	ldi	r24, 0x0C	; 12
    25ee:	0e 94 dd 10 	call	0x21ba	; 0x21ba <HCLCD_Vid8Bits_SendCommand>
    25f2:	80 e0       	ldi	r24, 0x00	; 0
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	a0 e8       	ldi	r26, 0x80	; 128
    25f8:	bf e3       	ldi	r27, 0x3F	; 63
    25fa:	89 8f       	std	Y+25, r24	; 0x19
    25fc:	9a 8f       	std	Y+26, r25	; 0x1a
    25fe:	ab 8f       	std	Y+27, r26	; 0x1b
    2600:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2602:	69 8d       	ldd	r22, Y+25	; 0x19
    2604:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2606:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2608:	9c 8d       	ldd	r25, Y+28	; 0x1c
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	4a ef       	ldi	r20, 0xFA	; 250
    2610:	54 e4       	ldi	r21, 0x44	; 68
    2612:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2616:	dc 01       	movw	r26, r24
    2618:	cb 01       	movw	r24, r22
    261a:	8d 8b       	std	Y+21, r24	; 0x15
    261c:	9e 8b       	std	Y+22, r25	; 0x16
    261e:	af 8b       	std	Y+23, r26	; 0x17
    2620:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2622:	6d 89       	ldd	r22, Y+21	; 0x15
    2624:	7e 89       	ldd	r23, Y+22	; 0x16
    2626:	8f 89       	ldd	r24, Y+23	; 0x17
    2628:	98 8d       	ldd	r25, Y+24	; 0x18
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	40 e8       	ldi	r20, 0x80	; 128
    2630:	5f e3       	ldi	r21, 0x3F	; 63
    2632:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2636:	88 23       	and	r24, r24
    2638:	2c f4       	brge	.+10     	; 0x2644 <HCLCD_Vid8Bits_Init+0x260>
		__ticks = 1;
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	9c 8b       	std	Y+20, r25	; 0x14
    2640:	8b 8b       	std	Y+19, r24	; 0x13
    2642:	3f c0       	rjmp	.+126    	; 0x26c2 <HCLCD_Vid8Bits_Init+0x2de>
	else if (__tmp > 65535)
    2644:	6d 89       	ldd	r22, Y+21	; 0x15
    2646:	7e 89       	ldd	r23, Y+22	; 0x16
    2648:	8f 89       	ldd	r24, Y+23	; 0x17
    264a:	98 8d       	ldd	r25, Y+24	; 0x18
    264c:	20 e0       	ldi	r18, 0x00	; 0
    264e:	3f ef       	ldi	r19, 0xFF	; 255
    2650:	4f e7       	ldi	r20, 0x7F	; 127
    2652:	57 e4       	ldi	r21, 0x47	; 71
    2654:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2658:	18 16       	cp	r1, r24
    265a:	4c f5       	brge	.+82     	; 0x26ae <HCLCD_Vid8Bits_Init+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    265c:	69 8d       	ldd	r22, Y+25	; 0x19
    265e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2660:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2662:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2664:	20 e0       	ldi	r18, 0x00	; 0
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	40 e2       	ldi	r20, 0x20	; 32
    266a:	51 e4       	ldi	r21, 0x41	; 65
    266c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2670:	dc 01       	movw	r26, r24
    2672:	cb 01       	movw	r24, r22
    2674:	bc 01       	movw	r22, r24
    2676:	cd 01       	movw	r24, r26
    2678:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	9c 8b       	std	Y+20, r25	; 0x14
    2682:	8b 8b       	std	Y+19, r24	; 0x13
    2684:	0f c0       	rjmp	.+30     	; 0x26a4 <HCLCD_Vid8Bits_Init+0x2c0>
    2686:	88 ec       	ldi	r24, 0xC8	; 200
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	9a 8b       	std	Y+18, r25	; 0x12
    268c:	89 8b       	std	Y+17, r24	; 0x11
    268e:	89 89       	ldd	r24, Y+17	; 0x11
    2690:	9a 89       	ldd	r25, Y+18	; 0x12
    2692:	01 97       	sbiw	r24, 0x01	; 1
    2694:	f1 f7       	brne	.-4      	; 0x2692 <HCLCD_Vid8Bits_Init+0x2ae>
    2696:	9a 8b       	std	Y+18, r25	; 0x12
    2698:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    269a:	8b 89       	ldd	r24, Y+19	; 0x13
    269c:	9c 89       	ldd	r25, Y+20	; 0x14
    269e:	01 97       	sbiw	r24, 0x01	; 1
    26a0:	9c 8b       	std	Y+20, r25	; 0x14
    26a2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a4:	8b 89       	ldd	r24, Y+19	; 0x13
    26a6:	9c 89       	ldd	r25, Y+20	; 0x14
    26a8:	00 97       	sbiw	r24, 0x00	; 0
    26aa:	69 f7       	brne	.-38     	; 0x2686 <HCLCD_Vid8Bits_Init+0x2a2>
    26ac:	14 c0       	rjmp	.+40     	; 0x26d6 <HCLCD_Vid8Bits_Init+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ae:	6d 89       	ldd	r22, Y+21	; 0x15
    26b0:	7e 89       	ldd	r23, Y+22	; 0x16
    26b2:	8f 89       	ldd	r24, Y+23	; 0x17
    26b4:	98 8d       	ldd	r25, Y+24	; 0x18
    26b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ba:	dc 01       	movw	r26, r24
    26bc:	cb 01       	movw	r24, r22
    26be:	9c 8b       	std	Y+20, r25	; 0x14
    26c0:	8b 8b       	std	Y+19, r24	; 0x13
    26c2:	8b 89       	ldd	r24, Y+19	; 0x13
    26c4:	9c 89       	ldd	r25, Y+20	; 0x14
    26c6:	98 8b       	std	Y+16, r25	; 0x10
    26c8:	8f 87       	std	Y+15, r24	; 0x0f
    26ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    26cc:	98 89       	ldd	r25, Y+16	; 0x10
    26ce:	01 97       	sbiw	r24, 0x01	; 1
    26d0:	f1 f7       	brne	.-4      	; 0x26ce <HCLCD_Vid8Bits_Init+0x2ea>
    26d2:	98 8b       	std	Y+16, r25	; 0x10
    26d4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*Send Display Clear Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_DISPLAY_CLEAR);
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	0e 94 dd 10 	call	0x21ba	; 0x21ba <HCLCD_Vid8Bits_SendCommand>
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	a0 e0       	ldi	r26, 0x00	; 0
    26e2:	b0 e4       	ldi	r27, 0x40	; 64
    26e4:	8b 87       	std	Y+11, r24	; 0x0b
    26e6:	9c 87       	std	Y+12, r25	; 0x0c
    26e8:	ad 87       	std	Y+13, r26	; 0x0d
    26ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    26f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    26f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	4a ef       	ldi	r20, 0xFA	; 250
    26fa:	54 e4       	ldi	r21, 0x44	; 68
    26fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2700:	dc 01       	movw	r26, r24
    2702:	cb 01       	movw	r24, r22
    2704:	8f 83       	std	Y+7, r24	; 0x07
    2706:	98 87       	std	Y+8, r25	; 0x08
    2708:	a9 87       	std	Y+9, r26	; 0x09
    270a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    270c:	6f 81       	ldd	r22, Y+7	; 0x07
    270e:	78 85       	ldd	r23, Y+8	; 0x08
    2710:	89 85       	ldd	r24, Y+9	; 0x09
    2712:	9a 85       	ldd	r25, Y+10	; 0x0a
    2714:	20 e0       	ldi	r18, 0x00	; 0
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	40 e8       	ldi	r20, 0x80	; 128
    271a:	5f e3       	ldi	r21, 0x3F	; 63
    271c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2720:	88 23       	and	r24, r24
    2722:	2c f4       	brge	.+10     	; 0x272e <HCLCD_Vid8Bits_Init+0x34a>
		__ticks = 1;
    2724:	81 e0       	ldi	r24, 0x01	; 1
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	9e 83       	std	Y+6, r25	; 0x06
    272a:	8d 83       	std	Y+5, r24	; 0x05
    272c:	3f c0       	rjmp	.+126    	; 0x27ac <HCLCD_Vid8Bits_Init+0x3c8>
	else if (__tmp > 65535)
    272e:	6f 81       	ldd	r22, Y+7	; 0x07
    2730:	78 85       	ldd	r23, Y+8	; 0x08
    2732:	89 85       	ldd	r24, Y+9	; 0x09
    2734:	9a 85       	ldd	r25, Y+10	; 0x0a
    2736:	20 e0       	ldi	r18, 0x00	; 0
    2738:	3f ef       	ldi	r19, 0xFF	; 255
    273a:	4f e7       	ldi	r20, 0x7F	; 127
    273c:	57 e4       	ldi	r21, 0x47	; 71
    273e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2742:	18 16       	cp	r1, r24
    2744:	4c f5       	brge	.+82     	; 0x2798 <HCLCD_Vid8Bits_Init+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2746:	6b 85       	ldd	r22, Y+11	; 0x0b
    2748:	7c 85       	ldd	r23, Y+12	; 0x0c
    274a:	8d 85       	ldd	r24, Y+13	; 0x0d
    274c:	9e 85       	ldd	r25, Y+14	; 0x0e
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	40 e2       	ldi	r20, 0x20	; 32
    2754:	51 e4       	ldi	r21, 0x41	; 65
    2756:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    275a:	dc 01       	movw	r26, r24
    275c:	cb 01       	movw	r24, r22
    275e:	bc 01       	movw	r22, r24
    2760:	cd 01       	movw	r24, r26
    2762:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2766:	dc 01       	movw	r26, r24
    2768:	cb 01       	movw	r24, r22
    276a:	9e 83       	std	Y+6, r25	; 0x06
    276c:	8d 83       	std	Y+5, r24	; 0x05
    276e:	0f c0       	rjmp	.+30     	; 0x278e <HCLCD_Vid8Bits_Init+0x3aa>
    2770:	88 ec       	ldi	r24, 0xC8	; 200
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	9c 83       	std	Y+4, r25	; 0x04
    2776:	8b 83       	std	Y+3, r24	; 0x03
    2778:	8b 81       	ldd	r24, Y+3	; 0x03
    277a:	9c 81       	ldd	r25, Y+4	; 0x04
    277c:	01 97       	sbiw	r24, 0x01	; 1
    277e:	f1 f7       	brne	.-4      	; 0x277c <HCLCD_Vid8Bits_Init+0x398>
    2780:	9c 83       	std	Y+4, r25	; 0x04
    2782:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2784:	8d 81       	ldd	r24, Y+5	; 0x05
    2786:	9e 81       	ldd	r25, Y+6	; 0x06
    2788:	01 97       	sbiw	r24, 0x01	; 1
    278a:	9e 83       	std	Y+6, r25	; 0x06
    278c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    278e:	8d 81       	ldd	r24, Y+5	; 0x05
    2790:	9e 81       	ldd	r25, Y+6	; 0x06
    2792:	00 97       	sbiw	r24, 0x00	; 0
    2794:	69 f7       	brne	.-38     	; 0x2770 <HCLCD_Vid8Bits_Init+0x38c>
    2796:	14 c0       	rjmp	.+40     	; 0x27c0 <HCLCD_Vid8Bits_Init+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2798:	6f 81       	ldd	r22, Y+7	; 0x07
    279a:	78 85       	ldd	r23, Y+8	; 0x08
    279c:	89 85       	ldd	r24, Y+9	; 0x09
    279e:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	9e 83       	std	Y+6, r25	; 0x06
    27aa:	8d 83       	std	Y+5, r24	; 0x05
    27ac:	8d 81       	ldd	r24, Y+5	; 0x05
    27ae:	9e 81       	ldd	r25, Y+6	; 0x06
    27b0:	9a 83       	std	Y+2, r25	; 0x02
    27b2:	89 83       	std	Y+1, r24	; 0x01
    27b4:	89 81       	ldd	r24, Y+1	; 0x01
    27b6:	9a 81       	ldd	r25, Y+2	; 0x02
    27b8:	01 97       	sbiw	r24, 0x01	; 1
    27ba:	f1 f7       	brne	.-4      	; 0x27b8 <HCLCD_Vid8Bits_Init+0x3d4>
    27bc:	9a 83       	std	Y+2, r25	; 0x02
    27be:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*Send Entry Mode Set Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_ENTRY_MODE_SET);
    27c0:	86 e0       	ldi	r24, 0x06	; 6
    27c2:	0e 94 dd 10 	call	0x21ba	; 0x21ba <HCLCD_Vid8Bits_SendCommand>
}
    27c6:	e8 96       	adiw	r28, 0x38	; 56
    27c8:	0f b6       	in	r0, 0x3f	; 63
    27ca:	f8 94       	cli
    27cc:	de bf       	out	0x3e, r29	; 62
    27ce:	0f be       	out	0x3f, r0	; 63
    27d0:	cd bf       	out	0x3d, r28	; 61
    27d2:	cf 91       	pop	r28
    27d4:	df 91       	pop	r29
    27d6:	08 95       	ret

000027d8 <HCLCD_Vid8Bits_DispalyCharacter>:

/*Display Character 8 Bits*/

void HCLCD_Vid8Bits_DispalyCharacter(u8 Copy_u8Data)
{
    27d8:	df 93       	push	r29
    27da:	cf 93       	push	r28
    27dc:	cd b7       	in	r28, 0x3d	; 61
    27de:	de b7       	in	r29, 0x3e	; 62
    27e0:	6d 97       	sbiw	r28, 0x1d	; 29
    27e2:	0f b6       	in	r0, 0x3f	; 63
    27e4:	f8 94       	cli
    27e6:	de bf       	out	0x3e, r29	; 62
    27e8:	0f be       	out	0x3f, r0	; 63
    27ea:	cd bf       	out	0x3d, r28	; 61
    27ec:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Select Data register-->Write one on RS PIN*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_HIGH);
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	62 e0       	ldi	r22, 0x02	; 2
    27f2:	41 e0       	ldi	r20, 0x01	; 1
    27f4:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
	/**select Write mode--> Write zero on RW Pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    27f8:	81 e0       	ldi	r24, 0x01	; 1
    27fa:	62 e0       	ldi	r22, 0x02	; 2
    27fc:	40 e0       	ldi	r20, 0x00	; 0
    27fe:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
	/*Send Command ON port Data*/
	MDIO_Error_State_SetPortValue(DATA_PORT,Copy_u8Data);
    2802:	82 e0       	ldi	r24, 0x02	; 2
    2804:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2806:	0e 94 42 0b 	call	0x1684	; 0x1684 <MDIO_Error_State_SetPortValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    280a:	82 e0       	ldi	r24, 0x02	; 2
    280c:	62 e0       	ldi	r22, 0x02	; 2
    280e:	41 e0       	ldi	r20, 0x01	; 1
    2810:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
    2814:	80 e0       	ldi	r24, 0x00	; 0
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	a0 e0       	ldi	r26, 0x00	; 0
    281a:	b0 e4       	ldi	r27, 0x40	; 64
    281c:	89 8f       	std	Y+25, r24	; 0x19
    281e:	9a 8f       	std	Y+26, r25	; 0x1a
    2820:	ab 8f       	std	Y+27, r26	; 0x1b
    2822:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2824:	69 8d       	ldd	r22, Y+25	; 0x19
    2826:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2828:	8b 8d       	ldd	r24, Y+27	; 0x1b
    282a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	4a ef       	ldi	r20, 0xFA	; 250
    2832:	54 e4       	ldi	r21, 0x44	; 68
    2834:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2838:	dc 01       	movw	r26, r24
    283a:	cb 01       	movw	r24, r22
    283c:	8d 8b       	std	Y+21, r24	; 0x15
    283e:	9e 8b       	std	Y+22, r25	; 0x16
    2840:	af 8b       	std	Y+23, r26	; 0x17
    2842:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2844:	6d 89       	ldd	r22, Y+21	; 0x15
    2846:	7e 89       	ldd	r23, Y+22	; 0x16
    2848:	8f 89       	ldd	r24, Y+23	; 0x17
    284a:	98 8d       	ldd	r25, Y+24	; 0x18
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	40 e8       	ldi	r20, 0x80	; 128
    2852:	5f e3       	ldi	r21, 0x3F	; 63
    2854:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2858:	88 23       	and	r24, r24
    285a:	2c f4       	brge	.+10     	; 0x2866 <HCLCD_Vid8Bits_DispalyCharacter+0x8e>
		__ticks = 1;
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	9c 8b       	std	Y+20, r25	; 0x14
    2862:	8b 8b       	std	Y+19, r24	; 0x13
    2864:	3f c0       	rjmp	.+126    	; 0x28e4 <HCLCD_Vid8Bits_DispalyCharacter+0x10c>
	else if (__tmp > 65535)
    2866:	6d 89       	ldd	r22, Y+21	; 0x15
    2868:	7e 89       	ldd	r23, Y+22	; 0x16
    286a:	8f 89       	ldd	r24, Y+23	; 0x17
    286c:	98 8d       	ldd	r25, Y+24	; 0x18
    286e:	20 e0       	ldi	r18, 0x00	; 0
    2870:	3f ef       	ldi	r19, 0xFF	; 255
    2872:	4f e7       	ldi	r20, 0x7F	; 127
    2874:	57 e4       	ldi	r21, 0x47	; 71
    2876:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    287a:	18 16       	cp	r1, r24
    287c:	4c f5       	brge	.+82     	; 0x28d0 <HCLCD_Vid8Bits_DispalyCharacter+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    287e:	69 8d       	ldd	r22, Y+25	; 0x19
    2880:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2882:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2884:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	40 e2       	ldi	r20, 0x20	; 32
    288c:	51 e4       	ldi	r21, 0x41	; 65
    288e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2892:	dc 01       	movw	r26, r24
    2894:	cb 01       	movw	r24, r22
    2896:	bc 01       	movw	r22, r24
    2898:	cd 01       	movw	r24, r26
    289a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    289e:	dc 01       	movw	r26, r24
    28a0:	cb 01       	movw	r24, r22
    28a2:	9c 8b       	std	Y+20, r25	; 0x14
    28a4:	8b 8b       	std	Y+19, r24	; 0x13
    28a6:	0f c0       	rjmp	.+30     	; 0x28c6 <HCLCD_Vid8Bits_DispalyCharacter+0xee>
    28a8:	88 ec       	ldi	r24, 0xC8	; 200
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	9a 8b       	std	Y+18, r25	; 0x12
    28ae:	89 8b       	std	Y+17, r24	; 0x11
    28b0:	89 89       	ldd	r24, Y+17	; 0x11
    28b2:	9a 89       	ldd	r25, Y+18	; 0x12
    28b4:	01 97       	sbiw	r24, 0x01	; 1
    28b6:	f1 f7       	brne	.-4      	; 0x28b4 <HCLCD_Vid8Bits_DispalyCharacter+0xdc>
    28b8:	9a 8b       	std	Y+18, r25	; 0x12
    28ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28bc:	8b 89       	ldd	r24, Y+19	; 0x13
    28be:	9c 89       	ldd	r25, Y+20	; 0x14
    28c0:	01 97       	sbiw	r24, 0x01	; 1
    28c2:	9c 8b       	std	Y+20, r25	; 0x14
    28c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c6:	8b 89       	ldd	r24, Y+19	; 0x13
    28c8:	9c 89       	ldd	r25, Y+20	; 0x14
    28ca:	00 97       	sbiw	r24, 0x00	; 0
    28cc:	69 f7       	brne	.-38     	; 0x28a8 <HCLCD_Vid8Bits_DispalyCharacter+0xd0>
    28ce:	14 c0       	rjmp	.+40     	; 0x28f8 <HCLCD_Vid8Bits_DispalyCharacter+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d0:	6d 89       	ldd	r22, Y+21	; 0x15
    28d2:	7e 89       	ldd	r23, Y+22	; 0x16
    28d4:	8f 89       	ldd	r24, Y+23	; 0x17
    28d6:	98 8d       	ldd	r25, Y+24	; 0x18
    28d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	9c 8b       	std	Y+20, r25	; 0x14
    28e2:	8b 8b       	std	Y+19, r24	; 0x13
    28e4:	8b 89       	ldd	r24, Y+19	; 0x13
    28e6:	9c 89       	ldd	r25, Y+20	; 0x14
    28e8:	98 8b       	std	Y+16, r25	; 0x10
    28ea:	8f 87       	std	Y+15, r24	; 0x0f
    28ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    28ee:	98 89       	ldd	r25, Y+16	; 0x10
    28f0:	01 97       	sbiw	r24, 0x01	; 1
    28f2:	f1 f7       	brne	.-4      	; 0x28f0 <HCLCD_Vid8Bits_DispalyCharacter+0x118>
    28f4:	98 8b       	std	Y+16, r25	; 0x10
    28f6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    28f8:	82 e0       	ldi	r24, 0x02	; 2
    28fa:	62 e0       	ldi	r22, 0x02	; 2
    28fc:	40 e0       	ldi	r20, 0x00	; 0
    28fe:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
    2902:	80 e0       	ldi	r24, 0x00	; 0
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	a0 e0       	ldi	r26, 0x00	; 0
    2908:	b0 e4       	ldi	r27, 0x40	; 64
    290a:	8b 87       	std	Y+11, r24	; 0x0b
    290c:	9c 87       	std	Y+12, r25	; 0x0c
    290e:	ad 87       	std	Y+13, r26	; 0x0d
    2910:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2912:	6b 85       	ldd	r22, Y+11	; 0x0b
    2914:	7c 85       	ldd	r23, Y+12	; 0x0c
    2916:	8d 85       	ldd	r24, Y+13	; 0x0d
    2918:	9e 85       	ldd	r25, Y+14	; 0x0e
    291a:	20 e0       	ldi	r18, 0x00	; 0
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	4a ef       	ldi	r20, 0xFA	; 250
    2920:	54 e4       	ldi	r21, 0x44	; 68
    2922:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	8f 83       	std	Y+7, r24	; 0x07
    292c:	98 87       	std	Y+8, r25	; 0x08
    292e:	a9 87       	std	Y+9, r26	; 0x09
    2930:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2932:	6f 81       	ldd	r22, Y+7	; 0x07
    2934:	78 85       	ldd	r23, Y+8	; 0x08
    2936:	89 85       	ldd	r24, Y+9	; 0x09
    2938:	9a 85       	ldd	r25, Y+10	; 0x0a
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	40 e8       	ldi	r20, 0x80	; 128
    2940:	5f e3       	ldi	r21, 0x3F	; 63
    2942:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2946:	88 23       	and	r24, r24
    2948:	2c f4       	brge	.+10     	; 0x2954 <HCLCD_Vid8Bits_DispalyCharacter+0x17c>
		__ticks = 1;
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	9e 83       	std	Y+6, r25	; 0x06
    2950:	8d 83       	std	Y+5, r24	; 0x05
    2952:	3f c0       	rjmp	.+126    	; 0x29d2 <HCLCD_Vid8Bits_DispalyCharacter+0x1fa>
	else if (__tmp > 65535)
    2954:	6f 81       	ldd	r22, Y+7	; 0x07
    2956:	78 85       	ldd	r23, Y+8	; 0x08
    2958:	89 85       	ldd	r24, Y+9	; 0x09
    295a:	9a 85       	ldd	r25, Y+10	; 0x0a
    295c:	20 e0       	ldi	r18, 0x00	; 0
    295e:	3f ef       	ldi	r19, 0xFF	; 255
    2960:	4f e7       	ldi	r20, 0x7F	; 127
    2962:	57 e4       	ldi	r21, 0x47	; 71
    2964:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2968:	18 16       	cp	r1, r24
    296a:	4c f5       	brge	.+82     	; 0x29be <HCLCD_Vid8Bits_DispalyCharacter+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    296c:	6b 85       	ldd	r22, Y+11	; 0x0b
    296e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2970:	8d 85       	ldd	r24, Y+13	; 0x0d
    2972:	9e 85       	ldd	r25, Y+14	; 0x0e
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	40 e2       	ldi	r20, 0x20	; 32
    297a:	51 e4       	ldi	r21, 0x41	; 65
    297c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2980:	dc 01       	movw	r26, r24
    2982:	cb 01       	movw	r24, r22
    2984:	bc 01       	movw	r22, r24
    2986:	cd 01       	movw	r24, r26
    2988:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    298c:	dc 01       	movw	r26, r24
    298e:	cb 01       	movw	r24, r22
    2990:	9e 83       	std	Y+6, r25	; 0x06
    2992:	8d 83       	std	Y+5, r24	; 0x05
    2994:	0f c0       	rjmp	.+30     	; 0x29b4 <HCLCD_Vid8Bits_DispalyCharacter+0x1dc>
    2996:	88 ec       	ldi	r24, 0xC8	; 200
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	9c 83       	std	Y+4, r25	; 0x04
    299c:	8b 83       	std	Y+3, r24	; 0x03
    299e:	8b 81       	ldd	r24, Y+3	; 0x03
    29a0:	9c 81       	ldd	r25, Y+4	; 0x04
    29a2:	01 97       	sbiw	r24, 0x01	; 1
    29a4:	f1 f7       	brne	.-4      	; 0x29a2 <HCLCD_Vid8Bits_DispalyCharacter+0x1ca>
    29a6:	9c 83       	std	Y+4, r25	; 0x04
    29a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29aa:	8d 81       	ldd	r24, Y+5	; 0x05
    29ac:	9e 81       	ldd	r25, Y+6	; 0x06
    29ae:	01 97       	sbiw	r24, 0x01	; 1
    29b0:	9e 83       	std	Y+6, r25	; 0x06
    29b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29b4:	8d 81       	ldd	r24, Y+5	; 0x05
    29b6:	9e 81       	ldd	r25, Y+6	; 0x06
    29b8:	00 97       	sbiw	r24, 0x00	; 0
    29ba:	69 f7       	brne	.-38     	; 0x2996 <HCLCD_Vid8Bits_DispalyCharacter+0x1be>
    29bc:	14 c0       	rjmp	.+40     	; 0x29e6 <HCLCD_Vid8Bits_DispalyCharacter+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29be:	6f 81       	ldd	r22, Y+7	; 0x07
    29c0:	78 85       	ldd	r23, Y+8	; 0x08
    29c2:	89 85       	ldd	r24, Y+9	; 0x09
    29c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ca:	dc 01       	movw	r26, r24
    29cc:	cb 01       	movw	r24, r22
    29ce:	9e 83       	std	Y+6, r25	; 0x06
    29d0:	8d 83       	std	Y+5, r24	; 0x05
    29d2:	8d 81       	ldd	r24, Y+5	; 0x05
    29d4:	9e 81       	ldd	r25, Y+6	; 0x06
    29d6:	9a 83       	std	Y+2, r25	; 0x02
    29d8:	89 83       	std	Y+1, r24	; 0x01
    29da:	89 81       	ldd	r24, Y+1	; 0x01
    29dc:	9a 81       	ldd	r25, Y+2	; 0x02
    29de:	01 97       	sbiw	r24, 0x01	; 1
    29e0:	f1 f7       	brne	.-4      	; 0x29de <HCLCD_Vid8Bits_DispalyCharacter+0x206>
    29e2:	9a 83       	std	Y+2, r25	; 0x02
    29e4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    29e6:	82 e0       	ldi	r24, 0x02	; 2
    29e8:	62 e0       	ldi	r22, 0x02	; 2
    29ea:	41 e0       	ldi	r20, 0x01	; 1
    29ec:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
}
    29f0:	6d 96       	adiw	r28, 0x1d	; 29
    29f2:	0f b6       	in	r0, 0x3f	; 63
    29f4:	f8 94       	cli
    29f6:	de bf       	out	0x3e, r29	; 62
    29f8:	0f be       	out	0x3f, r0	; 63
    29fa:	cd bf       	out	0x3d, r28	; 61
    29fc:	cf 91       	pop	r28
    29fe:	df 91       	pop	r29
    2a00:	08 95       	ret

00002a02 <HCLCD_Vid8Bits_DisplayString>:

/*Display String 8 Bits*/

void HCLCD_Vid8Bits_DisplayString(u8* PCopy_u8String)
{
    2a02:	df 93       	push	r29
    2a04:	cf 93       	push	r28
    2a06:	00 d0       	rcall	.+0      	; 0x2a08 <HCLCD_Vid8Bits_DisplayString+0x6>
    2a08:	0f 92       	push	r0
    2a0a:	cd b7       	in	r28, 0x3d	; 61
    2a0c:	de b7       	in	r29, 0x3e	; 62
    2a0e:	9b 83       	std	Y+3, r25	; 0x03
    2a10:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Count=0;
    2a12:	19 82       	std	Y+1, r1	; 0x01
    2a14:	0e c0       	rjmp	.+28     	; 0x2a32 <HCLCD_Vid8Bits_DisplayString+0x30>
	while(PCopy_u8String[Loc_u8Count]!=NULL)
	{
		HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8String[Loc_u8Count]);
    2a16:	89 81       	ldd	r24, Y+1	; 0x01
    2a18:	28 2f       	mov	r18, r24
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a20:	fc 01       	movw	r30, r24
    2a22:	e2 0f       	add	r30, r18
    2a24:	f3 1f       	adc	r31, r19
    2a26:	80 81       	ld	r24, Z
    2a28:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <HCLCD_Vid8Bits_DispalyCharacter>
		Loc_u8Count++;
    2a2c:	89 81       	ldd	r24, Y+1	; 0x01
    2a2e:	8f 5f       	subi	r24, 0xFF	; 255
    2a30:	89 83       	std	Y+1, r24	; 0x01
/*Display String 8 Bits*/

void HCLCD_Vid8Bits_DisplayString(u8* PCopy_u8String)
{
	u8 Loc_u8Count=0;
	while(PCopy_u8String[Loc_u8Count]!=NULL)
    2a32:	89 81       	ldd	r24, Y+1	; 0x01
    2a34:	28 2f       	mov	r18, r24
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a3c:	fc 01       	movw	r30, r24
    2a3e:	e2 0f       	add	r30, r18
    2a40:	f3 1f       	adc	r31, r19
    2a42:	80 81       	ld	r24, Z
    2a44:	88 23       	and	r24, r24
    2a46:	39 f7       	brne	.-50     	; 0x2a16 <HCLCD_Vid8Bits_DisplayString+0x14>
	{
		HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8String[Loc_u8Count]);
		Loc_u8Count++;
	}
}
    2a48:	0f 90       	pop	r0
    2a4a:	0f 90       	pop	r0
    2a4c:	0f 90       	pop	r0
    2a4e:	cf 91       	pop	r28
    2a50:	df 91       	pop	r29
    2a52:	08 95       	ret

00002a54 <HCLCD_Vid8Bits_DisplayNumber>:

void HCLCD_Vid8Bits_DisplayNumber(u32 Copy_u8Number)
{
    2a54:	0f 93       	push	r16
    2a56:	1f 93       	push	r17
    2a58:	df 93       	push	r29
    2a5a:	cf 93       	push	r28
    2a5c:	cd b7       	in	r28, 0x3d	; 61
    2a5e:	de b7       	in	r29, 0x3e	; 62
    2a60:	60 97       	sbiw	r28, 0x10	; 16
    2a62:	0f b6       	in	r0, 0x3f	; 63
    2a64:	f8 94       	cli
    2a66:	de bf       	out	0x3e, r29	; 62
    2a68:	0f be       	out	0x3f, r0	; 63
    2a6a:	cd bf       	out	0x3d, r28	; 61
    2a6c:	6d 87       	std	Y+13, r22	; 0x0d
    2a6e:	7e 87       	std	Y+14, r23	; 0x0e
    2a70:	8f 87       	std	Y+15, r24	; 0x0f
    2a72:	98 8b       	std	Y+16, r25	; 0x10
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
    2a74:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u8Number>0)
    2a76:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a78:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a7a:	af 85       	ldd	r26, Y+15	; 0x0f
    2a7c:	b8 89       	ldd	r27, Y+16	; 0x10
    2a7e:	00 97       	sbiw	r24, 0x00	; 0
    2a80:	a1 05       	cpc	r26, r1
    2a82:	b1 05       	cpc	r27, r1
    2a84:	09 f4       	brne	.+2      	; 0x2a88 <HCLCD_Vid8Bits_DisplayNumber+0x34>
    2a86:	4f c0       	rjmp	.+158    	; 0x2b26 <HCLCD_Vid8Bits_DisplayNumber+0xd2>
    2a88:	2d c0       	rjmp	.+90     	; 0x2ae4 <HCLCD_Vid8Bits_DisplayNumber+0x90>
	{
		while(Copy_u8Number!=0)
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
    2a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8c:	08 2f       	mov	r16, r24
    2a8e:	10 e0       	ldi	r17, 0x00	; 0
    2a90:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a92:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a94:	af 85       	ldd	r26, Y+15	; 0x0f
    2a96:	b8 89       	ldd	r27, Y+16	; 0x10
    2a98:	2a e0       	ldi	r18, 0x0A	; 10
    2a9a:	30 e0       	ldi	r19, 0x00	; 0
    2a9c:	40 e0       	ldi	r20, 0x00	; 0
    2a9e:	50 e0       	ldi	r21, 0x00	; 0
    2aa0:	bc 01       	movw	r22, r24
    2aa2:	cd 01       	movw	r24, r26
    2aa4:	0e 94 a8 23 	call	0x4750	; 0x4750 <__udivmodsi4>
    2aa8:	dc 01       	movw	r26, r24
    2aaa:	cb 01       	movw	r24, r22
    2aac:	28 2f       	mov	r18, r24
    2aae:	ce 01       	movw	r24, r28
    2ab0:	03 96       	adiw	r24, 0x03	; 3
    2ab2:	fc 01       	movw	r30, r24
    2ab4:	e0 0f       	add	r30, r16
    2ab6:	f1 1f       	adc	r31, r17
    2ab8:	20 83       	st	Z, r18
			Copy_u8Number/=10;
    2aba:	8d 85       	ldd	r24, Y+13	; 0x0d
    2abc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2abe:	af 85       	ldd	r26, Y+15	; 0x0f
    2ac0:	b8 89       	ldd	r27, Y+16	; 0x10
    2ac2:	2a e0       	ldi	r18, 0x0A	; 10
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	40 e0       	ldi	r20, 0x00	; 0
    2ac8:	50 e0       	ldi	r21, 0x00	; 0
    2aca:	bc 01       	movw	r22, r24
    2acc:	cd 01       	movw	r24, r26
    2ace:	0e 94 a8 23 	call	0x4750	; 0x4750 <__udivmodsi4>
    2ad2:	da 01       	movw	r26, r20
    2ad4:	c9 01       	movw	r24, r18
    2ad6:	8d 87       	std	Y+13, r24	; 0x0d
    2ad8:	9e 87       	std	Y+14, r25	; 0x0e
    2ada:	af 87       	std	Y+15, r26	; 0x0f
    2adc:	b8 8b       	std	Y+16, r27	; 0x10
			LOC_Count++;
    2ade:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae0:	8f 5f       	subi	r24, 0xFF	; 255
    2ae2:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
	if(Copy_u8Number>0)
	{
		while(Copy_u8Number!=0)
    2ae4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ae6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ae8:	af 85       	ldd	r26, Y+15	; 0x0f
    2aea:	b8 89       	ldd	r27, Y+16	; 0x10
    2aec:	00 97       	sbiw	r24, 0x00	; 0
    2aee:	a1 05       	cpc	r26, r1
    2af0:	b1 05       	cpc	r27, r1
    2af2:	59 f6       	brne	.-106    	; 0x2a8a <HCLCD_Vid8Bits_DisplayNumber+0x36>
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    2af4:	8a 81       	ldd	r24, Y+2	; 0x02
    2af6:	81 50       	subi	r24, 0x01	; 1
    2af8:	89 83       	std	Y+1, r24	; 0x01
    2afa:	11 c0       	rjmp	.+34     	; 0x2b1e <HCLCD_Vid8Bits_DisplayNumber+0xca>
		{
			HCLCD_Vid8Bits_DispalyCharacter(ARR_Digits[i]+'0');  //ASCII of '0'--->48
    2afc:	89 81       	ldd	r24, Y+1	; 0x01
    2afe:	28 2f       	mov	r18, r24
    2b00:	33 27       	eor	r19, r19
    2b02:	27 fd       	sbrc	r18, 7
    2b04:	30 95       	com	r19
    2b06:	ce 01       	movw	r24, r28
    2b08:	03 96       	adiw	r24, 0x03	; 3
    2b0a:	fc 01       	movw	r30, r24
    2b0c:	e2 0f       	add	r30, r18
    2b0e:	f3 1f       	adc	r31, r19
    2b10:	80 81       	ld	r24, Z
    2b12:	80 5d       	subi	r24, 0xD0	; 208
    2b14:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <HCLCD_Vid8Bits_DispalyCharacter>
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    2b18:	89 81       	ldd	r24, Y+1	; 0x01
    2b1a:	81 50       	subi	r24, 0x01	; 1
    2b1c:	89 83       	std	Y+1, r24	; 0x01
    2b1e:	89 81       	ldd	r24, Y+1	; 0x01
    2b20:	88 23       	and	r24, r24
    2b22:	64 f7       	brge	.-40     	; 0x2afc <HCLCD_Vid8Bits_DisplayNumber+0xa8>
    2b24:	03 c0       	rjmp	.+6      	; 0x2b2c <HCLCD_Vid8Bits_DisplayNumber+0xd8>
			HCLCD_Vid8Bits_DispalyCharacter(ARR_Digits[i]+'0');  //ASCII of '0'--->48
		}
	}
	else
	{
		HCLCD_Vid8Bits_DispalyCharacter('0');
    2b26:	80 e3       	ldi	r24, 0x30	; 48
    2b28:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <HCLCD_Vid8Bits_DispalyCharacter>
	}
}
    2b2c:	60 96       	adiw	r28, 0x10	; 16
    2b2e:	0f b6       	in	r0, 0x3f	; 63
    2b30:	f8 94       	cli
    2b32:	de bf       	out	0x3e, r29	; 62
    2b34:	0f be       	out	0x3f, r0	; 63
    2b36:	cd bf       	out	0x3d, r28	; 61
    2b38:	cf 91       	pop	r28
    2b3a:	df 91       	pop	r29
    2b3c:	1f 91       	pop	r17
    2b3e:	0f 91       	pop	r16
    2b40:	08 95       	ret

00002b42 <HCLCD_Vid8Bits_SetPosition>:

void HCLCD_Vid8Bits_SetPosition(u8 Copy_u8LineNumber,u8 Copy_u8PositionNumber)
{
    2b42:	df 93       	push	r29
    2b44:	cf 93       	push	r28
    2b46:	00 d0       	rcall	.+0      	; 0x2b48 <HCLCD_Vid8Bits_SetPosition+0x6>
    2b48:	cd b7       	in	r28, 0x3d	; 61
    2b4a:	de b7       	in	r29, 0x3e	; 62
    2b4c:	89 83       	std	Y+1, r24	; 0x01
    2b4e:	6a 83       	std	Y+2, r22	; 0x02

	if((Copy_u8LineNumber==HCLCD_LINE1)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    2b50:	89 81       	ldd	r24, Y+1	; 0x01
    2b52:	81 30       	cpi	r24, 0x01	; 1
    2b54:	41 f4       	brne	.+16     	; 0x2b66 <HCLCD_Vid8Bits_SetPosition+0x24>
    2b56:	8a 81       	ldd	r24, Y+2	; 0x02
    2b58:	80 31       	cpi	r24, 0x10	; 16
    2b5a:	28 f4       	brcc	.+10     	; 0x2b66 <HCLCD_Vid8Bits_SetPosition+0x24>
	{
		HCLCD_Vid8Bits_SendCommand((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber));
    2b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b5e:	80 58       	subi	r24, 0x80	; 128
    2b60:	0e 94 dd 10 	call	0x21ba	; 0x21ba <HCLCD_Vid8Bits_SendCommand>
    2b64:	0a c0       	rjmp	.+20     	; 0x2b7a <HCLCD_Vid8Bits_SetPosition+0x38>
	}
	else if((Copy_u8LineNumber==HCLCD_LINE2)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    2b66:	89 81       	ldd	r24, Y+1	; 0x01
    2b68:	82 30       	cpi	r24, 0x02	; 2
    2b6a:	39 f4       	brne	.+14     	; 0x2b7a <HCLCD_Vid8Bits_SetPosition+0x38>
    2b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6e:	80 31       	cpi	r24, 0x10	; 16
    2b70:	20 f4       	brcc	.+8      	; 0x2b7a <HCLCD_Vid8Bits_SetPosition+0x38>
	{
		HCLCD_Vid8Bits_SendCommand((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber));
    2b72:	8a 81       	ldd	r24, Y+2	; 0x02
    2b74:	80 54       	subi	r24, 0x40	; 64
    2b76:	0e 94 dd 10 	call	0x21ba	; 0x21ba <HCLCD_Vid8Bits_SendCommand>
	else
	{

	}

}
    2b7a:	0f 90       	pop	r0
    2b7c:	0f 90       	pop	r0
    2b7e:	cf 91       	pop	r28
    2b80:	df 91       	pop	r29
    2b82:	08 95       	ret

00002b84 <HCLCD_Vid8Bits_CustomAlphChar>:
/*LCD Create SpecialCharacter 8 Bits*/
void HCLCD_Vid8Bits_CustomAlphChar(u8 Copy_u8PatternNumber, u8* PCopy_u8Pattern)
{
    2b84:	df 93       	push	r29
    2b86:	cf 93       	push	r28
    2b88:	00 d0       	rcall	.+0      	; 0x2b8a <HCLCD_Vid8Bits_CustomAlphChar+0x6>
    2b8a:	00 d0       	rcall	.+0      	; 0x2b8c <HCLCD_Vid8Bits_CustomAlphChar+0x8>
    2b8c:	cd b7       	in	r28, 0x3d	; 61
    2b8e:	de b7       	in	r29, 0x3e	; 62
    2b90:	8a 83       	std	Y+2, r24	; 0x02
    2b92:	7c 83       	std	Y+4, r23	; 0x04
    2b94:	6b 83       	std	Y+3, r22	; 0x03
	       /*you have only 8 patterns to be customized */
	      u8 i;
	      if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
    2b96:	8a 81       	ldd	r24, Y+2	; 0x02
    2b98:	88 30       	cpi	r24, 0x08	; 8
    2b9a:	f8 f4       	brcc	.+62     	; 0x2bda <HCLCD_Vid8Bits_CustomAlphChar+0x56>
	      {
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid8Bits_SendCommand(CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE));
    2b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b9e:	88 2f       	mov	r24, r24
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	08 96       	adiw	r24, 0x08	; 8
    2ba4:	88 0f       	add	r24, r24
    2ba6:	99 1f       	adc	r25, r25
    2ba8:	88 0f       	add	r24, r24
    2baa:	99 1f       	adc	r25, r25
    2bac:	88 0f       	add	r24, r24
    2bae:	99 1f       	adc	r25, r25
    2bb0:	0e 94 dd 10 	call	0x21ba	; 0x21ba <HCLCD_Vid8Bits_SendCommand>
	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    2bb4:	19 82       	std	Y+1, r1	; 0x01
    2bb6:	0e c0       	rjmp	.+28     	; 0x2bd4 <HCLCD_Vid8Bits_CustomAlphChar+0x50>
	          {
	        	  HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8Pattern[ i ]);
    2bb8:	89 81       	ldd	r24, Y+1	; 0x01
    2bba:	28 2f       	mov	r18, r24
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc0:	9c 81       	ldd	r25, Y+4	; 0x04
    2bc2:	fc 01       	movw	r30, r24
    2bc4:	e2 0f       	add	r30, r18
    2bc6:	f3 1f       	adc	r31, r19
    2bc8:	80 81       	ld	r24, Z
    2bca:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <HCLCD_Vid8Bits_DispalyCharacter>
	      if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
	      {
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid8Bits_SendCommand(CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE));
	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    2bce:	89 81       	ldd	r24, Y+1	; 0x01
    2bd0:	8f 5f       	subi	r24, 0xFF	; 255
    2bd2:	89 83       	std	Y+1, r24	; 0x01
    2bd4:	89 81       	ldd	r24, Y+1	; 0x01
    2bd6:	88 30       	cpi	r24, 0x08	; 8
    2bd8:	78 f3       	brcs	.-34     	; 0x2bb8 <HCLCD_Vid8Bits_CustomAlphChar+0x34>
	          {
	        	  HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8Pattern[ i ]);
	          }
	      }
}
    2bda:	0f 90       	pop	r0
    2bdc:	0f 90       	pop	r0
    2bde:	0f 90       	pop	r0
    2be0:	0f 90       	pop	r0
    2be2:	cf 91       	pop	r28
    2be4:	df 91       	pop	r29
    2be6:	08 95       	ret

00002be8 <HCLCD_Vid8Bits_ClearScreen>:
/**/
void HCLCD_Vid8Bits_ClearScreen(void)
{
    2be8:	df 93       	push	r29
    2bea:	cf 93       	push	r28
    2bec:	cd b7       	in	r28, 0x3d	; 61
    2bee:	de b7       	in	r29, 0x3e	; 62
    2bf0:	2e 97       	sbiw	r28, 0x0e	; 14
    2bf2:	0f b6       	in	r0, 0x3f	; 63
    2bf4:	f8 94       	cli
    2bf6:	de bf       	out	0x3e, r29	; 62
    2bf8:	0f be       	out	0x3f, r0	; 63
    2bfa:	cd bf       	out	0x3d, r28	; 61
  HCLCD_Vid8Bits_SendCommand(DISPLAY_CLEAR);
    2bfc:	81 e0       	ldi	r24, 0x01	; 1
    2bfe:	0e 94 dd 10 	call	0x21ba	; 0x21ba <HCLCD_Vid8Bits_SendCommand>
    2c02:	80 e0       	ldi	r24, 0x00	; 0
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	a0 e0       	ldi	r26, 0x00	; 0
    2c08:	b0 e4       	ldi	r27, 0x40	; 64
    2c0a:	8b 87       	std	Y+11, r24	; 0x0b
    2c0c:	9c 87       	std	Y+12, r25	; 0x0c
    2c0e:	ad 87       	std	Y+13, r26	; 0x0d
    2c10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c12:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c14:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c16:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c18:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c1a:	20 e0       	ldi	r18, 0x00	; 0
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	4a ef       	ldi	r20, 0xFA	; 250
    2c20:	54 e4       	ldi	r21, 0x44	; 68
    2c22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c26:	dc 01       	movw	r26, r24
    2c28:	cb 01       	movw	r24, r22
    2c2a:	8f 83       	std	Y+7, r24	; 0x07
    2c2c:	98 87       	std	Y+8, r25	; 0x08
    2c2e:	a9 87       	std	Y+9, r26	; 0x09
    2c30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c32:	6f 81       	ldd	r22, Y+7	; 0x07
    2c34:	78 85       	ldd	r23, Y+8	; 0x08
    2c36:	89 85       	ldd	r24, Y+9	; 0x09
    2c38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c3a:	20 e0       	ldi	r18, 0x00	; 0
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	40 e8       	ldi	r20, 0x80	; 128
    2c40:	5f e3       	ldi	r21, 0x3F	; 63
    2c42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c46:	88 23       	and	r24, r24
    2c48:	2c f4       	brge	.+10     	; 0x2c54 <HCLCD_Vid8Bits_ClearScreen+0x6c>
		__ticks = 1;
    2c4a:	81 e0       	ldi	r24, 0x01	; 1
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	9e 83       	std	Y+6, r25	; 0x06
    2c50:	8d 83       	std	Y+5, r24	; 0x05
    2c52:	3f c0       	rjmp	.+126    	; 0x2cd2 <HCLCD_Vid8Bits_ClearScreen+0xea>
	else if (__tmp > 65535)
    2c54:	6f 81       	ldd	r22, Y+7	; 0x07
    2c56:	78 85       	ldd	r23, Y+8	; 0x08
    2c58:	89 85       	ldd	r24, Y+9	; 0x09
    2c5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	3f ef       	ldi	r19, 0xFF	; 255
    2c60:	4f e7       	ldi	r20, 0x7F	; 127
    2c62:	57 e4       	ldi	r21, 0x47	; 71
    2c64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c68:	18 16       	cp	r1, r24
    2c6a:	4c f5       	brge	.+82     	; 0x2cbe <HCLCD_Vid8Bits_ClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c70:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c72:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c74:	20 e0       	ldi	r18, 0x00	; 0
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	40 e2       	ldi	r20, 0x20	; 32
    2c7a:	51 e4       	ldi	r21, 0x41	; 65
    2c7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c80:	dc 01       	movw	r26, r24
    2c82:	cb 01       	movw	r24, r22
    2c84:	bc 01       	movw	r22, r24
    2c86:	cd 01       	movw	r24, r26
    2c88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c8c:	dc 01       	movw	r26, r24
    2c8e:	cb 01       	movw	r24, r22
    2c90:	9e 83       	std	Y+6, r25	; 0x06
    2c92:	8d 83       	std	Y+5, r24	; 0x05
    2c94:	0f c0       	rjmp	.+30     	; 0x2cb4 <HCLCD_Vid8Bits_ClearScreen+0xcc>
    2c96:	88 ec       	ldi	r24, 0xC8	; 200
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	9c 83       	std	Y+4, r25	; 0x04
    2c9c:	8b 83       	std	Y+3, r24	; 0x03
    2c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca2:	01 97       	sbiw	r24, 0x01	; 1
    2ca4:	f1 f7       	brne	.-4      	; 0x2ca2 <HCLCD_Vid8Bits_ClearScreen+0xba>
    2ca6:	9c 83       	std	Y+4, r25	; 0x04
    2ca8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2caa:	8d 81       	ldd	r24, Y+5	; 0x05
    2cac:	9e 81       	ldd	r25, Y+6	; 0x06
    2cae:	01 97       	sbiw	r24, 0x01	; 1
    2cb0:	9e 83       	std	Y+6, r25	; 0x06
    2cb2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb6:	9e 81       	ldd	r25, Y+6	; 0x06
    2cb8:	00 97       	sbiw	r24, 0x00	; 0
    2cba:	69 f7       	brne	.-38     	; 0x2c96 <HCLCD_Vid8Bits_ClearScreen+0xae>
    2cbc:	14 c0       	rjmp	.+40     	; 0x2ce6 <HCLCD_Vid8Bits_ClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cbe:	6f 81       	ldd	r22, Y+7	; 0x07
    2cc0:	78 85       	ldd	r23, Y+8	; 0x08
    2cc2:	89 85       	ldd	r24, Y+9	; 0x09
    2cc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cca:	dc 01       	movw	r26, r24
    2ccc:	cb 01       	movw	r24, r22
    2cce:	9e 83       	std	Y+6, r25	; 0x06
    2cd0:	8d 83       	std	Y+5, r24	; 0x05
    2cd2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd4:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd6:	9a 83       	std	Y+2, r25	; 0x02
    2cd8:	89 83       	std	Y+1, r24	; 0x01
    2cda:	89 81       	ldd	r24, Y+1	; 0x01
    2cdc:	9a 81       	ldd	r25, Y+2	; 0x02
    2cde:	01 97       	sbiw	r24, 0x01	; 1
    2ce0:	f1 f7       	brne	.-4      	; 0x2cde <HCLCD_Vid8Bits_ClearScreen+0xf6>
    2ce2:	9a 83       	std	Y+2, r25	; 0x02
    2ce4:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(2);
}
    2ce6:	2e 96       	adiw	r28, 0x0e	; 14
    2ce8:	0f b6       	in	r0, 0x3f	; 63
    2cea:	f8 94       	cli
    2cec:	de bf       	out	0x3e, r29	; 62
    2cee:	0f be       	out	0x3f, r0	; 63
    2cf0:	cd bf       	out	0x3d, r28	; 61
    2cf2:	cf 91       	pop	r28
    2cf4:	df 91       	pop	r29
    2cf6:	08 95       	ret

00002cf8 <HCLCD_Vid8Bits_DisplayShiftLeft>:
/**/
 void HCLCD_Vid8Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
    2cf8:	df 93       	push	r29
    2cfa:	cf 93       	push	r28
    2cfc:	cd b7       	in	r28, 0x3d	; 61
    2cfe:	de b7       	in	r29, 0x3e	; 62
    2d00:	60 97       	sbiw	r28, 0x10	; 16
    2d02:	0f b6       	in	r0, 0x3f	; 63
    2d04:	f8 94       	cli
    2d06:	de bf       	out	0x3e, r29	; 62
    2d08:	0f be       	out	0x3f, r0	; 63
    2d0a:	cd bf       	out	0x3d, r28	; 61
    2d0c:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    2d0e:	1f 86       	std	Y+15, r1	; 0x0f
    2d10:	78 c0       	rjmp	.+240    	; 0x2e02 <HCLCD_Vid8Bits_DisplayShiftLeft+0x10a>
 {
	 HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_LEFT);
    2d12:	88 e1       	ldi	r24, 0x18	; 24
    2d14:	0e 94 dd 10 	call	0x21ba	; 0x21ba <HCLCD_Vid8Bits_SendCommand>
    2d18:	80 e0       	ldi	r24, 0x00	; 0
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	a6 e9       	ldi	r26, 0x96	; 150
    2d1e:	b3 e4       	ldi	r27, 0x43	; 67
    2d20:	8b 87       	std	Y+11, r24	; 0x0b
    2d22:	9c 87       	std	Y+12, r25	; 0x0c
    2d24:	ad 87       	std	Y+13, r26	; 0x0d
    2d26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d28:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d30:	20 e0       	ldi	r18, 0x00	; 0
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	4a ef       	ldi	r20, 0xFA	; 250
    2d36:	54 e4       	ldi	r21, 0x44	; 68
    2d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d3c:	dc 01       	movw	r26, r24
    2d3e:	cb 01       	movw	r24, r22
    2d40:	8f 83       	std	Y+7, r24	; 0x07
    2d42:	98 87       	std	Y+8, r25	; 0x08
    2d44:	a9 87       	std	Y+9, r26	; 0x09
    2d46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d48:	6f 81       	ldd	r22, Y+7	; 0x07
    2d4a:	78 85       	ldd	r23, Y+8	; 0x08
    2d4c:	89 85       	ldd	r24, Y+9	; 0x09
    2d4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d50:	20 e0       	ldi	r18, 0x00	; 0
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	40 e8       	ldi	r20, 0x80	; 128
    2d56:	5f e3       	ldi	r21, 0x3F	; 63
    2d58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d5c:	88 23       	and	r24, r24
    2d5e:	2c f4       	brge	.+10     	; 0x2d6a <HCLCD_Vid8Bits_DisplayShiftLeft+0x72>
		__ticks = 1;
    2d60:	81 e0       	ldi	r24, 0x01	; 1
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	9e 83       	std	Y+6, r25	; 0x06
    2d66:	8d 83       	std	Y+5, r24	; 0x05
    2d68:	3f c0       	rjmp	.+126    	; 0x2de8 <HCLCD_Vid8Bits_DisplayShiftLeft+0xf0>
	else if (__tmp > 65535)
    2d6a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d6c:	78 85       	ldd	r23, Y+8	; 0x08
    2d6e:	89 85       	ldd	r24, Y+9	; 0x09
    2d70:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d72:	20 e0       	ldi	r18, 0x00	; 0
    2d74:	3f ef       	ldi	r19, 0xFF	; 255
    2d76:	4f e7       	ldi	r20, 0x7F	; 127
    2d78:	57 e4       	ldi	r21, 0x47	; 71
    2d7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d7e:	18 16       	cp	r1, r24
    2d80:	4c f5       	brge	.+82     	; 0x2dd4 <HCLCD_Vid8Bits_DisplayShiftLeft+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d82:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d84:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d86:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d88:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d8a:	20 e0       	ldi	r18, 0x00	; 0
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	40 e2       	ldi	r20, 0x20	; 32
    2d90:	51 e4       	ldi	r21, 0x41	; 65
    2d92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d96:	dc 01       	movw	r26, r24
    2d98:	cb 01       	movw	r24, r22
    2d9a:	bc 01       	movw	r22, r24
    2d9c:	cd 01       	movw	r24, r26
    2d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da2:	dc 01       	movw	r26, r24
    2da4:	cb 01       	movw	r24, r22
    2da6:	9e 83       	std	Y+6, r25	; 0x06
    2da8:	8d 83       	std	Y+5, r24	; 0x05
    2daa:	0f c0       	rjmp	.+30     	; 0x2dca <HCLCD_Vid8Bits_DisplayShiftLeft+0xd2>
    2dac:	88 ec       	ldi	r24, 0xC8	; 200
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	9c 83       	std	Y+4, r25	; 0x04
    2db2:	8b 83       	std	Y+3, r24	; 0x03
    2db4:	8b 81       	ldd	r24, Y+3	; 0x03
    2db6:	9c 81       	ldd	r25, Y+4	; 0x04
    2db8:	01 97       	sbiw	r24, 0x01	; 1
    2dba:	f1 f7       	brne	.-4      	; 0x2db8 <HCLCD_Vid8Bits_DisplayShiftLeft+0xc0>
    2dbc:	9c 83       	std	Y+4, r25	; 0x04
    2dbe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2dc4:	01 97       	sbiw	r24, 0x01	; 1
    2dc6:	9e 83       	std	Y+6, r25	; 0x06
    2dc8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dca:	8d 81       	ldd	r24, Y+5	; 0x05
    2dcc:	9e 81       	ldd	r25, Y+6	; 0x06
    2dce:	00 97       	sbiw	r24, 0x00	; 0
    2dd0:	69 f7       	brne	.-38     	; 0x2dac <HCLCD_Vid8Bits_DisplayShiftLeft+0xb4>
    2dd2:	14 c0       	rjmp	.+40     	; 0x2dfc <HCLCD_Vid8Bits_DisplayShiftLeft+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dd4:	6f 81       	ldd	r22, Y+7	; 0x07
    2dd6:	78 85       	ldd	r23, Y+8	; 0x08
    2dd8:	89 85       	ldd	r24, Y+9	; 0x09
    2dda:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de0:	dc 01       	movw	r26, r24
    2de2:	cb 01       	movw	r24, r22
    2de4:	9e 83       	std	Y+6, r25	; 0x06
    2de6:	8d 83       	std	Y+5, r24	; 0x05
    2de8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dea:	9e 81       	ldd	r25, Y+6	; 0x06
    2dec:	9a 83       	std	Y+2, r25	; 0x02
    2dee:	89 83       	std	Y+1, r24	; 0x01
    2df0:	89 81       	ldd	r24, Y+1	; 0x01
    2df2:	9a 81       	ldd	r25, Y+2	; 0x02
    2df4:	01 97       	sbiw	r24, 0x01	; 1
    2df6:	f1 f7       	brne	.-4      	; 0x2df4 <HCLCD_Vid8Bits_DisplayShiftLeft+0xfc>
    2df8:	9a 83       	std	Y+2, r25	; 0x02
    2dfa:	89 83       	std	Y+1, r24	; 0x01
}
/**/
 void HCLCD_Vid8Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    2dfc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dfe:	8f 5f       	subi	r24, 0xFF	; 255
    2e00:	8f 87       	std	Y+15, r24	; 0x0f
    2e02:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e04:	88 89       	ldd	r24, Y+16	; 0x10
    2e06:	98 17       	cp	r25, r24
    2e08:	08 f4       	brcc	.+2      	; 0x2e0c <HCLCD_Vid8Bits_DisplayShiftLeft+0x114>
    2e0a:	83 cf       	rjmp	.-250    	; 0x2d12 <HCLCD_Vid8Bits_DisplayShiftLeft+0x1a>
 {
	 HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_LEFT);
  _delay_ms(300);
 }
}
    2e0c:	60 96       	adiw	r28, 0x10	; 16
    2e0e:	0f b6       	in	r0, 0x3f	; 63
    2e10:	f8 94       	cli
    2e12:	de bf       	out	0x3e, r29	; 62
    2e14:	0f be       	out	0x3f, r0	; 63
    2e16:	cd bf       	out	0x3d, r28	; 61
    2e18:	cf 91       	pop	r28
    2e1a:	df 91       	pop	r29
    2e1c:	08 95       	ret

00002e1e <HCLCD_Vid8Bits_DisplayShiftRight>:
/**/
 void HCLCD_Vid8Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
    2e1e:	df 93       	push	r29
    2e20:	cf 93       	push	r28
    2e22:	cd b7       	in	r28, 0x3d	; 61
    2e24:	de b7       	in	r29, 0x3e	; 62
    2e26:	60 97       	sbiw	r28, 0x10	; 16
    2e28:	0f b6       	in	r0, 0x3f	; 63
    2e2a:	f8 94       	cli
    2e2c:	de bf       	out	0x3e, r29	; 62
    2e2e:	0f be       	out	0x3f, r0	; 63
    2e30:	cd bf       	out	0x3d, r28	; 61
    2e32:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    2e34:	1f 86       	std	Y+15, r1	; 0x0f
    2e36:	78 c0       	rjmp	.+240    	; 0x2f28 <HCLCD_Vid8Bits_DisplayShiftRight+0x10a>
	{
		HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_RIGHT);
    2e38:	8c e1       	ldi	r24, 0x1C	; 28
    2e3a:	0e 94 dd 10 	call	0x21ba	; 0x21ba <HCLCD_Vid8Bits_SendCommand>
    2e3e:	80 e0       	ldi	r24, 0x00	; 0
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	a6 e9       	ldi	r26, 0x96	; 150
    2e44:	b3 e4       	ldi	r27, 0x43	; 67
    2e46:	8b 87       	std	Y+11, r24	; 0x0b
    2e48:	9c 87       	std	Y+12, r25	; 0x0c
    2e4a:	ad 87       	std	Y+13, r26	; 0x0d
    2e4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e50:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e52:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e54:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e56:	20 e0       	ldi	r18, 0x00	; 0
    2e58:	30 e0       	ldi	r19, 0x00	; 0
    2e5a:	4a ef       	ldi	r20, 0xFA	; 250
    2e5c:	54 e4       	ldi	r21, 0x44	; 68
    2e5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e62:	dc 01       	movw	r26, r24
    2e64:	cb 01       	movw	r24, r22
    2e66:	8f 83       	std	Y+7, r24	; 0x07
    2e68:	98 87       	std	Y+8, r25	; 0x08
    2e6a:	a9 87       	std	Y+9, r26	; 0x09
    2e6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e6e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e70:	78 85       	ldd	r23, Y+8	; 0x08
    2e72:	89 85       	ldd	r24, Y+9	; 0x09
    2e74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e76:	20 e0       	ldi	r18, 0x00	; 0
    2e78:	30 e0       	ldi	r19, 0x00	; 0
    2e7a:	40 e8       	ldi	r20, 0x80	; 128
    2e7c:	5f e3       	ldi	r21, 0x3F	; 63
    2e7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e82:	88 23       	and	r24, r24
    2e84:	2c f4       	brge	.+10     	; 0x2e90 <HCLCD_Vid8Bits_DisplayShiftRight+0x72>
		__ticks = 1;
    2e86:	81 e0       	ldi	r24, 0x01	; 1
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	9e 83       	std	Y+6, r25	; 0x06
    2e8c:	8d 83       	std	Y+5, r24	; 0x05
    2e8e:	3f c0       	rjmp	.+126    	; 0x2f0e <HCLCD_Vid8Bits_DisplayShiftRight+0xf0>
	else if (__tmp > 65535)
    2e90:	6f 81       	ldd	r22, Y+7	; 0x07
    2e92:	78 85       	ldd	r23, Y+8	; 0x08
    2e94:	89 85       	ldd	r24, Y+9	; 0x09
    2e96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e98:	20 e0       	ldi	r18, 0x00	; 0
    2e9a:	3f ef       	ldi	r19, 0xFF	; 255
    2e9c:	4f e7       	ldi	r20, 0x7F	; 127
    2e9e:	57 e4       	ldi	r21, 0x47	; 71
    2ea0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ea4:	18 16       	cp	r1, r24
    2ea6:	4c f5       	brge	.+82     	; 0x2efa <HCLCD_Vid8Bits_DisplayShiftRight+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ea8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eaa:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eac:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eae:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eb0:	20 e0       	ldi	r18, 0x00	; 0
    2eb2:	30 e0       	ldi	r19, 0x00	; 0
    2eb4:	40 e2       	ldi	r20, 0x20	; 32
    2eb6:	51 e4       	ldi	r21, 0x41	; 65
    2eb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ebc:	dc 01       	movw	r26, r24
    2ebe:	cb 01       	movw	r24, r22
    2ec0:	bc 01       	movw	r22, r24
    2ec2:	cd 01       	movw	r24, r26
    2ec4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec8:	dc 01       	movw	r26, r24
    2eca:	cb 01       	movw	r24, r22
    2ecc:	9e 83       	std	Y+6, r25	; 0x06
    2ece:	8d 83       	std	Y+5, r24	; 0x05
    2ed0:	0f c0       	rjmp	.+30     	; 0x2ef0 <HCLCD_Vid8Bits_DisplayShiftRight+0xd2>
    2ed2:	88 ec       	ldi	r24, 0xC8	; 200
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	9c 83       	std	Y+4, r25	; 0x04
    2ed8:	8b 83       	std	Y+3, r24	; 0x03
    2eda:	8b 81       	ldd	r24, Y+3	; 0x03
    2edc:	9c 81       	ldd	r25, Y+4	; 0x04
    2ede:	01 97       	sbiw	r24, 0x01	; 1
    2ee0:	f1 f7       	brne	.-4      	; 0x2ede <HCLCD_Vid8Bits_DisplayShiftRight+0xc0>
    2ee2:	9c 83       	std	Y+4, r25	; 0x04
    2ee4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ee6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eea:	01 97       	sbiw	r24, 0x01	; 1
    2eec:	9e 83       	std	Y+6, r25	; 0x06
    2eee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ef0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ef2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ef4:	00 97       	sbiw	r24, 0x00	; 0
    2ef6:	69 f7       	brne	.-38     	; 0x2ed2 <HCLCD_Vid8Bits_DisplayShiftRight+0xb4>
    2ef8:	14 c0       	rjmp	.+40     	; 0x2f22 <HCLCD_Vid8Bits_DisplayShiftRight+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2efa:	6f 81       	ldd	r22, Y+7	; 0x07
    2efc:	78 85       	ldd	r23, Y+8	; 0x08
    2efe:	89 85       	ldd	r24, Y+9	; 0x09
    2f00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f06:	dc 01       	movw	r26, r24
    2f08:	cb 01       	movw	r24, r22
    2f0a:	9e 83       	std	Y+6, r25	; 0x06
    2f0c:	8d 83       	std	Y+5, r24	; 0x05
    2f0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f10:	9e 81       	ldd	r25, Y+6	; 0x06
    2f12:	9a 83       	std	Y+2, r25	; 0x02
    2f14:	89 83       	std	Y+1, r24	; 0x01
    2f16:	89 81       	ldd	r24, Y+1	; 0x01
    2f18:	9a 81       	ldd	r25, Y+2	; 0x02
    2f1a:	01 97       	sbiw	r24, 0x01	; 1
    2f1c:	f1 f7       	brne	.-4      	; 0x2f1a <HCLCD_Vid8Bits_DisplayShiftRight+0xfc>
    2f1e:	9a 83       	std	Y+2, r25	; 0x02
    2f20:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid8Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    2f22:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f24:	8f 5f       	subi	r24, 0xFF	; 255
    2f26:	8f 87       	std	Y+15, r24	; 0x0f
    2f28:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f2a:	88 89       	ldd	r24, Y+16	; 0x10
    2f2c:	98 17       	cp	r25, r24
    2f2e:	08 f4       	brcc	.+2      	; 0x2f32 <HCLCD_Vid8Bits_DisplayShiftRight+0x114>
    2f30:	83 cf       	rjmp	.-250    	; 0x2e38 <HCLCD_Vid8Bits_DisplayShiftRight+0x1a>
	{
		HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_RIGHT);
      _delay_ms(300);
	}
}
    2f32:	60 96       	adiw	r28, 0x10	; 16
    2f34:	0f b6       	in	r0, 0x3f	; 63
    2f36:	f8 94       	cli
    2f38:	de bf       	out	0x3e, r29	; 62
    2f3a:	0f be       	out	0x3f, r0	; 63
    2f3c:	cd bf       	out	0x3d, r28	; 61
    2f3e:	cf 91       	pop	r28
    2f40:	df 91       	pop	r29
    2f42:	08 95       	ret

00002f44 <HCLCD_Vid8Bits_CursorShiftLeft>:
 /**/
 void HCLCD_Vid8Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
    2f44:	df 93       	push	r29
    2f46:	cf 93       	push	r28
    2f48:	cd b7       	in	r28, 0x3d	; 61
    2f4a:	de b7       	in	r29, 0x3e	; 62
    2f4c:	60 97       	sbiw	r28, 0x10	; 16
    2f4e:	0f b6       	in	r0, 0x3f	; 63
    2f50:	f8 94       	cli
    2f52:	de bf       	out	0x3e, r29	; 62
    2f54:	0f be       	out	0x3f, r0	; 63
    2f56:	cd bf       	out	0x3d, r28	; 61
    2f58:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    2f5a:	1f 86       	std	Y+15, r1	; 0x0f
    2f5c:	78 c0       	rjmp	.+240    	; 0x304e <HCLCD_Vid8Bits_CursorShiftLeft+0x10a>
 {
	 HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_LEFT);
    2f5e:	80 e1       	ldi	r24, 0x10	; 16
    2f60:	0e 94 dd 10 	call	0x21ba	; 0x21ba <HCLCD_Vid8Bits_SendCommand>
    2f64:	80 e0       	ldi	r24, 0x00	; 0
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	a6 e9       	ldi	r26, 0x96	; 150
    2f6a:	b3 e4       	ldi	r27, 0x43	; 67
    2f6c:	8b 87       	std	Y+11, r24	; 0x0b
    2f6e:	9c 87       	std	Y+12, r25	; 0x0c
    2f70:	ad 87       	std	Y+13, r26	; 0x0d
    2f72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f74:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f76:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f78:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f7c:	20 e0       	ldi	r18, 0x00	; 0
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	4a ef       	ldi	r20, 0xFA	; 250
    2f82:	54 e4       	ldi	r21, 0x44	; 68
    2f84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f88:	dc 01       	movw	r26, r24
    2f8a:	cb 01       	movw	r24, r22
    2f8c:	8f 83       	std	Y+7, r24	; 0x07
    2f8e:	98 87       	std	Y+8, r25	; 0x08
    2f90:	a9 87       	std	Y+9, r26	; 0x09
    2f92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f94:	6f 81       	ldd	r22, Y+7	; 0x07
    2f96:	78 85       	ldd	r23, Y+8	; 0x08
    2f98:	89 85       	ldd	r24, Y+9	; 0x09
    2f9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f9c:	20 e0       	ldi	r18, 0x00	; 0
    2f9e:	30 e0       	ldi	r19, 0x00	; 0
    2fa0:	40 e8       	ldi	r20, 0x80	; 128
    2fa2:	5f e3       	ldi	r21, 0x3F	; 63
    2fa4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fa8:	88 23       	and	r24, r24
    2faa:	2c f4       	brge	.+10     	; 0x2fb6 <HCLCD_Vid8Bits_CursorShiftLeft+0x72>
		__ticks = 1;
    2fac:	81 e0       	ldi	r24, 0x01	; 1
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	9e 83       	std	Y+6, r25	; 0x06
    2fb2:	8d 83       	std	Y+5, r24	; 0x05
    2fb4:	3f c0       	rjmp	.+126    	; 0x3034 <HCLCD_Vid8Bits_CursorShiftLeft+0xf0>
	else if (__tmp > 65535)
    2fb6:	6f 81       	ldd	r22, Y+7	; 0x07
    2fb8:	78 85       	ldd	r23, Y+8	; 0x08
    2fba:	89 85       	ldd	r24, Y+9	; 0x09
    2fbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fbe:	20 e0       	ldi	r18, 0x00	; 0
    2fc0:	3f ef       	ldi	r19, 0xFF	; 255
    2fc2:	4f e7       	ldi	r20, 0x7F	; 127
    2fc4:	57 e4       	ldi	r21, 0x47	; 71
    2fc6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fca:	18 16       	cp	r1, r24
    2fcc:	4c f5       	brge	.+82     	; 0x3020 <HCLCD_Vid8Bits_CursorShiftLeft+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fce:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fd6:	20 e0       	ldi	r18, 0x00	; 0
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	40 e2       	ldi	r20, 0x20	; 32
    2fdc:	51 e4       	ldi	r21, 0x41	; 65
    2fde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe2:	dc 01       	movw	r26, r24
    2fe4:	cb 01       	movw	r24, r22
    2fe6:	bc 01       	movw	r22, r24
    2fe8:	cd 01       	movw	r24, r26
    2fea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fee:	dc 01       	movw	r26, r24
    2ff0:	cb 01       	movw	r24, r22
    2ff2:	9e 83       	std	Y+6, r25	; 0x06
    2ff4:	8d 83       	std	Y+5, r24	; 0x05
    2ff6:	0f c0       	rjmp	.+30     	; 0x3016 <HCLCD_Vid8Bits_CursorShiftLeft+0xd2>
    2ff8:	88 ec       	ldi	r24, 0xC8	; 200
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    2ffc:	9c 83       	std	Y+4, r25	; 0x04
    2ffe:	8b 83       	std	Y+3, r24	; 0x03
    3000:	8b 81       	ldd	r24, Y+3	; 0x03
    3002:	9c 81       	ldd	r25, Y+4	; 0x04
    3004:	01 97       	sbiw	r24, 0x01	; 1
    3006:	f1 f7       	brne	.-4      	; 0x3004 <HCLCD_Vid8Bits_CursorShiftLeft+0xc0>
    3008:	9c 83       	std	Y+4, r25	; 0x04
    300a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    300c:	8d 81       	ldd	r24, Y+5	; 0x05
    300e:	9e 81       	ldd	r25, Y+6	; 0x06
    3010:	01 97       	sbiw	r24, 0x01	; 1
    3012:	9e 83       	std	Y+6, r25	; 0x06
    3014:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3016:	8d 81       	ldd	r24, Y+5	; 0x05
    3018:	9e 81       	ldd	r25, Y+6	; 0x06
    301a:	00 97       	sbiw	r24, 0x00	; 0
    301c:	69 f7       	brne	.-38     	; 0x2ff8 <HCLCD_Vid8Bits_CursorShiftLeft+0xb4>
    301e:	14 c0       	rjmp	.+40     	; 0x3048 <HCLCD_Vid8Bits_CursorShiftLeft+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3020:	6f 81       	ldd	r22, Y+7	; 0x07
    3022:	78 85       	ldd	r23, Y+8	; 0x08
    3024:	89 85       	ldd	r24, Y+9	; 0x09
    3026:	9a 85       	ldd	r25, Y+10	; 0x0a
    3028:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    302c:	dc 01       	movw	r26, r24
    302e:	cb 01       	movw	r24, r22
    3030:	9e 83       	std	Y+6, r25	; 0x06
    3032:	8d 83       	std	Y+5, r24	; 0x05
    3034:	8d 81       	ldd	r24, Y+5	; 0x05
    3036:	9e 81       	ldd	r25, Y+6	; 0x06
    3038:	9a 83       	std	Y+2, r25	; 0x02
    303a:	89 83       	std	Y+1, r24	; 0x01
    303c:	89 81       	ldd	r24, Y+1	; 0x01
    303e:	9a 81       	ldd	r25, Y+2	; 0x02
    3040:	01 97       	sbiw	r24, 0x01	; 1
    3042:	f1 f7       	brne	.-4      	; 0x3040 <HCLCD_Vid8Bits_CursorShiftLeft+0xfc>
    3044:	9a 83       	std	Y+2, r25	; 0x02
    3046:	89 83       	std	Y+1, r24	; 0x01
}
 /**/
 void HCLCD_Vid8Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    3048:	8f 85       	ldd	r24, Y+15	; 0x0f
    304a:	8f 5f       	subi	r24, 0xFF	; 255
    304c:	8f 87       	std	Y+15, r24	; 0x0f
    304e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3050:	88 89       	ldd	r24, Y+16	; 0x10
    3052:	98 17       	cp	r25, r24
    3054:	08 f4       	brcc	.+2      	; 0x3058 <HCLCD_Vid8Bits_CursorShiftLeft+0x114>
    3056:	83 cf       	rjmp	.-250    	; 0x2f5e <HCLCD_Vid8Bits_CursorShiftLeft+0x1a>
 {
	 HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_LEFT);
  _delay_ms(300);
 }
}
    3058:	60 96       	adiw	r28, 0x10	; 16
    305a:	0f b6       	in	r0, 0x3f	; 63
    305c:	f8 94       	cli
    305e:	de bf       	out	0x3e, r29	; 62
    3060:	0f be       	out	0x3f, r0	; 63
    3062:	cd bf       	out	0x3d, r28	; 61
    3064:	cf 91       	pop	r28
    3066:	df 91       	pop	r29
    3068:	08 95       	ret

0000306a <HCLCD_Vid8Bits_CursorShiftRight>:
/**/
 void HCLCD_Vid8Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
    306a:	df 93       	push	r29
    306c:	cf 93       	push	r28
    306e:	cd b7       	in	r28, 0x3d	; 61
    3070:	de b7       	in	r29, 0x3e	; 62
    3072:	60 97       	sbiw	r28, 0x10	; 16
    3074:	0f b6       	in	r0, 0x3f	; 63
    3076:	f8 94       	cli
    3078:	de bf       	out	0x3e, r29	; 62
    307a:	0f be       	out	0x3f, r0	; 63
    307c:	cd bf       	out	0x3d, r28	; 61
    307e:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    3080:	1f 86       	std	Y+15, r1	; 0x0f
    3082:	78 c0       	rjmp	.+240    	; 0x3174 <HCLCD_Vid8Bits_CursorShiftRight+0x10a>
	{
		HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_RIGHT);
    3084:	84 e1       	ldi	r24, 0x14	; 20
    3086:	0e 94 dd 10 	call	0x21ba	; 0x21ba <HCLCD_Vid8Bits_SendCommand>
    308a:	80 e0       	ldi	r24, 0x00	; 0
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	a6 e9       	ldi	r26, 0x96	; 150
    3090:	b3 e4       	ldi	r27, 0x43	; 67
    3092:	8b 87       	std	Y+11, r24	; 0x0b
    3094:	9c 87       	std	Y+12, r25	; 0x0c
    3096:	ad 87       	std	Y+13, r26	; 0x0d
    3098:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    309a:	6b 85       	ldd	r22, Y+11	; 0x0b
    309c:	7c 85       	ldd	r23, Y+12	; 0x0c
    309e:	8d 85       	ldd	r24, Y+13	; 0x0d
    30a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    30a2:	20 e0       	ldi	r18, 0x00	; 0
    30a4:	30 e0       	ldi	r19, 0x00	; 0
    30a6:	4a ef       	ldi	r20, 0xFA	; 250
    30a8:	54 e4       	ldi	r21, 0x44	; 68
    30aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ae:	dc 01       	movw	r26, r24
    30b0:	cb 01       	movw	r24, r22
    30b2:	8f 83       	std	Y+7, r24	; 0x07
    30b4:	98 87       	std	Y+8, r25	; 0x08
    30b6:	a9 87       	std	Y+9, r26	; 0x09
    30b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30ba:	6f 81       	ldd	r22, Y+7	; 0x07
    30bc:	78 85       	ldd	r23, Y+8	; 0x08
    30be:	89 85       	ldd	r24, Y+9	; 0x09
    30c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    30c2:	20 e0       	ldi	r18, 0x00	; 0
    30c4:	30 e0       	ldi	r19, 0x00	; 0
    30c6:	40 e8       	ldi	r20, 0x80	; 128
    30c8:	5f e3       	ldi	r21, 0x3F	; 63
    30ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30ce:	88 23       	and	r24, r24
    30d0:	2c f4       	brge	.+10     	; 0x30dc <HCLCD_Vid8Bits_CursorShiftRight+0x72>
		__ticks = 1;
    30d2:	81 e0       	ldi	r24, 0x01	; 1
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	9e 83       	std	Y+6, r25	; 0x06
    30d8:	8d 83       	std	Y+5, r24	; 0x05
    30da:	3f c0       	rjmp	.+126    	; 0x315a <HCLCD_Vid8Bits_CursorShiftRight+0xf0>
	else if (__tmp > 65535)
    30dc:	6f 81       	ldd	r22, Y+7	; 0x07
    30de:	78 85       	ldd	r23, Y+8	; 0x08
    30e0:	89 85       	ldd	r24, Y+9	; 0x09
    30e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    30e4:	20 e0       	ldi	r18, 0x00	; 0
    30e6:	3f ef       	ldi	r19, 0xFF	; 255
    30e8:	4f e7       	ldi	r20, 0x7F	; 127
    30ea:	57 e4       	ldi	r21, 0x47	; 71
    30ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30f0:	18 16       	cp	r1, r24
    30f2:	4c f5       	brge	.+82     	; 0x3146 <HCLCD_Vid8Bits_CursorShiftRight+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    30f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    30f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    30fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    30fc:	20 e0       	ldi	r18, 0x00	; 0
    30fe:	30 e0       	ldi	r19, 0x00	; 0
    3100:	40 e2       	ldi	r20, 0x20	; 32
    3102:	51 e4       	ldi	r21, 0x41	; 65
    3104:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3108:	dc 01       	movw	r26, r24
    310a:	cb 01       	movw	r24, r22
    310c:	bc 01       	movw	r22, r24
    310e:	cd 01       	movw	r24, r26
    3110:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3114:	dc 01       	movw	r26, r24
    3116:	cb 01       	movw	r24, r22
    3118:	9e 83       	std	Y+6, r25	; 0x06
    311a:	8d 83       	std	Y+5, r24	; 0x05
    311c:	0f c0       	rjmp	.+30     	; 0x313c <HCLCD_Vid8Bits_CursorShiftRight+0xd2>
    311e:	88 ec       	ldi	r24, 0xC8	; 200
    3120:	90 e0       	ldi	r25, 0x00	; 0
    3122:	9c 83       	std	Y+4, r25	; 0x04
    3124:	8b 83       	std	Y+3, r24	; 0x03
    3126:	8b 81       	ldd	r24, Y+3	; 0x03
    3128:	9c 81       	ldd	r25, Y+4	; 0x04
    312a:	01 97       	sbiw	r24, 0x01	; 1
    312c:	f1 f7       	brne	.-4      	; 0x312a <HCLCD_Vid8Bits_CursorShiftRight+0xc0>
    312e:	9c 83       	std	Y+4, r25	; 0x04
    3130:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3132:	8d 81       	ldd	r24, Y+5	; 0x05
    3134:	9e 81       	ldd	r25, Y+6	; 0x06
    3136:	01 97       	sbiw	r24, 0x01	; 1
    3138:	9e 83       	std	Y+6, r25	; 0x06
    313a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    313c:	8d 81       	ldd	r24, Y+5	; 0x05
    313e:	9e 81       	ldd	r25, Y+6	; 0x06
    3140:	00 97       	sbiw	r24, 0x00	; 0
    3142:	69 f7       	brne	.-38     	; 0x311e <HCLCD_Vid8Bits_CursorShiftRight+0xb4>
    3144:	14 c0       	rjmp	.+40     	; 0x316e <HCLCD_Vid8Bits_CursorShiftRight+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3146:	6f 81       	ldd	r22, Y+7	; 0x07
    3148:	78 85       	ldd	r23, Y+8	; 0x08
    314a:	89 85       	ldd	r24, Y+9	; 0x09
    314c:	9a 85       	ldd	r25, Y+10	; 0x0a
    314e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3152:	dc 01       	movw	r26, r24
    3154:	cb 01       	movw	r24, r22
    3156:	9e 83       	std	Y+6, r25	; 0x06
    3158:	8d 83       	std	Y+5, r24	; 0x05
    315a:	8d 81       	ldd	r24, Y+5	; 0x05
    315c:	9e 81       	ldd	r25, Y+6	; 0x06
    315e:	9a 83       	std	Y+2, r25	; 0x02
    3160:	89 83       	std	Y+1, r24	; 0x01
    3162:	89 81       	ldd	r24, Y+1	; 0x01
    3164:	9a 81       	ldd	r25, Y+2	; 0x02
    3166:	01 97       	sbiw	r24, 0x01	; 1
    3168:	f1 f7       	brne	.-4      	; 0x3166 <HCLCD_Vid8Bits_CursorShiftRight+0xfc>
    316a:	9a 83       	std	Y+2, r25	; 0x02
    316c:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid8Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    316e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3170:	8f 5f       	subi	r24, 0xFF	; 255
    3172:	8f 87       	std	Y+15, r24	; 0x0f
    3174:	9f 85       	ldd	r25, Y+15	; 0x0f
    3176:	88 89       	ldd	r24, Y+16	; 0x10
    3178:	98 17       	cp	r25, r24
    317a:	08 f4       	brcc	.+2      	; 0x317e <HCLCD_Vid8Bits_CursorShiftRight+0x114>
    317c:	83 cf       	rjmp	.-250    	; 0x3084 <HCLCD_Vid8Bits_CursorShiftRight+0x1a>
	{
		HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_RIGHT);
      _delay_ms(300);
	}
}
    317e:	60 96       	adiw	r28, 0x10	; 16
    3180:	0f b6       	in	r0, 0x3f	; 63
    3182:	f8 94       	cli
    3184:	de bf       	out	0x3e, r29	; 62
    3186:	0f be       	out	0x3f, r0	; 63
    3188:	cd bf       	out	0x3d, r28	; 61
    318a:	cf 91       	pop	r28
    318c:	df 91       	pop	r29
    318e:	08 95       	ret

00003190 <HCLCD_Vid4Bits_SendCommand>:
/****************************************************************************************************************************************/

/*Send Command 4 Bits*/
void HCLCD_Vid4Bits_SendCommand(u8 Copy_u8Command )
{
    3190:	df 93       	push	r29
    3192:	cf 93       	push	r28
    3194:	cd b7       	in	r28, 0x3d	; 61
    3196:	de b7       	in	r29, 0x3e	; 62
    3198:	2f 97       	sbiw	r28, 0x0f	; 15
    319a:	0f b6       	in	r0, 0x3f	; 63
    319c:	f8 94       	cli
    319e:	de bf       	out	0x3e, r29	; 62
    31a0:	0f be       	out	0x3f, r0	; 63
    31a2:	cd bf       	out	0x3d, r28	; 61
    31a4:	8f 87       	std	Y+15, r24	; 0x0f
	//u8 LOC_u8CopyCommand;
	/*select Command register--> Write zero on Rs pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_LOW);
    31a6:	80 e0       	ldi	r24, 0x00	; 0
    31a8:	62 e0       	ldi	r22, 0x02	; 2
    31aa:	40 e0       	ldi	r20, 0x00	; 0
    31ac:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
	/*select Write mode--> Write zero on RW pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    31b0:	81 e0       	ldi	r24, 0x01	; 1
    31b2:	62 e0       	ldi	r22, 0x02	; 2
    31b4:	40 e0       	ldi	r20, 0x00	; 0
    31b6:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
	/*Send  Command*/
	//LOC_u8CopyCommand=(Copy_u8Command&0x0F)<<HCLCD_PINSTART;
	MDIO_Error_State_SetNippleValue(HCLCD_PINSTART,DATA_PORT,Copy_u8Command);
    31ba:	84 e0       	ldi	r24, 0x04	; 4
    31bc:	62 e0       	ldi	r22, 0x02	; 2
    31be:	4f 85       	ldd	r20, Y+15	; 0x0f
    31c0:	0e 94 22 0c 	call	0x1844	; 0x1844 <MDIO_Error_State_SetNippleValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    31c4:	82 e0       	ldi	r24, 0x02	; 2
    31c6:	62 e0       	ldi	r22, 0x02	; 2
    31c8:	41 e0       	ldi	r20, 0x01	; 1
    31ca:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
    31ce:	80 e0       	ldi	r24, 0x00	; 0
    31d0:	90 e0       	ldi	r25, 0x00	; 0
    31d2:	a0 e0       	ldi	r26, 0x00	; 0
    31d4:	b0 e4       	ldi	r27, 0x40	; 64
    31d6:	8b 87       	std	Y+11, r24	; 0x0b
    31d8:	9c 87       	std	Y+12, r25	; 0x0c
    31da:	ad 87       	std	Y+13, r26	; 0x0d
    31dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31de:	6b 85       	ldd	r22, Y+11	; 0x0b
    31e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    31e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    31e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    31e6:	20 e0       	ldi	r18, 0x00	; 0
    31e8:	30 e0       	ldi	r19, 0x00	; 0
    31ea:	4a ef       	ldi	r20, 0xFA	; 250
    31ec:	54 e4       	ldi	r21, 0x44	; 68
    31ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31f2:	dc 01       	movw	r26, r24
    31f4:	cb 01       	movw	r24, r22
    31f6:	8f 83       	std	Y+7, r24	; 0x07
    31f8:	98 87       	std	Y+8, r25	; 0x08
    31fa:	a9 87       	std	Y+9, r26	; 0x09
    31fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31fe:	6f 81       	ldd	r22, Y+7	; 0x07
    3200:	78 85       	ldd	r23, Y+8	; 0x08
    3202:	89 85       	ldd	r24, Y+9	; 0x09
    3204:	9a 85       	ldd	r25, Y+10	; 0x0a
    3206:	20 e0       	ldi	r18, 0x00	; 0
    3208:	30 e0       	ldi	r19, 0x00	; 0
    320a:	40 e8       	ldi	r20, 0x80	; 128
    320c:	5f e3       	ldi	r21, 0x3F	; 63
    320e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3212:	88 23       	and	r24, r24
    3214:	2c f4       	brge	.+10     	; 0x3220 <HCLCD_Vid4Bits_SendCommand+0x90>
		__ticks = 1;
    3216:	81 e0       	ldi	r24, 0x01	; 1
    3218:	90 e0       	ldi	r25, 0x00	; 0
    321a:	9e 83       	std	Y+6, r25	; 0x06
    321c:	8d 83       	std	Y+5, r24	; 0x05
    321e:	3f c0       	rjmp	.+126    	; 0x329e <HCLCD_Vid4Bits_SendCommand+0x10e>
	else if (__tmp > 65535)
    3220:	6f 81       	ldd	r22, Y+7	; 0x07
    3222:	78 85       	ldd	r23, Y+8	; 0x08
    3224:	89 85       	ldd	r24, Y+9	; 0x09
    3226:	9a 85       	ldd	r25, Y+10	; 0x0a
    3228:	20 e0       	ldi	r18, 0x00	; 0
    322a:	3f ef       	ldi	r19, 0xFF	; 255
    322c:	4f e7       	ldi	r20, 0x7F	; 127
    322e:	57 e4       	ldi	r21, 0x47	; 71
    3230:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3234:	18 16       	cp	r1, r24
    3236:	4c f5       	brge	.+82     	; 0x328a <HCLCD_Vid4Bits_SendCommand+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3238:	6b 85       	ldd	r22, Y+11	; 0x0b
    323a:	7c 85       	ldd	r23, Y+12	; 0x0c
    323c:	8d 85       	ldd	r24, Y+13	; 0x0d
    323e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3240:	20 e0       	ldi	r18, 0x00	; 0
    3242:	30 e0       	ldi	r19, 0x00	; 0
    3244:	40 e2       	ldi	r20, 0x20	; 32
    3246:	51 e4       	ldi	r21, 0x41	; 65
    3248:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    324c:	dc 01       	movw	r26, r24
    324e:	cb 01       	movw	r24, r22
    3250:	bc 01       	movw	r22, r24
    3252:	cd 01       	movw	r24, r26
    3254:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3258:	dc 01       	movw	r26, r24
    325a:	cb 01       	movw	r24, r22
    325c:	9e 83       	std	Y+6, r25	; 0x06
    325e:	8d 83       	std	Y+5, r24	; 0x05
    3260:	0f c0       	rjmp	.+30     	; 0x3280 <HCLCD_Vid4Bits_SendCommand+0xf0>
    3262:	88 ec       	ldi	r24, 0xC8	; 200
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	9c 83       	std	Y+4, r25	; 0x04
    3268:	8b 83       	std	Y+3, r24	; 0x03
    326a:	8b 81       	ldd	r24, Y+3	; 0x03
    326c:	9c 81       	ldd	r25, Y+4	; 0x04
    326e:	01 97       	sbiw	r24, 0x01	; 1
    3270:	f1 f7       	brne	.-4      	; 0x326e <HCLCD_Vid4Bits_SendCommand+0xde>
    3272:	9c 83       	std	Y+4, r25	; 0x04
    3274:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3276:	8d 81       	ldd	r24, Y+5	; 0x05
    3278:	9e 81       	ldd	r25, Y+6	; 0x06
    327a:	01 97       	sbiw	r24, 0x01	; 1
    327c:	9e 83       	std	Y+6, r25	; 0x06
    327e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3280:	8d 81       	ldd	r24, Y+5	; 0x05
    3282:	9e 81       	ldd	r25, Y+6	; 0x06
    3284:	00 97       	sbiw	r24, 0x00	; 0
    3286:	69 f7       	brne	.-38     	; 0x3262 <HCLCD_Vid4Bits_SendCommand+0xd2>
    3288:	14 c0       	rjmp	.+40     	; 0x32b2 <HCLCD_Vid4Bits_SendCommand+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    328a:	6f 81       	ldd	r22, Y+7	; 0x07
    328c:	78 85       	ldd	r23, Y+8	; 0x08
    328e:	89 85       	ldd	r24, Y+9	; 0x09
    3290:	9a 85       	ldd	r25, Y+10	; 0x0a
    3292:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3296:	dc 01       	movw	r26, r24
    3298:	cb 01       	movw	r24, r22
    329a:	9e 83       	std	Y+6, r25	; 0x06
    329c:	8d 83       	std	Y+5, r24	; 0x05
    329e:	8d 81       	ldd	r24, Y+5	; 0x05
    32a0:	9e 81       	ldd	r25, Y+6	; 0x06
    32a2:	9a 83       	std	Y+2, r25	; 0x02
    32a4:	89 83       	std	Y+1, r24	; 0x01
    32a6:	89 81       	ldd	r24, Y+1	; 0x01
    32a8:	9a 81       	ldd	r25, Y+2	; 0x02
    32aa:	01 97       	sbiw	r24, 0x01	; 1
    32ac:	f1 f7       	brne	.-4      	; 0x32aa <HCLCD_Vid4Bits_SendCommand+0x11a>
    32ae:	9a 83       	std	Y+2, r25	; 0x02
    32b0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    32b2:	82 e0       	ldi	r24, 0x02	; 2
    32b4:	62 e0       	ldi	r22, 0x02	; 2
    32b6:	40 e0       	ldi	r20, 0x00	; 0
    32b8:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
}
    32bc:	2f 96       	adiw	r28, 0x0f	; 15
    32be:	0f b6       	in	r0, 0x3f	; 63
    32c0:	f8 94       	cli
    32c2:	de bf       	out	0x3e, r29	; 62
    32c4:	0f be       	out	0x3f, r0	; 63
    32c6:	cd bf       	out	0x3d, r28	; 61
    32c8:	cf 91       	pop	r28
    32ca:	df 91       	pop	r29
    32cc:	08 95       	ret

000032ce <HCLCD_Vid4Bits_Init>:


/*LCD 4 Bits Initialization*/

void HCLCD_Vid4Bits_Init(void)
{
    32ce:	df 93       	push	r29
    32d0:	cf 93       	push	r28
    32d2:	cd b7       	in	r28, 0x3d	; 61
    32d4:	de b7       	in	r29, 0x3e	; 62
    32d6:	e9 97       	sbiw	r28, 0x39	; 57
    32d8:	0f b6       	in	r0, 0x3f	; 63
    32da:	f8 94       	cli
    32dc:	de bf       	out	0x3e, r29	; 62
    32de:	0f be       	out	0x3f, r0	; 63
    32e0:	cd bf       	out	0x3d, r28	; 61
	/*Fill This Function*/
	s8 LOC_u8PinCount;
	/*LCD Data and control port initialization*/
	for(LOC_u8PinCount=HCLCD_PINEND;LOC_u8PinCount>=HCLCD_PINSTART;LOC_u8PinCount--)
    32e2:	87 e0       	ldi	r24, 0x07	; 7
    32e4:	89 af       	std	Y+57, r24	; 0x39
    32e6:	08 c0       	rjmp	.+16     	; 0x32f8 <HCLCD_Vid4Bits_Init+0x2a>
	{
		MDIO_Error_State_SetPinDirection(LOC_u8PinCount,DATA_PORT,PIN_OUTPUT);
    32e8:	89 ad       	ldd	r24, Y+57	; 0x39
    32ea:	62 e0       	ldi	r22, 0x02	; 2
    32ec:	41 e0       	ldi	r20, 0x01	; 1
    32ee:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <MDIO_Error_State_SetPinDirection>
void HCLCD_Vid4Bits_Init(void)
{
	/*Fill This Function*/
	s8 LOC_u8PinCount;
	/*LCD Data and control port initialization*/
	for(LOC_u8PinCount=HCLCD_PINEND;LOC_u8PinCount>=HCLCD_PINSTART;LOC_u8PinCount--)
    32f2:	89 ad       	ldd	r24, Y+57	; 0x39
    32f4:	81 50       	subi	r24, 0x01	; 1
    32f6:	89 af       	std	Y+57, r24	; 0x39
    32f8:	89 ad       	ldd	r24, Y+57	; 0x39
    32fa:	84 30       	cpi	r24, 0x04	; 4
    32fc:	ac f7       	brge	.-22     	; 0x32e8 <HCLCD_Vid4Bits_Init+0x1a>
	{
		MDIO_Error_State_SetPinDirection(LOC_u8PinCount,DATA_PORT,PIN_OUTPUT);
	}
	MDIO_Error_State_SetPinDirection(RS,CONTROL_PORT,PIN_OUTPUT);
    32fe:	80 e0       	ldi	r24, 0x00	; 0
    3300:	62 e0       	ldi	r22, 0x02	; 2
    3302:	41 e0       	ldi	r20, 0x01	; 1
    3304:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(RW,CONTROL_PORT,PIN_OUTPUT);
    3308:	81 e0       	ldi	r24, 0x01	; 1
    330a:	62 e0       	ldi	r22, 0x02	; 2
    330c:	41 e0       	ldi	r20, 0x01	; 1
    330e:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(E,CONTROL_PORT,PIN_OUTPUT);
    3312:	82 e0       	ldi	r24, 0x02	; 2
    3314:	62 e0       	ldi	r22, 0x02	; 2
    3316:	41 e0       	ldi	r20, 0x01	; 1
    3318:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <MDIO_Error_State_SetPinDirection>
    331c:	80 e0       	ldi	r24, 0x00	; 0
    331e:	90 e0       	ldi	r25, 0x00	; 0
    3320:	a0 ef       	ldi	r26, 0xF0	; 240
    3322:	b1 e4       	ldi	r27, 0x41	; 65
    3324:	8d ab       	std	Y+53, r24	; 0x35
    3326:	9e ab       	std	Y+54, r25	; 0x36
    3328:	af ab       	std	Y+55, r26	; 0x37
    332a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    332c:	6d a9       	ldd	r22, Y+53	; 0x35
    332e:	7e a9       	ldd	r23, Y+54	; 0x36
    3330:	8f a9       	ldd	r24, Y+55	; 0x37
    3332:	98 ad       	ldd	r25, Y+56	; 0x38
    3334:	20 e0       	ldi	r18, 0x00	; 0
    3336:	30 e0       	ldi	r19, 0x00	; 0
    3338:	4a ef       	ldi	r20, 0xFA	; 250
    333a:	54 e4       	ldi	r21, 0x44	; 68
    333c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3340:	dc 01       	movw	r26, r24
    3342:	cb 01       	movw	r24, r22
    3344:	89 ab       	std	Y+49, r24	; 0x31
    3346:	9a ab       	std	Y+50, r25	; 0x32
    3348:	ab ab       	std	Y+51, r26	; 0x33
    334a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    334c:	69 a9       	ldd	r22, Y+49	; 0x31
    334e:	7a a9       	ldd	r23, Y+50	; 0x32
    3350:	8b a9       	ldd	r24, Y+51	; 0x33
    3352:	9c a9       	ldd	r25, Y+52	; 0x34
    3354:	20 e0       	ldi	r18, 0x00	; 0
    3356:	30 e0       	ldi	r19, 0x00	; 0
    3358:	40 e8       	ldi	r20, 0x80	; 128
    335a:	5f e3       	ldi	r21, 0x3F	; 63
    335c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3360:	88 23       	and	r24, r24
    3362:	2c f4       	brge	.+10     	; 0x336e <HCLCD_Vid4Bits_Init+0xa0>
		__ticks = 1;
    3364:	81 e0       	ldi	r24, 0x01	; 1
    3366:	90 e0       	ldi	r25, 0x00	; 0
    3368:	98 ab       	std	Y+48, r25	; 0x30
    336a:	8f a7       	std	Y+47, r24	; 0x2f
    336c:	3f c0       	rjmp	.+126    	; 0x33ec <HCLCD_Vid4Bits_Init+0x11e>
	else if (__tmp > 65535)
    336e:	69 a9       	ldd	r22, Y+49	; 0x31
    3370:	7a a9       	ldd	r23, Y+50	; 0x32
    3372:	8b a9       	ldd	r24, Y+51	; 0x33
    3374:	9c a9       	ldd	r25, Y+52	; 0x34
    3376:	20 e0       	ldi	r18, 0x00	; 0
    3378:	3f ef       	ldi	r19, 0xFF	; 255
    337a:	4f e7       	ldi	r20, 0x7F	; 127
    337c:	57 e4       	ldi	r21, 0x47	; 71
    337e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3382:	18 16       	cp	r1, r24
    3384:	4c f5       	brge	.+82     	; 0x33d8 <HCLCD_Vid4Bits_Init+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3386:	6d a9       	ldd	r22, Y+53	; 0x35
    3388:	7e a9       	ldd	r23, Y+54	; 0x36
    338a:	8f a9       	ldd	r24, Y+55	; 0x37
    338c:	98 ad       	ldd	r25, Y+56	; 0x38
    338e:	20 e0       	ldi	r18, 0x00	; 0
    3390:	30 e0       	ldi	r19, 0x00	; 0
    3392:	40 e2       	ldi	r20, 0x20	; 32
    3394:	51 e4       	ldi	r21, 0x41	; 65
    3396:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    339a:	dc 01       	movw	r26, r24
    339c:	cb 01       	movw	r24, r22
    339e:	bc 01       	movw	r22, r24
    33a0:	cd 01       	movw	r24, r26
    33a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33a6:	dc 01       	movw	r26, r24
    33a8:	cb 01       	movw	r24, r22
    33aa:	98 ab       	std	Y+48, r25	; 0x30
    33ac:	8f a7       	std	Y+47, r24	; 0x2f
    33ae:	0f c0       	rjmp	.+30     	; 0x33ce <HCLCD_Vid4Bits_Init+0x100>
    33b0:	88 ec       	ldi	r24, 0xC8	; 200
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	9e a7       	std	Y+46, r25	; 0x2e
    33b6:	8d a7       	std	Y+45, r24	; 0x2d
    33b8:	8d a5       	ldd	r24, Y+45	; 0x2d
    33ba:	9e a5       	ldd	r25, Y+46	; 0x2e
    33bc:	01 97       	sbiw	r24, 0x01	; 1
    33be:	f1 f7       	brne	.-4      	; 0x33bc <HCLCD_Vid4Bits_Init+0xee>
    33c0:	9e a7       	std	Y+46, r25	; 0x2e
    33c2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    33c6:	98 a9       	ldd	r25, Y+48	; 0x30
    33c8:	01 97       	sbiw	r24, 0x01	; 1
    33ca:	98 ab       	std	Y+48, r25	; 0x30
    33cc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    33d0:	98 a9       	ldd	r25, Y+48	; 0x30
    33d2:	00 97       	sbiw	r24, 0x00	; 0
    33d4:	69 f7       	brne	.-38     	; 0x33b0 <HCLCD_Vid4Bits_Init+0xe2>
    33d6:	14 c0       	rjmp	.+40     	; 0x3400 <HCLCD_Vid4Bits_Init+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33d8:	69 a9       	ldd	r22, Y+49	; 0x31
    33da:	7a a9       	ldd	r23, Y+50	; 0x32
    33dc:	8b a9       	ldd	r24, Y+51	; 0x33
    33de:	9c a9       	ldd	r25, Y+52	; 0x34
    33e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33e4:	dc 01       	movw	r26, r24
    33e6:	cb 01       	movw	r24, r22
    33e8:	98 ab       	std	Y+48, r25	; 0x30
    33ea:	8f a7       	std	Y+47, r24	; 0x2f
    33ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    33ee:	98 a9       	ldd	r25, Y+48	; 0x30
    33f0:	9c a7       	std	Y+44, r25	; 0x2c
    33f2:	8b a7       	std	Y+43, r24	; 0x2b
    33f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    33f6:	9c a5       	ldd	r25, Y+44	; 0x2c
    33f8:	01 97       	sbiw	r24, 0x01	; 1
    33fa:	f1 f7       	brne	.-4      	; 0x33f8 <HCLCD_Vid4Bits_Init+0x12a>
    33fc:	9c a7       	std	Y+44, r25	; 0x2c
    33fe:	8b a7       	std	Y+43, r24	; 0x2b
	/*wait to 30ms*/
	_delay_ms(30);
	/*send function set command*/
	HCLCD_Vid4Bits_SendCommand(HCLCD_FUNCTION_SET>>4);
    3400:	82 e0       	ldi	r24, 0x02	; 2
    3402:	0e 94 c8 18 	call	0x3190	; 0x3190 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_FUNCTION_SET>>4);
    3406:	82 e0       	ldi	r24, 0x02	; 2
    3408:	0e 94 c8 18 	call	0x3190	; 0x3190 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_FUNCTION_SET);
    340c:	88 e2       	ldi	r24, 0x28	; 40
    340e:	0e 94 c8 18 	call	0x3190	; 0x3190 <HCLCD_Vid4Bits_SendCommand>
    3412:	80 e0       	ldi	r24, 0x00	; 0
    3414:	90 e0       	ldi	r25, 0x00	; 0
    3416:	a0 e8       	ldi	r26, 0x80	; 128
    3418:	bf e3       	ldi	r27, 0x3F	; 63
    341a:	8f a3       	std	Y+39, r24	; 0x27
    341c:	98 a7       	std	Y+40, r25	; 0x28
    341e:	a9 a7       	std	Y+41, r26	; 0x29
    3420:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3422:	6f a1       	ldd	r22, Y+39	; 0x27
    3424:	78 a5       	ldd	r23, Y+40	; 0x28
    3426:	89 a5       	ldd	r24, Y+41	; 0x29
    3428:	9a a5       	ldd	r25, Y+42	; 0x2a
    342a:	20 e0       	ldi	r18, 0x00	; 0
    342c:	30 e0       	ldi	r19, 0x00	; 0
    342e:	4a ef       	ldi	r20, 0xFA	; 250
    3430:	54 e4       	ldi	r21, 0x44	; 68
    3432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3436:	dc 01       	movw	r26, r24
    3438:	cb 01       	movw	r24, r22
    343a:	8b a3       	std	Y+35, r24	; 0x23
    343c:	9c a3       	std	Y+36, r25	; 0x24
    343e:	ad a3       	std	Y+37, r26	; 0x25
    3440:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3442:	6b a1       	ldd	r22, Y+35	; 0x23
    3444:	7c a1       	ldd	r23, Y+36	; 0x24
    3446:	8d a1       	ldd	r24, Y+37	; 0x25
    3448:	9e a1       	ldd	r25, Y+38	; 0x26
    344a:	20 e0       	ldi	r18, 0x00	; 0
    344c:	30 e0       	ldi	r19, 0x00	; 0
    344e:	40 e8       	ldi	r20, 0x80	; 128
    3450:	5f e3       	ldi	r21, 0x3F	; 63
    3452:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3456:	88 23       	and	r24, r24
    3458:	2c f4       	brge	.+10     	; 0x3464 <HCLCD_Vid4Bits_Init+0x196>
		__ticks = 1;
    345a:	81 e0       	ldi	r24, 0x01	; 1
    345c:	90 e0       	ldi	r25, 0x00	; 0
    345e:	9a a3       	std	Y+34, r25	; 0x22
    3460:	89 a3       	std	Y+33, r24	; 0x21
    3462:	3f c0       	rjmp	.+126    	; 0x34e2 <HCLCD_Vid4Bits_Init+0x214>
	else if (__tmp > 65535)
    3464:	6b a1       	ldd	r22, Y+35	; 0x23
    3466:	7c a1       	ldd	r23, Y+36	; 0x24
    3468:	8d a1       	ldd	r24, Y+37	; 0x25
    346a:	9e a1       	ldd	r25, Y+38	; 0x26
    346c:	20 e0       	ldi	r18, 0x00	; 0
    346e:	3f ef       	ldi	r19, 0xFF	; 255
    3470:	4f e7       	ldi	r20, 0x7F	; 127
    3472:	57 e4       	ldi	r21, 0x47	; 71
    3474:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3478:	18 16       	cp	r1, r24
    347a:	4c f5       	brge	.+82     	; 0x34ce <HCLCD_Vid4Bits_Init+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    347c:	6f a1       	ldd	r22, Y+39	; 0x27
    347e:	78 a5       	ldd	r23, Y+40	; 0x28
    3480:	89 a5       	ldd	r24, Y+41	; 0x29
    3482:	9a a5       	ldd	r25, Y+42	; 0x2a
    3484:	20 e0       	ldi	r18, 0x00	; 0
    3486:	30 e0       	ldi	r19, 0x00	; 0
    3488:	40 e2       	ldi	r20, 0x20	; 32
    348a:	51 e4       	ldi	r21, 0x41	; 65
    348c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3490:	dc 01       	movw	r26, r24
    3492:	cb 01       	movw	r24, r22
    3494:	bc 01       	movw	r22, r24
    3496:	cd 01       	movw	r24, r26
    3498:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    349c:	dc 01       	movw	r26, r24
    349e:	cb 01       	movw	r24, r22
    34a0:	9a a3       	std	Y+34, r25	; 0x22
    34a2:	89 a3       	std	Y+33, r24	; 0x21
    34a4:	0f c0       	rjmp	.+30     	; 0x34c4 <HCLCD_Vid4Bits_Init+0x1f6>
    34a6:	88 ec       	ldi	r24, 0xC8	; 200
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	98 a3       	std	Y+32, r25	; 0x20
    34ac:	8f 8f       	std	Y+31, r24	; 0x1f
    34ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34b0:	98 a1       	ldd	r25, Y+32	; 0x20
    34b2:	01 97       	sbiw	r24, 0x01	; 1
    34b4:	f1 f7       	brne	.-4      	; 0x34b2 <HCLCD_Vid4Bits_Init+0x1e4>
    34b6:	98 a3       	std	Y+32, r25	; 0x20
    34b8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34ba:	89 a1       	ldd	r24, Y+33	; 0x21
    34bc:	9a a1       	ldd	r25, Y+34	; 0x22
    34be:	01 97       	sbiw	r24, 0x01	; 1
    34c0:	9a a3       	std	Y+34, r25	; 0x22
    34c2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34c4:	89 a1       	ldd	r24, Y+33	; 0x21
    34c6:	9a a1       	ldd	r25, Y+34	; 0x22
    34c8:	00 97       	sbiw	r24, 0x00	; 0
    34ca:	69 f7       	brne	.-38     	; 0x34a6 <HCLCD_Vid4Bits_Init+0x1d8>
    34cc:	14 c0       	rjmp	.+40     	; 0x34f6 <HCLCD_Vid4Bits_Init+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34ce:	6b a1       	ldd	r22, Y+35	; 0x23
    34d0:	7c a1       	ldd	r23, Y+36	; 0x24
    34d2:	8d a1       	ldd	r24, Y+37	; 0x25
    34d4:	9e a1       	ldd	r25, Y+38	; 0x26
    34d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34da:	dc 01       	movw	r26, r24
    34dc:	cb 01       	movw	r24, r22
    34de:	9a a3       	std	Y+34, r25	; 0x22
    34e0:	89 a3       	std	Y+33, r24	; 0x21
    34e2:	89 a1       	ldd	r24, Y+33	; 0x21
    34e4:	9a a1       	ldd	r25, Y+34	; 0x22
    34e6:	9e 8f       	std	Y+30, r25	; 0x1e
    34e8:	8d 8f       	std	Y+29, r24	; 0x1d
    34ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34ec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    34ee:	01 97       	sbiw	r24, 0x01	; 1
    34f0:	f1 f7       	brne	.-4      	; 0x34ee <HCLCD_Vid4Bits_Init+0x220>
    34f2:	9e 8f       	std	Y+30, r25	; 0x1e
    34f4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*send Display on/off  command*/
	HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_ON_OFF>>4);
    34f6:	80 e0       	ldi	r24, 0x00	; 0
    34f8:	0e 94 c8 18 	call	0x3190	; 0x3190 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_ON_OFF);
    34fc:	8c e0       	ldi	r24, 0x0C	; 12
    34fe:	0e 94 c8 18 	call	0x3190	; 0x3190 <HCLCD_Vid4Bits_SendCommand>
    3502:	80 e0       	ldi	r24, 0x00	; 0
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	a0 e8       	ldi	r26, 0x80	; 128
    3508:	bf e3       	ldi	r27, 0x3F	; 63
    350a:	89 8f       	std	Y+25, r24	; 0x19
    350c:	9a 8f       	std	Y+26, r25	; 0x1a
    350e:	ab 8f       	std	Y+27, r26	; 0x1b
    3510:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3512:	69 8d       	ldd	r22, Y+25	; 0x19
    3514:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3516:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3518:	9c 8d       	ldd	r25, Y+28	; 0x1c
    351a:	20 e0       	ldi	r18, 0x00	; 0
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	4a ef       	ldi	r20, 0xFA	; 250
    3520:	54 e4       	ldi	r21, 0x44	; 68
    3522:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3526:	dc 01       	movw	r26, r24
    3528:	cb 01       	movw	r24, r22
    352a:	8d 8b       	std	Y+21, r24	; 0x15
    352c:	9e 8b       	std	Y+22, r25	; 0x16
    352e:	af 8b       	std	Y+23, r26	; 0x17
    3530:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3532:	6d 89       	ldd	r22, Y+21	; 0x15
    3534:	7e 89       	ldd	r23, Y+22	; 0x16
    3536:	8f 89       	ldd	r24, Y+23	; 0x17
    3538:	98 8d       	ldd	r25, Y+24	; 0x18
    353a:	20 e0       	ldi	r18, 0x00	; 0
    353c:	30 e0       	ldi	r19, 0x00	; 0
    353e:	40 e8       	ldi	r20, 0x80	; 128
    3540:	5f e3       	ldi	r21, 0x3F	; 63
    3542:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3546:	88 23       	and	r24, r24
    3548:	2c f4       	brge	.+10     	; 0x3554 <HCLCD_Vid4Bits_Init+0x286>
		__ticks = 1;
    354a:	81 e0       	ldi	r24, 0x01	; 1
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	9c 8b       	std	Y+20, r25	; 0x14
    3550:	8b 8b       	std	Y+19, r24	; 0x13
    3552:	3f c0       	rjmp	.+126    	; 0x35d2 <HCLCD_Vid4Bits_Init+0x304>
	else if (__tmp > 65535)
    3554:	6d 89       	ldd	r22, Y+21	; 0x15
    3556:	7e 89       	ldd	r23, Y+22	; 0x16
    3558:	8f 89       	ldd	r24, Y+23	; 0x17
    355a:	98 8d       	ldd	r25, Y+24	; 0x18
    355c:	20 e0       	ldi	r18, 0x00	; 0
    355e:	3f ef       	ldi	r19, 0xFF	; 255
    3560:	4f e7       	ldi	r20, 0x7F	; 127
    3562:	57 e4       	ldi	r21, 0x47	; 71
    3564:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3568:	18 16       	cp	r1, r24
    356a:	4c f5       	brge	.+82     	; 0x35be <HCLCD_Vid4Bits_Init+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    356c:	69 8d       	ldd	r22, Y+25	; 0x19
    356e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3570:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3572:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3574:	20 e0       	ldi	r18, 0x00	; 0
    3576:	30 e0       	ldi	r19, 0x00	; 0
    3578:	40 e2       	ldi	r20, 0x20	; 32
    357a:	51 e4       	ldi	r21, 0x41	; 65
    357c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3580:	dc 01       	movw	r26, r24
    3582:	cb 01       	movw	r24, r22
    3584:	bc 01       	movw	r22, r24
    3586:	cd 01       	movw	r24, r26
    3588:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    358c:	dc 01       	movw	r26, r24
    358e:	cb 01       	movw	r24, r22
    3590:	9c 8b       	std	Y+20, r25	; 0x14
    3592:	8b 8b       	std	Y+19, r24	; 0x13
    3594:	0f c0       	rjmp	.+30     	; 0x35b4 <HCLCD_Vid4Bits_Init+0x2e6>
    3596:	88 ec       	ldi	r24, 0xC8	; 200
    3598:	90 e0       	ldi	r25, 0x00	; 0
    359a:	9a 8b       	std	Y+18, r25	; 0x12
    359c:	89 8b       	std	Y+17, r24	; 0x11
    359e:	89 89       	ldd	r24, Y+17	; 0x11
    35a0:	9a 89       	ldd	r25, Y+18	; 0x12
    35a2:	01 97       	sbiw	r24, 0x01	; 1
    35a4:	f1 f7       	brne	.-4      	; 0x35a2 <HCLCD_Vid4Bits_Init+0x2d4>
    35a6:	9a 8b       	std	Y+18, r25	; 0x12
    35a8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35aa:	8b 89       	ldd	r24, Y+19	; 0x13
    35ac:	9c 89       	ldd	r25, Y+20	; 0x14
    35ae:	01 97       	sbiw	r24, 0x01	; 1
    35b0:	9c 8b       	std	Y+20, r25	; 0x14
    35b2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35b4:	8b 89       	ldd	r24, Y+19	; 0x13
    35b6:	9c 89       	ldd	r25, Y+20	; 0x14
    35b8:	00 97       	sbiw	r24, 0x00	; 0
    35ba:	69 f7       	brne	.-38     	; 0x3596 <HCLCD_Vid4Bits_Init+0x2c8>
    35bc:	14 c0       	rjmp	.+40     	; 0x35e6 <HCLCD_Vid4Bits_Init+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35be:	6d 89       	ldd	r22, Y+21	; 0x15
    35c0:	7e 89       	ldd	r23, Y+22	; 0x16
    35c2:	8f 89       	ldd	r24, Y+23	; 0x17
    35c4:	98 8d       	ldd	r25, Y+24	; 0x18
    35c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ca:	dc 01       	movw	r26, r24
    35cc:	cb 01       	movw	r24, r22
    35ce:	9c 8b       	std	Y+20, r25	; 0x14
    35d0:	8b 8b       	std	Y+19, r24	; 0x13
    35d2:	8b 89       	ldd	r24, Y+19	; 0x13
    35d4:	9c 89       	ldd	r25, Y+20	; 0x14
    35d6:	98 8b       	std	Y+16, r25	; 0x10
    35d8:	8f 87       	std	Y+15, r24	; 0x0f
    35da:	8f 85       	ldd	r24, Y+15	; 0x0f
    35dc:	98 89       	ldd	r25, Y+16	; 0x10
    35de:	01 97       	sbiw	r24, 0x01	; 1
    35e0:	f1 f7       	brne	.-4      	; 0x35de <HCLCD_Vid4Bits_Init+0x310>
    35e2:	98 8b       	std	Y+16, r25	; 0x10
    35e4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*send Display Clear  command*/
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR>>4);
    35e6:	80 e0       	ldi	r24, 0x00	; 0
    35e8:	0e 94 c8 18 	call	0x3190	; 0x3190 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR);
    35ec:	81 e0       	ldi	r24, 0x01	; 1
    35ee:	0e 94 c8 18 	call	0x3190	; 0x3190 <HCLCD_Vid4Bits_SendCommand>
    35f2:	80 e0       	ldi	r24, 0x00	; 0
    35f4:	90 e0       	ldi	r25, 0x00	; 0
    35f6:	a0 e0       	ldi	r26, 0x00	; 0
    35f8:	b0 e4       	ldi	r27, 0x40	; 64
    35fa:	8b 87       	std	Y+11, r24	; 0x0b
    35fc:	9c 87       	std	Y+12, r25	; 0x0c
    35fe:	ad 87       	std	Y+13, r26	; 0x0d
    3600:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3602:	6b 85       	ldd	r22, Y+11	; 0x0b
    3604:	7c 85       	ldd	r23, Y+12	; 0x0c
    3606:	8d 85       	ldd	r24, Y+13	; 0x0d
    3608:	9e 85       	ldd	r25, Y+14	; 0x0e
    360a:	20 e0       	ldi	r18, 0x00	; 0
    360c:	30 e0       	ldi	r19, 0x00	; 0
    360e:	4a ef       	ldi	r20, 0xFA	; 250
    3610:	54 e4       	ldi	r21, 0x44	; 68
    3612:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3616:	dc 01       	movw	r26, r24
    3618:	cb 01       	movw	r24, r22
    361a:	8f 83       	std	Y+7, r24	; 0x07
    361c:	98 87       	std	Y+8, r25	; 0x08
    361e:	a9 87       	std	Y+9, r26	; 0x09
    3620:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3622:	6f 81       	ldd	r22, Y+7	; 0x07
    3624:	78 85       	ldd	r23, Y+8	; 0x08
    3626:	89 85       	ldd	r24, Y+9	; 0x09
    3628:	9a 85       	ldd	r25, Y+10	; 0x0a
    362a:	20 e0       	ldi	r18, 0x00	; 0
    362c:	30 e0       	ldi	r19, 0x00	; 0
    362e:	40 e8       	ldi	r20, 0x80	; 128
    3630:	5f e3       	ldi	r21, 0x3F	; 63
    3632:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3636:	88 23       	and	r24, r24
    3638:	2c f4       	brge	.+10     	; 0x3644 <HCLCD_Vid4Bits_Init+0x376>
		__ticks = 1;
    363a:	81 e0       	ldi	r24, 0x01	; 1
    363c:	90 e0       	ldi	r25, 0x00	; 0
    363e:	9e 83       	std	Y+6, r25	; 0x06
    3640:	8d 83       	std	Y+5, r24	; 0x05
    3642:	3f c0       	rjmp	.+126    	; 0x36c2 <HCLCD_Vid4Bits_Init+0x3f4>
	else if (__tmp > 65535)
    3644:	6f 81       	ldd	r22, Y+7	; 0x07
    3646:	78 85       	ldd	r23, Y+8	; 0x08
    3648:	89 85       	ldd	r24, Y+9	; 0x09
    364a:	9a 85       	ldd	r25, Y+10	; 0x0a
    364c:	20 e0       	ldi	r18, 0x00	; 0
    364e:	3f ef       	ldi	r19, 0xFF	; 255
    3650:	4f e7       	ldi	r20, 0x7F	; 127
    3652:	57 e4       	ldi	r21, 0x47	; 71
    3654:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3658:	18 16       	cp	r1, r24
    365a:	4c f5       	brge	.+82     	; 0x36ae <HCLCD_Vid4Bits_Init+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    365c:	6b 85       	ldd	r22, Y+11	; 0x0b
    365e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3660:	8d 85       	ldd	r24, Y+13	; 0x0d
    3662:	9e 85       	ldd	r25, Y+14	; 0x0e
    3664:	20 e0       	ldi	r18, 0x00	; 0
    3666:	30 e0       	ldi	r19, 0x00	; 0
    3668:	40 e2       	ldi	r20, 0x20	; 32
    366a:	51 e4       	ldi	r21, 0x41	; 65
    366c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3670:	dc 01       	movw	r26, r24
    3672:	cb 01       	movw	r24, r22
    3674:	bc 01       	movw	r22, r24
    3676:	cd 01       	movw	r24, r26
    3678:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    367c:	dc 01       	movw	r26, r24
    367e:	cb 01       	movw	r24, r22
    3680:	9e 83       	std	Y+6, r25	; 0x06
    3682:	8d 83       	std	Y+5, r24	; 0x05
    3684:	0f c0       	rjmp	.+30     	; 0x36a4 <HCLCD_Vid4Bits_Init+0x3d6>
    3686:	88 ec       	ldi	r24, 0xC8	; 200
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	9c 83       	std	Y+4, r25	; 0x04
    368c:	8b 83       	std	Y+3, r24	; 0x03
    368e:	8b 81       	ldd	r24, Y+3	; 0x03
    3690:	9c 81       	ldd	r25, Y+4	; 0x04
    3692:	01 97       	sbiw	r24, 0x01	; 1
    3694:	f1 f7       	brne	.-4      	; 0x3692 <HCLCD_Vid4Bits_Init+0x3c4>
    3696:	9c 83       	std	Y+4, r25	; 0x04
    3698:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    369a:	8d 81       	ldd	r24, Y+5	; 0x05
    369c:	9e 81       	ldd	r25, Y+6	; 0x06
    369e:	01 97       	sbiw	r24, 0x01	; 1
    36a0:	9e 83       	std	Y+6, r25	; 0x06
    36a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36a4:	8d 81       	ldd	r24, Y+5	; 0x05
    36a6:	9e 81       	ldd	r25, Y+6	; 0x06
    36a8:	00 97       	sbiw	r24, 0x00	; 0
    36aa:	69 f7       	brne	.-38     	; 0x3686 <HCLCD_Vid4Bits_Init+0x3b8>
    36ac:	14 c0       	rjmp	.+40     	; 0x36d6 <HCLCD_Vid4Bits_Init+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36ae:	6f 81       	ldd	r22, Y+7	; 0x07
    36b0:	78 85       	ldd	r23, Y+8	; 0x08
    36b2:	89 85       	ldd	r24, Y+9	; 0x09
    36b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    36b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ba:	dc 01       	movw	r26, r24
    36bc:	cb 01       	movw	r24, r22
    36be:	9e 83       	std	Y+6, r25	; 0x06
    36c0:	8d 83       	std	Y+5, r24	; 0x05
    36c2:	8d 81       	ldd	r24, Y+5	; 0x05
    36c4:	9e 81       	ldd	r25, Y+6	; 0x06
    36c6:	9a 83       	std	Y+2, r25	; 0x02
    36c8:	89 83       	std	Y+1, r24	; 0x01
    36ca:	89 81       	ldd	r24, Y+1	; 0x01
    36cc:	9a 81       	ldd	r25, Y+2	; 0x02
    36ce:	01 97       	sbiw	r24, 0x01	; 1
    36d0:	f1 f7       	brne	.-4      	; 0x36ce <HCLCD_Vid4Bits_Init+0x400>
    36d2:	9a 83       	std	Y+2, r25	; 0x02
    36d4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*send Entry Mode  set command*/
	HCLCD_Vid4Bits_SendCommand(HCLCD_ENTRY_MODE_SET>>4);
    36d6:	80 e0       	ldi	r24, 0x00	; 0
    36d8:	0e 94 c8 18 	call	0x3190	; 0x3190 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_ENTRY_MODE_SET);
    36dc:	86 e0       	ldi	r24, 0x06	; 6
    36de:	0e 94 c8 18 	call	0x3190	; 0x3190 <HCLCD_Vid4Bits_SendCommand>
}
    36e2:	e9 96       	adiw	r28, 0x39	; 57
    36e4:	0f b6       	in	r0, 0x3f	; 63
    36e6:	f8 94       	cli
    36e8:	de bf       	out	0x3e, r29	; 62
    36ea:	0f be       	out	0x3f, r0	; 63
    36ec:	cd bf       	out	0x3d, r28	; 61
    36ee:	cf 91       	pop	r28
    36f0:	df 91       	pop	r29
    36f2:	08 95       	ret

000036f4 <HCLCD_VidWriteChar_4Bits>:


/*Helper function*/
void HCLCD_VidWriteChar_4Bits(u8 Copy_u8Data)
{
    36f4:	df 93       	push	r29
    36f6:	cf 93       	push	r28
    36f8:	cd b7       	in	r28, 0x3d	; 61
    36fa:	de b7       	in	r29, 0x3e	; 62
    36fc:	2f 97       	sbiw	r28, 0x0f	; 15
    36fe:	0f b6       	in	r0, 0x3f	; 63
    3700:	f8 94       	cli
    3702:	de bf       	out	0x3e, r29	; 62
    3704:	0f be       	out	0x3f, r0	; 63
    3706:	cd bf       	out	0x3d, r28	; 61
    3708:	8f 87       	std	Y+15, r24	; 0x0f
	//u8 LOC_u8CopyData;
	/*select Data register--> Write One on Rs pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_HIGH);
    370a:	80 e0       	ldi	r24, 0x00	; 0
    370c:	62 e0       	ldi	r22, 0x02	; 2
    370e:	41 e0       	ldi	r20, 0x01	; 1
    3710:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
	/*select Write mode--> Write zero on RW pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    3714:	81 e0       	ldi	r24, 0x01	; 1
    3716:	62 e0       	ldi	r22, 0x02	; 2
    3718:	40 e0       	ldi	r20, 0x00	; 0
    371a:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
	/*Send Data*/
	//LOC_u8CopyData=(Copy_u8Data&0x0F)<<HCLCD_PINSTART;
	MDIO_Error_State_SetNippleValue(HCLCD_PINSTART,DATA_PORT,Copy_u8Data);
    371e:	84 e0       	ldi	r24, 0x04	; 4
    3720:	62 e0       	ldi	r22, 0x02	; 2
    3722:	4f 85       	ldd	r20, Y+15	; 0x0f
    3724:	0e 94 22 0c 	call	0x1844	; 0x1844 <MDIO_Error_State_SetNippleValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    3728:	82 e0       	ldi	r24, 0x02	; 2
    372a:	62 e0       	ldi	r22, 0x02	; 2
    372c:	41 e0       	ldi	r20, 0x01	; 1
    372e:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
    3732:	80 e0       	ldi	r24, 0x00	; 0
    3734:	90 e0       	ldi	r25, 0x00	; 0
    3736:	a0 e0       	ldi	r26, 0x00	; 0
    3738:	b0 e4       	ldi	r27, 0x40	; 64
    373a:	8b 87       	std	Y+11, r24	; 0x0b
    373c:	9c 87       	std	Y+12, r25	; 0x0c
    373e:	ad 87       	std	Y+13, r26	; 0x0d
    3740:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3742:	6b 85       	ldd	r22, Y+11	; 0x0b
    3744:	7c 85       	ldd	r23, Y+12	; 0x0c
    3746:	8d 85       	ldd	r24, Y+13	; 0x0d
    3748:	9e 85       	ldd	r25, Y+14	; 0x0e
    374a:	20 e0       	ldi	r18, 0x00	; 0
    374c:	30 e0       	ldi	r19, 0x00	; 0
    374e:	4a ef       	ldi	r20, 0xFA	; 250
    3750:	54 e4       	ldi	r21, 0x44	; 68
    3752:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3756:	dc 01       	movw	r26, r24
    3758:	cb 01       	movw	r24, r22
    375a:	8f 83       	std	Y+7, r24	; 0x07
    375c:	98 87       	std	Y+8, r25	; 0x08
    375e:	a9 87       	std	Y+9, r26	; 0x09
    3760:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3762:	6f 81       	ldd	r22, Y+7	; 0x07
    3764:	78 85       	ldd	r23, Y+8	; 0x08
    3766:	89 85       	ldd	r24, Y+9	; 0x09
    3768:	9a 85       	ldd	r25, Y+10	; 0x0a
    376a:	20 e0       	ldi	r18, 0x00	; 0
    376c:	30 e0       	ldi	r19, 0x00	; 0
    376e:	40 e8       	ldi	r20, 0x80	; 128
    3770:	5f e3       	ldi	r21, 0x3F	; 63
    3772:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3776:	88 23       	and	r24, r24
    3778:	2c f4       	brge	.+10     	; 0x3784 <HCLCD_VidWriteChar_4Bits+0x90>
		__ticks = 1;
    377a:	81 e0       	ldi	r24, 0x01	; 1
    377c:	90 e0       	ldi	r25, 0x00	; 0
    377e:	9e 83       	std	Y+6, r25	; 0x06
    3780:	8d 83       	std	Y+5, r24	; 0x05
    3782:	3f c0       	rjmp	.+126    	; 0x3802 <HCLCD_VidWriteChar_4Bits+0x10e>
	else if (__tmp > 65535)
    3784:	6f 81       	ldd	r22, Y+7	; 0x07
    3786:	78 85       	ldd	r23, Y+8	; 0x08
    3788:	89 85       	ldd	r24, Y+9	; 0x09
    378a:	9a 85       	ldd	r25, Y+10	; 0x0a
    378c:	20 e0       	ldi	r18, 0x00	; 0
    378e:	3f ef       	ldi	r19, 0xFF	; 255
    3790:	4f e7       	ldi	r20, 0x7F	; 127
    3792:	57 e4       	ldi	r21, 0x47	; 71
    3794:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3798:	18 16       	cp	r1, r24
    379a:	4c f5       	brge	.+82     	; 0x37ee <HCLCD_VidWriteChar_4Bits+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    379c:	6b 85       	ldd	r22, Y+11	; 0x0b
    379e:	7c 85       	ldd	r23, Y+12	; 0x0c
    37a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    37a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    37a4:	20 e0       	ldi	r18, 0x00	; 0
    37a6:	30 e0       	ldi	r19, 0x00	; 0
    37a8:	40 e2       	ldi	r20, 0x20	; 32
    37aa:	51 e4       	ldi	r21, 0x41	; 65
    37ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37b0:	dc 01       	movw	r26, r24
    37b2:	cb 01       	movw	r24, r22
    37b4:	bc 01       	movw	r22, r24
    37b6:	cd 01       	movw	r24, r26
    37b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37bc:	dc 01       	movw	r26, r24
    37be:	cb 01       	movw	r24, r22
    37c0:	9e 83       	std	Y+6, r25	; 0x06
    37c2:	8d 83       	std	Y+5, r24	; 0x05
    37c4:	0f c0       	rjmp	.+30     	; 0x37e4 <HCLCD_VidWriteChar_4Bits+0xf0>
    37c6:	88 ec       	ldi	r24, 0xC8	; 200
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	9c 83       	std	Y+4, r25	; 0x04
    37cc:	8b 83       	std	Y+3, r24	; 0x03
    37ce:	8b 81       	ldd	r24, Y+3	; 0x03
    37d0:	9c 81       	ldd	r25, Y+4	; 0x04
    37d2:	01 97       	sbiw	r24, 0x01	; 1
    37d4:	f1 f7       	brne	.-4      	; 0x37d2 <HCLCD_VidWriteChar_4Bits+0xde>
    37d6:	9c 83       	std	Y+4, r25	; 0x04
    37d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37da:	8d 81       	ldd	r24, Y+5	; 0x05
    37dc:	9e 81       	ldd	r25, Y+6	; 0x06
    37de:	01 97       	sbiw	r24, 0x01	; 1
    37e0:	9e 83       	std	Y+6, r25	; 0x06
    37e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37e4:	8d 81       	ldd	r24, Y+5	; 0x05
    37e6:	9e 81       	ldd	r25, Y+6	; 0x06
    37e8:	00 97       	sbiw	r24, 0x00	; 0
    37ea:	69 f7       	brne	.-38     	; 0x37c6 <HCLCD_VidWriteChar_4Bits+0xd2>
    37ec:	14 c0       	rjmp	.+40     	; 0x3816 <HCLCD_VidWriteChar_4Bits+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37ee:	6f 81       	ldd	r22, Y+7	; 0x07
    37f0:	78 85       	ldd	r23, Y+8	; 0x08
    37f2:	89 85       	ldd	r24, Y+9	; 0x09
    37f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    37f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37fa:	dc 01       	movw	r26, r24
    37fc:	cb 01       	movw	r24, r22
    37fe:	9e 83       	std	Y+6, r25	; 0x06
    3800:	8d 83       	std	Y+5, r24	; 0x05
    3802:	8d 81       	ldd	r24, Y+5	; 0x05
    3804:	9e 81       	ldd	r25, Y+6	; 0x06
    3806:	9a 83       	std	Y+2, r25	; 0x02
    3808:	89 83       	std	Y+1, r24	; 0x01
    380a:	89 81       	ldd	r24, Y+1	; 0x01
    380c:	9a 81       	ldd	r25, Y+2	; 0x02
    380e:	01 97       	sbiw	r24, 0x01	; 1
    3810:	f1 f7       	brne	.-4      	; 0x380e <HCLCD_VidWriteChar_4Bits+0x11a>
    3812:	9a 83       	std	Y+2, r25	; 0x02
    3814:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    3816:	82 e0       	ldi	r24, 0x02	; 2
    3818:	62 e0       	ldi	r22, 0x02	; 2
    381a:	40 e0       	ldi	r20, 0x00	; 0
    381c:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
}
    3820:	2f 96       	adiw	r28, 0x0f	; 15
    3822:	0f b6       	in	r0, 0x3f	; 63
    3824:	f8 94       	cli
    3826:	de bf       	out	0x3e, r29	; 62
    3828:	0f be       	out	0x3f, r0	; 63
    382a:	cd bf       	out	0x3d, r28	; 61
    382c:	cf 91       	pop	r28
    382e:	df 91       	pop	r29
    3830:	08 95       	ret

00003832 <HCLCD_Vid4Bits_DisplayCharacter>:
/*Display Character 4 Bits*/
void HCLCD_Vid4Bits_DisplayCharacter(u8 Copy_u8Data)
{
    3832:	df 93       	push	r29
    3834:	cf 93       	push	r28
    3836:	0f 92       	push	r0
    3838:	cd b7       	in	r28, 0x3d	; 61
    383a:	de b7       	in	r29, 0x3e	; 62
    383c:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_VidWriteChar_4Bits(Copy_u8Data>>4);
    383e:	89 81       	ldd	r24, Y+1	; 0x01
    3840:	82 95       	swap	r24
    3842:	8f 70       	andi	r24, 0x0F	; 15
    3844:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <HCLCD_VidWriteChar_4Bits>
	HCLCD_VidWriteChar_4Bits(Copy_u8Data);
    3848:	89 81       	ldd	r24, Y+1	; 0x01
    384a:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <HCLCD_VidWriteChar_4Bits>
}
    384e:	0f 90       	pop	r0
    3850:	cf 91       	pop	r28
    3852:	df 91       	pop	r29
    3854:	08 95       	ret

00003856 <HCLCD_Vid4Bits_DisplayString>:

/*Display String 4 Bits*/

void HCLCD_Vid4Bits_DisplayString(u8* PCopy_u8String)
{
    3856:	df 93       	push	r29
    3858:	cf 93       	push	r28
    385a:	00 d0       	rcall	.+0      	; 0x385c <HCLCD_Vid4Bits_DisplayString+0x6>
    385c:	0f 92       	push	r0
    385e:	cd b7       	in	r28, 0x3d	; 61
    3860:	de b7       	in	r29, 0x3e	; 62
    3862:	9b 83       	std	Y+3, r25	; 0x03
    3864:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Count=0;
    3866:	19 82       	std	Y+1, r1	; 0x01
    3868:	0e c0       	rjmp	.+28     	; 0x3886 <HCLCD_Vid4Bits_DisplayString+0x30>
	while(PCopy_u8String[Loc_u8Count]!=NULL)
	{
		HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8String[Loc_u8Count]);
    386a:	89 81       	ldd	r24, Y+1	; 0x01
    386c:	28 2f       	mov	r18, r24
    386e:	30 e0       	ldi	r19, 0x00	; 0
    3870:	8a 81       	ldd	r24, Y+2	; 0x02
    3872:	9b 81       	ldd	r25, Y+3	; 0x03
    3874:	fc 01       	movw	r30, r24
    3876:	e2 0f       	add	r30, r18
    3878:	f3 1f       	adc	r31, r19
    387a:	80 81       	ld	r24, Z
    387c:	0e 94 19 1c 	call	0x3832	; 0x3832 <HCLCD_Vid4Bits_DisplayCharacter>
		Loc_u8Count++;
    3880:	89 81       	ldd	r24, Y+1	; 0x01
    3882:	8f 5f       	subi	r24, 0xFF	; 255
    3884:	89 83       	std	Y+1, r24	; 0x01
/*Display String 4 Bits*/

void HCLCD_Vid4Bits_DisplayString(u8* PCopy_u8String)
{
	u8 Loc_u8Count=0;
	while(PCopy_u8String[Loc_u8Count]!=NULL)
    3886:	89 81       	ldd	r24, Y+1	; 0x01
    3888:	28 2f       	mov	r18, r24
    388a:	30 e0       	ldi	r19, 0x00	; 0
    388c:	8a 81       	ldd	r24, Y+2	; 0x02
    388e:	9b 81       	ldd	r25, Y+3	; 0x03
    3890:	fc 01       	movw	r30, r24
    3892:	e2 0f       	add	r30, r18
    3894:	f3 1f       	adc	r31, r19
    3896:	80 81       	ld	r24, Z
    3898:	88 23       	and	r24, r24
    389a:	39 f7       	brne	.-50     	; 0x386a <HCLCD_Vid4Bits_DisplayString+0x14>
	{
		HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8String[Loc_u8Count]);
		Loc_u8Count++;
	}
}
    389c:	0f 90       	pop	r0
    389e:	0f 90       	pop	r0
    38a0:	0f 90       	pop	r0
    38a2:	cf 91       	pop	r28
    38a4:	df 91       	pop	r29
    38a6:	08 95       	ret

000038a8 <HCLCD_Vid4Bits_DisplayNumber>:

void HCLCD_Vid4Bits_DisplayNumber(u32 Copy_u8Number)
{
    38a8:	0f 93       	push	r16
    38aa:	1f 93       	push	r17
    38ac:	df 93       	push	r29
    38ae:	cf 93       	push	r28
    38b0:	cd b7       	in	r28, 0x3d	; 61
    38b2:	de b7       	in	r29, 0x3e	; 62
    38b4:	60 97       	sbiw	r28, 0x10	; 16
    38b6:	0f b6       	in	r0, 0x3f	; 63
    38b8:	f8 94       	cli
    38ba:	de bf       	out	0x3e, r29	; 62
    38bc:	0f be       	out	0x3f, r0	; 63
    38be:	cd bf       	out	0x3d, r28	; 61
    38c0:	6d 87       	std	Y+13, r22	; 0x0d
    38c2:	7e 87       	std	Y+14, r23	; 0x0e
    38c4:	8f 87       	std	Y+15, r24	; 0x0f
    38c6:	98 8b       	std	Y+16, r25	; 0x10
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
    38c8:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u8Number>0)
    38ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    38cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    38ce:	af 85       	ldd	r26, Y+15	; 0x0f
    38d0:	b8 89       	ldd	r27, Y+16	; 0x10
    38d2:	00 97       	sbiw	r24, 0x00	; 0
    38d4:	a1 05       	cpc	r26, r1
    38d6:	b1 05       	cpc	r27, r1
    38d8:	09 f4       	brne	.+2      	; 0x38dc <HCLCD_Vid4Bits_DisplayNumber+0x34>
    38da:	4f c0       	rjmp	.+158    	; 0x397a <HCLCD_Vid4Bits_DisplayNumber+0xd2>
    38dc:	2d c0       	rjmp	.+90     	; 0x3938 <HCLCD_Vid4Bits_DisplayNumber+0x90>
	{
		while(Copy_u8Number!=0)
		{
			ARR_Digits[LOC_Count] = (Copy_u8Number%10);
    38de:	8a 81       	ldd	r24, Y+2	; 0x02
    38e0:	08 2f       	mov	r16, r24
    38e2:	10 e0       	ldi	r17, 0x00	; 0
    38e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    38e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    38e8:	af 85       	ldd	r26, Y+15	; 0x0f
    38ea:	b8 89       	ldd	r27, Y+16	; 0x10
    38ec:	2a e0       	ldi	r18, 0x0A	; 10
    38ee:	30 e0       	ldi	r19, 0x00	; 0
    38f0:	40 e0       	ldi	r20, 0x00	; 0
    38f2:	50 e0       	ldi	r21, 0x00	; 0
    38f4:	bc 01       	movw	r22, r24
    38f6:	cd 01       	movw	r24, r26
    38f8:	0e 94 a8 23 	call	0x4750	; 0x4750 <__udivmodsi4>
    38fc:	dc 01       	movw	r26, r24
    38fe:	cb 01       	movw	r24, r22
    3900:	28 2f       	mov	r18, r24
    3902:	ce 01       	movw	r24, r28
    3904:	03 96       	adiw	r24, 0x03	; 3
    3906:	fc 01       	movw	r30, r24
    3908:	e0 0f       	add	r30, r16
    390a:	f1 1f       	adc	r31, r17
    390c:	20 83       	st	Z, r18
			Copy_u8Number/=10;
    390e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3910:	9e 85       	ldd	r25, Y+14	; 0x0e
    3912:	af 85       	ldd	r26, Y+15	; 0x0f
    3914:	b8 89       	ldd	r27, Y+16	; 0x10
    3916:	2a e0       	ldi	r18, 0x0A	; 10
    3918:	30 e0       	ldi	r19, 0x00	; 0
    391a:	40 e0       	ldi	r20, 0x00	; 0
    391c:	50 e0       	ldi	r21, 0x00	; 0
    391e:	bc 01       	movw	r22, r24
    3920:	cd 01       	movw	r24, r26
    3922:	0e 94 a8 23 	call	0x4750	; 0x4750 <__udivmodsi4>
    3926:	da 01       	movw	r26, r20
    3928:	c9 01       	movw	r24, r18
    392a:	8d 87       	std	Y+13, r24	; 0x0d
    392c:	9e 87       	std	Y+14, r25	; 0x0e
    392e:	af 87       	std	Y+15, r26	; 0x0f
    3930:	b8 8b       	std	Y+16, r27	; 0x10
			LOC_Count++;
    3932:	8a 81       	ldd	r24, Y+2	; 0x02
    3934:	8f 5f       	subi	r24, 0xFF	; 255
    3936:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
	if(Copy_u8Number>0)
	{
		while(Copy_u8Number!=0)
    3938:	8d 85       	ldd	r24, Y+13	; 0x0d
    393a:	9e 85       	ldd	r25, Y+14	; 0x0e
    393c:	af 85       	ldd	r26, Y+15	; 0x0f
    393e:	b8 89       	ldd	r27, Y+16	; 0x10
    3940:	00 97       	sbiw	r24, 0x00	; 0
    3942:	a1 05       	cpc	r26, r1
    3944:	b1 05       	cpc	r27, r1
    3946:	59 f6       	brne	.-106    	; 0x38de <HCLCD_Vid4Bits_DisplayNumber+0x36>
		{
			ARR_Digits[LOC_Count] = (Copy_u8Number%10);
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    3948:	8a 81       	ldd	r24, Y+2	; 0x02
    394a:	81 50       	subi	r24, 0x01	; 1
    394c:	89 83       	std	Y+1, r24	; 0x01
    394e:	11 c0       	rjmp	.+34     	; 0x3972 <HCLCD_Vid4Bits_DisplayNumber+0xca>
		{
			HCLCD_Vid4Bits_DisplayCharacter(ARR_Digits[i]+'0');
    3950:	89 81       	ldd	r24, Y+1	; 0x01
    3952:	28 2f       	mov	r18, r24
    3954:	33 27       	eor	r19, r19
    3956:	27 fd       	sbrc	r18, 7
    3958:	30 95       	com	r19
    395a:	ce 01       	movw	r24, r28
    395c:	03 96       	adiw	r24, 0x03	; 3
    395e:	fc 01       	movw	r30, r24
    3960:	e2 0f       	add	r30, r18
    3962:	f3 1f       	adc	r31, r19
    3964:	80 81       	ld	r24, Z
    3966:	80 5d       	subi	r24, 0xD0	; 208
    3968:	0e 94 19 1c 	call	0x3832	; 0x3832 <HCLCD_Vid4Bits_DisplayCharacter>
		{
			ARR_Digits[LOC_Count] = (Copy_u8Number%10);
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    396c:	89 81       	ldd	r24, Y+1	; 0x01
    396e:	81 50       	subi	r24, 0x01	; 1
    3970:	89 83       	std	Y+1, r24	; 0x01
    3972:	89 81       	ldd	r24, Y+1	; 0x01
    3974:	88 23       	and	r24, r24
    3976:	64 f7       	brge	.-40     	; 0x3950 <HCLCD_Vid4Bits_DisplayNumber+0xa8>
    3978:	03 c0       	rjmp	.+6      	; 0x3980 <HCLCD_Vid4Bits_DisplayNumber+0xd8>
			HCLCD_Vid4Bits_DisplayCharacter(ARR_Digits[i]+'0');
		}
	}
	else
	{
		HCLCD_Vid4Bits_DisplayCharacter('0');
    397a:	80 e3       	ldi	r24, 0x30	; 48
    397c:	0e 94 19 1c 	call	0x3832	; 0x3832 <HCLCD_Vid4Bits_DisplayCharacter>
	}

}
    3980:	60 96       	adiw	r28, 0x10	; 16
    3982:	0f b6       	in	r0, 0x3f	; 63
    3984:	f8 94       	cli
    3986:	de bf       	out	0x3e, r29	; 62
    3988:	0f be       	out	0x3f, r0	; 63
    398a:	cd bf       	out	0x3d, r28	; 61
    398c:	cf 91       	pop	r28
    398e:	df 91       	pop	r29
    3990:	1f 91       	pop	r17
    3992:	0f 91       	pop	r16
    3994:	08 95       	ret

00003996 <HCLCD_Vid4Bits_SetPosition>:


void HCLCD_Vid4Bits_SetPosition(u8 Copy_u8LineNumber,u8 Copy_u8PositionNumber)
{
    3996:	df 93       	push	r29
    3998:	cf 93       	push	r28
    399a:	00 d0       	rcall	.+0      	; 0x399c <HCLCD_Vid4Bits_SetPosition+0x6>
    399c:	cd b7       	in	r28, 0x3d	; 61
    399e:	de b7       	in	r29, 0x3e	; 62
    39a0:	89 83       	std	Y+1, r24	; 0x01
    39a2:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8LineNumber==HCLCD_LINE1)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    39a4:	89 81       	ldd	r24, Y+1	; 0x01
    39a6:	81 30       	cpi	r24, 0x01	; 1
    39a8:	b9 f4       	brne	.+46     	; 0x39d8 <HCLCD_Vid4Bits_SetPosition+0x42>
    39aa:	8a 81       	ldd	r24, Y+2	; 0x02
    39ac:	80 31       	cpi	r24, 0x10	; 16
    39ae:	a0 f4       	brcc	.+40     	; 0x39d8 <HCLCD_Vid4Bits_SetPosition+0x42>
	{
		HCLCD_Vid4Bits_SendCommand((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber)>>4);
    39b0:	8a 81       	ldd	r24, Y+2	; 0x02
    39b2:	88 2f       	mov	r24, r24
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	80 58       	subi	r24, 0x80	; 128
    39b8:	9f 4f       	sbci	r25, 0xFF	; 255
    39ba:	95 95       	asr	r25
    39bc:	87 95       	ror	r24
    39be:	95 95       	asr	r25
    39c0:	87 95       	ror	r24
    39c2:	95 95       	asr	r25
    39c4:	87 95       	ror	r24
    39c6:	95 95       	asr	r25
    39c8:	87 95       	ror	r24
    39ca:	0e 94 c8 18 	call	0x3190	; 0x3190 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber));
    39ce:	8a 81       	ldd	r24, Y+2	; 0x02
    39d0:	80 58       	subi	r24, 0x80	; 128
    39d2:	0e 94 c8 18 	call	0x3190	; 0x3190 <HCLCD_Vid4Bits_SendCommand>
    39d6:	19 c0       	rjmp	.+50     	; 0x3a0a <HCLCD_Vid4Bits_SetPosition+0x74>
	}
	else if((Copy_u8LineNumber==HCLCD_LINE2)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    39d8:	89 81       	ldd	r24, Y+1	; 0x01
    39da:	82 30       	cpi	r24, 0x02	; 2
    39dc:	b1 f4       	brne	.+44     	; 0x3a0a <HCLCD_Vid4Bits_SetPosition+0x74>
    39de:	8a 81       	ldd	r24, Y+2	; 0x02
    39e0:	80 31       	cpi	r24, 0x10	; 16
    39e2:	98 f4       	brcc	.+38     	; 0x3a0a <HCLCD_Vid4Bits_SetPosition+0x74>
	{
		HCLCD_Vid4Bits_SendCommand((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber)>>4);
    39e4:	8a 81       	ldd	r24, Y+2	; 0x02
    39e6:	88 2f       	mov	r24, r24
    39e8:	90 e0       	ldi	r25, 0x00	; 0
    39ea:	80 54       	subi	r24, 0x40	; 64
    39ec:	9f 4f       	sbci	r25, 0xFF	; 255
    39ee:	95 95       	asr	r25
    39f0:	87 95       	ror	r24
    39f2:	95 95       	asr	r25
    39f4:	87 95       	ror	r24
    39f6:	95 95       	asr	r25
    39f8:	87 95       	ror	r24
    39fa:	95 95       	asr	r25
    39fc:	87 95       	ror	r24
    39fe:	0e 94 c8 18 	call	0x3190	; 0x3190 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber));
    3a02:	8a 81       	ldd	r24, Y+2	; 0x02
    3a04:	80 54       	subi	r24, 0x40	; 64
    3a06:	0e 94 c8 18 	call	0x3190	; 0x3190 <HCLCD_Vid4Bits_SendCommand>
	}
	else
	{
	}
}
    3a0a:	0f 90       	pop	r0
    3a0c:	0f 90       	pop	r0
    3a0e:	cf 91       	pop	r28
    3a10:	df 91       	pop	r29
    3a12:	08 95       	ret

00003a14 <HCLCD_Vid4Bits_CustomAlphChar>:
 }
*/

/*LCD Create SpecialCharacter 4 Bits*/
void HCLCD_Vid4Bits_CustomAlphChar(u8 Copy_u8PatternNumber, u8* PCopy_u8Pattern)
{
    3a14:	df 93       	push	r29
    3a16:	cf 93       	push	r28
    3a18:	00 d0       	rcall	.+0      	; 0x3a1a <HCLCD_Vid4Bits_CustomAlphChar+0x6>
    3a1a:	00 d0       	rcall	.+0      	; 0x3a1c <HCLCD_Vid4Bits_CustomAlphChar+0x8>
    3a1c:	cd b7       	in	r28, 0x3d	; 61
    3a1e:	de b7       	in	r29, 0x3e	; 62
    3a20:	8a 83       	std	Y+2, r24	; 0x02
    3a22:	7c 83       	std	Y+4, r23	; 0x04
    3a24:	6b 83       	std	Y+3, r22	; 0x03
	       /*you have only 8 patterns to be customized */
	      u8 i;
	      if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
    3a26:	8a 81       	ldd	r24, Y+2	; 0x02
    3a28:	88 30       	cpi	r24, 0x08	; 8
    3a2a:	98 f5       	brcc	.+102    	; 0x3a92 <HCLCD_Vid4Bits_CustomAlphChar+0x7e>
	      {
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE))>>4);
    3a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a2e:	88 2f       	mov	r24, r24
    3a30:	90 e0       	ldi	r25, 0x00	; 0
    3a32:	08 96       	adiw	r24, 0x08	; 8
    3a34:	88 0f       	add	r24, r24
    3a36:	99 1f       	adc	r25, r25
    3a38:	88 0f       	add	r24, r24
    3a3a:	99 1f       	adc	r25, r25
    3a3c:	88 0f       	add	r24, r24
    3a3e:	99 1f       	adc	r25, r25
    3a40:	95 95       	asr	r25
    3a42:	87 95       	ror	r24
    3a44:	95 95       	asr	r25
    3a46:	87 95       	ror	r24
    3a48:	95 95       	asr	r25
    3a4a:	87 95       	ror	r24
    3a4c:	95 95       	asr	r25
    3a4e:	87 95       	ror	r24
    3a50:	0e 94 c8 18 	call	0x3190	; 0x3190 <HCLCD_Vid4Bits_SendCommand>
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE)));
    3a54:	8a 81       	ldd	r24, Y+2	; 0x02
    3a56:	88 2f       	mov	r24, r24
    3a58:	90 e0       	ldi	r25, 0x00	; 0
    3a5a:	08 96       	adiw	r24, 0x08	; 8
    3a5c:	88 0f       	add	r24, r24
    3a5e:	99 1f       	adc	r25, r25
    3a60:	88 0f       	add	r24, r24
    3a62:	99 1f       	adc	r25, r25
    3a64:	88 0f       	add	r24, r24
    3a66:	99 1f       	adc	r25, r25
    3a68:	0e 94 c8 18 	call	0x3190	; 0x3190 <HCLCD_Vid4Bits_SendCommand>

	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    3a6c:	19 82       	std	Y+1, r1	; 0x01
    3a6e:	0e c0       	rjmp	.+28     	; 0x3a8c <HCLCD_Vid4Bits_CustomAlphChar+0x78>
	          {
	        	  HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8Pattern[i]);
    3a70:	89 81       	ldd	r24, Y+1	; 0x01
    3a72:	28 2f       	mov	r18, r24
    3a74:	30 e0       	ldi	r19, 0x00	; 0
    3a76:	8b 81       	ldd	r24, Y+3	; 0x03
    3a78:	9c 81       	ldd	r25, Y+4	; 0x04
    3a7a:	fc 01       	movw	r30, r24
    3a7c:	e2 0f       	add	r30, r18
    3a7e:	f3 1f       	adc	r31, r19
    3a80:	80 81       	ld	r24, Z
    3a82:	0e 94 19 1c 	call	0x3832	; 0x3832 <HCLCD_Vid4Bits_DisplayCharacter>
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE))>>4);
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE)));

	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    3a86:	89 81       	ldd	r24, Y+1	; 0x01
    3a88:	8f 5f       	subi	r24, 0xFF	; 255
    3a8a:	89 83       	std	Y+1, r24	; 0x01
    3a8c:	89 81       	ldd	r24, Y+1	; 0x01
    3a8e:	88 30       	cpi	r24, 0x08	; 8
    3a90:	78 f3       	brcs	.-34     	; 0x3a70 <HCLCD_Vid4Bits_CustomAlphChar+0x5c>
	          {
	        	  HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8Pattern[i]);
	          }
	      }
}
    3a92:	0f 90       	pop	r0
    3a94:	0f 90       	pop	r0
    3a96:	0f 90       	pop	r0
    3a98:	0f 90       	pop	r0
    3a9a:	cf 91       	pop	r28
    3a9c:	df 91       	pop	r29
    3a9e:	08 95       	ret

00003aa0 <HCLCD_Vid4Bits_ClearScreen>:
/**/
void HCLCD_Vid4Bits_ClearScreen(void)
{
    3aa0:	df 93       	push	r29
    3aa2:	cf 93       	push	r28
    3aa4:	cd b7       	in	r28, 0x3d	; 61
    3aa6:	de b7       	in	r29, 0x3e	; 62
    3aa8:	2e 97       	sbiw	r28, 0x0e	; 14
    3aaa:	0f b6       	in	r0, 0x3f	; 63
    3aac:	f8 94       	cli
    3aae:	de bf       	out	0x3e, r29	; 62
    3ab0:	0f be       	out	0x3f, r0	; 63
    3ab2:	cd bf       	out	0x3d, r28	; 61
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR>>4);
    3ab4:	80 e0       	ldi	r24, 0x00	; 0
    3ab6:	0e 94 c8 18 	call	0x3190	; 0x3190 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR);
    3aba:	81 e0       	ldi	r24, 0x01	; 1
    3abc:	0e 94 c8 18 	call	0x3190	; 0x3190 <HCLCD_Vid4Bits_SendCommand>
    3ac0:	80 e0       	ldi	r24, 0x00	; 0
    3ac2:	90 e0       	ldi	r25, 0x00	; 0
    3ac4:	a0 e0       	ldi	r26, 0x00	; 0
    3ac6:	b0 e4       	ldi	r27, 0x40	; 64
    3ac8:	8b 87       	std	Y+11, r24	; 0x0b
    3aca:	9c 87       	std	Y+12, r25	; 0x0c
    3acc:	ad 87       	std	Y+13, r26	; 0x0d
    3ace:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ad0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ad2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ad4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ad6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ad8:	20 e0       	ldi	r18, 0x00	; 0
    3ada:	30 e0       	ldi	r19, 0x00	; 0
    3adc:	4a ef       	ldi	r20, 0xFA	; 250
    3ade:	54 e4       	ldi	r21, 0x44	; 68
    3ae0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ae4:	dc 01       	movw	r26, r24
    3ae6:	cb 01       	movw	r24, r22
    3ae8:	8f 83       	std	Y+7, r24	; 0x07
    3aea:	98 87       	std	Y+8, r25	; 0x08
    3aec:	a9 87       	std	Y+9, r26	; 0x09
    3aee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3af0:	6f 81       	ldd	r22, Y+7	; 0x07
    3af2:	78 85       	ldd	r23, Y+8	; 0x08
    3af4:	89 85       	ldd	r24, Y+9	; 0x09
    3af6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3af8:	20 e0       	ldi	r18, 0x00	; 0
    3afa:	30 e0       	ldi	r19, 0x00	; 0
    3afc:	40 e8       	ldi	r20, 0x80	; 128
    3afe:	5f e3       	ldi	r21, 0x3F	; 63
    3b00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b04:	88 23       	and	r24, r24
    3b06:	2c f4       	brge	.+10     	; 0x3b12 <HCLCD_Vid4Bits_ClearScreen+0x72>
		__ticks = 1;
    3b08:	81 e0       	ldi	r24, 0x01	; 1
    3b0a:	90 e0       	ldi	r25, 0x00	; 0
    3b0c:	9e 83       	std	Y+6, r25	; 0x06
    3b0e:	8d 83       	std	Y+5, r24	; 0x05
    3b10:	3f c0       	rjmp	.+126    	; 0x3b90 <HCLCD_Vid4Bits_ClearScreen+0xf0>
	else if (__tmp > 65535)
    3b12:	6f 81       	ldd	r22, Y+7	; 0x07
    3b14:	78 85       	ldd	r23, Y+8	; 0x08
    3b16:	89 85       	ldd	r24, Y+9	; 0x09
    3b18:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b1a:	20 e0       	ldi	r18, 0x00	; 0
    3b1c:	3f ef       	ldi	r19, 0xFF	; 255
    3b1e:	4f e7       	ldi	r20, 0x7F	; 127
    3b20:	57 e4       	ldi	r21, 0x47	; 71
    3b22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b26:	18 16       	cp	r1, r24
    3b28:	4c f5       	brge	.+82     	; 0x3b7c <HCLCD_Vid4Bits_ClearScreen+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b30:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b32:	20 e0       	ldi	r18, 0x00	; 0
    3b34:	30 e0       	ldi	r19, 0x00	; 0
    3b36:	40 e2       	ldi	r20, 0x20	; 32
    3b38:	51 e4       	ldi	r21, 0x41	; 65
    3b3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b3e:	dc 01       	movw	r26, r24
    3b40:	cb 01       	movw	r24, r22
    3b42:	bc 01       	movw	r22, r24
    3b44:	cd 01       	movw	r24, r26
    3b46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b4a:	dc 01       	movw	r26, r24
    3b4c:	cb 01       	movw	r24, r22
    3b4e:	9e 83       	std	Y+6, r25	; 0x06
    3b50:	8d 83       	std	Y+5, r24	; 0x05
    3b52:	0f c0       	rjmp	.+30     	; 0x3b72 <HCLCD_Vid4Bits_ClearScreen+0xd2>
    3b54:	88 ec       	ldi	r24, 0xC8	; 200
    3b56:	90 e0       	ldi	r25, 0x00	; 0
    3b58:	9c 83       	std	Y+4, r25	; 0x04
    3b5a:	8b 83       	std	Y+3, r24	; 0x03
    3b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b5e:	9c 81       	ldd	r25, Y+4	; 0x04
    3b60:	01 97       	sbiw	r24, 0x01	; 1
    3b62:	f1 f7       	brne	.-4      	; 0x3b60 <HCLCD_Vid4Bits_ClearScreen+0xc0>
    3b64:	9c 83       	std	Y+4, r25	; 0x04
    3b66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b68:	8d 81       	ldd	r24, Y+5	; 0x05
    3b6a:	9e 81       	ldd	r25, Y+6	; 0x06
    3b6c:	01 97       	sbiw	r24, 0x01	; 1
    3b6e:	9e 83       	std	Y+6, r25	; 0x06
    3b70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b72:	8d 81       	ldd	r24, Y+5	; 0x05
    3b74:	9e 81       	ldd	r25, Y+6	; 0x06
    3b76:	00 97       	sbiw	r24, 0x00	; 0
    3b78:	69 f7       	brne	.-38     	; 0x3b54 <HCLCD_Vid4Bits_ClearScreen+0xb4>
    3b7a:	14 c0       	rjmp	.+40     	; 0x3ba4 <HCLCD_Vid4Bits_ClearScreen+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b7c:	6f 81       	ldd	r22, Y+7	; 0x07
    3b7e:	78 85       	ldd	r23, Y+8	; 0x08
    3b80:	89 85       	ldd	r24, Y+9	; 0x09
    3b82:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b88:	dc 01       	movw	r26, r24
    3b8a:	cb 01       	movw	r24, r22
    3b8c:	9e 83       	std	Y+6, r25	; 0x06
    3b8e:	8d 83       	std	Y+5, r24	; 0x05
    3b90:	8d 81       	ldd	r24, Y+5	; 0x05
    3b92:	9e 81       	ldd	r25, Y+6	; 0x06
    3b94:	9a 83       	std	Y+2, r25	; 0x02
    3b96:	89 83       	std	Y+1, r24	; 0x01
    3b98:	89 81       	ldd	r24, Y+1	; 0x01
    3b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b9c:	01 97       	sbiw	r24, 0x01	; 1
    3b9e:	f1 f7       	brne	.-4      	; 0x3b9c <HCLCD_Vid4Bits_ClearScreen+0xfc>
    3ba0:	9a 83       	std	Y+2, r25	; 0x02
    3ba2:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(2);
}
    3ba4:	2e 96       	adiw	r28, 0x0e	; 14
    3ba6:	0f b6       	in	r0, 0x3f	; 63
    3ba8:	f8 94       	cli
    3baa:	de bf       	out	0x3e, r29	; 62
    3bac:	0f be       	out	0x3f, r0	; 63
    3bae:	cd bf       	out	0x3d, r28	; 61
    3bb0:	cf 91       	pop	r28
    3bb2:	df 91       	pop	r29
    3bb4:	08 95       	ret

00003bb6 <HCLCD_Vid4Bits_DisplayShiftLeft>:
/**/
 void HCLCD_Vid4Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
    3bb6:	df 93       	push	r29
    3bb8:	cf 93       	push	r28
    3bba:	cd b7       	in	r28, 0x3d	; 61
    3bbc:	de b7       	in	r29, 0x3e	; 62
    3bbe:	60 97       	sbiw	r28, 0x10	; 16
    3bc0:	0f b6       	in	r0, 0x3f	; 63
    3bc2:	f8 94       	cli
    3bc4:	de bf       	out	0x3e, r29	; 62
    3bc6:	0f be       	out	0x3f, r0	; 63
    3bc8:	cd bf       	out	0x3d, r28	; 61
    3bca:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    3bcc:	1f 86       	std	Y+15, r1	; 0x0f
    3bce:	7b c0       	rjmp	.+246    	; 0x3cc6 <HCLCD_Vid4Bits_DisplayShiftLeft+0x110>
 {
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT>>4);
    3bd0:	81 e0       	ldi	r24, 0x01	; 1
    3bd2:	0e 94 c8 18 	call	0x3190	; 0x3190 <HCLCD_Vid4Bits_SendCommand>
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT);
    3bd6:	88 e1       	ldi	r24, 0x18	; 24
    3bd8:	0e 94 c8 18 	call	0x3190	; 0x3190 <HCLCD_Vid4Bits_SendCommand>
    3bdc:	80 e0       	ldi	r24, 0x00	; 0
    3bde:	90 e0       	ldi	r25, 0x00	; 0
    3be0:	a6 e9       	ldi	r26, 0x96	; 150
    3be2:	b3 e4       	ldi	r27, 0x43	; 67
    3be4:	8b 87       	std	Y+11, r24	; 0x0b
    3be6:	9c 87       	std	Y+12, r25	; 0x0c
    3be8:	ad 87       	std	Y+13, r26	; 0x0d
    3bea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bec:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bee:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bf0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bf2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bf4:	20 e0       	ldi	r18, 0x00	; 0
    3bf6:	30 e0       	ldi	r19, 0x00	; 0
    3bf8:	4a ef       	ldi	r20, 0xFA	; 250
    3bfa:	54 e4       	ldi	r21, 0x44	; 68
    3bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c00:	dc 01       	movw	r26, r24
    3c02:	cb 01       	movw	r24, r22
    3c04:	8f 83       	std	Y+7, r24	; 0x07
    3c06:	98 87       	std	Y+8, r25	; 0x08
    3c08:	a9 87       	std	Y+9, r26	; 0x09
    3c0a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c0c:	6f 81       	ldd	r22, Y+7	; 0x07
    3c0e:	78 85       	ldd	r23, Y+8	; 0x08
    3c10:	89 85       	ldd	r24, Y+9	; 0x09
    3c12:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c14:	20 e0       	ldi	r18, 0x00	; 0
    3c16:	30 e0       	ldi	r19, 0x00	; 0
    3c18:	40 e8       	ldi	r20, 0x80	; 128
    3c1a:	5f e3       	ldi	r21, 0x3F	; 63
    3c1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c20:	88 23       	and	r24, r24
    3c22:	2c f4       	brge	.+10     	; 0x3c2e <HCLCD_Vid4Bits_DisplayShiftLeft+0x78>
		__ticks = 1;
    3c24:	81 e0       	ldi	r24, 0x01	; 1
    3c26:	90 e0       	ldi	r25, 0x00	; 0
    3c28:	9e 83       	std	Y+6, r25	; 0x06
    3c2a:	8d 83       	std	Y+5, r24	; 0x05
    3c2c:	3f c0       	rjmp	.+126    	; 0x3cac <HCLCD_Vid4Bits_DisplayShiftLeft+0xf6>
	else if (__tmp > 65535)
    3c2e:	6f 81       	ldd	r22, Y+7	; 0x07
    3c30:	78 85       	ldd	r23, Y+8	; 0x08
    3c32:	89 85       	ldd	r24, Y+9	; 0x09
    3c34:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c36:	20 e0       	ldi	r18, 0x00	; 0
    3c38:	3f ef       	ldi	r19, 0xFF	; 255
    3c3a:	4f e7       	ldi	r20, 0x7F	; 127
    3c3c:	57 e4       	ldi	r21, 0x47	; 71
    3c3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c42:	18 16       	cp	r1, r24
    3c44:	4c f5       	brge	.+82     	; 0x3c98 <HCLCD_Vid4Bits_DisplayShiftLeft+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c46:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c48:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c4e:	20 e0       	ldi	r18, 0x00	; 0
    3c50:	30 e0       	ldi	r19, 0x00	; 0
    3c52:	40 e2       	ldi	r20, 0x20	; 32
    3c54:	51 e4       	ldi	r21, 0x41	; 65
    3c56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c5a:	dc 01       	movw	r26, r24
    3c5c:	cb 01       	movw	r24, r22
    3c5e:	bc 01       	movw	r22, r24
    3c60:	cd 01       	movw	r24, r26
    3c62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c66:	dc 01       	movw	r26, r24
    3c68:	cb 01       	movw	r24, r22
    3c6a:	9e 83       	std	Y+6, r25	; 0x06
    3c6c:	8d 83       	std	Y+5, r24	; 0x05
    3c6e:	0f c0       	rjmp	.+30     	; 0x3c8e <HCLCD_Vid4Bits_DisplayShiftLeft+0xd8>
    3c70:	88 ec       	ldi	r24, 0xC8	; 200
    3c72:	90 e0       	ldi	r25, 0x00	; 0
    3c74:	9c 83       	std	Y+4, r25	; 0x04
    3c76:	8b 83       	std	Y+3, r24	; 0x03
    3c78:	8b 81       	ldd	r24, Y+3	; 0x03
    3c7a:	9c 81       	ldd	r25, Y+4	; 0x04
    3c7c:	01 97       	sbiw	r24, 0x01	; 1
    3c7e:	f1 f7       	brne	.-4      	; 0x3c7c <HCLCD_Vid4Bits_DisplayShiftLeft+0xc6>
    3c80:	9c 83       	std	Y+4, r25	; 0x04
    3c82:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c84:	8d 81       	ldd	r24, Y+5	; 0x05
    3c86:	9e 81       	ldd	r25, Y+6	; 0x06
    3c88:	01 97       	sbiw	r24, 0x01	; 1
    3c8a:	9e 83       	std	Y+6, r25	; 0x06
    3c8c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c8e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c90:	9e 81       	ldd	r25, Y+6	; 0x06
    3c92:	00 97       	sbiw	r24, 0x00	; 0
    3c94:	69 f7       	brne	.-38     	; 0x3c70 <HCLCD_Vid4Bits_DisplayShiftLeft+0xba>
    3c96:	14 c0       	rjmp	.+40     	; 0x3cc0 <HCLCD_Vid4Bits_DisplayShiftLeft+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c98:	6f 81       	ldd	r22, Y+7	; 0x07
    3c9a:	78 85       	ldd	r23, Y+8	; 0x08
    3c9c:	89 85       	ldd	r24, Y+9	; 0x09
    3c9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ca0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ca4:	dc 01       	movw	r26, r24
    3ca6:	cb 01       	movw	r24, r22
    3ca8:	9e 83       	std	Y+6, r25	; 0x06
    3caa:	8d 83       	std	Y+5, r24	; 0x05
    3cac:	8d 81       	ldd	r24, Y+5	; 0x05
    3cae:	9e 81       	ldd	r25, Y+6	; 0x06
    3cb0:	9a 83       	std	Y+2, r25	; 0x02
    3cb2:	89 83       	std	Y+1, r24	; 0x01
    3cb4:	89 81       	ldd	r24, Y+1	; 0x01
    3cb6:	9a 81       	ldd	r25, Y+2	; 0x02
    3cb8:	01 97       	sbiw	r24, 0x01	; 1
    3cba:	f1 f7       	brne	.-4      	; 0x3cb8 <HCLCD_Vid4Bits_DisplayShiftLeft+0x102>
    3cbc:	9a 83       	std	Y+2, r25	; 0x02
    3cbe:	89 83       	std	Y+1, r24	; 0x01
}
/**/
 void HCLCD_Vid4Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    3cc0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cc2:	8f 5f       	subi	r24, 0xFF	; 255
    3cc4:	8f 87       	std	Y+15, r24	; 0x0f
    3cc6:	9f 85       	ldd	r25, Y+15	; 0x0f
    3cc8:	88 89       	ldd	r24, Y+16	; 0x10
    3cca:	98 17       	cp	r25, r24
    3ccc:	08 f4       	brcc	.+2      	; 0x3cd0 <HCLCD_Vid4Bits_DisplayShiftLeft+0x11a>
    3cce:	80 cf       	rjmp	.-256    	; 0x3bd0 <HCLCD_Vid4Bits_DisplayShiftLeft+0x1a>
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT>>4);
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT);

  _delay_ms(300);
 }
}
    3cd0:	60 96       	adiw	r28, 0x10	; 16
    3cd2:	0f b6       	in	r0, 0x3f	; 63
    3cd4:	f8 94       	cli
    3cd6:	de bf       	out	0x3e, r29	; 62
    3cd8:	0f be       	out	0x3f, r0	; 63
    3cda:	cd bf       	out	0x3d, r28	; 61
    3cdc:	cf 91       	pop	r28
    3cde:	df 91       	pop	r29
    3ce0:	08 95       	ret

00003ce2 <HCLCD_Vid4Bits_DisplayShiftRight>:
/**/
 void HCLCD_Vid4Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
    3ce2:	df 93       	push	r29
    3ce4:	cf 93       	push	r28
    3ce6:	cd b7       	in	r28, 0x3d	; 61
    3ce8:	de b7       	in	r29, 0x3e	; 62
    3cea:	60 97       	sbiw	r28, 0x10	; 16
    3cec:	0f b6       	in	r0, 0x3f	; 63
    3cee:	f8 94       	cli
    3cf0:	de bf       	out	0x3e, r29	; 62
    3cf2:	0f be       	out	0x3f, r0	; 63
    3cf4:	cd bf       	out	0x3d, r28	; 61
    3cf6:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    3cf8:	1f 86       	std	Y+15, r1	; 0x0f
    3cfa:	7b c0       	rjmp	.+246    	; 0x3df2 <HCLCD_Vid4Bits_DisplayShiftRight+0x110>
	{
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT>>4);
    3cfc:	81 e0       	ldi	r24, 0x01	; 1
    3cfe:	0e 94 c8 18 	call	0x3190	; 0x3190 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT);
    3d02:	8c e1       	ldi	r24, 0x1C	; 28
    3d04:	0e 94 c8 18 	call	0x3190	; 0x3190 <HCLCD_Vid4Bits_SendCommand>
    3d08:	80 e0       	ldi	r24, 0x00	; 0
    3d0a:	90 e0       	ldi	r25, 0x00	; 0
    3d0c:	a6 e9       	ldi	r26, 0x96	; 150
    3d0e:	b3 e4       	ldi	r27, 0x43	; 67
    3d10:	8b 87       	std	Y+11, r24	; 0x0b
    3d12:	9c 87       	std	Y+12, r25	; 0x0c
    3d14:	ad 87       	std	Y+13, r26	; 0x0d
    3d16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d18:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d20:	20 e0       	ldi	r18, 0x00	; 0
    3d22:	30 e0       	ldi	r19, 0x00	; 0
    3d24:	4a ef       	ldi	r20, 0xFA	; 250
    3d26:	54 e4       	ldi	r21, 0x44	; 68
    3d28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d2c:	dc 01       	movw	r26, r24
    3d2e:	cb 01       	movw	r24, r22
    3d30:	8f 83       	std	Y+7, r24	; 0x07
    3d32:	98 87       	std	Y+8, r25	; 0x08
    3d34:	a9 87       	std	Y+9, r26	; 0x09
    3d36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d38:	6f 81       	ldd	r22, Y+7	; 0x07
    3d3a:	78 85       	ldd	r23, Y+8	; 0x08
    3d3c:	89 85       	ldd	r24, Y+9	; 0x09
    3d3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d40:	20 e0       	ldi	r18, 0x00	; 0
    3d42:	30 e0       	ldi	r19, 0x00	; 0
    3d44:	40 e8       	ldi	r20, 0x80	; 128
    3d46:	5f e3       	ldi	r21, 0x3F	; 63
    3d48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d4c:	88 23       	and	r24, r24
    3d4e:	2c f4       	brge	.+10     	; 0x3d5a <HCLCD_Vid4Bits_DisplayShiftRight+0x78>
		__ticks = 1;
    3d50:	81 e0       	ldi	r24, 0x01	; 1
    3d52:	90 e0       	ldi	r25, 0x00	; 0
    3d54:	9e 83       	std	Y+6, r25	; 0x06
    3d56:	8d 83       	std	Y+5, r24	; 0x05
    3d58:	3f c0       	rjmp	.+126    	; 0x3dd8 <HCLCD_Vid4Bits_DisplayShiftRight+0xf6>
	else if (__tmp > 65535)
    3d5a:	6f 81       	ldd	r22, Y+7	; 0x07
    3d5c:	78 85       	ldd	r23, Y+8	; 0x08
    3d5e:	89 85       	ldd	r24, Y+9	; 0x09
    3d60:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d62:	20 e0       	ldi	r18, 0x00	; 0
    3d64:	3f ef       	ldi	r19, 0xFF	; 255
    3d66:	4f e7       	ldi	r20, 0x7F	; 127
    3d68:	57 e4       	ldi	r21, 0x47	; 71
    3d6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d6e:	18 16       	cp	r1, r24
    3d70:	4c f5       	brge	.+82     	; 0x3dc4 <HCLCD_Vid4Bits_DisplayShiftRight+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d72:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d74:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d76:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d78:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d7a:	20 e0       	ldi	r18, 0x00	; 0
    3d7c:	30 e0       	ldi	r19, 0x00	; 0
    3d7e:	40 e2       	ldi	r20, 0x20	; 32
    3d80:	51 e4       	ldi	r21, 0x41	; 65
    3d82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d86:	dc 01       	movw	r26, r24
    3d88:	cb 01       	movw	r24, r22
    3d8a:	bc 01       	movw	r22, r24
    3d8c:	cd 01       	movw	r24, r26
    3d8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d92:	dc 01       	movw	r26, r24
    3d94:	cb 01       	movw	r24, r22
    3d96:	9e 83       	std	Y+6, r25	; 0x06
    3d98:	8d 83       	std	Y+5, r24	; 0x05
    3d9a:	0f c0       	rjmp	.+30     	; 0x3dba <HCLCD_Vid4Bits_DisplayShiftRight+0xd8>
    3d9c:	88 ec       	ldi	r24, 0xC8	; 200
    3d9e:	90 e0       	ldi	r25, 0x00	; 0
    3da0:	9c 83       	std	Y+4, r25	; 0x04
    3da2:	8b 83       	std	Y+3, r24	; 0x03
    3da4:	8b 81       	ldd	r24, Y+3	; 0x03
    3da6:	9c 81       	ldd	r25, Y+4	; 0x04
    3da8:	01 97       	sbiw	r24, 0x01	; 1
    3daa:	f1 f7       	brne	.-4      	; 0x3da8 <HCLCD_Vid4Bits_DisplayShiftRight+0xc6>
    3dac:	9c 83       	std	Y+4, r25	; 0x04
    3dae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3db0:	8d 81       	ldd	r24, Y+5	; 0x05
    3db2:	9e 81       	ldd	r25, Y+6	; 0x06
    3db4:	01 97       	sbiw	r24, 0x01	; 1
    3db6:	9e 83       	std	Y+6, r25	; 0x06
    3db8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dba:	8d 81       	ldd	r24, Y+5	; 0x05
    3dbc:	9e 81       	ldd	r25, Y+6	; 0x06
    3dbe:	00 97       	sbiw	r24, 0x00	; 0
    3dc0:	69 f7       	brne	.-38     	; 0x3d9c <HCLCD_Vid4Bits_DisplayShiftRight+0xba>
    3dc2:	14 c0       	rjmp	.+40     	; 0x3dec <HCLCD_Vid4Bits_DisplayShiftRight+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dc4:	6f 81       	ldd	r22, Y+7	; 0x07
    3dc6:	78 85       	ldd	r23, Y+8	; 0x08
    3dc8:	89 85       	ldd	r24, Y+9	; 0x09
    3dca:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dd0:	dc 01       	movw	r26, r24
    3dd2:	cb 01       	movw	r24, r22
    3dd4:	9e 83       	std	Y+6, r25	; 0x06
    3dd6:	8d 83       	std	Y+5, r24	; 0x05
    3dd8:	8d 81       	ldd	r24, Y+5	; 0x05
    3dda:	9e 81       	ldd	r25, Y+6	; 0x06
    3ddc:	9a 83       	std	Y+2, r25	; 0x02
    3dde:	89 83       	std	Y+1, r24	; 0x01
    3de0:	89 81       	ldd	r24, Y+1	; 0x01
    3de2:	9a 81       	ldd	r25, Y+2	; 0x02
    3de4:	01 97       	sbiw	r24, 0x01	; 1
    3de6:	f1 f7       	brne	.-4      	; 0x3de4 <HCLCD_Vid4Bits_DisplayShiftRight+0x102>
    3de8:	9a 83       	std	Y+2, r25	; 0x02
    3dea:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid4Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    3dec:	8f 85       	ldd	r24, Y+15	; 0x0f
    3dee:	8f 5f       	subi	r24, 0xFF	; 255
    3df0:	8f 87       	std	Y+15, r24	; 0x0f
    3df2:	9f 85       	ldd	r25, Y+15	; 0x0f
    3df4:	88 89       	ldd	r24, Y+16	; 0x10
    3df6:	98 17       	cp	r25, r24
    3df8:	08 f4       	brcc	.+2      	; 0x3dfc <HCLCD_Vid4Bits_DisplayShiftRight+0x11a>
    3dfa:	80 cf       	rjmp	.-256    	; 0x3cfc <HCLCD_Vid4Bits_DisplayShiftRight+0x1a>
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT>>4);
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT);

      _delay_ms(300);
	}
}
    3dfc:	60 96       	adiw	r28, 0x10	; 16
    3dfe:	0f b6       	in	r0, 0x3f	; 63
    3e00:	f8 94       	cli
    3e02:	de bf       	out	0x3e, r29	; 62
    3e04:	0f be       	out	0x3f, r0	; 63
    3e06:	cd bf       	out	0x3d, r28	; 61
    3e08:	cf 91       	pop	r28
    3e0a:	df 91       	pop	r29
    3e0c:	08 95       	ret

00003e0e <HCLCD_Vid4Bits_CursorShiftLeft>:
 /**/
 void HCLCD_Vid4Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
    3e0e:	df 93       	push	r29
    3e10:	cf 93       	push	r28
    3e12:	cd b7       	in	r28, 0x3d	; 61
    3e14:	de b7       	in	r29, 0x3e	; 62
    3e16:	60 97       	sbiw	r28, 0x10	; 16
    3e18:	0f b6       	in	r0, 0x3f	; 63
    3e1a:	f8 94       	cli
    3e1c:	de bf       	out	0x3e, r29	; 62
    3e1e:	0f be       	out	0x3f, r0	; 63
    3e20:	cd bf       	out	0x3d, r28	; 61
    3e22:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    3e24:	1f 86       	std	Y+15, r1	; 0x0f
    3e26:	7b c0       	rjmp	.+246    	; 0x3f1e <HCLCD_Vid4Bits_CursorShiftLeft+0x110>
 {
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT>>4);
    3e28:	81 e0       	ldi	r24, 0x01	; 1
    3e2a:	0e 94 c8 18 	call	0x3190	; 0x3190 <HCLCD_Vid4Bits_SendCommand>
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT);
    3e2e:	80 e1       	ldi	r24, 0x10	; 16
    3e30:	0e 94 c8 18 	call	0x3190	; 0x3190 <HCLCD_Vid4Bits_SendCommand>
    3e34:	80 e0       	ldi	r24, 0x00	; 0
    3e36:	90 e0       	ldi	r25, 0x00	; 0
    3e38:	a6 e9       	ldi	r26, 0x96	; 150
    3e3a:	b3 e4       	ldi	r27, 0x43	; 67
    3e3c:	8b 87       	std	Y+11, r24	; 0x0b
    3e3e:	9c 87       	std	Y+12, r25	; 0x0c
    3e40:	ad 87       	std	Y+13, r26	; 0x0d
    3e42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e44:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e46:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e48:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e4c:	20 e0       	ldi	r18, 0x00	; 0
    3e4e:	30 e0       	ldi	r19, 0x00	; 0
    3e50:	4a ef       	ldi	r20, 0xFA	; 250
    3e52:	54 e4       	ldi	r21, 0x44	; 68
    3e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e58:	dc 01       	movw	r26, r24
    3e5a:	cb 01       	movw	r24, r22
    3e5c:	8f 83       	std	Y+7, r24	; 0x07
    3e5e:	98 87       	std	Y+8, r25	; 0x08
    3e60:	a9 87       	std	Y+9, r26	; 0x09
    3e62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e64:	6f 81       	ldd	r22, Y+7	; 0x07
    3e66:	78 85       	ldd	r23, Y+8	; 0x08
    3e68:	89 85       	ldd	r24, Y+9	; 0x09
    3e6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e6c:	20 e0       	ldi	r18, 0x00	; 0
    3e6e:	30 e0       	ldi	r19, 0x00	; 0
    3e70:	40 e8       	ldi	r20, 0x80	; 128
    3e72:	5f e3       	ldi	r21, 0x3F	; 63
    3e74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e78:	88 23       	and	r24, r24
    3e7a:	2c f4       	brge	.+10     	; 0x3e86 <HCLCD_Vid4Bits_CursorShiftLeft+0x78>
		__ticks = 1;
    3e7c:	81 e0       	ldi	r24, 0x01	; 1
    3e7e:	90 e0       	ldi	r25, 0x00	; 0
    3e80:	9e 83       	std	Y+6, r25	; 0x06
    3e82:	8d 83       	std	Y+5, r24	; 0x05
    3e84:	3f c0       	rjmp	.+126    	; 0x3f04 <HCLCD_Vid4Bits_CursorShiftLeft+0xf6>
	else if (__tmp > 65535)
    3e86:	6f 81       	ldd	r22, Y+7	; 0x07
    3e88:	78 85       	ldd	r23, Y+8	; 0x08
    3e8a:	89 85       	ldd	r24, Y+9	; 0x09
    3e8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e8e:	20 e0       	ldi	r18, 0x00	; 0
    3e90:	3f ef       	ldi	r19, 0xFF	; 255
    3e92:	4f e7       	ldi	r20, 0x7F	; 127
    3e94:	57 e4       	ldi	r21, 0x47	; 71
    3e96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e9a:	18 16       	cp	r1, r24
    3e9c:	4c f5       	brge	.+82     	; 0x3ef0 <HCLCD_Vid4Bits_CursorShiftLeft+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ea0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ea2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ea4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ea6:	20 e0       	ldi	r18, 0x00	; 0
    3ea8:	30 e0       	ldi	r19, 0x00	; 0
    3eaa:	40 e2       	ldi	r20, 0x20	; 32
    3eac:	51 e4       	ldi	r21, 0x41	; 65
    3eae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eb2:	dc 01       	movw	r26, r24
    3eb4:	cb 01       	movw	r24, r22
    3eb6:	bc 01       	movw	r22, r24
    3eb8:	cd 01       	movw	r24, r26
    3eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ebe:	dc 01       	movw	r26, r24
    3ec0:	cb 01       	movw	r24, r22
    3ec2:	9e 83       	std	Y+6, r25	; 0x06
    3ec4:	8d 83       	std	Y+5, r24	; 0x05
    3ec6:	0f c0       	rjmp	.+30     	; 0x3ee6 <HCLCD_Vid4Bits_CursorShiftLeft+0xd8>
    3ec8:	88 ec       	ldi	r24, 0xC8	; 200
    3eca:	90 e0       	ldi	r25, 0x00	; 0
    3ecc:	9c 83       	std	Y+4, r25	; 0x04
    3ece:	8b 83       	std	Y+3, r24	; 0x03
    3ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ed2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ed4:	01 97       	sbiw	r24, 0x01	; 1
    3ed6:	f1 f7       	brne	.-4      	; 0x3ed4 <HCLCD_Vid4Bits_CursorShiftLeft+0xc6>
    3ed8:	9c 83       	std	Y+4, r25	; 0x04
    3eda:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3edc:	8d 81       	ldd	r24, Y+5	; 0x05
    3ede:	9e 81       	ldd	r25, Y+6	; 0x06
    3ee0:	01 97       	sbiw	r24, 0x01	; 1
    3ee2:	9e 83       	std	Y+6, r25	; 0x06
    3ee4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ee6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ee8:	9e 81       	ldd	r25, Y+6	; 0x06
    3eea:	00 97       	sbiw	r24, 0x00	; 0
    3eec:	69 f7       	brne	.-38     	; 0x3ec8 <HCLCD_Vid4Bits_CursorShiftLeft+0xba>
    3eee:	14 c0       	rjmp	.+40     	; 0x3f18 <HCLCD_Vid4Bits_CursorShiftLeft+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ef0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ef2:	78 85       	ldd	r23, Y+8	; 0x08
    3ef4:	89 85       	ldd	r24, Y+9	; 0x09
    3ef6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3efc:	dc 01       	movw	r26, r24
    3efe:	cb 01       	movw	r24, r22
    3f00:	9e 83       	std	Y+6, r25	; 0x06
    3f02:	8d 83       	std	Y+5, r24	; 0x05
    3f04:	8d 81       	ldd	r24, Y+5	; 0x05
    3f06:	9e 81       	ldd	r25, Y+6	; 0x06
    3f08:	9a 83       	std	Y+2, r25	; 0x02
    3f0a:	89 83       	std	Y+1, r24	; 0x01
    3f0c:	89 81       	ldd	r24, Y+1	; 0x01
    3f0e:	9a 81       	ldd	r25, Y+2	; 0x02
    3f10:	01 97       	sbiw	r24, 0x01	; 1
    3f12:	f1 f7       	brne	.-4      	; 0x3f10 <HCLCD_Vid4Bits_CursorShiftLeft+0x102>
    3f14:	9a 83       	std	Y+2, r25	; 0x02
    3f16:	89 83       	std	Y+1, r24	; 0x01
}
 /**/
 void HCLCD_Vid4Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    3f18:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f1a:	8f 5f       	subi	r24, 0xFF	; 255
    3f1c:	8f 87       	std	Y+15, r24	; 0x0f
    3f1e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3f20:	88 89       	ldd	r24, Y+16	; 0x10
    3f22:	98 17       	cp	r25, r24
    3f24:	08 f4       	brcc	.+2      	; 0x3f28 <HCLCD_Vid4Bits_CursorShiftLeft+0x11a>
    3f26:	80 cf       	rjmp	.-256    	; 0x3e28 <HCLCD_Vid4Bits_CursorShiftLeft+0x1a>
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT>>4);
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT);

  _delay_ms(300);
 }
}
    3f28:	60 96       	adiw	r28, 0x10	; 16
    3f2a:	0f b6       	in	r0, 0x3f	; 63
    3f2c:	f8 94       	cli
    3f2e:	de bf       	out	0x3e, r29	; 62
    3f30:	0f be       	out	0x3f, r0	; 63
    3f32:	cd bf       	out	0x3d, r28	; 61
    3f34:	cf 91       	pop	r28
    3f36:	df 91       	pop	r29
    3f38:	08 95       	ret

00003f3a <HCLCD_Vid4Bits_CursorShiftRight>:
/**/
 void HCLCD_Vid4Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
    3f3a:	df 93       	push	r29
    3f3c:	cf 93       	push	r28
    3f3e:	cd b7       	in	r28, 0x3d	; 61
    3f40:	de b7       	in	r29, 0x3e	; 62
    3f42:	60 97       	sbiw	r28, 0x10	; 16
    3f44:	0f b6       	in	r0, 0x3f	; 63
    3f46:	f8 94       	cli
    3f48:	de bf       	out	0x3e, r29	; 62
    3f4a:	0f be       	out	0x3f, r0	; 63
    3f4c:	cd bf       	out	0x3d, r28	; 61
    3f4e:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    3f50:	1f 86       	std	Y+15, r1	; 0x0f
    3f52:	7b c0       	rjmp	.+246    	; 0x404a <HCLCD_Vid4Bits_CursorShiftRight+0x110>
	{
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT>>4);
    3f54:	81 e0       	ldi	r24, 0x01	; 1
    3f56:	0e 94 c8 18 	call	0x3190	; 0x3190 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT);
    3f5a:	84 e1       	ldi	r24, 0x14	; 20
    3f5c:	0e 94 c8 18 	call	0x3190	; 0x3190 <HCLCD_Vid4Bits_SendCommand>
    3f60:	80 e0       	ldi	r24, 0x00	; 0
    3f62:	90 e0       	ldi	r25, 0x00	; 0
    3f64:	a6 e9       	ldi	r26, 0x96	; 150
    3f66:	b3 e4       	ldi	r27, 0x43	; 67
    3f68:	8b 87       	std	Y+11, r24	; 0x0b
    3f6a:	9c 87       	std	Y+12, r25	; 0x0c
    3f6c:	ad 87       	std	Y+13, r26	; 0x0d
    3f6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f70:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f72:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f74:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f76:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f78:	20 e0       	ldi	r18, 0x00	; 0
    3f7a:	30 e0       	ldi	r19, 0x00	; 0
    3f7c:	4a ef       	ldi	r20, 0xFA	; 250
    3f7e:	54 e4       	ldi	r21, 0x44	; 68
    3f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f84:	dc 01       	movw	r26, r24
    3f86:	cb 01       	movw	r24, r22
    3f88:	8f 83       	std	Y+7, r24	; 0x07
    3f8a:	98 87       	std	Y+8, r25	; 0x08
    3f8c:	a9 87       	std	Y+9, r26	; 0x09
    3f8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f90:	6f 81       	ldd	r22, Y+7	; 0x07
    3f92:	78 85       	ldd	r23, Y+8	; 0x08
    3f94:	89 85       	ldd	r24, Y+9	; 0x09
    3f96:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f98:	20 e0       	ldi	r18, 0x00	; 0
    3f9a:	30 e0       	ldi	r19, 0x00	; 0
    3f9c:	40 e8       	ldi	r20, 0x80	; 128
    3f9e:	5f e3       	ldi	r21, 0x3F	; 63
    3fa0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3fa4:	88 23       	and	r24, r24
    3fa6:	2c f4       	brge	.+10     	; 0x3fb2 <HCLCD_Vid4Bits_CursorShiftRight+0x78>
		__ticks = 1;
    3fa8:	81 e0       	ldi	r24, 0x01	; 1
    3faa:	90 e0       	ldi	r25, 0x00	; 0
    3fac:	9e 83       	std	Y+6, r25	; 0x06
    3fae:	8d 83       	std	Y+5, r24	; 0x05
    3fb0:	3f c0       	rjmp	.+126    	; 0x4030 <HCLCD_Vid4Bits_CursorShiftRight+0xf6>
	else if (__tmp > 65535)
    3fb2:	6f 81       	ldd	r22, Y+7	; 0x07
    3fb4:	78 85       	ldd	r23, Y+8	; 0x08
    3fb6:	89 85       	ldd	r24, Y+9	; 0x09
    3fb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fba:	20 e0       	ldi	r18, 0x00	; 0
    3fbc:	3f ef       	ldi	r19, 0xFF	; 255
    3fbe:	4f e7       	ldi	r20, 0x7F	; 127
    3fc0:	57 e4       	ldi	r21, 0x47	; 71
    3fc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3fc6:	18 16       	cp	r1, r24
    3fc8:	4c f5       	brge	.+82     	; 0x401c <HCLCD_Vid4Bits_CursorShiftRight+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fca:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fce:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fd2:	20 e0       	ldi	r18, 0x00	; 0
    3fd4:	30 e0       	ldi	r19, 0x00	; 0
    3fd6:	40 e2       	ldi	r20, 0x20	; 32
    3fd8:	51 e4       	ldi	r21, 0x41	; 65
    3fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fde:	dc 01       	movw	r26, r24
    3fe0:	cb 01       	movw	r24, r22
    3fe2:	bc 01       	movw	r22, r24
    3fe4:	cd 01       	movw	r24, r26
    3fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fea:	dc 01       	movw	r26, r24
    3fec:	cb 01       	movw	r24, r22
    3fee:	9e 83       	std	Y+6, r25	; 0x06
    3ff0:	8d 83       	std	Y+5, r24	; 0x05
    3ff2:	0f c0       	rjmp	.+30     	; 0x4012 <HCLCD_Vid4Bits_CursorShiftRight+0xd8>
    3ff4:	88 ec       	ldi	r24, 0xC8	; 200
    3ff6:	90 e0       	ldi	r25, 0x00	; 0
    3ff8:	9c 83       	std	Y+4, r25	; 0x04
    3ffa:	8b 83       	std	Y+3, r24	; 0x03
    3ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    3ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    4000:	01 97       	sbiw	r24, 0x01	; 1
    4002:	f1 f7       	brne	.-4      	; 0x4000 <HCLCD_Vid4Bits_CursorShiftRight+0xc6>
    4004:	9c 83       	std	Y+4, r25	; 0x04
    4006:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4008:	8d 81       	ldd	r24, Y+5	; 0x05
    400a:	9e 81       	ldd	r25, Y+6	; 0x06
    400c:	01 97       	sbiw	r24, 0x01	; 1
    400e:	9e 83       	std	Y+6, r25	; 0x06
    4010:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4012:	8d 81       	ldd	r24, Y+5	; 0x05
    4014:	9e 81       	ldd	r25, Y+6	; 0x06
    4016:	00 97       	sbiw	r24, 0x00	; 0
    4018:	69 f7       	brne	.-38     	; 0x3ff4 <HCLCD_Vid4Bits_CursorShiftRight+0xba>
    401a:	14 c0       	rjmp	.+40     	; 0x4044 <HCLCD_Vid4Bits_CursorShiftRight+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    401c:	6f 81       	ldd	r22, Y+7	; 0x07
    401e:	78 85       	ldd	r23, Y+8	; 0x08
    4020:	89 85       	ldd	r24, Y+9	; 0x09
    4022:	9a 85       	ldd	r25, Y+10	; 0x0a
    4024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4028:	dc 01       	movw	r26, r24
    402a:	cb 01       	movw	r24, r22
    402c:	9e 83       	std	Y+6, r25	; 0x06
    402e:	8d 83       	std	Y+5, r24	; 0x05
    4030:	8d 81       	ldd	r24, Y+5	; 0x05
    4032:	9e 81       	ldd	r25, Y+6	; 0x06
    4034:	9a 83       	std	Y+2, r25	; 0x02
    4036:	89 83       	std	Y+1, r24	; 0x01
    4038:	89 81       	ldd	r24, Y+1	; 0x01
    403a:	9a 81       	ldd	r25, Y+2	; 0x02
    403c:	01 97       	sbiw	r24, 0x01	; 1
    403e:	f1 f7       	brne	.-4      	; 0x403c <HCLCD_Vid4Bits_CursorShiftRight+0x102>
    4040:	9a 83       	std	Y+2, r25	; 0x02
    4042:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid4Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    4044:	8f 85       	ldd	r24, Y+15	; 0x0f
    4046:	8f 5f       	subi	r24, 0xFF	; 255
    4048:	8f 87       	std	Y+15, r24	; 0x0f
    404a:	9f 85       	ldd	r25, Y+15	; 0x0f
    404c:	88 89       	ldd	r24, Y+16	; 0x10
    404e:	98 17       	cp	r25, r24
    4050:	08 f4       	brcc	.+2      	; 0x4054 <HCLCD_Vid4Bits_CursorShiftRight+0x11a>
    4052:	80 cf       	rjmp	.-256    	; 0x3f54 <HCLCD_Vid4Bits_CursorShiftRight+0x1a>
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT>>4);
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT);

      _delay_ms(300);
	}
}
    4054:	60 96       	adiw	r28, 0x10	; 16
    4056:	0f b6       	in	r0, 0x3f	; 63
    4058:	f8 94       	cli
    405a:	de bf       	out	0x3e, r29	; 62
    405c:	0f be       	out	0x3f, r0	; 63
    405e:	cd bf       	out	0x3d, r28	; 61
    4060:	cf 91       	pop	r28
    4062:	df 91       	pop	r29
    4064:	08 95       	ret

00004066 <main>:
#include"../HAL/HCLCD/HCLCD_Interface.h"
#include"../MCAL/MADC/MADC_Interface.h"
#include<util\delay.h>

int main(void)
{
    4066:	df 93       	push	r29
    4068:	cf 93       	push	r28
    406a:	cd b7       	in	r28, 0x3d	; 61
    406c:	de b7       	in	r29, 0x3e	; 62
    406e:	af 97       	sbiw	r28, 0x2f	; 47
    4070:	0f b6       	in	r0, 0x3f	; 63
    4072:	f8 94       	cli
    4074:	de bf       	out	0x3e, r29	; 62
    4076:	0f be       	out	0x3f, r0	; 63
    4078:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8ADCLM35;
	u8 Local_u8ADCLDR;
	u16 MilliVolt;
	u8 temp;

	MDIO_Error_State_SetPinDirection(PIN7,MDIO_PORTD,PIN_OUTPUT);
    407a:	87 e0       	ldi	r24, 0x07	; 7
    407c:	63 e0       	ldi	r22, 0x03	; 3
    407e:	41 e0       	ldi	r20, 0x01	; 1
    4080:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPortDirection(MDIO_PORTB,PORT_OUTPUT);
    4084:	81 e0       	ldi	r24, 0x01	; 1
    4086:	6f ef       	ldi	r22, 0xFF	; 255
    4088:	0e 94 ef 09 	call	0x13de	; 0x13de <MDIO_Error_State_SetPortDirection>

	MADC_VidInit();                                       //  Initialize ADC
    408c:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <MADC_VidInit>
	HCLCD_Vid4Bits_Init();
    4090:	0e 94 67 19 	call	0x32ce	; 0x32ce <HCLCD_Vid4Bits_Init>
	HCLCD_Vid4Bits_ClearScreen();
    4094:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <HCLCD_Vid4Bits_ClearScreen>
	HCLCD_Vid4Bits_SetPosition(1, 0);
    4098:	81 e0       	ldi	r24, 0x01	; 1
    409a:	60 e0       	ldi	r22, 0x00	; 0
    409c:	0e 94 cb 1c 	call	0x3996	; 0x3996 <HCLCD_Vid4Bits_SetPosition>

	HCLCD_Vid4Bits_DisplayString((u8*) "SMART HOME");
    40a0:	80 e6       	ldi	r24, 0x60	; 96
    40a2:	90 e0       	ldi	r25, 0x00	; 0
    40a4:	0e 94 2b 1c 	call	0x3856	; 0x3856 <HCLCD_Vid4Bits_DisplayString>
    40a8:	80 e0       	ldi	r24, 0x00	; 0
    40aa:	90 e0       	ldi	r25, 0x00	; 0
    40ac:	aa e7       	ldi	r26, 0x7A	; 122
    40ae:	b4 e4       	ldi	r27, 0x44	; 68
    40b0:	8f a3       	std	Y+39, r24	; 0x27
    40b2:	98 a7       	std	Y+40, r25	; 0x28
    40b4:	a9 a7       	std	Y+41, r26	; 0x29
    40b6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40b8:	6f a1       	ldd	r22, Y+39	; 0x27
    40ba:	78 a5       	ldd	r23, Y+40	; 0x28
    40bc:	89 a5       	ldd	r24, Y+41	; 0x29
    40be:	9a a5       	ldd	r25, Y+42	; 0x2a
    40c0:	20 e0       	ldi	r18, 0x00	; 0
    40c2:	30 e0       	ldi	r19, 0x00	; 0
    40c4:	4a ef       	ldi	r20, 0xFA	; 250
    40c6:	54 e4       	ldi	r21, 0x44	; 68
    40c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40cc:	dc 01       	movw	r26, r24
    40ce:	cb 01       	movw	r24, r22
    40d0:	8b a3       	std	Y+35, r24	; 0x23
    40d2:	9c a3       	std	Y+36, r25	; 0x24
    40d4:	ad a3       	std	Y+37, r26	; 0x25
    40d6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    40d8:	6b a1       	ldd	r22, Y+35	; 0x23
    40da:	7c a1       	ldd	r23, Y+36	; 0x24
    40dc:	8d a1       	ldd	r24, Y+37	; 0x25
    40de:	9e a1       	ldd	r25, Y+38	; 0x26
    40e0:	20 e0       	ldi	r18, 0x00	; 0
    40e2:	30 e0       	ldi	r19, 0x00	; 0
    40e4:	40 e8       	ldi	r20, 0x80	; 128
    40e6:	5f e3       	ldi	r21, 0x3F	; 63
    40e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    40ec:	88 23       	and	r24, r24
    40ee:	2c f4       	brge	.+10     	; 0x40fa <main+0x94>
		__ticks = 1;
    40f0:	81 e0       	ldi	r24, 0x01	; 1
    40f2:	90 e0       	ldi	r25, 0x00	; 0
    40f4:	9a a3       	std	Y+34, r25	; 0x22
    40f6:	89 a3       	std	Y+33, r24	; 0x21
    40f8:	3f c0       	rjmp	.+126    	; 0x4178 <main+0x112>
	else if (__tmp > 65535)
    40fa:	6b a1       	ldd	r22, Y+35	; 0x23
    40fc:	7c a1       	ldd	r23, Y+36	; 0x24
    40fe:	8d a1       	ldd	r24, Y+37	; 0x25
    4100:	9e a1       	ldd	r25, Y+38	; 0x26
    4102:	20 e0       	ldi	r18, 0x00	; 0
    4104:	3f ef       	ldi	r19, 0xFF	; 255
    4106:	4f e7       	ldi	r20, 0x7F	; 127
    4108:	57 e4       	ldi	r21, 0x47	; 71
    410a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    410e:	18 16       	cp	r1, r24
    4110:	4c f5       	brge	.+82     	; 0x4164 <main+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4112:	6f a1       	ldd	r22, Y+39	; 0x27
    4114:	78 a5       	ldd	r23, Y+40	; 0x28
    4116:	89 a5       	ldd	r24, Y+41	; 0x29
    4118:	9a a5       	ldd	r25, Y+42	; 0x2a
    411a:	20 e0       	ldi	r18, 0x00	; 0
    411c:	30 e0       	ldi	r19, 0x00	; 0
    411e:	40 e2       	ldi	r20, 0x20	; 32
    4120:	51 e4       	ldi	r21, 0x41	; 65
    4122:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4126:	dc 01       	movw	r26, r24
    4128:	cb 01       	movw	r24, r22
    412a:	bc 01       	movw	r22, r24
    412c:	cd 01       	movw	r24, r26
    412e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4132:	dc 01       	movw	r26, r24
    4134:	cb 01       	movw	r24, r22
    4136:	9a a3       	std	Y+34, r25	; 0x22
    4138:	89 a3       	std	Y+33, r24	; 0x21
    413a:	0f c0       	rjmp	.+30     	; 0x415a <main+0xf4>
    413c:	88 ec       	ldi	r24, 0xC8	; 200
    413e:	90 e0       	ldi	r25, 0x00	; 0
    4140:	98 a3       	std	Y+32, r25	; 0x20
    4142:	8f 8f       	std	Y+31, r24	; 0x1f
    4144:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4146:	98 a1       	ldd	r25, Y+32	; 0x20
    4148:	01 97       	sbiw	r24, 0x01	; 1
    414a:	f1 f7       	brne	.-4      	; 0x4148 <main+0xe2>
    414c:	98 a3       	std	Y+32, r25	; 0x20
    414e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4150:	89 a1       	ldd	r24, Y+33	; 0x21
    4152:	9a a1       	ldd	r25, Y+34	; 0x22
    4154:	01 97       	sbiw	r24, 0x01	; 1
    4156:	9a a3       	std	Y+34, r25	; 0x22
    4158:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    415a:	89 a1       	ldd	r24, Y+33	; 0x21
    415c:	9a a1       	ldd	r25, Y+34	; 0x22
    415e:	00 97       	sbiw	r24, 0x00	; 0
    4160:	69 f7       	brne	.-38     	; 0x413c <main+0xd6>
    4162:	14 c0       	rjmp	.+40     	; 0x418c <main+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4164:	6b a1       	ldd	r22, Y+35	; 0x23
    4166:	7c a1       	ldd	r23, Y+36	; 0x24
    4168:	8d a1       	ldd	r24, Y+37	; 0x25
    416a:	9e a1       	ldd	r25, Y+38	; 0x26
    416c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4170:	dc 01       	movw	r26, r24
    4172:	cb 01       	movw	r24, r22
    4174:	9a a3       	std	Y+34, r25	; 0x22
    4176:	89 a3       	std	Y+33, r24	; 0x21
    4178:	89 a1       	ldd	r24, Y+33	; 0x21
    417a:	9a a1       	ldd	r25, Y+34	; 0x22
    417c:	9e 8f       	std	Y+30, r25	; 0x1e
    417e:	8d 8f       	std	Y+29, r24	; 0x1d
    4180:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4182:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4184:	01 97       	sbiw	r24, 0x01	; 1
    4186:	f1 f7       	brne	.-4      	; 0x4184 <main+0x11e>
    4188:	9e 8f       	std	Y+30, r25	; 0x1e
    418a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	HCLCD_Vid4Bits_ClearScreen();
    418c:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <HCLCD_Vid4Bits_ClearScreen>
    4190:	80 e0       	ldi	r24, 0x00	; 0
    4192:	90 e0       	ldi	r25, 0x00	; 0
    4194:	aa e7       	ldi	r26, 0x7A	; 122
    4196:	b4 e4       	ldi	r27, 0x44	; 68
    4198:	89 8f       	std	Y+25, r24	; 0x19
    419a:	9a 8f       	std	Y+26, r25	; 0x1a
    419c:	ab 8f       	std	Y+27, r26	; 0x1b
    419e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41a0:	69 8d       	ldd	r22, Y+25	; 0x19
    41a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    41a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    41a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    41a8:	20 e0       	ldi	r18, 0x00	; 0
    41aa:	30 e0       	ldi	r19, 0x00	; 0
    41ac:	4a ef       	ldi	r20, 0xFA	; 250
    41ae:	54 e4       	ldi	r21, 0x44	; 68
    41b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41b4:	dc 01       	movw	r26, r24
    41b6:	cb 01       	movw	r24, r22
    41b8:	8d 8b       	std	Y+21, r24	; 0x15
    41ba:	9e 8b       	std	Y+22, r25	; 0x16
    41bc:	af 8b       	std	Y+23, r26	; 0x17
    41be:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    41c0:	6d 89       	ldd	r22, Y+21	; 0x15
    41c2:	7e 89       	ldd	r23, Y+22	; 0x16
    41c4:	8f 89       	ldd	r24, Y+23	; 0x17
    41c6:	98 8d       	ldd	r25, Y+24	; 0x18
    41c8:	20 e0       	ldi	r18, 0x00	; 0
    41ca:	30 e0       	ldi	r19, 0x00	; 0
    41cc:	40 e8       	ldi	r20, 0x80	; 128
    41ce:	5f e3       	ldi	r21, 0x3F	; 63
    41d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    41d4:	88 23       	and	r24, r24
    41d6:	2c f4       	brge	.+10     	; 0x41e2 <main+0x17c>
		__ticks = 1;
    41d8:	81 e0       	ldi	r24, 0x01	; 1
    41da:	90 e0       	ldi	r25, 0x00	; 0
    41dc:	9c 8b       	std	Y+20, r25	; 0x14
    41de:	8b 8b       	std	Y+19, r24	; 0x13
    41e0:	3f c0       	rjmp	.+126    	; 0x4260 <main+0x1fa>
	else if (__tmp > 65535)
    41e2:	6d 89       	ldd	r22, Y+21	; 0x15
    41e4:	7e 89       	ldd	r23, Y+22	; 0x16
    41e6:	8f 89       	ldd	r24, Y+23	; 0x17
    41e8:	98 8d       	ldd	r25, Y+24	; 0x18
    41ea:	20 e0       	ldi	r18, 0x00	; 0
    41ec:	3f ef       	ldi	r19, 0xFF	; 255
    41ee:	4f e7       	ldi	r20, 0x7F	; 127
    41f0:	57 e4       	ldi	r21, 0x47	; 71
    41f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    41f6:	18 16       	cp	r1, r24
    41f8:	4c f5       	brge	.+82     	; 0x424c <main+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41fa:	69 8d       	ldd	r22, Y+25	; 0x19
    41fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    41fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4200:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4202:	20 e0       	ldi	r18, 0x00	; 0
    4204:	30 e0       	ldi	r19, 0x00	; 0
    4206:	40 e2       	ldi	r20, 0x20	; 32
    4208:	51 e4       	ldi	r21, 0x41	; 65
    420a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    420e:	dc 01       	movw	r26, r24
    4210:	cb 01       	movw	r24, r22
    4212:	bc 01       	movw	r22, r24
    4214:	cd 01       	movw	r24, r26
    4216:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    421a:	dc 01       	movw	r26, r24
    421c:	cb 01       	movw	r24, r22
    421e:	9c 8b       	std	Y+20, r25	; 0x14
    4220:	8b 8b       	std	Y+19, r24	; 0x13
    4222:	0f c0       	rjmp	.+30     	; 0x4242 <main+0x1dc>
    4224:	88 ec       	ldi	r24, 0xC8	; 200
    4226:	90 e0       	ldi	r25, 0x00	; 0
    4228:	9a 8b       	std	Y+18, r25	; 0x12
    422a:	89 8b       	std	Y+17, r24	; 0x11
    422c:	89 89       	ldd	r24, Y+17	; 0x11
    422e:	9a 89       	ldd	r25, Y+18	; 0x12
    4230:	01 97       	sbiw	r24, 0x01	; 1
    4232:	f1 f7       	brne	.-4      	; 0x4230 <main+0x1ca>
    4234:	9a 8b       	std	Y+18, r25	; 0x12
    4236:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4238:	8b 89       	ldd	r24, Y+19	; 0x13
    423a:	9c 89       	ldd	r25, Y+20	; 0x14
    423c:	01 97       	sbiw	r24, 0x01	; 1
    423e:	9c 8b       	std	Y+20, r25	; 0x14
    4240:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4242:	8b 89       	ldd	r24, Y+19	; 0x13
    4244:	9c 89       	ldd	r25, Y+20	; 0x14
    4246:	00 97       	sbiw	r24, 0x00	; 0
    4248:	69 f7       	brne	.-38     	; 0x4224 <main+0x1be>
    424a:	14 c0       	rjmp	.+40     	; 0x4274 <main+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    424c:	6d 89       	ldd	r22, Y+21	; 0x15
    424e:	7e 89       	ldd	r23, Y+22	; 0x16
    4250:	8f 89       	ldd	r24, Y+23	; 0x17
    4252:	98 8d       	ldd	r25, Y+24	; 0x18
    4254:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4258:	dc 01       	movw	r26, r24
    425a:	cb 01       	movw	r24, r22
    425c:	9c 8b       	std	Y+20, r25	; 0x14
    425e:	8b 8b       	std	Y+19, r24	; 0x13
    4260:	8b 89       	ldd	r24, Y+19	; 0x13
    4262:	9c 89       	ldd	r25, Y+20	; 0x14
    4264:	98 8b       	std	Y+16, r25	; 0x10
    4266:	8f 87       	std	Y+15, r24	; 0x0f
    4268:	8f 85       	ldd	r24, Y+15	; 0x0f
    426a:	98 89       	ldd	r25, Y+16	; 0x10
    426c:	01 97       	sbiw	r24, 0x01	; 1
    426e:	f1 f7       	brne	.-4      	; 0x426c <main+0x206>
    4270:	98 8b       	std	Y+16, r25	; 0x10
    4272:	8f 87       	std	Y+15, r24	; 0x0f



	while (1)
	{
		Local_u8ADCLM35 = MADC_u16ADC_StartConversion(CHANNEL_0);
    4274:	80 e0       	ldi	r24, 0x00	; 0
    4276:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <MADC_u16ADC_StartConversion>
    427a:	8f a7       	std	Y+47, r24	; 0x2f
		Local_u8ADCLDR  = MADC_u16ADC_StartConversion(CHANNEL_1);
    427c:	81 e0       	ldi	r24, 0x01	; 1
    427e:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <MADC_u16ADC_StartConversion>
    4282:	8e a7       	std	Y+46, r24	; 0x2e
		MilliVolt = (u16) ((u32) Local_u8ADCLM35 * 5000UL) / 256UL;
    4284:	8f a5       	ldd	r24, Y+47	; 0x2f
    4286:	88 2f       	mov	r24, r24
    4288:	90 e0       	ldi	r25, 0x00	; 0
    428a:	a0 e0       	ldi	r26, 0x00	; 0
    428c:	b0 e0       	ldi	r27, 0x00	; 0
    428e:	28 e8       	ldi	r18, 0x88	; 136
    4290:	33 e1       	ldi	r19, 0x13	; 19
    4292:	40 e0       	ldi	r20, 0x00	; 0
    4294:	50 e0       	ldi	r21, 0x00	; 0
    4296:	bc 01       	movw	r22, r24
    4298:	cd 01       	movw	r24, r26
    429a:	0e 94 75 23 	call	0x46ea	; 0x46ea <__mulsi3>
    429e:	dc 01       	movw	r26, r24
    42a0:	cb 01       	movw	r24, r22
    42a2:	89 2f       	mov	r24, r25
    42a4:	99 27       	eor	r25, r25
    42a6:	9d a7       	std	Y+45, r25	; 0x2d
    42a8:	8c a7       	std	Y+44, r24	; 0x2c
		temp = MilliVolt / 10;
    42aa:	8c a5       	ldd	r24, Y+44	; 0x2c
    42ac:	9d a5       	ldd	r25, Y+45	; 0x2d
    42ae:	2a e0       	ldi	r18, 0x0A	; 10
    42b0:	30 e0       	ldi	r19, 0x00	; 0
    42b2:	b9 01       	movw	r22, r18
    42b4:	0e 94 94 23 	call	0x4728	; 0x4728 <__udivmodhi4>
    42b8:	cb 01       	movw	r24, r22
    42ba:	8b a7       	std	Y+43, r24	; 0x2b
		if ((Local_u8ADCLDR == 0) && (Local_u8ADCLDR <= 28)) {
    42bc:	8e a5       	ldd	r24, Y+46	; 0x2e
    42be:	88 23       	and	r24, r24
    42c0:	61 f5       	brne	.+88     	; 0x431a <main+0x2b4>
    42c2:	8e a5       	ldd	r24, Y+46	; 0x2e
    42c4:	8d 31       	cpi	r24, 0x1D	; 29
    42c6:	48 f5       	brcc	.+82     	; 0x431a <main+0x2b4>
			MDIO_Error_State_SetPinValue(PIN0, MDIO_PORTB, PIN_HIGH);
    42c8:	80 e0       	ldi	r24, 0x00	; 0
    42ca:	61 e0       	ldi	r22, 0x01	; 1
    42cc:	41 e0       	ldi	r20, 0x01	; 1
    42ce:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN1, MDIO_PORTB, PIN_HIGH);
    42d2:	81 e0       	ldi	r24, 0x01	; 1
    42d4:	61 e0       	ldi	r22, 0x01	; 1
    42d6:	41 e0       	ldi	r20, 0x01	; 1
    42d8:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN2, MDIO_PORTB, PIN_HIGH);
    42dc:	82 e0       	ldi	r24, 0x02	; 2
    42de:	61 e0       	ldi	r22, 0x01	; 1
    42e0:	41 e0       	ldi	r20, 0x01	; 1
    42e2:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN3, MDIO_PORTB, PIN_HIGH);
    42e6:	83 e0       	ldi	r24, 0x03	; 3
    42e8:	61 e0       	ldi	r22, 0x01	; 1
    42ea:	41 e0       	ldi	r20, 0x01	; 1
    42ec:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN4, MDIO_PORTB, PIN_HIGH);
    42f0:	84 e0       	ldi	r24, 0x04	; 4
    42f2:	61 e0       	ldi	r22, 0x01	; 1
    42f4:	41 e0       	ldi	r20, 0x01	; 1
    42f6:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN5, MDIO_PORTB, PIN_HIGH);
    42fa:	85 e0       	ldi	r24, 0x05	; 5
    42fc:	61 e0       	ldi	r22, 0x01	; 1
    42fe:	41 e0       	ldi	r20, 0x01	; 1
    4300:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN6, MDIO_PORTB, PIN_HIGH);
    4304:	86 e0       	ldi	r24, 0x06	; 6
    4306:	61 e0       	ldi	r22, 0x01	; 1
    4308:	41 e0       	ldi	r20, 0x01	; 1
    430a:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN7, MDIO_PORTB, PIN_HIGH);
    430e:	87 e0       	ldi	r24, 0x07	; 7
    4310:	61 e0       	ldi	r22, 0x01	; 1
    4312:	41 e0       	ldi	r20, 0x01	; 1
    4314:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
    4318:	48 c1       	rjmp	.+656    	; 0x45aa <main+0x544>
		} else if ((Local_u8ADCLDR > 28) && (Local_u8ADCLDR <= 56)) {
    431a:	8e a5       	ldd	r24, Y+46	; 0x2e
    431c:	8d 31       	cpi	r24, 0x1D	; 29
    431e:	60 f1       	brcs	.+88     	; 0x4378 <main+0x312>
    4320:	8e a5       	ldd	r24, Y+46	; 0x2e
    4322:	89 33       	cpi	r24, 0x39	; 57
    4324:	48 f5       	brcc	.+82     	; 0x4378 <main+0x312>
			MDIO_Error_State_SetPinValue(PIN0, MDIO_PORTB, PIN_HIGH);
    4326:	80 e0       	ldi	r24, 0x00	; 0
    4328:	61 e0       	ldi	r22, 0x01	; 1
    432a:	41 e0       	ldi	r20, 0x01	; 1
    432c:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN1, MDIO_PORTB, PIN_HIGH);
    4330:	81 e0       	ldi	r24, 0x01	; 1
    4332:	61 e0       	ldi	r22, 0x01	; 1
    4334:	41 e0       	ldi	r20, 0x01	; 1
    4336:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN2, MDIO_PORTB, PIN_HIGH);
    433a:	82 e0       	ldi	r24, 0x02	; 2
    433c:	61 e0       	ldi	r22, 0x01	; 1
    433e:	41 e0       	ldi	r20, 0x01	; 1
    4340:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN3, MDIO_PORTB, PIN_HIGH);
    4344:	83 e0       	ldi	r24, 0x03	; 3
    4346:	61 e0       	ldi	r22, 0x01	; 1
    4348:	41 e0       	ldi	r20, 0x01	; 1
    434a:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN4, MDIO_PORTB, PIN_HIGH);
    434e:	84 e0       	ldi	r24, 0x04	; 4
    4350:	61 e0       	ldi	r22, 0x01	; 1
    4352:	41 e0       	ldi	r20, 0x01	; 1
    4354:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN5, MDIO_PORTB, PIN_HIGH);
    4358:	85 e0       	ldi	r24, 0x05	; 5
    435a:	61 e0       	ldi	r22, 0x01	; 1
    435c:	41 e0       	ldi	r20, 0x01	; 1
    435e:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN6, MDIO_PORTB, PIN_HIGH);
    4362:	86 e0       	ldi	r24, 0x06	; 6
    4364:	61 e0       	ldi	r22, 0x01	; 1
    4366:	41 e0       	ldi	r20, 0x01	; 1
    4368:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN7, MDIO_PORTB, PIN_LOW);
    436c:	87 e0       	ldi	r24, 0x07	; 7
    436e:	61 e0       	ldi	r22, 0x01	; 1
    4370:	40 e0       	ldi	r20, 0x00	; 0
    4372:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
    4376:	19 c1       	rjmp	.+562    	; 0x45aa <main+0x544>
		} else if ((Local_u8ADCLDR > 56) && (Local_u8ADCLDR <= 84)) {
    4378:	8e a5       	ldd	r24, Y+46	; 0x2e
    437a:	89 33       	cpi	r24, 0x39	; 57
    437c:	60 f1       	brcs	.+88     	; 0x43d6 <main+0x370>
    437e:	8e a5       	ldd	r24, Y+46	; 0x2e
    4380:	85 35       	cpi	r24, 0x55	; 85
    4382:	48 f5       	brcc	.+82     	; 0x43d6 <main+0x370>
			MDIO_Error_State_SetPinValue(PIN0, MDIO_PORTB, PIN_HIGH);
    4384:	80 e0       	ldi	r24, 0x00	; 0
    4386:	61 e0       	ldi	r22, 0x01	; 1
    4388:	41 e0       	ldi	r20, 0x01	; 1
    438a:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN1, MDIO_PORTB, PIN_HIGH);
    438e:	81 e0       	ldi	r24, 0x01	; 1
    4390:	61 e0       	ldi	r22, 0x01	; 1
    4392:	41 e0       	ldi	r20, 0x01	; 1
    4394:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN2, MDIO_PORTB, PIN_HIGH);
    4398:	82 e0       	ldi	r24, 0x02	; 2
    439a:	61 e0       	ldi	r22, 0x01	; 1
    439c:	41 e0       	ldi	r20, 0x01	; 1
    439e:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN3, MDIO_PORTB, PIN_HIGH);
    43a2:	83 e0       	ldi	r24, 0x03	; 3
    43a4:	61 e0       	ldi	r22, 0x01	; 1
    43a6:	41 e0       	ldi	r20, 0x01	; 1
    43a8:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN4, MDIO_PORTB, PIN_HIGH);
    43ac:	84 e0       	ldi	r24, 0x04	; 4
    43ae:	61 e0       	ldi	r22, 0x01	; 1
    43b0:	41 e0       	ldi	r20, 0x01	; 1
    43b2:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN5, MDIO_PORTB, PIN_HIGH);
    43b6:	85 e0       	ldi	r24, 0x05	; 5
    43b8:	61 e0       	ldi	r22, 0x01	; 1
    43ba:	41 e0       	ldi	r20, 0x01	; 1
    43bc:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN6, MDIO_PORTB, PIN_LOW);
    43c0:	86 e0       	ldi	r24, 0x06	; 6
    43c2:	61 e0       	ldi	r22, 0x01	; 1
    43c4:	40 e0       	ldi	r20, 0x00	; 0
    43c6:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN7, MDIO_PORTB, PIN_LOW);
    43ca:	87 e0       	ldi	r24, 0x07	; 7
    43cc:	61 e0       	ldi	r22, 0x01	; 1
    43ce:	40 e0       	ldi	r20, 0x00	; 0
    43d0:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
    43d4:	ea c0       	rjmp	.+468    	; 0x45aa <main+0x544>
		} else if ((Local_u8ADCLDR > 84) && (Local_u8ADCLDR <= 112)) {
    43d6:	8e a5       	ldd	r24, Y+46	; 0x2e
    43d8:	85 35       	cpi	r24, 0x55	; 85
    43da:	60 f1       	brcs	.+88     	; 0x4434 <main+0x3ce>
    43dc:	8e a5       	ldd	r24, Y+46	; 0x2e
    43de:	81 37       	cpi	r24, 0x71	; 113
    43e0:	48 f5       	brcc	.+82     	; 0x4434 <main+0x3ce>
			MDIO_Error_State_SetPinValue(PIN0, MDIO_PORTB, PIN_HIGH);
    43e2:	80 e0       	ldi	r24, 0x00	; 0
    43e4:	61 e0       	ldi	r22, 0x01	; 1
    43e6:	41 e0       	ldi	r20, 0x01	; 1
    43e8:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN1, MDIO_PORTB, PIN_HIGH);
    43ec:	81 e0       	ldi	r24, 0x01	; 1
    43ee:	61 e0       	ldi	r22, 0x01	; 1
    43f0:	41 e0       	ldi	r20, 0x01	; 1
    43f2:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN2, MDIO_PORTB, PIN_HIGH);
    43f6:	82 e0       	ldi	r24, 0x02	; 2
    43f8:	61 e0       	ldi	r22, 0x01	; 1
    43fa:	41 e0       	ldi	r20, 0x01	; 1
    43fc:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN3, MDIO_PORTB, PIN_HIGH);
    4400:	83 e0       	ldi	r24, 0x03	; 3
    4402:	61 e0       	ldi	r22, 0x01	; 1
    4404:	41 e0       	ldi	r20, 0x01	; 1
    4406:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN4, MDIO_PORTB, PIN_HIGH);
    440a:	84 e0       	ldi	r24, 0x04	; 4
    440c:	61 e0       	ldi	r22, 0x01	; 1
    440e:	41 e0       	ldi	r20, 0x01	; 1
    4410:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN5, MDIO_PORTB, PIN_LOW);
    4414:	85 e0       	ldi	r24, 0x05	; 5
    4416:	61 e0       	ldi	r22, 0x01	; 1
    4418:	40 e0       	ldi	r20, 0x00	; 0
    441a:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN6, MDIO_PORTB, PIN_LOW);
    441e:	86 e0       	ldi	r24, 0x06	; 6
    4420:	61 e0       	ldi	r22, 0x01	; 1
    4422:	40 e0       	ldi	r20, 0x00	; 0
    4424:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN7, MDIO_PORTB, PIN_LOW);
    4428:	87 e0       	ldi	r24, 0x07	; 7
    442a:	61 e0       	ldi	r22, 0x01	; 1
    442c:	40 e0       	ldi	r20, 0x00	; 0
    442e:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
    4432:	bb c0       	rjmp	.+374    	; 0x45aa <main+0x544>
		} else if ((Local_u8ADCLDR > 112) && (Local_u8ADCLDR <= 140)) {
    4434:	8e a5       	ldd	r24, Y+46	; 0x2e
    4436:	81 37       	cpi	r24, 0x71	; 113
    4438:	60 f1       	brcs	.+88     	; 0x4492 <main+0x42c>
    443a:	8e a5       	ldd	r24, Y+46	; 0x2e
    443c:	8d 38       	cpi	r24, 0x8D	; 141
    443e:	48 f5       	brcc	.+82     	; 0x4492 <main+0x42c>
			MDIO_Error_State_SetPinValue(PIN0, MDIO_PORTB, PIN_HIGH);
    4440:	80 e0       	ldi	r24, 0x00	; 0
    4442:	61 e0       	ldi	r22, 0x01	; 1
    4444:	41 e0       	ldi	r20, 0x01	; 1
    4446:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN1, MDIO_PORTB, PIN_HIGH);
    444a:	81 e0       	ldi	r24, 0x01	; 1
    444c:	61 e0       	ldi	r22, 0x01	; 1
    444e:	41 e0       	ldi	r20, 0x01	; 1
    4450:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN2, MDIO_PORTB, PIN_HIGH);
    4454:	82 e0       	ldi	r24, 0x02	; 2
    4456:	61 e0       	ldi	r22, 0x01	; 1
    4458:	41 e0       	ldi	r20, 0x01	; 1
    445a:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN3, MDIO_PORTB, PIN_HIGH);
    445e:	83 e0       	ldi	r24, 0x03	; 3
    4460:	61 e0       	ldi	r22, 0x01	; 1
    4462:	41 e0       	ldi	r20, 0x01	; 1
    4464:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN4, MDIO_PORTB, PIN_LOW);
    4468:	84 e0       	ldi	r24, 0x04	; 4
    446a:	61 e0       	ldi	r22, 0x01	; 1
    446c:	40 e0       	ldi	r20, 0x00	; 0
    446e:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN5, MDIO_PORTB, PIN_LOW);
    4472:	85 e0       	ldi	r24, 0x05	; 5
    4474:	61 e0       	ldi	r22, 0x01	; 1
    4476:	40 e0       	ldi	r20, 0x00	; 0
    4478:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN6, MDIO_PORTB, PIN_LOW);
    447c:	86 e0       	ldi	r24, 0x06	; 6
    447e:	61 e0       	ldi	r22, 0x01	; 1
    4480:	40 e0       	ldi	r20, 0x00	; 0
    4482:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN7, MDIO_PORTB, PIN_LOW);
    4486:	87 e0       	ldi	r24, 0x07	; 7
    4488:	61 e0       	ldi	r22, 0x01	; 1
    448a:	40 e0       	ldi	r20, 0x00	; 0
    448c:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
    4490:	8c c0       	rjmp	.+280    	; 0x45aa <main+0x544>
		} else if ((Local_u8ADCLDR > 140) && (Local_u8ADCLDR <= 168)) {
    4492:	8e a5       	ldd	r24, Y+46	; 0x2e
    4494:	8d 38       	cpi	r24, 0x8D	; 141
    4496:	60 f1       	brcs	.+88     	; 0x44f0 <main+0x48a>
    4498:	8e a5       	ldd	r24, Y+46	; 0x2e
    449a:	89 3a       	cpi	r24, 0xA9	; 169
    449c:	48 f5       	brcc	.+82     	; 0x44f0 <main+0x48a>
			MDIO_Error_State_SetPinValue(PIN0, MDIO_PORTB, PIN_HIGH);
    449e:	80 e0       	ldi	r24, 0x00	; 0
    44a0:	61 e0       	ldi	r22, 0x01	; 1
    44a2:	41 e0       	ldi	r20, 0x01	; 1
    44a4:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN1, MDIO_PORTB, PIN_HIGH);
    44a8:	81 e0       	ldi	r24, 0x01	; 1
    44aa:	61 e0       	ldi	r22, 0x01	; 1
    44ac:	41 e0       	ldi	r20, 0x01	; 1
    44ae:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN2, MDIO_PORTB, PIN_HIGH);
    44b2:	82 e0       	ldi	r24, 0x02	; 2
    44b4:	61 e0       	ldi	r22, 0x01	; 1
    44b6:	41 e0       	ldi	r20, 0x01	; 1
    44b8:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN3, MDIO_PORTB, PIN_LOW);
    44bc:	83 e0       	ldi	r24, 0x03	; 3
    44be:	61 e0       	ldi	r22, 0x01	; 1
    44c0:	40 e0       	ldi	r20, 0x00	; 0
    44c2:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN4, MDIO_PORTB, PIN_LOW);
    44c6:	84 e0       	ldi	r24, 0x04	; 4
    44c8:	61 e0       	ldi	r22, 0x01	; 1
    44ca:	40 e0       	ldi	r20, 0x00	; 0
    44cc:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN5, MDIO_PORTB, PIN_LOW);
    44d0:	85 e0       	ldi	r24, 0x05	; 5
    44d2:	61 e0       	ldi	r22, 0x01	; 1
    44d4:	40 e0       	ldi	r20, 0x00	; 0
    44d6:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN6, MDIO_PORTB, PIN_LOW);
    44da:	86 e0       	ldi	r24, 0x06	; 6
    44dc:	61 e0       	ldi	r22, 0x01	; 1
    44de:	40 e0       	ldi	r20, 0x00	; 0
    44e0:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN7, MDIO_PORTB, PIN_LOW);
    44e4:	87 e0       	ldi	r24, 0x07	; 7
    44e6:	61 e0       	ldi	r22, 0x01	; 1
    44e8:	40 e0       	ldi	r20, 0x00	; 0
    44ea:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
    44ee:	5d c0       	rjmp	.+186    	; 0x45aa <main+0x544>
		} else if ((Local_u8ADCLDR > 168) && (Local_u8ADCLDR <= 196)) {
    44f0:	8e a5       	ldd	r24, Y+46	; 0x2e
    44f2:	89 3a       	cpi	r24, 0xA9	; 169
    44f4:	60 f1       	brcs	.+88     	; 0x454e <main+0x4e8>
    44f6:	8e a5       	ldd	r24, Y+46	; 0x2e
    44f8:	85 3c       	cpi	r24, 0xC5	; 197
    44fa:	48 f5       	brcc	.+82     	; 0x454e <main+0x4e8>
			MDIO_Error_State_SetPinValue(PIN0, MDIO_PORTB, PIN_HIGH);
    44fc:	80 e0       	ldi	r24, 0x00	; 0
    44fe:	61 e0       	ldi	r22, 0x01	; 1
    4500:	41 e0       	ldi	r20, 0x01	; 1
    4502:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN1, MDIO_PORTB, PIN_HIGH);
    4506:	81 e0       	ldi	r24, 0x01	; 1
    4508:	61 e0       	ldi	r22, 0x01	; 1
    450a:	41 e0       	ldi	r20, 0x01	; 1
    450c:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN2, MDIO_PORTB, PIN_LOW);
    4510:	82 e0       	ldi	r24, 0x02	; 2
    4512:	61 e0       	ldi	r22, 0x01	; 1
    4514:	40 e0       	ldi	r20, 0x00	; 0
    4516:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN3, MDIO_PORTB, PIN_LOW);
    451a:	83 e0       	ldi	r24, 0x03	; 3
    451c:	61 e0       	ldi	r22, 0x01	; 1
    451e:	40 e0       	ldi	r20, 0x00	; 0
    4520:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN4, MDIO_PORTB, PIN_LOW);
    4524:	84 e0       	ldi	r24, 0x04	; 4
    4526:	61 e0       	ldi	r22, 0x01	; 1
    4528:	40 e0       	ldi	r20, 0x00	; 0
    452a:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN5, MDIO_PORTB, PIN_LOW);
    452e:	85 e0       	ldi	r24, 0x05	; 5
    4530:	61 e0       	ldi	r22, 0x01	; 1
    4532:	40 e0       	ldi	r20, 0x00	; 0
    4534:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN6, MDIO_PORTB, PIN_LOW);
    4538:	86 e0       	ldi	r24, 0x06	; 6
    453a:	61 e0       	ldi	r22, 0x01	; 1
    453c:	40 e0       	ldi	r20, 0x00	; 0
    453e:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN7, MDIO_PORTB, PIN_LOW);
    4542:	87 e0       	ldi	r24, 0x07	; 7
    4544:	61 e0       	ldi	r22, 0x01	; 1
    4546:	40 e0       	ldi	r20, 0x00	; 0
    4548:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
    454c:	2e c0       	rjmp	.+92     	; 0x45aa <main+0x544>
		} else if ((Local_u8ADCLDR > 196) && (Local_u8ADCLDR <= 224)) {
    454e:	8e a5       	ldd	r24, Y+46	; 0x2e
    4550:	85 3c       	cpi	r24, 0xC5	; 197
    4552:	58 f1       	brcs	.+86     	; 0x45aa <main+0x544>
    4554:	8e a5       	ldd	r24, Y+46	; 0x2e
    4556:	81 3e       	cpi	r24, 0xE1	; 225
    4558:	40 f5       	brcc	.+80     	; 0x45aa <main+0x544>
			MDIO_Error_State_SetPinValue(PIN0, MDIO_PORTB, PIN_LOW);
    455a:	80 e0       	ldi	r24, 0x00	; 0
    455c:	61 e0       	ldi	r22, 0x01	; 1
    455e:	40 e0       	ldi	r20, 0x00	; 0
    4560:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN1, MDIO_PORTB, PIN_LOW);
    4564:	81 e0       	ldi	r24, 0x01	; 1
    4566:	61 e0       	ldi	r22, 0x01	; 1
    4568:	40 e0       	ldi	r20, 0x00	; 0
    456a:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN2, MDIO_PORTB, PIN_LOW);
    456e:	82 e0       	ldi	r24, 0x02	; 2
    4570:	61 e0       	ldi	r22, 0x01	; 1
    4572:	40 e0       	ldi	r20, 0x00	; 0
    4574:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN3, MDIO_PORTB, PIN_LOW);
    4578:	83 e0       	ldi	r24, 0x03	; 3
    457a:	61 e0       	ldi	r22, 0x01	; 1
    457c:	40 e0       	ldi	r20, 0x00	; 0
    457e:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN4, MDIO_PORTB, PIN_LOW);
    4582:	84 e0       	ldi	r24, 0x04	; 4
    4584:	61 e0       	ldi	r22, 0x01	; 1
    4586:	40 e0       	ldi	r20, 0x00	; 0
    4588:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN5, MDIO_PORTB, PIN_LOW);
    458c:	85 e0       	ldi	r24, 0x05	; 5
    458e:	61 e0       	ldi	r22, 0x01	; 1
    4590:	40 e0       	ldi	r20, 0x00	; 0
    4592:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN6, MDIO_PORTB, PIN_LOW);
    4596:	86 e0       	ldi	r24, 0x06	; 6
    4598:	61 e0       	ldi	r22, 0x01	; 1
    459a:	40 e0       	ldi	r20, 0x00	; 0
    459c:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
			MDIO_Error_State_SetPinValue(PIN7, MDIO_PORTB, PIN_LOW);
    45a0:	87 e0       	ldi	r24, 0x07	; 7
    45a2:	61 e0       	ldi	r22, 0x01	; 1
    45a4:	40 e0       	ldi	r20, 0x00	; 0
    45a6:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
		}
		if (temp > 15)
    45aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    45ac:	80 31       	cpi	r24, 0x10	; 16
    45ae:	30 f0       	brcs	.+12     	; 0x45bc <main+0x556>
		{
			MDIO_Error_State_SetPinValue(PIN7, MDIO_PORTD, PIN_HIGH);
    45b0:	87 e0       	ldi	r24, 0x07	; 7
    45b2:	63 e0       	ldi	r22, 0x03	; 3
    45b4:	41 e0       	ldi	r20, 0x01	; 1
    45b6:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
    45ba:	05 c0       	rjmp	.+10     	; 0x45c6 <main+0x560>
		}
		else
		{
			MDIO_Error_State_SetPinValue(PIN7, MDIO_PORTD, PIN_LOW);
    45bc:	87 e0       	ldi	r24, 0x07	; 7
    45be:	63 e0       	ldi	r22, 0x03	; 3
    45c0:	40 e0       	ldi	r20, 0x00	; 0
    45c2:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_Error_State_SetPinValue>
		}
		HCLCD_Vid4Bits_SetPosition(1, 0);
    45c6:	81 e0       	ldi	r24, 0x01	; 1
    45c8:	60 e0       	ldi	r22, 0x00	; 0
    45ca:	0e 94 cb 1c 	call	0x3996	; 0x3996 <HCLCD_Vid4Bits_SetPosition>
		HCLCD_Vid4Bits_DisplayString((u8*) "TEMP =");
    45ce:	8b e6       	ldi	r24, 0x6B	; 107
    45d0:	90 e0       	ldi	r25, 0x00	; 0
    45d2:	0e 94 2b 1c 	call	0x3856	; 0x3856 <HCLCD_Vid4Bits_DisplayString>
		HCLCD_Vid4Bits_DisplayNumber(Local_u8ADCLDR);
    45d6:	8e a5       	ldd	r24, Y+46	; 0x2e
    45d8:	88 2f       	mov	r24, r24
    45da:	90 e0       	ldi	r25, 0x00	; 0
    45dc:	a0 e0       	ldi	r26, 0x00	; 0
    45de:	b0 e0       	ldi	r27, 0x00	; 0
    45e0:	bc 01       	movw	r22, r24
    45e2:	cd 01       	movw	r24, r26
    45e4:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <HCLCD_Vid4Bits_DisplayNumber>
		HCLCD_Vid4Bits_DisplayString((u8*) "C");
    45e8:	82 e7       	ldi	r24, 0x72	; 114
    45ea:	90 e0       	ldi	r25, 0x00	; 0
    45ec:	0e 94 2b 1c 	call	0x3856	; 0x3856 <HCLCD_Vid4Bits_DisplayString>
		HCLCD_Vid4Bits_SetPosition(2,0);
    45f0:	82 e0       	ldi	r24, 0x02	; 2
    45f2:	60 e0       	ldi	r22, 0x00	; 0
    45f4:	0e 94 cb 1c 	call	0x3996	; 0x3996 <HCLCD_Vid4Bits_SetPosition>
		HCLCD_Vid4Bits_DisplayString((u8*) "PRESS TO LOGIN");
    45f8:	84 e7       	ldi	r24, 0x74	; 116
    45fa:	90 e0       	ldi	r25, 0x00	; 0
    45fc:	0e 94 2b 1c 	call	0x3856	; 0x3856 <HCLCD_Vid4Bits_DisplayString>
    4600:	80 e0       	ldi	r24, 0x00	; 0
    4602:	90 e0       	ldi	r25, 0x00	; 0
    4604:	aa e7       	ldi	r26, 0x7A	; 122
    4606:	b4 e4       	ldi	r27, 0x44	; 68
    4608:	8b 87       	std	Y+11, r24	; 0x0b
    460a:	9c 87       	std	Y+12, r25	; 0x0c
    460c:	ad 87       	std	Y+13, r26	; 0x0d
    460e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4610:	6b 85       	ldd	r22, Y+11	; 0x0b
    4612:	7c 85       	ldd	r23, Y+12	; 0x0c
    4614:	8d 85       	ldd	r24, Y+13	; 0x0d
    4616:	9e 85       	ldd	r25, Y+14	; 0x0e
    4618:	20 e0       	ldi	r18, 0x00	; 0
    461a:	30 e0       	ldi	r19, 0x00	; 0
    461c:	4a ef       	ldi	r20, 0xFA	; 250
    461e:	54 e4       	ldi	r21, 0x44	; 68
    4620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4624:	dc 01       	movw	r26, r24
    4626:	cb 01       	movw	r24, r22
    4628:	8f 83       	std	Y+7, r24	; 0x07
    462a:	98 87       	std	Y+8, r25	; 0x08
    462c:	a9 87       	std	Y+9, r26	; 0x09
    462e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4630:	6f 81       	ldd	r22, Y+7	; 0x07
    4632:	78 85       	ldd	r23, Y+8	; 0x08
    4634:	89 85       	ldd	r24, Y+9	; 0x09
    4636:	9a 85       	ldd	r25, Y+10	; 0x0a
    4638:	20 e0       	ldi	r18, 0x00	; 0
    463a:	30 e0       	ldi	r19, 0x00	; 0
    463c:	40 e8       	ldi	r20, 0x80	; 128
    463e:	5f e3       	ldi	r21, 0x3F	; 63
    4640:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4644:	88 23       	and	r24, r24
    4646:	2c f4       	brge	.+10     	; 0x4652 <main+0x5ec>
		__ticks = 1;
    4648:	81 e0       	ldi	r24, 0x01	; 1
    464a:	90 e0       	ldi	r25, 0x00	; 0
    464c:	9e 83       	std	Y+6, r25	; 0x06
    464e:	8d 83       	std	Y+5, r24	; 0x05
    4650:	3f c0       	rjmp	.+126    	; 0x46d0 <main+0x66a>
	else if (__tmp > 65535)
    4652:	6f 81       	ldd	r22, Y+7	; 0x07
    4654:	78 85       	ldd	r23, Y+8	; 0x08
    4656:	89 85       	ldd	r24, Y+9	; 0x09
    4658:	9a 85       	ldd	r25, Y+10	; 0x0a
    465a:	20 e0       	ldi	r18, 0x00	; 0
    465c:	3f ef       	ldi	r19, 0xFF	; 255
    465e:	4f e7       	ldi	r20, 0x7F	; 127
    4660:	57 e4       	ldi	r21, 0x47	; 71
    4662:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4666:	18 16       	cp	r1, r24
    4668:	4c f5       	brge	.+82     	; 0x46bc <main+0x656>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    466a:	6b 85       	ldd	r22, Y+11	; 0x0b
    466c:	7c 85       	ldd	r23, Y+12	; 0x0c
    466e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4670:	9e 85       	ldd	r25, Y+14	; 0x0e
    4672:	20 e0       	ldi	r18, 0x00	; 0
    4674:	30 e0       	ldi	r19, 0x00	; 0
    4676:	40 e2       	ldi	r20, 0x20	; 32
    4678:	51 e4       	ldi	r21, 0x41	; 65
    467a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    467e:	dc 01       	movw	r26, r24
    4680:	cb 01       	movw	r24, r22
    4682:	bc 01       	movw	r22, r24
    4684:	cd 01       	movw	r24, r26
    4686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    468a:	dc 01       	movw	r26, r24
    468c:	cb 01       	movw	r24, r22
    468e:	9e 83       	std	Y+6, r25	; 0x06
    4690:	8d 83       	std	Y+5, r24	; 0x05
    4692:	0f c0       	rjmp	.+30     	; 0x46b2 <main+0x64c>
    4694:	88 ec       	ldi	r24, 0xC8	; 200
    4696:	90 e0       	ldi	r25, 0x00	; 0
    4698:	9c 83       	std	Y+4, r25	; 0x04
    469a:	8b 83       	std	Y+3, r24	; 0x03
    469c:	8b 81       	ldd	r24, Y+3	; 0x03
    469e:	9c 81       	ldd	r25, Y+4	; 0x04
    46a0:	01 97       	sbiw	r24, 0x01	; 1
    46a2:	f1 f7       	brne	.-4      	; 0x46a0 <main+0x63a>
    46a4:	9c 83       	std	Y+4, r25	; 0x04
    46a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46a8:	8d 81       	ldd	r24, Y+5	; 0x05
    46aa:	9e 81       	ldd	r25, Y+6	; 0x06
    46ac:	01 97       	sbiw	r24, 0x01	; 1
    46ae:	9e 83       	std	Y+6, r25	; 0x06
    46b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46b2:	8d 81       	ldd	r24, Y+5	; 0x05
    46b4:	9e 81       	ldd	r25, Y+6	; 0x06
    46b6:	00 97       	sbiw	r24, 0x00	; 0
    46b8:	69 f7       	brne	.-38     	; 0x4694 <main+0x62e>
    46ba:	14 c0       	rjmp	.+40     	; 0x46e4 <main+0x67e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46bc:	6f 81       	ldd	r22, Y+7	; 0x07
    46be:	78 85       	ldd	r23, Y+8	; 0x08
    46c0:	89 85       	ldd	r24, Y+9	; 0x09
    46c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    46c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46c8:	dc 01       	movw	r26, r24
    46ca:	cb 01       	movw	r24, r22
    46cc:	9e 83       	std	Y+6, r25	; 0x06
    46ce:	8d 83       	std	Y+5, r24	; 0x05
    46d0:	8d 81       	ldd	r24, Y+5	; 0x05
    46d2:	9e 81       	ldd	r25, Y+6	; 0x06
    46d4:	9a 83       	std	Y+2, r25	; 0x02
    46d6:	89 83       	std	Y+1, r24	; 0x01
    46d8:	89 81       	ldd	r24, Y+1	; 0x01
    46da:	9a 81       	ldd	r25, Y+2	; 0x02
    46dc:	01 97       	sbiw	r24, 0x01	; 1
    46de:	f1 f7       	brne	.-4      	; 0x46dc <main+0x676>
    46e0:	9a 83       	std	Y+2, r25	; 0x02
    46e2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		HCLCD_Vid4Bits_ClearScreen();
    46e4:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <HCLCD_Vid4Bits_ClearScreen>
    46e8:	c5 cd       	rjmp	.-1142   	; 0x4274 <main+0x20e>

000046ea <__mulsi3>:
    46ea:	62 9f       	mul	r22, r18
    46ec:	d0 01       	movw	r26, r0
    46ee:	73 9f       	mul	r23, r19
    46f0:	f0 01       	movw	r30, r0
    46f2:	82 9f       	mul	r24, r18
    46f4:	e0 0d       	add	r30, r0
    46f6:	f1 1d       	adc	r31, r1
    46f8:	64 9f       	mul	r22, r20
    46fa:	e0 0d       	add	r30, r0
    46fc:	f1 1d       	adc	r31, r1
    46fe:	92 9f       	mul	r25, r18
    4700:	f0 0d       	add	r31, r0
    4702:	83 9f       	mul	r24, r19
    4704:	f0 0d       	add	r31, r0
    4706:	74 9f       	mul	r23, r20
    4708:	f0 0d       	add	r31, r0
    470a:	65 9f       	mul	r22, r21
    470c:	f0 0d       	add	r31, r0
    470e:	99 27       	eor	r25, r25
    4710:	72 9f       	mul	r23, r18
    4712:	b0 0d       	add	r27, r0
    4714:	e1 1d       	adc	r30, r1
    4716:	f9 1f       	adc	r31, r25
    4718:	63 9f       	mul	r22, r19
    471a:	b0 0d       	add	r27, r0
    471c:	e1 1d       	adc	r30, r1
    471e:	f9 1f       	adc	r31, r25
    4720:	bd 01       	movw	r22, r26
    4722:	cf 01       	movw	r24, r30
    4724:	11 24       	eor	r1, r1
    4726:	08 95       	ret

00004728 <__udivmodhi4>:
    4728:	aa 1b       	sub	r26, r26
    472a:	bb 1b       	sub	r27, r27
    472c:	51 e1       	ldi	r21, 0x11	; 17
    472e:	07 c0       	rjmp	.+14     	; 0x473e <__udivmodhi4_ep>

00004730 <__udivmodhi4_loop>:
    4730:	aa 1f       	adc	r26, r26
    4732:	bb 1f       	adc	r27, r27
    4734:	a6 17       	cp	r26, r22
    4736:	b7 07       	cpc	r27, r23
    4738:	10 f0       	brcs	.+4      	; 0x473e <__udivmodhi4_ep>
    473a:	a6 1b       	sub	r26, r22
    473c:	b7 0b       	sbc	r27, r23

0000473e <__udivmodhi4_ep>:
    473e:	88 1f       	adc	r24, r24
    4740:	99 1f       	adc	r25, r25
    4742:	5a 95       	dec	r21
    4744:	a9 f7       	brne	.-22     	; 0x4730 <__udivmodhi4_loop>
    4746:	80 95       	com	r24
    4748:	90 95       	com	r25
    474a:	bc 01       	movw	r22, r24
    474c:	cd 01       	movw	r24, r26
    474e:	08 95       	ret

00004750 <__udivmodsi4>:
    4750:	a1 e2       	ldi	r26, 0x21	; 33
    4752:	1a 2e       	mov	r1, r26
    4754:	aa 1b       	sub	r26, r26
    4756:	bb 1b       	sub	r27, r27
    4758:	fd 01       	movw	r30, r26
    475a:	0d c0       	rjmp	.+26     	; 0x4776 <__udivmodsi4_ep>

0000475c <__udivmodsi4_loop>:
    475c:	aa 1f       	adc	r26, r26
    475e:	bb 1f       	adc	r27, r27
    4760:	ee 1f       	adc	r30, r30
    4762:	ff 1f       	adc	r31, r31
    4764:	a2 17       	cp	r26, r18
    4766:	b3 07       	cpc	r27, r19
    4768:	e4 07       	cpc	r30, r20
    476a:	f5 07       	cpc	r31, r21
    476c:	20 f0       	brcs	.+8      	; 0x4776 <__udivmodsi4_ep>
    476e:	a2 1b       	sub	r26, r18
    4770:	b3 0b       	sbc	r27, r19
    4772:	e4 0b       	sbc	r30, r20
    4774:	f5 0b       	sbc	r31, r21

00004776 <__udivmodsi4_ep>:
    4776:	66 1f       	adc	r22, r22
    4778:	77 1f       	adc	r23, r23
    477a:	88 1f       	adc	r24, r24
    477c:	99 1f       	adc	r25, r25
    477e:	1a 94       	dec	r1
    4780:	69 f7       	brne	.-38     	; 0x475c <__udivmodsi4_loop>
    4782:	60 95       	com	r22
    4784:	70 95       	com	r23
    4786:	80 95       	com	r24
    4788:	90 95       	com	r25
    478a:	9b 01       	movw	r18, r22
    478c:	ac 01       	movw	r20, r24
    478e:	bd 01       	movw	r22, r26
    4790:	cf 01       	movw	r24, r30
    4792:	08 95       	ret

00004794 <__prologue_saves__>:
    4794:	2f 92       	push	r2
    4796:	3f 92       	push	r3
    4798:	4f 92       	push	r4
    479a:	5f 92       	push	r5
    479c:	6f 92       	push	r6
    479e:	7f 92       	push	r7
    47a0:	8f 92       	push	r8
    47a2:	9f 92       	push	r9
    47a4:	af 92       	push	r10
    47a6:	bf 92       	push	r11
    47a8:	cf 92       	push	r12
    47aa:	df 92       	push	r13
    47ac:	ef 92       	push	r14
    47ae:	ff 92       	push	r15
    47b0:	0f 93       	push	r16
    47b2:	1f 93       	push	r17
    47b4:	cf 93       	push	r28
    47b6:	df 93       	push	r29
    47b8:	cd b7       	in	r28, 0x3d	; 61
    47ba:	de b7       	in	r29, 0x3e	; 62
    47bc:	ca 1b       	sub	r28, r26
    47be:	db 0b       	sbc	r29, r27
    47c0:	0f b6       	in	r0, 0x3f	; 63
    47c2:	f8 94       	cli
    47c4:	de bf       	out	0x3e, r29	; 62
    47c6:	0f be       	out	0x3f, r0	; 63
    47c8:	cd bf       	out	0x3d, r28	; 61
    47ca:	09 94       	ijmp

000047cc <__epilogue_restores__>:
    47cc:	2a 88       	ldd	r2, Y+18	; 0x12
    47ce:	39 88       	ldd	r3, Y+17	; 0x11
    47d0:	48 88       	ldd	r4, Y+16	; 0x10
    47d2:	5f 84       	ldd	r5, Y+15	; 0x0f
    47d4:	6e 84       	ldd	r6, Y+14	; 0x0e
    47d6:	7d 84       	ldd	r7, Y+13	; 0x0d
    47d8:	8c 84       	ldd	r8, Y+12	; 0x0c
    47da:	9b 84       	ldd	r9, Y+11	; 0x0b
    47dc:	aa 84       	ldd	r10, Y+10	; 0x0a
    47de:	b9 84       	ldd	r11, Y+9	; 0x09
    47e0:	c8 84       	ldd	r12, Y+8	; 0x08
    47e2:	df 80       	ldd	r13, Y+7	; 0x07
    47e4:	ee 80       	ldd	r14, Y+6	; 0x06
    47e6:	fd 80       	ldd	r15, Y+5	; 0x05
    47e8:	0c 81       	ldd	r16, Y+4	; 0x04
    47ea:	1b 81       	ldd	r17, Y+3	; 0x03
    47ec:	aa 81       	ldd	r26, Y+2	; 0x02
    47ee:	b9 81       	ldd	r27, Y+1	; 0x01
    47f0:	ce 0f       	add	r28, r30
    47f2:	d1 1d       	adc	r29, r1
    47f4:	0f b6       	in	r0, 0x3f	; 63
    47f6:	f8 94       	cli
    47f8:	de bf       	out	0x3e, r29	; 62
    47fa:	0f be       	out	0x3f, r0	; 63
    47fc:	cd bf       	out	0x3d, r28	; 61
    47fe:	ed 01       	movw	r28, r26
    4800:	08 95       	ret

00004802 <_exit>:
    4802:	f8 94       	cli

00004804 <__stop_program>:
    4804:	ff cf       	rjmp	.-2      	; 0x4804 <__stop_program>
